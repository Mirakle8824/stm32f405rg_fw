
stm32f405rg_fw.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a52c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000160  0800a6bc  0800a6bc  0001a6bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a81c  0800a81c  00020208  2**0
                  CONTENTS
  4 .ARM          00000008  0800a81c  0800a81c  0001a81c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a824  0800a824  00020208  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a824  0800a824  0001a824  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a828  0800a828  0001a828  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000208  20000000  0800a82c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001180  20000208  0800aa34  00020208  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001388  0800aa34  00021388  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020208  2**0
                  CONTENTS, READONLY
 12 .debug_info   00020811  00000000  00000000  00020238  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000501a  00000000  00000000  00040a49  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000013e8  00000000  00000000  00045a68  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001180  00000000  00000000  00046e50  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002678f  00000000  00000000  00047fd0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0001b1f1  00000000  00000000  0006e75f  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000c303a  00000000  00000000  00089950  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0014c98a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005540  00000000  00000000  0014ca08  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000208 	.word	0x20000208
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800a6a4 	.word	0x0800a6a4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000020c 	.word	0x2000020c
 80001cc:	0800a6a4 	.word	0x0800a6a4

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b972 	b.w	800056c <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9e08      	ldr	r6, [sp, #32]
 80002a6:	4604      	mov	r4, r0
 80002a8:	4688      	mov	r8, r1
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	d14b      	bne.n	8000346 <__udivmoddi4+0xa6>
 80002ae:	428a      	cmp	r2, r1
 80002b0:	4615      	mov	r5, r2
 80002b2:	d967      	bls.n	8000384 <__udivmoddi4+0xe4>
 80002b4:	fab2 f282 	clz	r2, r2
 80002b8:	b14a      	cbz	r2, 80002ce <__udivmoddi4+0x2e>
 80002ba:	f1c2 0720 	rsb	r7, r2, #32
 80002be:	fa01 f302 	lsl.w	r3, r1, r2
 80002c2:	fa20 f707 	lsr.w	r7, r0, r7
 80002c6:	4095      	lsls	r5, r2
 80002c8:	ea47 0803 	orr.w	r8, r7, r3
 80002cc:	4094      	lsls	r4, r2
 80002ce:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002d2:	0c23      	lsrs	r3, r4, #16
 80002d4:	fbb8 f7fe 	udiv	r7, r8, lr
 80002d8:	fa1f fc85 	uxth.w	ip, r5
 80002dc:	fb0e 8817 	mls	r8, lr, r7, r8
 80002e0:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002e4:	fb07 f10c 	mul.w	r1, r7, ip
 80002e8:	4299      	cmp	r1, r3
 80002ea:	d909      	bls.n	8000300 <__udivmoddi4+0x60>
 80002ec:	18eb      	adds	r3, r5, r3
 80002ee:	f107 30ff 	add.w	r0, r7, #4294967295
 80002f2:	f080 811b 	bcs.w	800052c <__udivmoddi4+0x28c>
 80002f6:	4299      	cmp	r1, r3
 80002f8:	f240 8118 	bls.w	800052c <__udivmoddi4+0x28c>
 80002fc:	3f02      	subs	r7, #2
 80002fe:	442b      	add	r3, r5
 8000300:	1a5b      	subs	r3, r3, r1
 8000302:	b2a4      	uxth	r4, r4
 8000304:	fbb3 f0fe 	udiv	r0, r3, lr
 8000308:	fb0e 3310 	mls	r3, lr, r0, r3
 800030c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000310:	fb00 fc0c 	mul.w	ip, r0, ip
 8000314:	45a4      	cmp	ip, r4
 8000316:	d909      	bls.n	800032c <__udivmoddi4+0x8c>
 8000318:	192c      	adds	r4, r5, r4
 800031a:	f100 33ff 	add.w	r3, r0, #4294967295
 800031e:	f080 8107 	bcs.w	8000530 <__udivmoddi4+0x290>
 8000322:	45a4      	cmp	ip, r4
 8000324:	f240 8104 	bls.w	8000530 <__udivmoddi4+0x290>
 8000328:	3802      	subs	r0, #2
 800032a:	442c      	add	r4, r5
 800032c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000330:	eba4 040c 	sub.w	r4, r4, ip
 8000334:	2700      	movs	r7, #0
 8000336:	b11e      	cbz	r6, 8000340 <__udivmoddi4+0xa0>
 8000338:	40d4      	lsrs	r4, r2
 800033a:	2300      	movs	r3, #0
 800033c:	e9c6 4300 	strd	r4, r3, [r6]
 8000340:	4639      	mov	r1, r7
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	428b      	cmp	r3, r1
 8000348:	d909      	bls.n	800035e <__udivmoddi4+0xbe>
 800034a:	2e00      	cmp	r6, #0
 800034c:	f000 80eb 	beq.w	8000526 <__udivmoddi4+0x286>
 8000350:	2700      	movs	r7, #0
 8000352:	e9c6 0100 	strd	r0, r1, [r6]
 8000356:	4638      	mov	r0, r7
 8000358:	4639      	mov	r1, r7
 800035a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035e:	fab3 f783 	clz	r7, r3
 8000362:	2f00      	cmp	r7, #0
 8000364:	d147      	bne.n	80003f6 <__udivmoddi4+0x156>
 8000366:	428b      	cmp	r3, r1
 8000368:	d302      	bcc.n	8000370 <__udivmoddi4+0xd0>
 800036a:	4282      	cmp	r2, r0
 800036c:	f200 80fa 	bhi.w	8000564 <__udivmoddi4+0x2c4>
 8000370:	1a84      	subs	r4, r0, r2
 8000372:	eb61 0303 	sbc.w	r3, r1, r3
 8000376:	2001      	movs	r0, #1
 8000378:	4698      	mov	r8, r3
 800037a:	2e00      	cmp	r6, #0
 800037c:	d0e0      	beq.n	8000340 <__udivmoddi4+0xa0>
 800037e:	e9c6 4800 	strd	r4, r8, [r6]
 8000382:	e7dd      	b.n	8000340 <__udivmoddi4+0xa0>
 8000384:	b902      	cbnz	r2, 8000388 <__udivmoddi4+0xe8>
 8000386:	deff      	udf	#255	; 0xff
 8000388:	fab2 f282 	clz	r2, r2
 800038c:	2a00      	cmp	r2, #0
 800038e:	f040 808f 	bne.w	80004b0 <__udivmoddi4+0x210>
 8000392:	1b49      	subs	r1, r1, r5
 8000394:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000398:	fa1f f885 	uxth.w	r8, r5
 800039c:	2701      	movs	r7, #1
 800039e:	fbb1 fcfe 	udiv	ip, r1, lr
 80003a2:	0c23      	lsrs	r3, r4, #16
 80003a4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003a8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003ac:	fb08 f10c 	mul.w	r1, r8, ip
 80003b0:	4299      	cmp	r1, r3
 80003b2:	d907      	bls.n	80003c4 <__udivmoddi4+0x124>
 80003b4:	18eb      	adds	r3, r5, r3
 80003b6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003ba:	d202      	bcs.n	80003c2 <__udivmoddi4+0x122>
 80003bc:	4299      	cmp	r1, r3
 80003be:	f200 80cd 	bhi.w	800055c <__udivmoddi4+0x2bc>
 80003c2:	4684      	mov	ip, r0
 80003c4:	1a59      	subs	r1, r3, r1
 80003c6:	b2a3      	uxth	r3, r4
 80003c8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003cc:	fb0e 1410 	mls	r4, lr, r0, r1
 80003d0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80003d4:	fb08 f800 	mul.w	r8, r8, r0
 80003d8:	45a0      	cmp	r8, r4
 80003da:	d907      	bls.n	80003ec <__udivmoddi4+0x14c>
 80003dc:	192c      	adds	r4, r5, r4
 80003de:	f100 33ff 	add.w	r3, r0, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x14a>
 80003e4:	45a0      	cmp	r8, r4
 80003e6:	f200 80b6 	bhi.w	8000556 <__udivmoddi4+0x2b6>
 80003ea:	4618      	mov	r0, r3
 80003ec:	eba4 0408 	sub.w	r4, r4, r8
 80003f0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003f4:	e79f      	b.n	8000336 <__udivmoddi4+0x96>
 80003f6:	f1c7 0c20 	rsb	ip, r7, #32
 80003fa:	40bb      	lsls	r3, r7
 80003fc:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000400:	ea4e 0e03 	orr.w	lr, lr, r3
 8000404:	fa01 f407 	lsl.w	r4, r1, r7
 8000408:	fa20 f50c 	lsr.w	r5, r0, ip
 800040c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000410:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000414:	4325      	orrs	r5, r4
 8000416:	fbb3 f9f8 	udiv	r9, r3, r8
 800041a:	0c2c      	lsrs	r4, r5, #16
 800041c:	fb08 3319 	mls	r3, r8, r9, r3
 8000420:	fa1f fa8e 	uxth.w	sl, lr
 8000424:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000428:	fb09 f40a 	mul.w	r4, r9, sl
 800042c:	429c      	cmp	r4, r3
 800042e:	fa02 f207 	lsl.w	r2, r2, r7
 8000432:	fa00 f107 	lsl.w	r1, r0, r7
 8000436:	d90b      	bls.n	8000450 <__udivmoddi4+0x1b0>
 8000438:	eb1e 0303 	adds.w	r3, lr, r3
 800043c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000440:	f080 8087 	bcs.w	8000552 <__udivmoddi4+0x2b2>
 8000444:	429c      	cmp	r4, r3
 8000446:	f240 8084 	bls.w	8000552 <__udivmoddi4+0x2b2>
 800044a:	f1a9 0902 	sub.w	r9, r9, #2
 800044e:	4473      	add	r3, lr
 8000450:	1b1b      	subs	r3, r3, r4
 8000452:	b2ad      	uxth	r5, r5
 8000454:	fbb3 f0f8 	udiv	r0, r3, r8
 8000458:	fb08 3310 	mls	r3, r8, r0, r3
 800045c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000460:	fb00 fa0a 	mul.w	sl, r0, sl
 8000464:	45a2      	cmp	sl, r4
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x1da>
 8000468:	eb1e 0404 	adds.w	r4, lr, r4
 800046c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000470:	d26b      	bcs.n	800054a <__udivmoddi4+0x2aa>
 8000472:	45a2      	cmp	sl, r4
 8000474:	d969      	bls.n	800054a <__udivmoddi4+0x2aa>
 8000476:	3802      	subs	r0, #2
 8000478:	4474      	add	r4, lr
 800047a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800047e:	fba0 8902 	umull	r8, r9, r0, r2
 8000482:	eba4 040a 	sub.w	r4, r4, sl
 8000486:	454c      	cmp	r4, r9
 8000488:	46c2      	mov	sl, r8
 800048a:	464b      	mov	r3, r9
 800048c:	d354      	bcc.n	8000538 <__udivmoddi4+0x298>
 800048e:	d051      	beq.n	8000534 <__udivmoddi4+0x294>
 8000490:	2e00      	cmp	r6, #0
 8000492:	d069      	beq.n	8000568 <__udivmoddi4+0x2c8>
 8000494:	ebb1 050a 	subs.w	r5, r1, sl
 8000498:	eb64 0403 	sbc.w	r4, r4, r3
 800049c:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004a0:	40fd      	lsrs	r5, r7
 80004a2:	40fc      	lsrs	r4, r7
 80004a4:	ea4c 0505 	orr.w	r5, ip, r5
 80004a8:	e9c6 5400 	strd	r5, r4, [r6]
 80004ac:	2700      	movs	r7, #0
 80004ae:	e747      	b.n	8000340 <__udivmoddi4+0xa0>
 80004b0:	f1c2 0320 	rsb	r3, r2, #32
 80004b4:	fa20 f703 	lsr.w	r7, r0, r3
 80004b8:	4095      	lsls	r5, r2
 80004ba:	fa01 f002 	lsl.w	r0, r1, r2
 80004be:	fa21 f303 	lsr.w	r3, r1, r3
 80004c2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004c6:	4338      	orrs	r0, r7
 80004c8:	0c01      	lsrs	r1, r0, #16
 80004ca:	fbb3 f7fe 	udiv	r7, r3, lr
 80004ce:	fa1f f885 	uxth.w	r8, r5
 80004d2:	fb0e 3317 	mls	r3, lr, r7, r3
 80004d6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004da:	fb07 f308 	mul.w	r3, r7, r8
 80004de:	428b      	cmp	r3, r1
 80004e0:	fa04 f402 	lsl.w	r4, r4, r2
 80004e4:	d907      	bls.n	80004f6 <__udivmoddi4+0x256>
 80004e6:	1869      	adds	r1, r5, r1
 80004e8:	f107 3cff 	add.w	ip, r7, #4294967295
 80004ec:	d22f      	bcs.n	800054e <__udivmoddi4+0x2ae>
 80004ee:	428b      	cmp	r3, r1
 80004f0:	d92d      	bls.n	800054e <__udivmoddi4+0x2ae>
 80004f2:	3f02      	subs	r7, #2
 80004f4:	4429      	add	r1, r5
 80004f6:	1acb      	subs	r3, r1, r3
 80004f8:	b281      	uxth	r1, r0
 80004fa:	fbb3 f0fe 	udiv	r0, r3, lr
 80004fe:	fb0e 3310 	mls	r3, lr, r0, r3
 8000502:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000506:	fb00 f308 	mul.w	r3, r0, r8
 800050a:	428b      	cmp	r3, r1
 800050c:	d907      	bls.n	800051e <__udivmoddi4+0x27e>
 800050e:	1869      	adds	r1, r5, r1
 8000510:	f100 3cff 	add.w	ip, r0, #4294967295
 8000514:	d217      	bcs.n	8000546 <__udivmoddi4+0x2a6>
 8000516:	428b      	cmp	r3, r1
 8000518:	d915      	bls.n	8000546 <__udivmoddi4+0x2a6>
 800051a:	3802      	subs	r0, #2
 800051c:	4429      	add	r1, r5
 800051e:	1ac9      	subs	r1, r1, r3
 8000520:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000524:	e73b      	b.n	800039e <__udivmoddi4+0xfe>
 8000526:	4637      	mov	r7, r6
 8000528:	4630      	mov	r0, r6
 800052a:	e709      	b.n	8000340 <__udivmoddi4+0xa0>
 800052c:	4607      	mov	r7, r0
 800052e:	e6e7      	b.n	8000300 <__udivmoddi4+0x60>
 8000530:	4618      	mov	r0, r3
 8000532:	e6fb      	b.n	800032c <__udivmoddi4+0x8c>
 8000534:	4541      	cmp	r1, r8
 8000536:	d2ab      	bcs.n	8000490 <__udivmoddi4+0x1f0>
 8000538:	ebb8 0a02 	subs.w	sl, r8, r2
 800053c:	eb69 020e 	sbc.w	r2, r9, lr
 8000540:	3801      	subs	r0, #1
 8000542:	4613      	mov	r3, r2
 8000544:	e7a4      	b.n	8000490 <__udivmoddi4+0x1f0>
 8000546:	4660      	mov	r0, ip
 8000548:	e7e9      	b.n	800051e <__udivmoddi4+0x27e>
 800054a:	4618      	mov	r0, r3
 800054c:	e795      	b.n	800047a <__udivmoddi4+0x1da>
 800054e:	4667      	mov	r7, ip
 8000550:	e7d1      	b.n	80004f6 <__udivmoddi4+0x256>
 8000552:	4681      	mov	r9, r0
 8000554:	e77c      	b.n	8000450 <__udivmoddi4+0x1b0>
 8000556:	3802      	subs	r0, #2
 8000558:	442c      	add	r4, r5
 800055a:	e747      	b.n	80003ec <__udivmoddi4+0x14c>
 800055c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000560:	442b      	add	r3, r5
 8000562:	e72f      	b.n	80003c4 <__udivmoddi4+0x124>
 8000564:	4638      	mov	r0, r7
 8000566:	e708      	b.n	800037a <__udivmoddi4+0xda>
 8000568:	4637      	mov	r7, r6
 800056a:	e6e9      	b.n	8000340 <__udivmoddi4+0xa0>

0800056c <__aeabi_idiv0>:
 800056c:	4770      	bx	lr
 800056e:	bf00      	nop

08000570 <apInit>:
 */

#include "ap.h"

void apInit(void)
{
 8000570:	b580      	push	{r7, lr}
 8000572:	af00      	add	r7, sp, #0

  uartOpen(_DEF_UART1, 57600);        // USB
 8000574:	f44f 4161 	mov.w	r1, #57600	; 0xe100
 8000578:	2000      	movs	r0, #0
 800057a:	f000 fdfd 	bl	8001178 <uartOpen>
  uartOpen(_DEF_UART2, 57600);        // UART
 800057e:	f44f 4161 	mov.w	r1, #57600	; 0xe100
 8000582:	2001      	movs	r0, #1
 8000584:	f000 fdf8 	bl	8001178 <uartOpen>

}
 8000588:	bf00      	nop
 800058a:	bd80      	pop	{r7, pc}

0800058c <apMain>:

void apMain(void)
{
 800058c:	b580      	push	{r7, lr}
 800058e:	b08c      	sub	sp, #48	; 0x30
 8000590:	af00      	add	r7, sp, #0
  uint32_t pre_time;

  pre_time = millis();
 8000592:	f000 f8ba 	bl	800070a <millis>
 8000596:	62f8      	str	r0, [r7, #44]	; 0x2c

  while(1)
  {
    if(millis()-pre_time >= 500)
 8000598:	f000 f8b7 	bl	800070a <millis>
 800059c:	4602      	mov	r2, r0
 800059e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80005a0:	1ad3      	subs	r3, r2, r3
 80005a2:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80005a6:	d30b      	bcc.n	80005c0 <apMain+0x34>
    {
      pre_time = millis();
 80005a8:	f000 f8af 	bl	800070a <millis>
 80005ac:	62f8      	str	r0, [r7, #44]	; 0x2c
      ledToggle(_DEF_LED1);
 80005ae:	2000      	movs	r0, #0
 80005b0:	f000 fd0e 	bl	8000fd0 <ledToggle>
      ledToggle(_DEF_LED2);
 80005b4:	2001      	movs	r0, #1
 80005b6:	f000 fd0b 	bl	8000fd0 <ledToggle>
      ledToggle(_DEF_LED3);
 80005ba:	2002      	movs	r0, #2
 80005bc:	f000 fd08 	bl	8000fd0 <ledToggle>

    }

    if(uartAvailable(_DEF_UART1) > 0)
 80005c0:	2000      	movs	r0, #0
 80005c2:	f000 fe71 	bl	80012a8 <uartAvailable>
 80005c6:	4603      	mov	r3, r0
 80005c8:	2b00      	cmp	r3, #0
 80005ca:	d0e5      	beq.n	8000598 <apMain+0xc>
    {
      uint8_t rx_data;

      rx_data = uartRead(_DEF_UART1);
 80005cc:	2000      	movs	r0, #0
 80005ce:	f000 fe9b 	bl	8001308 <uartRead>
 80005d2:	4603      	mov	r3, r0
 80005d4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

      if(rx_data == '1')
 80005d8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80005dc:	2b31      	cmp	r3, #49	; 0x31
 80005de:	d11e      	bne.n	800061e <apMain+0x92>
      {
        uint8_t buf[32];

        logPrintf("Read...\n");
 80005e0:	482d      	ldr	r0, [pc, #180]	; (8000698 <apMain+0x10c>)
 80005e2:	f009 fa33 	bl	8009a4c <puts>

        flashRead(0x8020000, buf, 32);
 80005e6:	463b      	mov	r3, r7
 80005e8:	2220      	movs	r2, #32
 80005ea:	4619      	mov	r1, r3
 80005ec:	482b      	ldr	r0, [pc, #172]	; (800069c <apMain+0x110>)
 80005ee:	f000 fc07 	bl	8000e00 <flashRead>

        for(int i=0; i<32; i++)
 80005f2:	2300      	movs	r3, #0
 80005f4:	62bb      	str	r3, [r7, #40]	; 0x28
 80005f6:	e00f      	b.n	8000618 <apMain+0x8c>
        {
          logPrintf("0x%X : 0x%X\n", 0x8020000 + i, buf[i]);
 80005f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80005fa:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 80005fe:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 8000602:	4639      	mov	r1, r7
 8000604:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000606:	440a      	add	r2, r1
 8000608:	7812      	ldrb	r2, [r2, #0]
 800060a:	4619      	mov	r1, r3
 800060c:	4824      	ldr	r0, [pc, #144]	; (80006a0 <apMain+0x114>)
 800060e:	f009 f9a9 	bl	8009964 <iprintf>
        for(int i=0; i<32; i++)
 8000612:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000614:	3301      	adds	r3, #1
 8000616:	62bb      	str	r3, [r7, #40]	; 0x28
 8000618:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800061a:	2b1f      	cmp	r3, #31
 800061c:	ddec      	ble.n	80005f8 <apMain+0x6c>
        }

      }

      if(rx_data == '2')
 800061e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000622:	2b32      	cmp	r3, #50	; 0x32
 8000624:	d110      	bne.n	8000648 <apMain+0xbc>
      {
        logPrintf("Erase...\n");
 8000626:	481f      	ldr	r0, [pc, #124]	; (80006a4 <apMain+0x118>)
 8000628:	f009 fa10 	bl	8009a4c <puts>

        if(flashErase(0x8020000, 32) == true)
 800062c:	2120      	movs	r1, #32
 800062e:	481b      	ldr	r0, [pc, #108]	; (800069c <apMain+0x110>)
 8000630:	f000 fb3e 	bl	8000cb0 <flashErase>
 8000634:	4603      	mov	r3, r0
 8000636:	2b00      	cmp	r3, #0
 8000638:	d003      	beq.n	8000642 <apMain+0xb6>
        {
          logPrintf("Erase OK\n");
 800063a:	481b      	ldr	r0, [pc, #108]	; (80006a8 <apMain+0x11c>)
 800063c:	f009 fa06 	bl	8009a4c <puts>
 8000640:	e002      	b.n	8000648 <apMain+0xbc>
        }
        else
        {
          logPrintf("Erase Fail\n");
 8000642:	481a      	ldr	r0, [pc, #104]	; (80006ac <apMain+0x120>)
 8000644:	f009 fa02 	bl	8009a4c <puts>
        }
      }
      if(rx_data == '3')
 8000648:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800064c:	2b33      	cmp	r3, #51	; 0x33
 800064e:	d1a3      	bne.n	8000598 <apMain+0xc>
      {
        uint8_t buf[32];

        for(int i=0; i<32; i++)
 8000650:	2300      	movs	r3, #0
 8000652:	627b      	str	r3, [r7, #36]	; 0x24
 8000654:	e009      	b.n	800066a <apMain+0xde>
        {
          buf[i] = i;
 8000656:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000658:	b2d9      	uxtb	r1, r3
 800065a:	463a      	mov	r2, r7
 800065c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800065e:	4413      	add	r3, r2
 8000660:	460a      	mov	r2, r1
 8000662:	701a      	strb	r2, [r3, #0]
        for(int i=0; i<32; i++)
 8000664:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000666:	3301      	adds	r3, #1
 8000668:	627b      	str	r3, [r7, #36]	; 0x24
 800066a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800066c:	2b1f      	cmp	r3, #31
 800066e:	ddf2      	ble.n	8000656 <apMain+0xca>
        }

        logPrintf("Write...\n");
 8000670:	480f      	ldr	r0, [pc, #60]	; (80006b0 <apMain+0x124>)
 8000672:	f009 f9eb 	bl	8009a4c <puts>

        if(flashWrite(0x8020000, buf, 32) == true)
 8000676:	463b      	mov	r3, r7
 8000678:	2220      	movs	r2, #32
 800067a:	4619      	mov	r1, r3
 800067c:	4807      	ldr	r0, [pc, #28]	; (800069c <apMain+0x110>)
 800067e:	f000 fb8d 	bl	8000d9c <flashWrite>
 8000682:	4603      	mov	r3, r0
 8000684:	2b00      	cmp	r3, #0
 8000686:	d003      	beq.n	8000690 <apMain+0x104>
        {
          logPrintf("Write OK\n");
 8000688:	480a      	ldr	r0, [pc, #40]	; (80006b4 <apMain+0x128>)
 800068a:	f009 f9df 	bl	8009a4c <puts>
 800068e:	e783      	b.n	8000598 <apMain+0xc>
        }
        else
        {
          logPrintf("Write Fail\n");
 8000690:	4809      	ldr	r0, [pc, #36]	; (80006b8 <apMain+0x12c>)
 8000692:	f009 f9db 	bl	8009a4c <puts>
    if(millis()-pre_time >= 500)
 8000696:	e77f      	b.n	8000598 <apMain+0xc>
 8000698:	0800a6bc 	.word	0x0800a6bc
 800069c:	08020000 	.word	0x08020000
 80006a0:	0800a6c4 	.word	0x0800a6c4
 80006a4:	0800a6d4 	.word	0x0800a6d4
 80006a8:	0800a6e0 	.word	0x0800a6e0
 80006ac:	0800a6ec 	.word	0x0800a6ec
 80006b0:	0800a6f8 	.word	0x0800a6f8
 80006b4:	0800a704 	.word	0x0800a704
 80006b8:	0800a710 	.word	0x0800a710

080006bc <bspInit>:
#include "uart.h"

void SystemClock_Config(void);

void bspInit(void)
{
 80006bc:	b580      	push	{r7, lr}
 80006be:	b082      	sub	sp, #8
 80006c0:	af00      	add	r7, sp, #0

  HAL_Init();
 80006c2:	f000 ff77 	bl	80015b4 <HAL_Init>
  SystemClock_Config();
 80006c6:	f000 f837 	bl	8000738 <SystemClock_Config>


  __HAL_RCC_GPIOB_CLK_ENABLE();       // GPIO Init
 80006ca:	2300      	movs	r3, #0
 80006cc:	607b      	str	r3, [r7, #4]
 80006ce:	4b08      	ldr	r3, [pc, #32]	; (80006f0 <bspInit+0x34>)
 80006d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006d2:	4a07      	ldr	r2, [pc, #28]	; (80006f0 <bspInit+0x34>)
 80006d4:	f043 0302 	orr.w	r3, r3, #2
 80006d8:	6313      	str	r3, [r2, #48]	; 0x30
 80006da:	4b05      	ldr	r3, [pc, #20]	; (80006f0 <bspInit+0x34>)
 80006dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006de:	f003 0302 	and.w	r3, r3, #2
 80006e2:	607b      	str	r3, [r7, #4]
 80006e4:	687b      	ldr	r3, [r7, #4]

}
 80006e6:	bf00      	nop
 80006e8:	3708      	adds	r7, #8
 80006ea:	46bd      	mov	sp, r7
 80006ec:	bd80      	pop	{r7, pc}
 80006ee:	bf00      	nop
 80006f0:	40023800 	.word	0x40023800

080006f4 <delay>:

void delay(uint32_t ms)
{
 80006f4:	b580      	push	{r7, lr}
 80006f6:	b082      	sub	sp, #8
 80006f8:	af00      	add	r7, sp, #0
 80006fa:	6078      	str	r0, [r7, #4]
  HAL_Delay(ms);
 80006fc:	6878      	ldr	r0, [r7, #4]
 80006fe:	f000 ffcb 	bl	8001698 <HAL_Delay>
}
 8000702:	bf00      	nop
 8000704:	3708      	adds	r7, #8
 8000706:	46bd      	mov	sp, r7
 8000708:	bd80      	pop	{r7, pc}

0800070a <millis>:

uint32_t millis(void)
{
 800070a:	b580      	push	{r7, lr}
 800070c:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 800070e:	f000 ffb7 	bl	8001680 <HAL_GetTick>
 8000712:	4603      	mov	r3, r0
}
 8000714:	4618      	mov	r0, r3
 8000716:	bd80      	pop	{r7, pc}

08000718 <__io_putchar>:


int __io_putchar(int ch)
{
 8000718:	b580      	push	{r7, lr}
 800071a:	b082      	sub	sp, #8
 800071c:	af00      	add	r7, sp, #0
 800071e:	6078      	str	r0, [r7, #4]
  // USB printf Char transmit
  uartWrite(_DEF_UART1, (uint8_t *)&ch, 1);
 8000720:	1d3b      	adds	r3, r7, #4
 8000722:	2201      	movs	r2, #1
 8000724:	4619      	mov	r1, r3
 8000726:	2000      	movs	r0, #0
 8000728:	f000 fe0e 	bl	8001348 <uartWrite>

  return 1;
 800072c:	2301      	movs	r3, #1
}
 800072e:	4618      	mov	r0, r3
 8000730:	3708      	adds	r7, #8
 8000732:	46bd      	mov	sp, r7
 8000734:	bd80      	pop	{r7, pc}
	...

08000738 <SystemClock_Config>:


void SystemClock_Config(void)
{
 8000738:	b580      	push	{r7, lr}
 800073a:	b098      	sub	sp, #96	; 0x60
 800073c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800073e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000742:	2230      	movs	r2, #48	; 0x30
 8000744:	2100      	movs	r1, #0
 8000746:	4618      	mov	r0, r3
 8000748:	f009 f85c 	bl	8009804 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800074c:	f107 031c 	add.w	r3, r7, #28
 8000750:	2200      	movs	r2, #0
 8000752:	601a      	str	r2, [r3, #0]
 8000754:	605a      	str	r2, [r3, #4]
 8000756:	609a      	str	r2, [r3, #8]
 8000758:	60da      	str	r2, [r3, #12]
 800075a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800075c:	f107 030c 	add.w	r3, r7, #12
 8000760:	2200      	movs	r2, #0
 8000762:	601a      	str	r2, [r3, #0]
 8000764:	605a      	str	r2, [r3, #4]
 8000766:	609a      	str	r2, [r3, #8]
 8000768:	60da      	str	r2, [r3, #12]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800076a:	2300      	movs	r3, #0
 800076c:	60bb      	str	r3, [r7, #8]
 800076e:	4b30      	ldr	r3, [pc, #192]	; (8000830 <SystemClock_Config+0xf8>)
 8000770:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000772:	4a2f      	ldr	r2, [pc, #188]	; (8000830 <SystemClock_Config+0xf8>)
 8000774:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000778:	6413      	str	r3, [r2, #64]	; 0x40
 800077a:	4b2d      	ldr	r3, [pc, #180]	; (8000830 <SystemClock_Config+0xf8>)
 800077c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800077e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000782:	60bb      	str	r3, [r7, #8]
 8000784:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000786:	2300      	movs	r3, #0
 8000788:	607b      	str	r3, [r7, #4]
 800078a:	4b2a      	ldr	r3, [pc, #168]	; (8000834 <SystemClock_Config+0xfc>)
 800078c:	681b      	ldr	r3, [r3, #0]
 800078e:	4a29      	ldr	r2, [pc, #164]	; (8000834 <SystemClock_Config+0xfc>)
 8000790:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000794:	6013      	str	r3, [r2, #0]
 8000796:	4b27      	ldr	r3, [pc, #156]	; (8000834 <SystemClock_Config+0xfc>)
 8000798:	681b      	ldr	r3, [r3, #0]
 800079a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800079e:	607b      	str	r3, [r7, #4]
 80007a0:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 80007a2:	2309      	movs	r3, #9
 80007a4:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80007a6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80007aa:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80007ac:	2301      	movs	r3, #1
 80007ae:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007b0:	2302      	movs	r3, #2
 80007b2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80007b4:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80007b8:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80007ba:	2304      	movs	r3, #4
 80007bc:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 72;
 80007be:	2348      	movs	r3, #72	; 0x48
 80007c0:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80007c2:	2302      	movs	r3, #2
 80007c4:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 3;
 80007c6:	2303      	movs	r3, #3
 80007c8:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007ca:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80007ce:	4618      	mov	r0, r3
 80007d0:	f003 fbd6 	bl	8003f80 <HAL_RCC_OscConfig>
 80007d4:	4603      	mov	r3, r0
 80007d6:	2b00      	cmp	r3, #0
 80007d8:	d001      	beq.n	80007de <SystemClock_Config+0xa6>
  {
    Error_Handler();
 80007da:	f000 f82d 	bl	8000838 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007de:	230f      	movs	r3, #15
 80007e0:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007e2:	2302      	movs	r3, #2
 80007e4:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007e6:	2300      	movs	r3, #0
 80007e8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80007ea:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80007ee:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80007f0:	2300      	movs	r3, #0
 80007f2:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80007f4:	f107 031c 	add.w	r3, r7, #28
 80007f8:	2102      	movs	r1, #2
 80007fa:	4618      	mov	r0, r3
 80007fc:	f003 fe30 	bl	8004460 <HAL_RCC_ClockConfig>
 8000800:	4603      	mov	r3, r0
 8000802:	2b00      	cmp	r3, #0
 8000804:	d001      	beq.n	800080a <SystemClock_Config+0xd2>
  {
    Error_Handler();
 8000806:	f000 f817 	bl	8000838 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 800080a:	2302      	movs	r3, #2
 800080c:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 800080e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000812:	61bb      	str	r3, [r7, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000814:	f107 030c 	add.w	r3, r7, #12
 8000818:	4618      	mov	r0, r3
 800081a:	f004 f813 	bl	8004844 <HAL_RCCEx_PeriphCLKConfig>
 800081e:	4603      	mov	r3, r0
 8000820:	2b00      	cmp	r3, #0
 8000822:	d001      	beq.n	8000828 <SystemClock_Config+0xf0>
  {
    Error_Handler();
 8000824:	f000 f808 	bl	8000838 <Error_Handler>
  }
}
 8000828:	bf00      	nop
 800082a:	3760      	adds	r7, #96	; 0x60
 800082c:	46bd      	mov	sp, r7
 800082e:	bd80      	pop	{r7, pc}
 8000830:	40023800 	.word	0x40023800
 8000834:	40007000 	.word	0x40007000

08000838 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000838:	b480      	push	{r7}
 800083a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800083c:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800083e:	e7fe      	b.n	800083e <Error_Handler+0x6>

08000840 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000840:	b480      	push	{r7}
 8000842:	b083      	sub	sp, #12
 8000844:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000846:	2300      	movs	r3, #0
 8000848:	607b      	str	r3, [r7, #4]
 800084a:	4b10      	ldr	r3, [pc, #64]	; (800088c <HAL_MspInit+0x4c>)
 800084c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800084e:	4a0f      	ldr	r2, [pc, #60]	; (800088c <HAL_MspInit+0x4c>)
 8000850:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000854:	6453      	str	r3, [r2, #68]	; 0x44
 8000856:	4b0d      	ldr	r3, [pc, #52]	; (800088c <HAL_MspInit+0x4c>)
 8000858:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800085a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800085e:	607b      	str	r3, [r7, #4]
 8000860:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000862:	2300      	movs	r3, #0
 8000864:	603b      	str	r3, [r7, #0]
 8000866:	4b09      	ldr	r3, [pc, #36]	; (800088c <HAL_MspInit+0x4c>)
 8000868:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800086a:	4a08      	ldr	r2, [pc, #32]	; (800088c <HAL_MspInit+0x4c>)
 800086c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000870:	6413      	str	r3, [r2, #64]	; 0x40
 8000872:	4b06      	ldr	r3, [pc, #24]	; (800088c <HAL_MspInit+0x4c>)
 8000874:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000876:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800087a:	603b      	str	r3, [r7, #0]
 800087c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800087e:	bf00      	nop
 8000880:	370c      	adds	r7, #12
 8000882:	46bd      	mov	sp, r7
 8000884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000888:	4770      	bx	lr
 800088a:	bf00      	nop
 800088c:	40023800 	.word	0x40023800

08000890 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000890:	b480      	push	{r7}
 8000892:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000894:	e7fe      	b.n	8000894 <NMI_Handler+0x4>

08000896 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000896:	b480      	push	{r7}
 8000898:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800089a:	e7fe      	b.n	800089a <HardFault_Handler+0x4>

0800089c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800089c:	b480      	push	{r7}
 800089e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80008a0:	e7fe      	b.n	80008a0 <MemManage_Handler+0x4>

080008a2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80008a2:	b480      	push	{r7}
 80008a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80008a6:	e7fe      	b.n	80008a6 <BusFault_Handler+0x4>

080008a8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80008a8:	b480      	push	{r7}
 80008aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80008ac:	e7fe      	b.n	80008ac <UsageFault_Handler+0x4>

080008ae <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80008ae:	b480      	push	{r7}
 80008b0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80008b2:	bf00      	nop
 80008b4:	46bd      	mov	sp, r7
 80008b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ba:	4770      	bx	lr

080008bc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80008bc:	b480      	push	{r7}
 80008be:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80008c0:	bf00      	nop
 80008c2:	46bd      	mov	sp, r7
 80008c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008c8:	4770      	bx	lr

080008ca <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80008ca:	b480      	push	{r7}
 80008cc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80008ce:	bf00      	nop
 80008d0:	46bd      	mov	sp, r7
 80008d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008d6:	4770      	bx	lr

080008d8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80008d8:	b580      	push	{r7, lr}
 80008da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80008dc:	f000 febc 	bl	8001658 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80008e0:	bf00      	nop
 80008e2:	bd80      	pop	{r7, pc}

080008e4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80008e4:	b580      	push	{r7, lr}
 80008e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80008e8:	4802      	ldr	r0, [pc, #8]	; (80008f4 <USART1_IRQHandler+0x10>)
 80008ea:	f004 fb37 	bl	8004f5c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80008ee:	bf00      	nop
 80008f0:	bd80      	pop	{r7, pc}
 80008f2:	bf00      	nop
 80008f4:	20000448 	.word	0x20000448

080008f8 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 80008f8:	b580      	push	{r7, lr}
 80008fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 80008fc:	4802      	ldr	r0, [pc, #8]	; (8000908 <DMA2_Stream2_IRQHandler+0x10>)
 80008fe:	f001 f9b5 	bl	8001c6c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8000902:	bf00      	nop
 8000904:	bd80      	pop	{r7, pc}
 8000906:	bf00      	nop
 8000908:	200003e8 	.word	0x200003e8

0800090c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 800090c:	b580      	push	{r7, lr}
 800090e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000910:	4802      	ldr	r0, [pc, #8]	; (800091c <OTG_FS_IRQHandler+0x10>)
 8000912:	f002 fb01 	bl	8002f18 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000916:	bf00      	nop
 8000918:	bd80      	pop	{r7, pc}
 800091a:	bf00      	nop
 800091c:	20000f7c 	.word	0x20000f7c

08000920 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000920:	b580      	push	{r7, lr}
 8000922:	b086      	sub	sp, #24
 8000924:	af00      	add	r7, sp, #0
 8000926:	60f8      	str	r0, [r7, #12]
 8000928:	60b9      	str	r1, [r7, #8]
 800092a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800092c:	2300      	movs	r3, #0
 800092e:	617b      	str	r3, [r7, #20]
 8000930:	e00a      	b.n	8000948 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000932:	f3af 8000 	nop.w
 8000936:	4601      	mov	r1, r0
 8000938:	68bb      	ldr	r3, [r7, #8]
 800093a:	1c5a      	adds	r2, r3, #1
 800093c:	60ba      	str	r2, [r7, #8]
 800093e:	b2ca      	uxtb	r2, r1
 8000940:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000942:	697b      	ldr	r3, [r7, #20]
 8000944:	3301      	adds	r3, #1
 8000946:	617b      	str	r3, [r7, #20]
 8000948:	697a      	ldr	r2, [r7, #20]
 800094a:	687b      	ldr	r3, [r7, #4]
 800094c:	429a      	cmp	r2, r3
 800094e:	dbf0      	blt.n	8000932 <_read+0x12>
	}

return len;
 8000950:	687b      	ldr	r3, [r7, #4]
}
 8000952:	4618      	mov	r0, r3
 8000954:	3718      	adds	r7, #24
 8000956:	46bd      	mov	sp, r7
 8000958:	bd80      	pop	{r7, pc}

0800095a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800095a:	b580      	push	{r7, lr}
 800095c:	b086      	sub	sp, #24
 800095e:	af00      	add	r7, sp, #0
 8000960:	60f8      	str	r0, [r7, #12]
 8000962:	60b9      	str	r1, [r7, #8]
 8000964:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000966:	2300      	movs	r3, #0
 8000968:	617b      	str	r3, [r7, #20]
 800096a:	e009      	b.n	8000980 <_write+0x26>
	{
		__io_putchar(*ptr++);
 800096c:	68bb      	ldr	r3, [r7, #8]
 800096e:	1c5a      	adds	r2, r3, #1
 8000970:	60ba      	str	r2, [r7, #8]
 8000972:	781b      	ldrb	r3, [r3, #0]
 8000974:	4618      	mov	r0, r3
 8000976:	f7ff fecf 	bl	8000718 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800097a:	697b      	ldr	r3, [r7, #20]
 800097c:	3301      	adds	r3, #1
 800097e:	617b      	str	r3, [r7, #20]
 8000980:	697a      	ldr	r2, [r7, #20]
 8000982:	687b      	ldr	r3, [r7, #4]
 8000984:	429a      	cmp	r2, r3
 8000986:	dbf1      	blt.n	800096c <_write+0x12>
	}
	return len;
 8000988:	687b      	ldr	r3, [r7, #4]
}
 800098a:	4618      	mov	r0, r3
 800098c:	3718      	adds	r7, #24
 800098e:	46bd      	mov	sp, r7
 8000990:	bd80      	pop	{r7, pc}

08000992 <_close>:

int _close(int file)
{
 8000992:	b480      	push	{r7}
 8000994:	b083      	sub	sp, #12
 8000996:	af00      	add	r7, sp, #0
 8000998:	6078      	str	r0, [r7, #4]
	return -1;
 800099a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800099e:	4618      	mov	r0, r3
 80009a0:	370c      	adds	r7, #12
 80009a2:	46bd      	mov	sp, r7
 80009a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a8:	4770      	bx	lr

080009aa <_fstat>:


int _fstat(int file, struct stat *st)
{
 80009aa:	b480      	push	{r7}
 80009ac:	b083      	sub	sp, #12
 80009ae:	af00      	add	r7, sp, #0
 80009b0:	6078      	str	r0, [r7, #4]
 80009b2:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80009b4:	683b      	ldr	r3, [r7, #0]
 80009b6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80009ba:	605a      	str	r2, [r3, #4]
	return 0;
 80009bc:	2300      	movs	r3, #0
}
 80009be:	4618      	mov	r0, r3
 80009c0:	370c      	adds	r7, #12
 80009c2:	46bd      	mov	sp, r7
 80009c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009c8:	4770      	bx	lr

080009ca <_isatty>:

int _isatty(int file)
{
 80009ca:	b480      	push	{r7}
 80009cc:	b083      	sub	sp, #12
 80009ce:	af00      	add	r7, sp, #0
 80009d0:	6078      	str	r0, [r7, #4]
	return 1;
 80009d2:	2301      	movs	r3, #1
}
 80009d4:	4618      	mov	r0, r3
 80009d6:	370c      	adds	r7, #12
 80009d8:	46bd      	mov	sp, r7
 80009da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009de:	4770      	bx	lr

080009e0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80009e0:	b480      	push	{r7}
 80009e2:	b085      	sub	sp, #20
 80009e4:	af00      	add	r7, sp, #0
 80009e6:	60f8      	str	r0, [r7, #12]
 80009e8:	60b9      	str	r1, [r7, #8]
 80009ea:	607a      	str	r2, [r7, #4]
	return 0;
 80009ec:	2300      	movs	r3, #0
}
 80009ee:	4618      	mov	r0, r3
 80009f0:	3714      	adds	r7, #20
 80009f2:	46bd      	mov	sp, r7
 80009f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f8:	4770      	bx	lr
	...

080009fc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80009fc:	b580      	push	{r7, lr}
 80009fe:	b086      	sub	sp, #24
 8000a00:	af00      	add	r7, sp, #0
 8000a02:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000a04:	4a14      	ldr	r2, [pc, #80]	; (8000a58 <_sbrk+0x5c>)
 8000a06:	4b15      	ldr	r3, [pc, #84]	; (8000a5c <_sbrk+0x60>)
 8000a08:	1ad3      	subs	r3, r2, r3
 8000a0a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000a0c:	697b      	ldr	r3, [r7, #20]
 8000a0e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000a10:	4b13      	ldr	r3, [pc, #76]	; (8000a60 <_sbrk+0x64>)
 8000a12:	681b      	ldr	r3, [r3, #0]
 8000a14:	2b00      	cmp	r3, #0
 8000a16:	d102      	bne.n	8000a1e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000a18:	4b11      	ldr	r3, [pc, #68]	; (8000a60 <_sbrk+0x64>)
 8000a1a:	4a12      	ldr	r2, [pc, #72]	; (8000a64 <_sbrk+0x68>)
 8000a1c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000a1e:	4b10      	ldr	r3, [pc, #64]	; (8000a60 <_sbrk+0x64>)
 8000a20:	681a      	ldr	r2, [r3, #0]
 8000a22:	687b      	ldr	r3, [r7, #4]
 8000a24:	4413      	add	r3, r2
 8000a26:	693a      	ldr	r2, [r7, #16]
 8000a28:	429a      	cmp	r2, r3
 8000a2a:	d207      	bcs.n	8000a3c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000a2c:	f008 feb0 	bl	8009790 <__errno>
 8000a30:	4602      	mov	r2, r0
 8000a32:	230c      	movs	r3, #12
 8000a34:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8000a36:	f04f 33ff 	mov.w	r3, #4294967295
 8000a3a:	e009      	b.n	8000a50 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000a3c:	4b08      	ldr	r3, [pc, #32]	; (8000a60 <_sbrk+0x64>)
 8000a3e:	681b      	ldr	r3, [r3, #0]
 8000a40:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000a42:	4b07      	ldr	r3, [pc, #28]	; (8000a60 <_sbrk+0x64>)
 8000a44:	681a      	ldr	r2, [r3, #0]
 8000a46:	687b      	ldr	r3, [r7, #4]
 8000a48:	4413      	add	r3, r2
 8000a4a:	4a05      	ldr	r2, [pc, #20]	; (8000a60 <_sbrk+0x64>)
 8000a4c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000a4e:	68fb      	ldr	r3, [r7, #12]
}
 8000a50:	4618      	mov	r0, r3
 8000a52:	3718      	adds	r7, #24
 8000a54:	46bd      	mov	sp, r7
 8000a56:	bd80      	pop	{r7, pc}
 8000a58:	20020000 	.word	0x20020000
 8000a5c:	00000400 	.word	0x00000400
 8000a60:	20000224 	.word	0x20000224
 8000a64:	20001388 	.word	0x20001388

08000a68 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000a68:	b480      	push	{r7}
 8000a6a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000a6c:	4b08      	ldr	r3, [pc, #32]	; (8000a90 <SystemInit+0x28>)
 8000a6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000a72:	4a07      	ldr	r2, [pc, #28]	; (8000a90 <SystemInit+0x28>)
 8000a74:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000a78:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000a7c:	4b04      	ldr	r3, [pc, #16]	; (8000a90 <SystemInit+0x28>)
 8000a7e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000a82:	609a      	str	r2, [r3, #8]
#endif
}
 8000a84:	bf00      	nop
 8000a86:	46bd      	mov	sp, r7
 8000a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a8c:	4770      	bx	lr
 8000a8e:	bf00      	nop
 8000a90:	e000ed00 	.word	0xe000ed00

08000a94 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000a94:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000acc <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000a98:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000a9a:	e003      	b.n	8000aa4 <LoopCopyDataInit>

08000a9c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000a9c:	4b0c      	ldr	r3, [pc, #48]	; (8000ad0 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000a9e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000aa0:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000aa2:	3104      	adds	r1, #4

08000aa4 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000aa4:	480b      	ldr	r0, [pc, #44]	; (8000ad4 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000aa6:	4b0c      	ldr	r3, [pc, #48]	; (8000ad8 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000aa8:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000aaa:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000aac:	d3f6      	bcc.n	8000a9c <CopyDataInit>
  ldr  r2, =_sbss
 8000aae:	4a0b      	ldr	r2, [pc, #44]	; (8000adc <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000ab0:	e002      	b.n	8000ab8 <LoopFillZerobss>

08000ab2 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000ab2:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000ab4:	f842 3b04 	str.w	r3, [r2], #4

08000ab8 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000ab8:	4b09      	ldr	r3, [pc, #36]	; (8000ae0 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000aba:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000abc:	d3f9      	bcc.n	8000ab2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000abe:	f7ff ffd3 	bl	8000a68 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000ac2:	f008 fe6b 	bl	800979c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000ac6:	f008 fe57 	bl	8009778 <main>
  bx  lr    
 8000aca:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000acc:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8000ad0:	0800a82c 	.word	0x0800a82c
  ldr  r0, =_sdata
 8000ad4:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000ad8:	20000208 	.word	0x20000208
  ldr  r2, =_sbss
 8000adc:	20000208 	.word	0x20000208
  ldr  r3, = _ebss
 8000ae0:	20001388 	.word	0x20001388

08000ae4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000ae4:	e7fe      	b.n	8000ae4 <ADC_IRQHandler>

08000ae6 <qbufferCreat>:

#include "qbuffer.h"


bool qbufferCreat(qbuffer_t *p_node, uint8_t *p_buf, uint32_t length)
{
 8000ae6:	b480      	push	{r7}
 8000ae8:	b087      	sub	sp, #28
 8000aea:	af00      	add	r7, sp, #0
 8000aec:	60f8      	str	r0, [r7, #12]
 8000aee:	60b9      	str	r1, [r7, #8]
 8000af0:	607a      	str	r2, [r7, #4]
  bool ret = true;
 8000af2:	2301      	movs	r3, #1
 8000af4:	75fb      	strb	r3, [r7, #23]

  p_node->in = 0;
 8000af6:	68fb      	ldr	r3, [r7, #12]
 8000af8:	2200      	movs	r2, #0
 8000afa:	601a      	str	r2, [r3, #0]
  p_node->out = 0;
 8000afc:	68fb      	ldr	r3, [r7, #12]
 8000afe:	2200      	movs	r2, #0
 8000b00:	605a      	str	r2, [r3, #4]
  p_node->len = length;
 8000b02:	68fb      	ldr	r3, [r7, #12]
 8000b04:	687a      	ldr	r2, [r7, #4]
 8000b06:	609a      	str	r2, [r3, #8]
  p_node->p_buf = p_buf;
 8000b08:	68fb      	ldr	r3, [r7, #12]
 8000b0a:	68ba      	ldr	r2, [r7, #8]
 8000b0c:	60da      	str	r2, [r3, #12]

  return ret;
 8000b0e:	7dfb      	ldrb	r3, [r7, #23]

}
 8000b10:	4618      	mov	r0, r3
 8000b12:	371c      	adds	r7, #28
 8000b14:	46bd      	mov	sp, r7
 8000b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b1a:	4770      	bx	lr

08000b1c <qbufferRead>:
  return ret;

}

bool qbufferRead(qbuffer_t *p_node, uint8_t *p_data, uint32_t length)
{
 8000b1c:	b480      	push	{r7}
 8000b1e:	b087      	sub	sp, #28
 8000b20:	af00      	add	r7, sp, #0
 8000b22:	60f8      	str	r0, [r7, #12]
 8000b24:	60b9      	str	r1, [r7, #8]
 8000b26:	607a      	str	r2, [r7, #4]
  bool ret = true;
 8000b28:	2301      	movs	r3, #1
 8000b2a:	75fb      	strb	r3, [r7, #23]

  for(int i = 0; i<length; i++)
 8000b2c:	2300      	movs	r3, #0
 8000b2e:	613b      	str	r3, [r7, #16]
 8000b30:	e026      	b.n	8000b80 <qbufferRead+0x64>
  {
    if(p_node->p_buf != NULL)
 8000b32:	68fb      	ldr	r3, [r7, #12]
 8000b34:	68db      	ldr	r3, [r3, #12]
 8000b36:	2b00      	cmp	r3, #0
 8000b38:	d009      	beq.n	8000b4e <qbufferRead+0x32>
    {
      p_data[i] = p_node->p_buf[p_node->out];
 8000b3a:	68fb      	ldr	r3, [r7, #12]
 8000b3c:	68da      	ldr	r2, [r3, #12]
 8000b3e:	68fb      	ldr	r3, [r7, #12]
 8000b40:	685b      	ldr	r3, [r3, #4]
 8000b42:	441a      	add	r2, r3
 8000b44:	693b      	ldr	r3, [r7, #16]
 8000b46:	68b9      	ldr	r1, [r7, #8]
 8000b48:	440b      	add	r3, r1
 8000b4a:	7812      	ldrb	r2, [r2, #0]
 8000b4c:	701a      	strb	r2, [r3, #0]
    }

    if(p_node->out != p_node->in)
 8000b4e:	68fb      	ldr	r3, [r7, #12]
 8000b50:	685a      	ldr	r2, [r3, #4]
 8000b52:	68fb      	ldr	r3, [r7, #12]
 8000b54:	681b      	ldr	r3, [r3, #0]
 8000b56:	429a      	cmp	r2, r3
 8000b58:	d00c      	beq.n	8000b74 <qbufferRead+0x58>
    {
      p_node->out = (p_node->out + 1) % p_node->len;
 8000b5a:	68fb      	ldr	r3, [r7, #12]
 8000b5c:	685b      	ldr	r3, [r3, #4]
 8000b5e:	3301      	adds	r3, #1
 8000b60:	68fa      	ldr	r2, [r7, #12]
 8000b62:	6892      	ldr	r2, [r2, #8]
 8000b64:	fbb3 f1f2 	udiv	r1, r3, r2
 8000b68:	fb02 f201 	mul.w	r2, r2, r1
 8000b6c:	1a9a      	subs	r2, r3, r2
 8000b6e:	68fb      	ldr	r3, [r7, #12]
 8000b70:	605a      	str	r2, [r3, #4]
 8000b72:	e002      	b.n	8000b7a <qbufferRead+0x5e>
    }
    else
    {
      ret = false;
 8000b74:	2300      	movs	r3, #0
 8000b76:	75fb      	strb	r3, [r7, #23]
      break;
 8000b78:	e006      	b.n	8000b88 <qbufferRead+0x6c>
  for(int i = 0; i<length; i++)
 8000b7a:	693b      	ldr	r3, [r7, #16]
 8000b7c:	3301      	adds	r3, #1
 8000b7e:	613b      	str	r3, [r7, #16]
 8000b80:	693b      	ldr	r3, [r7, #16]
 8000b82:	687a      	ldr	r2, [r7, #4]
 8000b84:	429a      	cmp	r2, r3
 8000b86:	d8d4      	bhi.n	8000b32 <qbufferRead+0x16>
    }
  }
  return ret;
 8000b88:	7dfb      	ldrb	r3, [r7, #23]
}
 8000b8a:	4618      	mov	r0, r3
 8000b8c:	371c      	adds	r7, #28
 8000b8e:	46bd      	mov	sp, r7
 8000b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b94:	4770      	bx	lr

08000b96 <qbufferAvailable>:

uint32_t qbufferAvailable(qbuffer_t *p_node)
{
 8000b96:	b480      	push	{r7}
 8000b98:	b085      	sub	sp, #20
 8000b9a:	af00      	add	r7, sp, #0
 8000b9c:	6078      	str	r0, [r7, #4]
  uint32_t ret;

  ret = (p_node->in - p_node->out) % p_node->len;
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	681a      	ldr	r2, [r3, #0]
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	685b      	ldr	r3, [r3, #4]
 8000ba6:	1ad3      	subs	r3, r2, r3
 8000ba8:	687a      	ldr	r2, [r7, #4]
 8000baa:	6892      	ldr	r2, [r2, #8]
 8000bac:	fbb3 f1f2 	udiv	r1, r3, r2
 8000bb0:	fb02 f201 	mul.w	r2, r2, r1
 8000bb4:	1a9b      	subs	r3, r3, r2
 8000bb6:	60fb      	str	r3, [r7, #12]

  return ret;
 8000bb8:	68fb      	ldr	r3, [r7, #12]
}
 8000bba:	4618      	mov	r0, r3
 8000bbc:	3714      	adds	r7, #20
 8000bbe:	46bd      	mov	sp, r7
 8000bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc4:	4770      	bx	lr
	...

08000bc8 <flashInit>:
flash_tbl_t flash_tbl[FLASH_MAX_PAGE_COUNT];

static int32_t getPage(uint32_t Address);

void flashInit(void)
{
 8000bc8:	b480      	push	{r7}
 8000bca:	af00      	add	r7, sp, #0
  flash_tbl[0].address = 0x08000000;
 8000bcc:	4b2c      	ldr	r3, [pc, #176]	; (8000c80 <flashInit+0xb8>)
 8000bce:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000bd2:	601a      	str	r2, [r3, #0]
  flash_tbl[0].length  = 16*1024;
 8000bd4:	4b2a      	ldr	r3, [pc, #168]	; (8000c80 <flashInit+0xb8>)
 8000bd6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000bda:	605a      	str	r2, [r3, #4]

  flash_tbl[1].address = 0x08004000;
 8000bdc:	4b28      	ldr	r3, [pc, #160]	; (8000c80 <flashInit+0xb8>)
 8000bde:	4a29      	ldr	r2, [pc, #164]	; (8000c84 <flashInit+0xbc>)
 8000be0:	609a      	str	r2, [r3, #8]
  flash_tbl[1].length  = 16*1024;
 8000be2:	4b27      	ldr	r3, [pc, #156]	; (8000c80 <flashInit+0xb8>)
 8000be4:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000be8:	60da      	str	r2, [r3, #12]

  flash_tbl[2].address = 0x08008000;
 8000bea:	4b25      	ldr	r3, [pc, #148]	; (8000c80 <flashInit+0xb8>)
 8000bec:	4a26      	ldr	r2, [pc, #152]	; (8000c88 <flashInit+0xc0>)
 8000bee:	611a      	str	r2, [r3, #16]
  flash_tbl[2].length  = 16*1024;
 8000bf0:	4b23      	ldr	r3, [pc, #140]	; (8000c80 <flashInit+0xb8>)
 8000bf2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000bf6:	615a      	str	r2, [r3, #20]

  flash_tbl[3].address = 0x0800C000;
 8000bf8:	4b21      	ldr	r3, [pc, #132]	; (8000c80 <flashInit+0xb8>)
 8000bfa:	4a24      	ldr	r2, [pc, #144]	; (8000c8c <flashInit+0xc4>)
 8000bfc:	619a      	str	r2, [r3, #24]
  flash_tbl[3].length  = 16*1024;
 8000bfe:	4b20      	ldr	r3, [pc, #128]	; (8000c80 <flashInit+0xb8>)
 8000c00:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000c04:	61da      	str	r2, [r3, #28]

  flash_tbl[4].address = 0x08010000;
 8000c06:	4b1e      	ldr	r3, [pc, #120]	; (8000c80 <flashInit+0xb8>)
 8000c08:	4a21      	ldr	r2, [pc, #132]	; (8000c90 <flashInit+0xc8>)
 8000c0a:	621a      	str	r2, [r3, #32]
  flash_tbl[4].length  = 64*1024;
 8000c0c:	4b1c      	ldr	r3, [pc, #112]	; (8000c80 <flashInit+0xb8>)
 8000c0e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000c12:	625a      	str	r2, [r3, #36]	; 0x24

  flash_tbl[5].address = 0x08020000;
 8000c14:	4b1a      	ldr	r3, [pc, #104]	; (8000c80 <flashInit+0xb8>)
 8000c16:	4a1f      	ldr	r2, [pc, #124]	; (8000c94 <flashInit+0xcc>)
 8000c18:	629a      	str	r2, [r3, #40]	; 0x28
  flash_tbl[5].length  = 128*1024;
 8000c1a:	4b19      	ldr	r3, [pc, #100]	; (8000c80 <flashInit+0xb8>)
 8000c1c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000c20:	62da      	str	r2, [r3, #44]	; 0x2c

  flash_tbl[6].address = 0x08040000;
 8000c22:	4b17      	ldr	r3, [pc, #92]	; (8000c80 <flashInit+0xb8>)
 8000c24:	4a1c      	ldr	r2, [pc, #112]	; (8000c98 <flashInit+0xd0>)
 8000c26:	631a      	str	r2, [r3, #48]	; 0x30
  flash_tbl[6].length  = 128*1024;
 8000c28:	4b15      	ldr	r3, [pc, #84]	; (8000c80 <flashInit+0xb8>)
 8000c2a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000c2e:	635a      	str	r2, [r3, #52]	; 0x34

  flash_tbl[7].address = 0x08060000;
 8000c30:	4b13      	ldr	r3, [pc, #76]	; (8000c80 <flashInit+0xb8>)
 8000c32:	4a1a      	ldr	r2, [pc, #104]	; (8000c9c <flashInit+0xd4>)
 8000c34:	639a      	str	r2, [r3, #56]	; 0x38
  flash_tbl[7].length  = 128*1024;
 8000c36:	4b12      	ldr	r3, [pc, #72]	; (8000c80 <flashInit+0xb8>)
 8000c38:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000c3c:	63da      	str	r2, [r3, #60]	; 0x3c

  flash_tbl[8].address = 0x08080000;
 8000c3e:	4b10      	ldr	r3, [pc, #64]	; (8000c80 <flashInit+0xb8>)
 8000c40:	4a17      	ldr	r2, [pc, #92]	; (8000ca0 <flashInit+0xd8>)
 8000c42:	641a      	str	r2, [r3, #64]	; 0x40
  flash_tbl[8].length  = 128*1024;
 8000c44:	4b0e      	ldr	r3, [pc, #56]	; (8000c80 <flashInit+0xb8>)
 8000c46:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000c4a:	645a      	str	r2, [r3, #68]	; 0x44

  flash_tbl[9].address = 0x080A0000;
 8000c4c:	4b0c      	ldr	r3, [pc, #48]	; (8000c80 <flashInit+0xb8>)
 8000c4e:	4a15      	ldr	r2, [pc, #84]	; (8000ca4 <flashInit+0xdc>)
 8000c50:	649a      	str	r2, [r3, #72]	; 0x48
  flash_tbl[9].length  = 128*1024;
 8000c52:	4b0b      	ldr	r3, [pc, #44]	; (8000c80 <flashInit+0xb8>)
 8000c54:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000c58:	64da      	str	r2, [r3, #76]	; 0x4c

  flash_tbl[10].address = 0x080C0000;
 8000c5a:	4b09      	ldr	r3, [pc, #36]	; (8000c80 <flashInit+0xb8>)
 8000c5c:	4a12      	ldr	r2, [pc, #72]	; (8000ca8 <flashInit+0xe0>)
 8000c5e:	651a      	str	r2, [r3, #80]	; 0x50
  flash_tbl[10].length  = 128*1024;
 8000c60:	4b07      	ldr	r3, [pc, #28]	; (8000c80 <flashInit+0xb8>)
 8000c62:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000c66:	655a      	str	r2, [r3, #84]	; 0x54

  flash_tbl[11].address = 0x080E0000;
 8000c68:	4b05      	ldr	r3, [pc, #20]	; (8000c80 <flashInit+0xb8>)
 8000c6a:	4a10      	ldr	r2, [pc, #64]	; (8000cac <flashInit+0xe4>)
 8000c6c:	659a      	str	r2, [r3, #88]	; 0x58
  flash_tbl[11].length  = 128*1024;
 8000c6e:	4b04      	ldr	r3, [pc, #16]	; (8000c80 <flashInit+0xb8>)
 8000c70:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000c74:	65da      	str	r2, [r3, #92]	; 0x5c

}
 8000c76:	bf00      	nop
 8000c78:	46bd      	mov	sp, r7
 8000c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c7e:	4770      	bx	lr
 8000c80:	20000388 	.word	0x20000388
 8000c84:	08004000 	.word	0x08004000
 8000c88:	08008000 	.word	0x08008000
 8000c8c:	0800c000 	.word	0x0800c000
 8000c90:	08010000 	.word	0x08010000
 8000c94:	08020000 	.word	0x08020000
 8000c98:	08040000 	.word	0x08040000
 8000c9c:	08060000 	.word	0x08060000
 8000ca0:	08080000 	.word	0x08080000
 8000ca4:	080a0000 	.word	0x080a0000
 8000ca8:	080c0000 	.word	0x080c0000
 8000cac:	080e0000 	.word	0x080e0000

08000cb0 <flashErase>:

bool flashErase(uint32_t addr, uint32_t length)
{
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	b08c      	sub	sp, #48	; 0x30
 8000cb4:	af00      	add	r7, sp, #0
 8000cb6:	6078      	str	r0, [r7, #4]
 8000cb8:	6039      	str	r1, [r7, #0]
  bool ret = true;
 8000cba:	2301      	movs	r3, #1
 8000cbc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  int32_t first_page = 0;
 8000cc0:	2300      	movs	r3, #0
 8000cc2:	62bb      	str	r3, [r7, #40]	; 0x28
  int32_t num_page = 0;
 8000cc4:	2300      	movs	r3, #0
 8000cc6:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t SECTORError = 0;
 8000cc8:	2300      	movs	r3, #0
 8000cca:	623b      	str	r3, [r7, #32]
  FLASH_EraseInitTypeDef EraseInitStruct;



  HAL_FLASH_Unlock();
 8000ccc:	f001 fa8a 	bl	80021e4 <HAL_FLASH_Unlock>



  first_page = getPage(addr);
 8000cd0:	6878      	ldr	r0, [r7, #4]
 8000cd2:	f000 f8b9 	bl	8000e48 <getPage>
 8000cd6:	62b8      	str	r0, [r7, #40]	; 0x28
  num_page   = getPage(addr + length - 1) - first_page + 1;
 8000cd8:	687a      	ldr	r2, [r7, #4]
 8000cda:	683b      	ldr	r3, [r7, #0]
 8000cdc:	4413      	add	r3, r2
 8000cde:	3b01      	subs	r3, #1
 8000ce0:	4618      	mov	r0, r3
 8000ce2:	f000 f8b1 	bl	8000e48 <getPage>
 8000ce6:	4602      	mov	r2, r0
 8000ce8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000cea:	1ad3      	subs	r3, r2, r3
 8000cec:	3301      	adds	r3, #1
 8000cee:	627b      	str	r3, [r7, #36]	; 0x24


  if (first_page < 0)
 8000cf0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	da01      	bge.n	8000cfa <flashErase+0x4a>
  {
    return false;
 8000cf6:	2300      	movs	r3, #0
 8000cf8:	e049      	b.n	8000d8e <flashErase+0xde>
  }

  EraseInitStruct.TypeErase = FLASH_TYPEERASE_SECTORS;
 8000cfa:	2300      	movs	r3, #0
 8000cfc:	60fb      	str	r3, [r7, #12]
  EraseInitStruct.VoltageRange = FLASH_VOLTAGE_RANGE_3;
 8000cfe:	2302      	movs	r3, #2
 8000d00:	61fb      	str	r3, [r7, #28]
  EraseInitStruct.Sector = first_page;
 8000d02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000d04:	617b      	str	r3, [r7, #20]
  EraseInitStruct.NbSectors = num_page;
 8000d06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d08:	61bb      	str	r3, [r7, #24]

  if (HAL_FLASHEx_Erase(&EraseInitStruct, &SECTORError) != HAL_OK)
 8000d0a:	f107 0220 	add.w	r2, r7, #32
 8000d0e:	f107 030c 	add.w	r3, r7, #12
 8000d12:	4611      	mov	r1, r2
 8000d14:	4618      	mov	r0, r3
 8000d16:	f001 fbc5 	bl	80024a4 <HAL_FLASHEx_Erase>
 8000d1a:	4603      	mov	r3, r0
 8000d1c:	2b00      	cmp	r3, #0
 8000d1e:	d002      	beq.n	8000d26 <flashErase+0x76>
  {
    ret = false;
 8000d20:	2300      	movs	r3, #0
 8000d22:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  /* Note: If an erase operation in Flash memory also concerns data in the data or instruction cache,
     you have to make sure that these data are rewritten before they are accessed during code
     execution. If this cannot be done safely, it is recommended to flush the caches by setting the
     DCRST and ICRST bits in the FLASH_CR register. */
  __HAL_FLASH_DATA_CACHE_DISABLE();
 8000d26:	4b1c      	ldr	r3, [pc, #112]	; (8000d98 <flashErase+0xe8>)
 8000d28:	681b      	ldr	r3, [r3, #0]
 8000d2a:	4a1b      	ldr	r2, [pc, #108]	; (8000d98 <flashErase+0xe8>)
 8000d2c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8000d30:	6013      	str	r3, [r2, #0]
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8000d32:	4b19      	ldr	r3, [pc, #100]	; (8000d98 <flashErase+0xe8>)
 8000d34:	681b      	ldr	r3, [r3, #0]
 8000d36:	4a18      	ldr	r2, [pc, #96]	; (8000d98 <flashErase+0xe8>)
 8000d38:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8000d3c:	6013      	str	r3, [r2, #0]

  __HAL_FLASH_DATA_CACHE_RESET();
 8000d3e:	4b16      	ldr	r3, [pc, #88]	; (8000d98 <flashErase+0xe8>)
 8000d40:	681b      	ldr	r3, [r3, #0]
 8000d42:	4a15      	ldr	r2, [pc, #84]	; (8000d98 <flashErase+0xe8>)
 8000d44:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000d48:	6013      	str	r3, [r2, #0]
 8000d4a:	4b13      	ldr	r3, [pc, #76]	; (8000d98 <flashErase+0xe8>)
 8000d4c:	681b      	ldr	r3, [r3, #0]
 8000d4e:	4a12      	ldr	r2, [pc, #72]	; (8000d98 <flashErase+0xe8>)
 8000d50:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8000d54:	6013      	str	r3, [r2, #0]
  __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8000d56:	4b10      	ldr	r3, [pc, #64]	; (8000d98 <flashErase+0xe8>)
 8000d58:	681b      	ldr	r3, [r3, #0]
 8000d5a:	4a0f      	ldr	r2, [pc, #60]	; (8000d98 <flashErase+0xe8>)
 8000d5c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000d60:	6013      	str	r3, [r2, #0]
 8000d62:	4b0d      	ldr	r3, [pc, #52]	; (8000d98 <flashErase+0xe8>)
 8000d64:	681b      	ldr	r3, [r3, #0]
 8000d66:	4a0c      	ldr	r2, [pc, #48]	; (8000d98 <flashErase+0xe8>)
 8000d68:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8000d6c:	6013      	str	r3, [r2, #0]

  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000d6e:	4b0a      	ldr	r3, [pc, #40]	; (8000d98 <flashErase+0xe8>)
 8000d70:	681b      	ldr	r3, [r3, #0]
 8000d72:	4a09      	ldr	r2, [pc, #36]	; (8000d98 <flashErase+0xe8>)
 8000d74:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000d78:	6013      	str	r3, [r2, #0]
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000d7a:	4b07      	ldr	r3, [pc, #28]	; (8000d98 <flashErase+0xe8>)
 8000d7c:	681b      	ldr	r3, [r3, #0]
 8000d7e:	4a06      	ldr	r2, [pc, #24]	; (8000d98 <flashErase+0xe8>)
 8000d80:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000d84:	6013      	str	r3, [r2, #0]

  HAL_FLASH_Lock();
 8000d86:	f001 fa4f 	bl	8002228 <HAL_FLASH_Lock>


  return ret;
 8000d8a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8000d8e:	4618      	mov	r0, r3
 8000d90:	3730      	adds	r7, #48	; 0x30
 8000d92:	46bd      	mov	sp, r7
 8000d94:	bd80      	pop	{r7, pc}
 8000d96:	bf00      	nop
 8000d98:	40023c00 	.word	0x40023c00

08000d9c <flashWrite>:


// f405 128bit write

bool flashWrite(uint32_t addr, uint8_t *p_data, uint32_t length)
{
 8000d9c:	b590      	push	{r4, r7, lr}
 8000d9e:	b089      	sub	sp, #36	; 0x24
 8000da0:	af00      	add	r7, sp, #0
 8000da2:	60f8      	str	r0, [r7, #12]
 8000da4:	60b9      	str	r1, [r7, #8]
 8000da6:	607a      	str	r2, [r7, #4]
  bool ret = true;
 8000da8:	2301      	movs	r3, #1
 8000daa:	77fb      	strb	r3, [r7, #31]
  uint64_t data;

  HAL_FLASH_Unlock();
 8000dac:	f001 fa1a 	bl	80021e4 <HAL_FLASH_Unlock>

  for (uint32_t i=0; i<length; i++)
 8000db0:	2300      	movs	r3, #0
 8000db2:	61bb      	str	r3, [r7, #24]
 8000db4:	e019      	b.n	8000dea <flashWrite+0x4e>
  {
    data = p_data[i];
 8000db6:	68ba      	ldr	r2, [r7, #8]
 8000db8:	69bb      	ldr	r3, [r7, #24]
 8000dba:	4413      	add	r3, r2
 8000dbc:	781b      	ldrb	r3, [r3, #0]
 8000dbe:	b2db      	uxtb	r3, r3
 8000dc0:	f04f 0400 	mov.w	r4, #0
 8000dc4:	e9c7 3404 	strd	r3, r4, [r7, #16]

    if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_BYTE, addr + i, data) != HAL_OK)
 8000dc8:	68fa      	ldr	r2, [r7, #12]
 8000dca:	69bb      	ldr	r3, [r7, #24]
 8000dcc:	18d1      	adds	r1, r2, r3
 8000dce:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8000dd2:	2000      	movs	r0, #0
 8000dd4:	f001 f9b2 	bl	800213c <HAL_FLASH_Program>
 8000dd8:	4603      	mov	r3, r0
 8000dda:	2b00      	cmp	r3, #0
 8000ddc:	d002      	beq.n	8000de4 <flashWrite+0x48>
    {
      ret = false;
 8000dde:	2300      	movs	r3, #0
 8000de0:	77fb      	strb	r3, [r7, #31]
      break;
 8000de2:	e006      	b.n	8000df2 <flashWrite+0x56>
  for (uint32_t i=0; i<length; i++)
 8000de4:	69bb      	ldr	r3, [r7, #24]
 8000de6:	3301      	adds	r3, #1
 8000de8:	61bb      	str	r3, [r7, #24]
 8000dea:	69ba      	ldr	r2, [r7, #24]
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	429a      	cmp	r2, r3
 8000df0:	d3e1      	bcc.n	8000db6 <flashWrite+0x1a>
    }
  }

  HAL_FLASH_Lock();
 8000df2:	f001 fa19 	bl	8002228 <HAL_FLASH_Lock>

  return ret;
 8000df6:	7ffb      	ldrb	r3, [r7, #31]
}
 8000df8:	4618      	mov	r0, r3
 8000dfa:	3724      	adds	r7, #36	; 0x24
 8000dfc:	46bd      	mov	sp, r7
 8000dfe:	bd90      	pop	{r4, r7, pc}

08000e00 <flashRead>:
bool flashRead(uint32_t addr, uint8_t *p_data, uint32_t length)
{
 8000e00:	b480      	push	{r7}
 8000e02:	b089      	sub	sp, #36	; 0x24
 8000e04:	af00      	add	r7, sp, #0
 8000e06:	60f8      	str	r0, [r7, #12]
 8000e08:	60b9      	str	r1, [r7, #8]
 8000e0a:	607a      	str	r2, [r7, #4]
  bool ret = true;
 8000e0c:	2301      	movs	r3, #1
 8000e0e:	76fb      	strb	r3, [r7, #27]
  uint8_t *p_byte = (uint8_t *)addr;
 8000e10:	68fb      	ldr	r3, [r7, #12]
 8000e12:	617b      	str	r3, [r7, #20]


  for (int i=0; i<length; i++)
 8000e14:	2300      	movs	r3, #0
 8000e16:	61fb      	str	r3, [r7, #28]
 8000e18:	e00a      	b.n	8000e30 <flashRead+0x30>
  {
    p_data[i] = p_byte[i];
 8000e1a:	69fb      	ldr	r3, [r7, #28]
 8000e1c:	697a      	ldr	r2, [r7, #20]
 8000e1e:	441a      	add	r2, r3
 8000e20:	69fb      	ldr	r3, [r7, #28]
 8000e22:	68b9      	ldr	r1, [r7, #8]
 8000e24:	440b      	add	r3, r1
 8000e26:	7812      	ldrb	r2, [r2, #0]
 8000e28:	701a      	strb	r2, [r3, #0]
  for (int i=0; i<length; i++)
 8000e2a:	69fb      	ldr	r3, [r7, #28]
 8000e2c:	3301      	adds	r3, #1
 8000e2e:	61fb      	str	r3, [r7, #28]
 8000e30:	69fb      	ldr	r3, [r7, #28]
 8000e32:	687a      	ldr	r2, [r7, #4]
 8000e34:	429a      	cmp	r2, r3
 8000e36:	d8f0      	bhi.n	8000e1a <flashRead+0x1a>
  }

  return ret;
 8000e38:	7efb      	ldrb	r3, [r7, #27]
}
 8000e3a:	4618      	mov	r0, r3
 8000e3c:	3724      	adds	r7, #36	; 0x24
 8000e3e:	46bd      	mov	sp, r7
 8000e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e44:	4770      	bx	lr
	...

08000e48 <getPage>:

static int32_t getPage(uint32_t address)
{
 8000e48:	b480      	push	{r7}
 8000e4a:	b085      	sub	sp, #20
 8000e4c:	af00      	add	r7, sp, #0
 8000e4e:	6078      	str	r0, [r7, #4]
  uint32_t i;
  int32_t page = -1;
 8000e50:	f04f 33ff 	mov.w	r3, #4294967295
 8000e54:	60bb      	str	r3, [r7, #8]


  for (i=0; i<FLASH_MAX_PAGE_COUNT; i++)
 8000e56:	2300      	movs	r3, #0
 8000e58:	60fb      	str	r3, [r7, #12]
 8000e5a:	e019      	b.n	8000e90 <getPage+0x48>
  {
    if (address >= flash_tbl[i].address && address < (flash_tbl[i].address + flash_tbl[i].length))
 8000e5c:	4a11      	ldr	r2, [pc, #68]	; (8000ea4 <getPage+0x5c>)
 8000e5e:	68fb      	ldr	r3, [r7, #12]
 8000e60:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8000e64:	687a      	ldr	r2, [r7, #4]
 8000e66:	429a      	cmp	r2, r3
 8000e68:	d30f      	bcc.n	8000e8a <getPage+0x42>
 8000e6a:	4a0e      	ldr	r2, [pc, #56]	; (8000ea4 <getPage+0x5c>)
 8000e6c:	68fb      	ldr	r3, [r7, #12]
 8000e6e:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8000e72:	490c      	ldr	r1, [pc, #48]	; (8000ea4 <getPage+0x5c>)
 8000e74:	68fb      	ldr	r3, [r7, #12]
 8000e76:	00db      	lsls	r3, r3, #3
 8000e78:	440b      	add	r3, r1
 8000e7a:	685b      	ldr	r3, [r3, #4]
 8000e7c:	4413      	add	r3, r2
 8000e7e:	687a      	ldr	r2, [r7, #4]
 8000e80:	429a      	cmp	r2, r3
 8000e82:	d202      	bcs.n	8000e8a <getPage+0x42>
    {
      page = i;
 8000e84:	68fb      	ldr	r3, [r7, #12]
 8000e86:	60bb      	str	r3, [r7, #8]
      break;
 8000e88:	e005      	b.n	8000e96 <getPage+0x4e>
  for (i=0; i<FLASH_MAX_PAGE_COUNT; i++)
 8000e8a:	68fb      	ldr	r3, [r7, #12]
 8000e8c:	3301      	adds	r3, #1
 8000e8e:	60fb      	str	r3, [r7, #12]
 8000e90:	68fb      	ldr	r3, [r7, #12]
 8000e92:	2b0b      	cmp	r3, #11
 8000e94:	d9e2      	bls.n	8000e5c <getPage+0x14>
    }
  }

  return page;
 8000e96:	68bb      	ldr	r3, [r7, #8]
}
 8000e98:	4618      	mov	r0, r3
 8000e9a:	3714      	adds	r7, #20
 8000e9c:	46bd      	mov	sp, r7
 8000e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea2:	4770      	bx	lr
 8000ea4:	20000388 	.word	0x20000388

08000ea8 <ledInit>:
        {GPIOB, GPIO_PIN_11, GPIO_PIN_RESET, GPIO_PIN_SET},
        {GPIOC, GPIO_PIN_8, GPIO_PIN_RESET, GPIO_PIN_SET},
    };

bool ledInit(void)
{
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	b08c      	sub	sp, #48	; 0x30
 8000eac:	af00      	add	r7, sp, #0
  bool ret = true;
 8000eae:	2301      	movs	r3, #1
 8000eb0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000eb4:	f107 0314 	add.w	r3, r7, #20
 8000eb8:	2200      	movs	r2, #0
 8000eba:	601a      	str	r2, [r3, #0]
 8000ebc:	605a      	str	r2, [r3, #4]
 8000ebe:	609a      	str	r2, [r3, #8]
 8000ec0:	60da      	str	r2, [r3, #12]
 8000ec2:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000ec4:	2300      	movs	r3, #0
 8000ec6:	613b      	str	r3, [r7, #16]
 8000ec8:	4b2f      	ldr	r3, [pc, #188]	; (8000f88 <ledInit+0xe0>)
 8000eca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ecc:	4a2e      	ldr	r2, [pc, #184]	; (8000f88 <ledInit+0xe0>)
 8000ece:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000ed2:	6313      	str	r3, [r2, #48]	; 0x30
 8000ed4:	4b2c      	ldr	r3, [pc, #176]	; (8000f88 <ledInit+0xe0>)
 8000ed6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ed8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000edc:	613b      	str	r3, [r7, #16]
 8000ede:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ee0:	2300      	movs	r3, #0
 8000ee2:	60fb      	str	r3, [r7, #12]
 8000ee4:	4b28      	ldr	r3, [pc, #160]	; (8000f88 <ledInit+0xe0>)
 8000ee6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ee8:	4a27      	ldr	r2, [pc, #156]	; (8000f88 <ledInit+0xe0>)
 8000eea:	f043 0302 	orr.w	r3, r3, #2
 8000eee:	6313      	str	r3, [r2, #48]	; 0x30
 8000ef0:	4b25      	ldr	r3, [pc, #148]	; (8000f88 <ledInit+0xe0>)
 8000ef2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ef4:	f003 0302 	and.w	r3, r3, #2
 8000ef8:	60fb      	str	r3, [r7, #12]
 8000efa:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000efc:	2300      	movs	r3, #0
 8000efe:	60bb      	str	r3, [r7, #8]
 8000f00:	4b21      	ldr	r3, [pc, #132]	; (8000f88 <ledInit+0xe0>)
 8000f02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f04:	4a20      	ldr	r2, [pc, #128]	; (8000f88 <ledInit+0xe0>)
 8000f06:	f043 0304 	orr.w	r3, r3, #4
 8000f0a:	6313      	str	r3, [r2, #48]	; 0x30
 8000f0c:	4b1e      	ldr	r3, [pc, #120]	; (8000f88 <ledInit+0xe0>)
 8000f0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f10:	f003 0304 	and.w	r3, r3, #4
 8000f14:	60bb      	str	r3, [r7, #8]
 8000f16:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f18:	2300      	movs	r3, #0
 8000f1a:	607b      	str	r3, [r7, #4]
 8000f1c:	4b1a      	ldr	r3, [pc, #104]	; (8000f88 <ledInit+0xe0>)
 8000f1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f20:	4a19      	ldr	r2, [pc, #100]	; (8000f88 <ledInit+0xe0>)
 8000f22:	f043 0301 	orr.w	r3, r3, #1
 8000f26:	6313      	str	r3, [r2, #48]	; 0x30
 8000f28:	4b17      	ldr	r3, [pc, #92]	; (8000f88 <ledInit+0xe0>)
 8000f2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f2c:	f003 0301 	and.w	r3, r3, #1
 8000f30:	607b      	str	r3, [r7, #4]
 8000f32:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pins : PB2 PB11 PC8 */
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f34:	2301      	movs	r3, #1
 8000f36:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f38:	2300      	movs	r3, #0
 8000f3a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f3c:	2300      	movs	r3, #0
 8000f3e:	623b      	str	r3, [r7, #32]

  for(int i=0; i<LED_MAX_CH; i++)
 8000f40:	2300      	movs	r3, #0
 8000f42:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000f44:	e017      	b.n	8000f76 <ledInit+0xce>
  {
    GPIO_InitStruct.Pin = led_tbl[i].pin;
 8000f46:	4a11      	ldr	r2, [pc, #68]	; (8000f8c <ledInit+0xe4>)
 8000f48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000f4a:	00db      	lsls	r3, r3, #3
 8000f4c:	4413      	add	r3, r2
 8000f4e:	889b      	ldrh	r3, [r3, #4]
 8000f50:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(led_tbl[i].port, &GPIO_InitStruct);
 8000f52:	4a0e      	ldr	r2, [pc, #56]	; (8000f8c <ledInit+0xe4>)
 8000f54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000f56:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8000f5a:	f107 0214 	add.w	r2, r7, #20
 8000f5e:	4611      	mov	r1, r2
 8000f60:	4618      	mov	r0, r3
 8000f62:	f001 fbc1 	bl	80026e8 <HAL_GPIO_Init>

    ledOff(i);
 8000f66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000f68:	b2db      	uxtb	r3, r3
 8000f6a:	4618      	mov	r0, r3
 8000f6c:	f000 f810 	bl	8000f90 <ledOff>
  for(int i=0; i<LED_MAX_CH; i++)
 8000f70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000f72:	3301      	adds	r3, #1
 8000f74:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000f76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000f78:	2b02      	cmp	r3, #2
 8000f7a:	dde4      	ble.n	8000f46 <ledInit+0x9e>
  }
  return ret;
 8000f7c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8000f80:	4618      	mov	r0, r3
 8000f82:	3730      	adds	r7, #48	; 0x30
 8000f84:	46bd      	mov	sp, r7
 8000f86:	bd80      	pop	{r7, pc}
 8000f88:	40023800 	.word	0x40023800
 8000f8c:	20000004 	.word	0x20000004

08000f90 <ledOff>:

  HAL_GPIO_WritePin(led_tbl[ch].port, led_tbl[ch].pin, led_tbl[ch].on_state);
}

void ledOff(uint8_t ch)
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	b082      	sub	sp, #8
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	4603      	mov	r3, r0
 8000f98:	71fb      	strb	r3, [r7, #7]
  if(ch >= LED_MAX_CH) return;
 8000f9a:	79fb      	ldrb	r3, [r7, #7]
 8000f9c:	2b02      	cmp	r3, #2
 8000f9e:	d811      	bhi.n	8000fc4 <ledOff+0x34>

  HAL_GPIO_WritePin(led_tbl[ch].port, led_tbl[ch].pin, led_tbl[ch].off_state);
 8000fa0:	79fb      	ldrb	r3, [r7, #7]
 8000fa2:	4a0a      	ldr	r2, [pc, #40]	; (8000fcc <ledOff+0x3c>)
 8000fa4:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8000fa8:	79fb      	ldrb	r3, [r7, #7]
 8000faa:	4a08      	ldr	r2, [pc, #32]	; (8000fcc <ledOff+0x3c>)
 8000fac:	00db      	lsls	r3, r3, #3
 8000fae:	4413      	add	r3, r2
 8000fb0:	8899      	ldrh	r1, [r3, #4]
 8000fb2:	79fb      	ldrb	r3, [r7, #7]
 8000fb4:	4a05      	ldr	r2, [pc, #20]	; (8000fcc <ledOff+0x3c>)
 8000fb6:	00db      	lsls	r3, r3, #3
 8000fb8:	4413      	add	r3, r2
 8000fba:	79db      	ldrb	r3, [r3, #7]
 8000fbc:	461a      	mov	r2, r3
 8000fbe:	f001 fe27 	bl	8002c10 <HAL_GPIO_WritePin>
 8000fc2:	e000      	b.n	8000fc6 <ledOff+0x36>
  if(ch >= LED_MAX_CH) return;
 8000fc4:	bf00      	nop
}
 8000fc6:	3708      	adds	r7, #8
 8000fc8:	46bd      	mov	sp, r7
 8000fca:	bd80      	pop	{r7, pc}
 8000fcc:	20000004 	.word	0x20000004

08000fd0 <ledToggle>:

void ledToggle(uint8_t ch)
{
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	b082      	sub	sp, #8
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	4603      	mov	r3, r0
 8000fd8:	71fb      	strb	r3, [r7, #7]
  if(ch >= LED_MAX_CH) return;
 8000fda:	79fb      	ldrb	r3, [r7, #7]
 8000fdc:	2b02      	cmp	r3, #2
 8000fde:	d80c      	bhi.n	8000ffa <ledToggle+0x2a>

  HAL_GPIO_TogglePin(led_tbl[ch].port, led_tbl[ch].pin);
 8000fe0:	79fb      	ldrb	r3, [r7, #7]
 8000fe2:	4a08      	ldr	r2, [pc, #32]	; (8001004 <ledToggle+0x34>)
 8000fe4:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8000fe8:	79fb      	ldrb	r3, [r7, #7]
 8000fea:	4a06      	ldr	r2, [pc, #24]	; (8001004 <ledToggle+0x34>)
 8000fec:	00db      	lsls	r3, r3, #3
 8000fee:	4413      	add	r3, r2
 8000ff0:	889b      	ldrh	r3, [r3, #4]
 8000ff2:	4619      	mov	r1, r3
 8000ff4:	f001 fe25 	bl	8002c42 <HAL_GPIO_TogglePin>
 8000ff8:	e000      	b.n	8000ffc <ledToggle+0x2c>
  if(ch >= LED_MAX_CH) return;
 8000ffa:	bf00      	nop

}
 8000ffc:	3708      	adds	r7, #8
 8000ffe:	46bd      	mov	sp, r7
 8001000:	bd80      	pop	{r7, pc}
 8001002:	bf00      	nop
 8001004:	20000004 	.word	0x20000004

08001008 <resetInit>:
#include "rtc.h"

static uint32_t reset_count = 0;

bool resetInit(void)
{
 8001008:	b580      	push	{r7, lr}
 800100a:	b082      	sub	sp, #8
 800100c:	af00      	add	r7, sp, #0
  bool ret = true;
 800100e:	2301      	movs	r3, #1
 8001010:	71fb      	strb	r3, [r7, #7]

  // if Reset btn clicked
  if(RCC->CSR & (1<<26))
 8001012:	4b11      	ldr	r3, [pc, #68]	; (8001058 <resetInit+0x50>)
 8001014:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001016:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800101a:	2b00      	cmp	r3, #0
 800101c:	d012      	beq.n	8001044 <resetInit+0x3c>
  {
    rtcBackupRegWrite(1, rtcbackupRegRead(1) + 1);
 800101e:	2001      	movs	r0, #1
 8001020:	f000 f86a 	bl	80010f8 <rtcbackupRegRead>
 8001024:	4603      	mov	r3, r0
 8001026:	3301      	adds	r3, #1
 8001028:	4619      	mov	r1, r3
 800102a:	2001      	movs	r0, #1
 800102c:	f000 f854 	bl	80010d8 <rtcBackupRegWrite>
    delay(500);
 8001030:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001034:	f7ff fb5e 	bl	80006f4 <delay>
    reset_count = rtcbackupRegRead(1);
 8001038:	2001      	movs	r0, #1
 800103a:	f000 f85d 	bl	80010f8 <rtcbackupRegRead>
 800103e:	4602      	mov	r2, r0
 8001040:	4b06      	ldr	r3, [pc, #24]	; (800105c <resetInit+0x54>)
 8001042:	601a      	str	r2, [r3, #0]
  }

  rtcBackupRegWrite(1, 0);
 8001044:	2100      	movs	r1, #0
 8001046:	2001      	movs	r0, #1
 8001048:	f000 f846 	bl	80010d8 <rtcBackupRegWrite>


  return ret;
 800104c:	79fb      	ldrb	r3, [r7, #7]
}
 800104e:	4618      	mov	r0, r3
 8001050:	3708      	adds	r7, #8
 8001052:	46bd      	mov	sp, r7
 8001054:	bd80      	pop	{r7, pc}
 8001056:	bf00      	nop
 8001058:	40023800 	.word	0x40023800
 800105c:	20000228 	.word	0x20000228

08001060 <rtcInit>:
#include "rtc.h"

static RTC_HandleTypeDef hrtc;

bool rtcInit(void)
{
 8001060:	b580      	push	{r7, lr}
 8001062:	b082      	sub	sp, #8
 8001064:	af00      	add	r7, sp, #0
  bool ret = true;
 8001066:	2301      	movs	r3, #1
 8001068:	71fb      	strb	r3, [r7, #7]

  __HAL_RCC_GPIOC_CLK_ENABLE();
 800106a:	2300      	movs	r3, #0
 800106c:	603b      	str	r3, [r7, #0]
 800106e:	4b17      	ldr	r3, [pc, #92]	; (80010cc <rtcInit+0x6c>)
 8001070:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001072:	4a16      	ldr	r2, [pc, #88]	; (80010cc <rtcInit+0x6c>)
 8001074:	f043 0304 	orr.w	r3, r3, #4
 8001078:	6313      	str	r3, [r2, #48]	; 0x30
 800107a:	4b14      	ldr	r3, [pc, #80]	; (80010cc <rtcInit+0x6c>)
 800107c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800107e:	f003 0304 	and.w	r3, r3, #4
 8001082:	603b      	str	r3, [r7, #0]
 8001084:	683b      	ldr	r3, [r7, #0]

  hrtc.Instance = RTC;
 8001086:	4b12      	ldr	r3, [pc, #72]	; (80010d0 <rtcInit+0x70>)
 8001088:	4a12      	ldr	r2, [pc, #72]	; (80010d4 <rtcInit+0x74>)
 800108a:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800108c:	4b10      	ldr	r3, [pc, #64]	; (80010d0 <rtcInit+0x70>)
 800108e:	2200      	movs	r2, #0
 8001090:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8001092:	4b0f      	ldr	r3, [pc, #60]	; (80010d0 <rtcInit+0x70>)
 8001094:	227f      	movs	r2, #127	; 0x7f
 8001096:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8001098:	4b0d      	ldr	r3, [pc, #52]	; (80010d0 <rtcInit+0x70>)
 800109a:	22ff      	movs	r2, #255	; 0xff
 800109c:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 800109e:	4b0c      	ldr	r3, [pc, #48]	; (80010d0 <rtcInit+0x70>)
 80010a0:	2200      	movs	r2, #0
 80010a2:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80010a4:	4b0a      	ldr	r3, [pc, #40]	; (80010d0 <rtcInit+0x70>)
 80010a6:	2200      	movs	r2, #0
 80010a8:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80010aa:	4b09      	ldr	r3, [pc, #36]	; (80010d0 <rtcInit+0x70>)
 80010ac:	2200      	movs	r2, #0
 80010ae:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80010b0:	4807      	ldr	r0, [pc, #28]	; (80010d0 <rtcInit+0x70>)
 80010b2:	f003 fca9 	bl	8004a08 <HAL_RTC_Init>
 80010b6:	4603      	mov	r3, r0
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	d001      	beq.n	80010c0 <rtcInit+0x60>
  {
    Error_Handler();
 80010bc:	f7ff fbbc 	bl	8000838 <Error_Handler>
  }

  return ret;
 80010c0:	79fb      	ldrb	r3, [r7, #7]

}
 80010c2:	4618      	mov	r0, r3
 80010c4:	3708      	adds	r7, #8
 80010c6:	46bd      	mov	sp, r7
 80010c8:	bd80      	pop	{r7, pc}
 80010ca:	bf00      	nop
 80010cc:	40023800 	.word	0x40023800
 80010d0:	2000022c 	.word	0x2000022c
 80010d4:	40002800 	.word	0x40002800

080010d8 <rtcBackupRegWrite>:

void rtcBackupRegWrite(uint32_t index, uint32_t data)
{
 80010d8:	b580      	push	{r7, lr}
 80010da:	b082      	sub	sp, #8
 80010dc:	af00      	add	r7, sp, #0
 80010de:	6078      	str	r0, [r7, #4]
 80010e0:	6039      	str	r1, [r7, #0]

  HAL_RTCEx_BKUPWrite(&hrtc, index, data);
 80010e2:	683a      	ldr	r2, [r7, #0]
 80010e4:	6879      	ldr	r1, [r7, #4]
 80010e6:	4803      	ldr	r0, [pc, #12]	; (80010f4 <rtcBackupRegWrite+0x1c>)
 80010e8:	f003 fd73 	bl	8004bd2 <HAL_RTCEx_BKUPWrite>

}
 80010ec:	bf00      	nop
 80010ee:	3708      	adds	r7, #8
 80010f0:	46bd      	mov	sp, r7
 80010f2:	bd80      	pop	{r7, pc}
 80010f4:	2000022c 	.word	0x2000022c

080010f8 <rtcbackupRegRead>:

uint32_t rtcbackupRegRead(uint32_t index)
{
 80010f8:	b580      	push	{r7, lr}
 80010fa:	b082      	sub	sp, #8
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	6078      	str	r0, [r7, #4]
  return HAL_RTCEx_BKUPRead(&hrtc, index);
 8001100:	6879      	ldr	r1, [r7, #4]
 8001102:	4804      	ldr	r0, [pc, #16]	; (8001114 <rtcbackupRegRead+0x1c>)
 8001104:	f003 fd7f 	bl	8004c06 <HAL_RTCEx_BKUPRead>
 8001108:	4603      	mov	r3, r0
}
 800110a:	4618      	mov	r0, r3
 800110c:	3708      	adds	r7, #8
 800110e:	46bd      	mov	sp, r7
 8001110:	bd80      	pop	{r7, pc}
 8001112:	bf00      	nop
 8001114:	2000022c 	.word	0x2000022c

08001118 <HAL_RTC_MspInit>:


void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8001118:	b480      	push	{r7}
 800111a:	b083      	sub	sp, #12
 800111c:	af00      	add	r7, sp, #0
 800111e:	6078      	str	r0, [r7, #4]

  if(rtcHandle->Instance==RTC)
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	4a05      	ldr	r2, [pc, #20]	; (800113c <HAL_RTC_MspInit+0x24>)
 8001126:	4293      	cmp	r3, r2
 8001128:	d102      	bne.n	8001130 <HAL_RTC_MspInit+0x18>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 800112a:	4b05      	ldr	r3, [pc, #20]	; (8001140 <HAL_RTC_MspInit+0x28>)
 800112c:	2201      	movs	r2, #1
 800112e:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8001130:	bf00      	nop
 8001132:	370c      	adds	r7, #12
 8001134:	46bd      	mov	sp, r7
 8001136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800113a:	4770      	bx	lr
 800113c:	40002800 	.word	0x40002800
 8001140:	42470e3c 	.word	0x42470e3c

08001144 <uartInit>:

UART_HandleTypeDef huart1;
DMA_HandleTypeDef hdma_usart1_rx;

bool uartInit(void)
{
 8001144:	b480      	push	{r7}
 8001146:	b083      	sub	sp, #12
 8001148:	af00      	add	r7, sp, #0
  for(int i=0; i<UART_MAX_CH; i++)
 800114a:	2300      	movs	r3, #0
 800114c:	607b      	str	r3, [r7, #4]
 800114e:	e007      	b.n	8001160 <uartInit+0x1c>
  {
    is_open[i] = false;
 8001150:	4a08      	ldr	r2, [pc, #32]	; (8001174 <uartInit+0x30>)
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	4413      	add	r3, r2
 8001156:	2200      	movs	r2, #0
 8001158:	701a      	strb	r2, [r3, #0]
  for(int i=0; i<UART_MAX_CH; i++)
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	3301      	adds	r3, #1
 800115e:	607b      	str	r3, [r7, #4]
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	2b01      	cmp	r3, #1
 8001164:	ddf4      	ble.n	8001150 <uartInit+0xc>
  }

  return true;
 8001166:	2301      	movs	r3, #1

}
 8001168:	4618      	mov	r0, r3
 800116a:	370c      	adds	r7, #12
 800116c:	46bd      	mov	sp, r7
 800116e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001172:	4770      	bx	lr
 8001174:	2000024c 	.word	0x2000024c

08001178 <uartOpen>:

bool uartOpen(uint8_t ch, uint32_t baud)
{
 8001178:	b580      	push	{r7, lr}
 800117a:	b084      	sub	sp, #16
 800117c:	af00      	add	r7, sp, #0
 800117e:	4603      	mov	r3, r0
 8001180:	6039      	str	r1, [r7, #0]
 8001182:	71fb      	strb	r3, [r7, #7]
  bool ret = false;
 8001184:	2300      	movs	r3, #0
 8001186:	73fb      	strb	r3, [r7, #15]

  switch(ch)
 8001188:	79fb      	ldrb	r3, [r7, #7]
 800118a:	2b00      	cmp	r3, #0
 800118c:	d002      	beq.n	8001194 <uartOpen+0x1c>
 800118e:	2b01      	cmp	r3, #1
 8001190:	d007      	beq.n	80011a2 <uartOpen+0x2a>
 8001192:	e076      	b.n	8001282 <uartOpen+0x10a>
  {
    case _DEF_UART1:
      is_open[ch] = true;
 8001194:	79fb      	ldrb	r3, [r7, #7]
 8001196:	4a3d      	ldr	r2, [pc, #244]	; (800128c <uartOpen+0x114>)
 8001198:	2101      	movs	r1, #1
 800119a:	54d1      	strb	r1, [r2, r3]
      ret = true;
 800119c:	2301      	movs	r3, #1
 800119e:	73fb      	strb	r3, [r7, #15]
      break;
 80011a0:	e06f      	b.n	8001282 <uartOpen+0x10a>

    case _DEF_UART2:
      huart1.Instance = USART1;
 80011a2:	4b3b      	ldr	r3, [pc, #236]	; (8001290 <uartOpen+0x118>)
 80011a4:	4a3b      	ldr	r2, [pc, #236]	; (8001294 <uartOpen+0x11c>)
 80011a6:	601a      	str	r2, [r3, #0]
      huart1.Init.BaudRate = baud;
 80011a8:	4a39      	ldr	r2, [pc, #228]	; (8001290 <uartOpen+0x118>)
 80011aa:	683b      	ldr	r3, [r7, #0]
 80011ac:	6053      	str	r3, [r2, #4]
      huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80011ae:	4b38      	ldr	r3, [pc, #224]	; (8001290 <uartOpen+0x118>)
 80011b0:	2200      	movs	r2, #0
 80011b2:	609a      	str	r2, [r3, #8]
      huart1.Init.StopBits = UART_STOPBITS_1;
 80011b4:	4b36      	ldr	r3, [pc, #216]	; (8001290 <uartOpen+0x118>)
 80011b6:	2200      	movs	r2, #0
 80011b8:	60da      	str	r2, [r3, #12]
      huart1.Init.Parity = UART_PARITY_NONE;
 80011ba:	4b35      	ldr	r3, [pc, #212]	; (8001290 <uartOpen+0x118>)
 80011bc:	2200      	movs	r2, #0
 80011be:	611a      	str	r2, [r3, #16]
      huart1.Init.Mode = UART_MODE_TX_RX;
 80011c0:	4b33      	ldr	r3, [pc, #204]	; (8001290 <uartOpen+0x118>)
 80011c2:	220c      	movs	r2, #12
 80011c4:	615a      	str	r2, [r3, #20]
      huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80011c6:	4b32      	ldr	r3, [pc, #200]	; (8001290 <uartOpen+0x118>)
 80011c8:	2200      	movs	r2, #0
 80011ca:	619a      	str	r2, [r3, #24]
      huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80011cc:	4b30      	ldr	r3, [pc, #192]	; (8001290 <uartOpen+0x118>)
 80011ce:	2200      	movs	r2, #0
 80011d0:	61da      	str	r2, [r3, #28]

      HAL_UART_DeInit(&huart1);
 80011d2:	482f      	ldr	r0, [pc, #188]	; (8001290 <uartOpen+0x118>)
 80011d4:	f003 fd7c 	bl	8004cd0 <HAL_UART_DeInit>

      qbufferCreat(&qbuffer[ch], &rx_buf[0], 256);
 80011d8:	79fb      	ldrb	r3, [r7, #7]
 80011da:	011b      	lsls	r3, r3, #4
 80011dc:	4a2e      	ldr	r2, [pc, #184]	; (8001298 <uartOpen+0x120>)
 80011de:	4413      	add	r3, r2
 80011e0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80011e4:	492d      	ldr	r1, [pc, #180]	; (800129c <uartOpen+0x124>)
 80011e6:	4618      	mov	r0, r3
 80011e8:	f7ff fc7d 	bl	8000ae6 <qbufferCreat>

      __HAL_RCC_DMA2_CLK_ENABLE();
 80011ec:	2300      	movs	r3, #0
 80011ee:	60bb      	str	r3, [r7, #8]
 80011f0:	4b2b      	ldr	r3, [pc, #172]	; (80012a0 <uartOpen+0x128>)
 80011f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011f4:	4a2a      	ldr	r2, [pc, #168]	; (80012a0 <uartOpen+0x128>)
 80011f6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80011fa:	6313      	str	r3, [r2, #48]	; 0x30
 80011fc:	4b28      	ldr	r3, [pc, #160]	; (80012a0 <uartOpen+0x128>)
 80011fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001200:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001204:	60bb      	str	r3, [r7, #8]
 8001206:	68bb      	ldr	r3, [r7, #8]

      HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 8001208:	2200      	movs	r2, #0
 800120a:	2100      	movs	r1, #0
 800120c:	203a      	movs	r0, #58	; 0x3a
 800120e:	f000 fb62 	bl	80018d6 <HAL_NVIC_SetPriority>
      HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8001212:	203a      	movs	r0, #58	; 0x3a
 8001214:	f000 fb7b 	bl	800190e <HAL_NVIC_EnableIRQ>



      if (HAL_UART_Init(&huart1) != HAL_OK)
 8001218:	481d      	ldr	r0, [pc, #116]	; (8001290 <uartOpen+0x118>)
 800121a:	f003 fd0c 	bl	8004c36 <HAL_UART_Init>
 800121e:	4603      	mov	r3, r0
 8001220:	2b00      	cmp	r3, #0
 8001222:	d002      	beq.n	800122a <uartOpen+0xb2>
      {
        ret = false;
 8001224:	2300      	movs	r3, #0
 8001226:	73fb      	strb	r3, [r7, #15]
        }

        qbuffer[ch].in = qbuffer[ch].len - hdma_usart1_rx.Instance -> NDTR;
        qbuffer[ch].out = qbuffer[ch].in;
      }
      break;
 8001228:	e02a      	b.n	8001280 <uartOpen+0x108>
        ret = true;
 800122a:	2301      	movs	r3, #1
 800122c:	73fb      	strb	r3, [r7, #15]
        is_open[ch] = true;
 800122e:	79fb      	ldrb	r3, [r7, #7]
 8001230:	4a16      	ldr	r2, [pc, #88]	; (800128c <uartOpen+0x114>)
 8001232:	2101      	movs	r1, #1
 8001234:	54d1      	strb	r1, [r2, r3]
        if(HAL_UART_Receive_DMA(&huart1, (uint8_t *)&rx_buf[0], 256) != HAL_OK)
 8001236:	f44f 7280 	mov.w	r2, #256	; 0x100
 800123a:	4918      	ldr	r1, [pc, #96]	; (800129c <uartOpen+0x124>)
 800123c:	4814      	ldr	r0, [pc, #80]	; (8001290 <uartOpen+0x118>)
 800123e:	f003 fe0d 	bl	8004e5c <HAL_UART_Receive_DMA>
 8001242:	4603      	mov	r3, r0
 8001244:	2b00      	cmp	r3, #0
 8001246:	d001      	beq.n	800124c <uartOpen+0xd4>
          ret = false;
 8001248:	2300      	movs	r3, #0
 800124a:	73fb      	strb	r3, [r7, #15]
        qbuffer[ch].in = qbuffer[ch].len - hdma_usart1_rx.Instance -> NDTR;
 800124c:	79fb      	ldrb	r3, [r7, #7]
 800124e:	4a12      	ldr	r2, [pc, #72]	; (8001298 <uartOpen+0x120>)
 8001250:	011b      	lsls	r3, r3, #4
 8001252:	4413      	add	r3, r2
 8001254:	3308      	adds	r3, #8
 8001256:	6819      	ldr	r1, [r3, #0]
 8001258:	4b12      	ldr	r3, [pc, #72]	; (80012a4 <uartOpen+0x12c>)
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	685a      	ldr	r2, [r3, #4]
 800125e:	79fb      	ldrb	r3, [r7, #7]
 8001260:	1a8a      	subs	r2, r1, r2
 8001262:	490d      	ldr	r1, [pc, #52]	; (8001298 <uartOpen+0x120>)
 8001264:	011b      	lsls	r3, r3, #4
 8001266:	440b      	add	r3, r1
 8001268:	601a      	str	r2, [r3, #0]
        qbuffer[ch].out = qbuffer[ch].in;
 800126a:	79fa      	ldrb	r2, [r7, #7]
 800126c:	79fb      	ldrb	r3, [r7, #7]
 800126e:	490a      	ldr	r1, [pc, #40]	; (8001298 <uartOpen+0x120>)
 8001270:	0112      	lsls	r2, r2, #4
 8001272:	440a      	add	r2, r1
 8001274:	6812      	ldr	r2, [r2, #0]
 8001276:	4908      	ldr	r1, [pc, #32]	; (8001298 <uartOpen+0x120>)
 8001278:	011b      	lsls	r3, r3, #4
 800127a:	440b      	add	r3, r1
 800127c:	3304      	adds	r3, #4
 800127e:	601a      	str	r2, [r3, #0]
      break;
 8001280:	bf00      	nop

  }

  return ret;
 8001282:	7bfb      	ldrb	r3, [r7, #15]

}
 8001284:	4618      	mov	r0, r3
 8001286:	3710      	adds	r7, #16
 8001288:	46bd      	mov	sp, r7
 800128a:	bd80      	pop	{r7, pc}
 800128c:	2000024c 	.word	0x2000024c
 8001290:	20000448 	.word	0x20000448
 8001294:	40011000 	.word	0x40011000
 8001298:	20000250 	.word	0x20000250
 800129c:	20000270 	.word	0x20000270
 80012a0:	40023800 	.word	0x40023800
 80012a4:	200003e8 	.word	0x200003e8

080012a8 <uartAvailable>:

uint32_t uartAvailable(uint8_t ch)
{
 80012a8:	b580      	push	{r7, lr}
 80012aa:	b084      	sub	sp, #16
 80012ac:	af00      	add	r7, sp, #0
 80012ae:	4603      	mov	r3, r0
 80012b0:	71fb      	strb	r3, [r7, #7]
  uint32_t ret = 0;
 80012b2:	2300      	movs	r3, #0
 80012b4:	60fb      	str	r3, [r7, #12]

  switch(ch)
 80012b6:	79fb      	ldrb	r3, [r7, #7]
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d002      	beq.n	80012c2 <uartAvailable+0x1a>
 80012bc:	2b01      	cmp	r3, #1
 80012be:	d004      	beq.n	80012ca <uartAvailable+0x22>
 80012c0:	e017      	b.n	80012f2 <uartAvailable+0x4a>
  {
    case _DEF_UART1:
      ret = cdcAvailable();
 80012c2:	f007 fc4b 	bl	8008b5c <cdcAvailable>
 80012c6:	60f8      	str	r0, [r7, #12]
      break;
 80012c8:	e013      	b.n	80012f2 <uartAvailable+0x4a>

    case _DEF_UART2:
      qbuffer[ch].in = (qbuffer[ch].len - hdma_usart1_rx.Instance -> NDTR);
 80012ca:	79fb      	ldrb	r3, [r7, #7]
 80012cc:	4a0b      	ldr	r2, [pc, #44]	; (80012fc <uartAvailable+0x54>)
 80012ce:	011b      	lsls	r3, r3, #4
 80012d0:	4413      	add	r3, r2
 80012d2:	3308      	adds	r3, #8
 80012d4:	6819      	ldr	r1, [r3, #0]
 80012d6:	4b0a      	ldr	r3, [pc, #40]	; (8001300 <uartAvailable+0x58>)
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	685a      	ldr	r2, [r3, #4]
 80012dc:	79fb      	ldrb	r3, [r7, #7]
 80012de:	1a8a      	subs	r2, r1, r2
 80012e0:	4906      	ldr	r1, [pc, #24]	; (80012fc <uartAvailable+0x54>)
 80012e2:	011b      	lsls	r3, r3, #4
 80012e4:	440b      	add	r3, r1
 80012e6:	601a      	str	r2, [r3, #0]
      ret = qbufferAvailable(&qbuffer[_DEF_UART2]);
 80012e8:	4806      	ldr	r0, [pc, #24]	; (8001304 <uartAvailable+0x5c>)
 80012ea:	f7ff fc54 	bl	8000b96 <qbufferAvailable>
 80012ee:	60f8      	str	r0, [r7, #12]
      break;
 80012f0:	bf00      	nop
  }

  return ret;
 80012f2:	68fb      	ldr	r3, [r7, #12]

}
 80012f4:	4618      	mov	r0, r3
 80012f6:	3710      	adds	r7, #16
 80012f8:	46bd      	mov	sp, r7
 80012fa:	bd80      	pop	{r7, pc}
 80012fc:	20000250 	.word	0x20000250
 8001300:	200003e8 	.word	0x200003e8
 8001304:	20000260 	.word	0x20000260

08001308 <uartRead>:

uint8_t uartRead(uint8_t ch)
{
 8001308:	b580      	push	{r7, lr}
 800130a:	b084      	sub	sp, #16
 800130c:	af00      	add	r7, sp, #0
 800130e:	4603      	mov	r3, r0
 8001310:	71fb      	strb	r3, [r7, #7]
  uint8_t ret;

  switch(ch)
 8001312:	79fb      	ldrb	r3, [r7, #7]
 8001314:	2b00      	cmp	r3, #0
 8001316:	d002      	beq.n	800131e <uartRead+0x16>
 8001318:	2b01      	cmp	r3, #1
 800131a:	d005      	beq.n	8001328 <uartRead+0x20>
 800131c:	e00c      	b.n	8001338 <uartRead+0x30>
  {
    case _DEF_UART1:
      ret = cdcRead();
 800131e:	f007 fc3b 	bl	8008b98 <cdcRead>
 8001322:	4603      	mov	r3, r0
 8001324:	73fb      	strb	r3, [r7, #15]
      break;
 8001326:	e007      	b.n	8001338 <uartRead+0x30>

    case _DEF_UART2:
      qbufferRead(&qbuffer[_DEF_UART2], &ret, 1);
 8001328:	f107 030f 	add.w	r3, r7, #15
 800132c:	2201      	movs	r2, #1
 800132e:	4619      	mov	r1, r3
 8001330:	4804      	ldr	r0, [pc, #16]	; (8001344 <uartRead+0x3c>)
 8001332:	f7ff fbf3 	bl	8000b1c <qbufferRead>
      break;
 8001336:	bf00      	nop
  }

  return ret;
 8001338:	7bfb      	ldrb	r3, [r7, #15]

}
 800133a:	4618      	mov	r0, r3
 800133c:	3710      	adds	r7, #16
 800133e:	46bd      	mov	sp, r7
 8001340:	bd80      	pop	{r7, pc}
 8001342:	bf00      	nop
 8001344:	20000260 	.word	0x20000260

08001348 <uartWrite>:

uint32_t uartWrite(uint8_t ch, uint8_t *p_data, uint32_t length)
{
 8001348:	b580      	push	{r7, lr}
 800134a:	b086      	sub	sp, #24
 800134c:	af00      	add	r7, sp, #0
 800134e:	4603      	mov	r3, r0
 8001350:	60b9      	str	r1, [r7, #8]
 8001352:	607a      	str	r2, [r7, #4]
 8001354:	73fb      	strb	r3, [r7, #15]
  uint32_t ret = 0;
 8001356:	2300      	movs	r3, #0
 8001358:	617b      	str	r3, [r7, #20]
  HAL_StatusTypeDef status;

  switch(ch)
 800135a:	7bfb      	ldrb	r3, [r7, #15]
 800135c:	2b00      	cmp	r3, #0
 800135e:	d002      	beq.n	8001366 <uartWrite+0x1e>
 8001360:	2b01      	cmp	r3, #1
 8001362:	d006      	beq.n	8001372 <uartWrite+0x2a>
 8001364:	e014      	b.n	8001390 <uartWrite+0x48>
  {
    case _DEF_UART1:
      ret = cdcWrite(p_data, length);
 8001366:	6879      	ldr	r1, [r7, #4]
 8001368:	68b8      	ldr	r0, [r7, #8]
 800136a:	f007 fc6b 	bl	8008c44 <cdcWrite>
 800136e:	6178      	str	r0, [r7, #20]
      break;
 8001370:	e00e      	b.n	8001390 <uartWrite+0x48>

    case _DEF_UART2:
      status = HAL_UART_Transmit(&huart1, p_data, length, 100);
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	b29a      	uxth	r2, r3
 8001376:	2364      	movs	r3, #100	; 0x64
 8001378:	68b9      	ldr	r1, [r7, #8]
 800137a:	4808      	ldr	r0, [pc, #32]	; (800139c <uartWrite+0x54>)
 800137c:	f003 fcd4 	bl	8004d28 <HAL_UART_Transmit>
 8001380:	4603      	mov	r3, r0
 8001382:	74fb      	strb	r3, [r7, #19]
      if(status == HAL_OK)
 8001384:	7cfb      	ldrb	r3, [r7, #19]
 8001386:	2b00      	cmp	r3, #0
 8001388:	d101      	bne.n	800138e <uartWrite+0x46>
      {
        ret = length;
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	617b      	str	r3, [r7, #20]
      }
      break;
 800138e:	bf00      	nop
  }

  return ret;
 8001390:	697b      	ldr	r3, [r7, #20]


}
 8001392:	4618      	mov	r0, r3
 8001394:	3718      	adds	r7, #24
 8001396:	46bd      	mov	sp, r7
 8001398:	bd80      	pop	{r7, pc}
 800139a:	bf00      	nop
 800139c:	20000448 	.word	0x20000448

080013a0 <HAL_UART_RxCpltCallback>:
}



void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80013a0:	b480      	push	{r7}
 80013a2:	b083      	sub	sp, #12
 80013a4:	af00      	add	r7, sp, #0
 80013a6:	6078      	str	r0, [r7, #4]
    qbufferWrite(&qbuffer[_DEF_UART2], &rx_data[_DEF_UART2], 1);

    HAL_UART_Receive_IT(&huart1, (uint8_t *)&rx_data[_DEF_UART2], 1);
  }
#endif
}
 80013a8:	bf00      	nop
 80013aa:	370c      	adds	r7, #12
 80013ac:	46bd      	mov	sp, r7
 80013ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b2:	4770      	bx	lr

080013b4 <HAL_UART_ErrorCallback>:

void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80013b4:	b480      	push	{r7}
 80013b6:	b083      	sub	sp, #12
 80013b8:	af00      	add	r7, sp, #0
 80013ba:	6078      	str	r0, [r7, #4]
  if (huart->Instance == USART1)
  {

  }
}
 80013bc:	bf00      	nop
 80013be:	370c      	adds	r7, #12
 80013c0:	46bd      	mov	sp, r7
 80013c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c6:	4770      	bx	lr

080013c8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80013c8:	b580      	push	{r7, lr}
 80013ca:	b08a      	sub	sp, #40	; 0x28
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013d0:	f107 0314 	add.w	r3, r7, #20
 80013d4:	2200      	movs	r2, #0
 80013d6:	601a      	str	r2, [r3, #0]
 80013d8:	605a      	str	r2, [r3, #4]
 80013da:	609a      	str	r2, [r3, #8]
 80013dc:	60da      	str	r2, [r3, #12]
 80013de:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	4a35      	ldr	r2, [pc, #212]	; (80014bc <HAL_UART_MspInit+0xf4>)
 80013e6:	4293      	cmp	r3, r2
 80013e8:	d163      	bne.n	80014b2 <HAL_UART_MspInit+0xea>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80013ea:	2300      	movs	r3, #0
 80013ec:	613b      	str	r3, [r7, #16]
 80013ee:	4b34      	ldr	r3, [pc, #208]	; (80014c0 <HAL_UART_MspInit+0xf8>)
 80013f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013f2:	4a33      	ldr	r2, [pc, #204]	; (80014c0 <HAL_UART_MspInit+0xf8>)
 80013f4:	f043 0310 	orr.w	r3, r3, #16
 80013f8:	6453      	str	r3, [r2, #68]	; 0x44
 80013fa:	4b31      	ldr	r3, [pc, #196]	; (80014c0 <HAL_UART_MspInit+0xf8>)
 80013fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013fe:	f003 0310 	and.w	r3, r3, #16
 8001402:	613b      	str	r3, [r7, #16]
 8001404:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001406:	2300      	movs	r3, #0
 8001408:	60fb      	str	r3, [r7, #12]
 800140a:	4b2d      	ldr	r3, [pc, #180]	; (80014c0 <HAL_UART_MspInit+0xf8>)
 800140c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800140e:	4a2c      	ldr	r2, [pc, #176]	; (80014c0 <HAL_UART_MspInit+0xf8>)
 8001410:	f043 0301 	orr.w	r3, r3, #1
 8001414:	6313      	str	r3, [r2, #48]	; 0x30
 8001416:	4b2a      	ldr	r3, [pc, #168]	; (80014c0 <HAL_UART_MspInit+0xf8>)
 8001418:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800141a:	f003 0301 	and.w	r3, r3, #1
 800141e:	60fb      	str	r3, [r7, #12]
 8001420:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001422:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001426:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001428:	2302      	movs	r3, #2
 800142a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800142c:	2300      	movs	r3, #0
 800142e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001430:	2303      	movs	r3, #3
 8001432:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001434:	2307      	movs	r3, #7
 8001436:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001438:	f107 0314 	add.w	r3, r7, #20
 800143c:	4619      	mov	r1, r3
 800143e:	4821      	ldr	r0, [pc, #132]	; (80014c4 <HAL_UART_MspInit+0xfc>)
 8001440:	f001 f952 	bl	80026e8 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream2;
 8001444:	4b20      	ldr	r3, [pc, #128]	; (80014c8 <HAL_UART_MspInit+0x100>)
 8001446:	4a21      	ldr	r2, [pc, #132]	; (80014cc <HAL_UART_MspInit+0x104>)
 8001448:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 800144a:	4b1f      	ldr	r3, [pc, #124]	; (80014c8 <HAL_UART_MspInit+0x100>)
 800144c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001450:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001452:	4b1d      	ldr	r3, [pc, #116]	; (80014c8 <HAL_UART_MspInit+0x100>)
 8001454:	2200      	movs	r2, #0
 8001456:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001458:	4b1b      	ldr	r3, [pc, #108]	; (80014c8 <HAL_UART_MspInit+0x100>)
 800145a:	2200      	movs	r2, #0
 800145c:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800145e:	4b1a      	ldr	r3, [pc, #104]	; (80014c8 <HAL_UART_MspInit+0x100>)
 8001460:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001464:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001466:	4b18      	ldr	r3, [pc, #96]	; (80014c8 <HAL_UART_MspInit+0x100>)
 8001468:	2200      	movs	r2, #0
 800146a:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800146c:	4b16      	ldr	r3, [pc, #88]	; (80014c8 <HAL_UART_MspInit+0x100>)
 800146e:	2200      	movs	r2, #0
 8001470:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 8001472:	4b15      	ldr	r3, [pc, #84]	; (80014c8 <HAL_UART_MspInit+0x100>)
 8001474:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001478:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 800147a:	4b13      	ldr	r3, [pc, #76]	; (80014c8 <HAL_UART_MspInit+0x100>)
 800147c:	2200      	movs	r2, #0
 800147e:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001480:	4b11      	ldr	r3, [pc, #68]	; (80014c8 <HAL_UART_MspInit+0x100>)
 8001482:	2200      	movs	r2, #0
 8001484:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8001486:	4810      	ldr	r0, [pc, #64]	; (80014c8 <HAL_UART_MspInit+0x100>)
 8001488:	f000 fa6a 	bl	8001960 <HAL_DMA_Init>
 800148c:	4603      	mov	r3, r0
 800148e:	2b00      	cmp	r3, #0
 8001490:	d001      	beq.n	8001496 <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 8001492:	f7ff f9d1 	bl	8000838 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	4a0b      	ldr	r2, [pc, #44]	; (80014c8 <HAL_UART_MspInit+0x100>)
 800149a:	635a      	str	r2, [r3, #52]	; 0x34
 800149c:	4a0a      	ldr	r2, [pc, #40]	; (80014c8 <HAL_UART_MspInit+0x100>)
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80014a2:	2200      	movs	r2, #0
 80014a4:	2100      	movs	r1, #0
 80014a6:	2025      	movs	r0, #37	; 0x25
 80014a8:	f000 fa15 	bl	80018d6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80014ac:	2025      	movs	r0, #37	; 0x25
 80014ae:	f000 fa2e 	bl	800190e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 80014b2:	bf00      	nop
 80014b4:	3728      	adds	r7, #40	; 0x28
 80014b6:	46bd      	mov	sp, r7
 80014b8:	bd80      	pop	{r7, pc}
 80014ba:	bf00      	nop
 80014bc:	40011000 	.word	0x40011000
 80014c0:	40023800 	.word	0x40023800
 80014c4:	40020000 	.word	0x40020000
 80014c8:	200003e8 	.word	0x200003e8
 80014cc:	40026440 	.word	0x40026440

080014d0 <HAL_UART_MspDeInit>:

void HAL_UART_MspDeInit(UART_HandleTypeDef* uartHandle)
{
 80014d0:	b580      	push	{r7, lr}
 80014d2:	b082      	sub	sp, #8
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	6078      	str	r0, [r7, #4]

  if(uartHandle->Instance==USART1)
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	4a0c      	ldr	r2, [pc, #48]	; (8001510 <HAL_UART_MspDeInit+0x40>)
 80014de:	4293      	cmp	r3, r2
 80014e0:	d112      	bne.n	8001508 <HAL_UART_MspDeInit+0x38>
  {
  /* USER CODE BEGIN USART1_MspDeInit 0 */

  /* USER CODE END USART1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USART1_CLK_DISABLE();
 80014e2:	4b0c      	ldr	r3, [pc, #48]	; (8001514 <HAL_UART_MspDeInit+0x44>)
 80014e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014e6:	4a0b      	ldr	r2, [pc, #44]	; (8001514 <HAL_UART_MspDeInit+0x44>)
 80014e8:	f023 0310 	bic.w	r3, r3, #16
 80014ec:	6453      	str	r3, [r2, #68]	; 0x44

    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_9|GPIO_PIN_10);
 80014ee:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80014f2:	4809      	ldr	r0, [pc, #36]	; (8001518 <HAL_UART_MspDeInit+0x48>)
 80014f4:	f001 fa92 	bl	8002a1c <HAL_GPIO_DeInit>

    /* USART1 DMA DeInit */
    HAL_DMA_DeInit(uartHandle->hdmarx);
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80014fc:	4618      	mov	r0, r3
 80014fe:	f000 fadd 	bl	8001abc <HAL_DMA_DeInit>

    /* USART1 interrupt Deinit */
    HAL_NVIC_DisableIRQ(USART1_IRQn);
 8001502:	2025      	movs	r0, #37	; 0x25
 8001504:	f000 fa11 	bl	800192a <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN USART1_MspDeInit 1 */

  /* USER CODE END USART1_MspDeInit 1 */
  }
}
 8001508:	bf00      	nop
 800150a:	3708      	adds	r7, #8
 800150c:	46bd      	mov	sp, r7
 800150e:	bd80      	pop	{r7, pc}
 8001510:	40011000 	.word	0x40011000
 8001514:	40023800 	.word	0x40023800
 8001518:	40020000 	.word	0x40020000

0800151c <usbInit>:


#include "usb.h"

bool usbInit(void)
{
 800151c:	b580      	push	{r7, lr}
 800151e:	b086      	sub	sp, #24
 8001520:	af00      	add	r7, sp, #0
  bool ret = true;
 8001522:	2301      	movs	r3, #1
 8001524:	75fb      	strb	r3, [r7, #23]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001526:	463b      	mov	r3, r7
 8001528:	2200      	movs	r2, #0
 800152a:	601a      	str	r2, [r3, #0]
 800152c:	605a      	str	r2, [r3, #4]
 800152e:	609a      	str	r2, [r3, #8]
 8001530:	60da      	str	r2, [r3, #12]
 8001532:	611a      	str	r2, [r3, #16]

  /*USB Reset GPIO at reset*/
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001534:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001538:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 800153a:	2311      	movs	r3, #17
 800153c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800153e:	2300      	movs	r3, #0
 8001540:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001542:	2300      	movs	r3, #0
 8001544:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001546:	463b      	mov	r3, r7
 8001548:	4619      	mov	r1, r3
 800154a:	4810      	ldr	r0, [pc, #64]	; (800158c <usbInit+0x70>)
 800154c:	f001 f8cc 	bl	80026e8 <HAL_GPIO_Init>

  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
 8001550:	2200      	movs	r2, #0
 8001552:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001556:	480d      	ldr	r0, [pc, #52]	; (800158c <usbInit+0x70>)
 8001558:	f001 fb5a 	bl	8002c10 <HAL_GPIO_WritePin>
  delay(100);
 800155c:	2064      	movs	r0, #100	; 0x64
 800155e:	f7ff f8c9 	bl	80006f4 <delay>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET);
 8001562:	2201      	movs	r2, #1
 8001564:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001568:	4808      	ldr	r0, [pc, #32]	; (800158c <usbInit+0x70>)
 800156a:	f001 fb51 	bl	8002c10 <HAL_GPIO_WritePin>

  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800156e:	2300      	movs	r3, #0
 8001570:	607b      	str	r3, [r7, #4]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001572:	463b      	mov	r3, r7
 8001574:	4619      	mov	r1, r3
 8001576:	4805      	ldr	r0, [pc, #20]	; (800158c <usbInit+0x70>)
 8001578:	f001 f8b6 	bl	80026e8 <HAL_GPIO_Init>


  MX_USB_DEVICE_Init();
 800157c:	f007 fabe 	bl	8008afc <MX_USB_DEVICE_Init>

  return ret;
 8001580:	7dfb      	ldrb	r3, [r7, #23]
}
 8001582:	4618      	mov	r0, r3
 8001584:	3718      	adds	r7, #24
 8001586:	46bd      	mov	sp, r7
 8001588:	bd80      	pop	{r7, pc}
 800158a:	bf00      	nop
 800158c:	40020000 	.word	0x40020000

08001590 <hwInit>:


#include "hw.h"

void hwInit(void)
{
 8001590:	b580      	push	{r7, lr}
 8001592:	af00      	add	r7, sp, #0

  bspInit();
 8001594:	f7ff f892 	bl	80006bc <bspInit>
  rtcInit();
 8001598:	f7ff fd62 	bl	8001060 <rtcInit>

  resetInit();
 800159c:	f7ff fd34 	bl	8001008 <resetInit>
  ledInit();
 80015a0:	f7ff fc82 	bl	8000ea8 <ledInit>
  usbInit();
 80015a4:	f7ff ffba 	bl	800151c <usbInit>
  uartInit();
 80015a8:	f7ff fdcc 	bl	8001144 <uartInit>
  flashInit();
 80015ac:	f7ff fb0c 	bl	8000bc8 <flashInit>

}
 80015b0:	bf00      	nop
 80015b2:	bd80      	pop	{r7, pc}

080015b4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80015b4:	b580      	push	{r7, lr}
 80015b6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80015b8:	4b0e      	ldr	r3, [pc, #56]	; (80015f4 <HAL_Init+0x40>)
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	4a0d      	ldr	r2, [pc, #52]	; (80015f4 <HAL_Init+0x40>)
 80015be:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80015c2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80015c4:	4b0b      	ldr	r3, [pc, #44]	; (80015f4 <HAL_Init+0x40>)
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	4a0a      	ldr	r2, [pc, #40]	; (80015f4 <HAL_Init+0x40>)
 80015ca:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80015ce:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80015d0:	4b08      	ldr	r3, [pc, #32]	; (80015f4 <HAL_Init+0x40>)
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	4a07      	ldr	r2, [pc, #28]	; (80015f4 <HAL_Init+0x40>)
 80015d6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80015da:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80015dc:	2003      	movs	r0, #3
 80015de:	f000 f96f 	bl	80018c0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80015e2:	2000      	movs	r0, #0
 80015e4:	f000 f808 	bl	80015f8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80015e8:	f7ff f92a 	bl	8000840 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80015ec:	2300      	movs	r3, #0
}
 80015ee:	4618      	mov	r0, r3
 80015f0:	bd80      	pop	{r7, pc}
 80015f2:	bf00      	nop
 80015f4:	40023c00 	.word	0x40023c00

080015f8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80015f8:	b580      	push	{r7, lr}
 80015fa:	b082      	sub	sp, #8
 80015fc:	af00      	add	r7, sp, #0
 80015fe:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001600:	4b12      	ldr	r3, [pc, #72]	; (800164c <HAL_InitTick+0x54>)
 8001602:	681a      	ldr	r2, [r3, #0]
 8001604:	4b12      	ldr	r3, [pc, #72]	; (8001650 <HAL_InitTick+0x58>)
 8001606:	781b      	ldrb	r3, [r3, #0]
 8001608:	4619      	mov	r1, r3
 800160a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800160e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001612:	fbb2 f3f3 	udiv	r3, r2, r3
 8001616:	4618      	mov	r0, r3
 8001618:	f000 f995 	bl	8001946 <HAL_SYSTICK_Config>
 800161c:	4603      	mov	r3, r0
 800161e:	2b00      	cmp	r3, #0
 8001620:	d001      	beq.n	8001626 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001622:	2301      	movs	r3, #1
 8001624:	e00e      	b.n	8001644 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	2b0f      	cmp	r3, #15
 800162a:	d80a      	bhi.n	8001642 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800162c:	2200      	movs	r2, #0
 800162e:	6879      	ldr	r1, [r7, #4]
 8001630:	f04f 30ff 	mov.w	r0, #4294967295
 8001634:	f000 f94f 	bl	80018d6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001638:	4a06      	ldr	r2, [pc, #24]	; (8001654 <HAL_InitTick+0x5c>)
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800163e:	2300      	movs	r3, #0
 8001640:	e000      	b.n	8001644 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001642:	2301      	movs	r3, #1
}
 8001644:	4618      	mov	r0, r3
 8001646:	3708      	adds	r7, #8
 8001648:	46bd      	mov	sp, r7
 800164a:	bd80      	pop	{r7, pc}
 800164c:	20000000 	.word	0x20000000
 8001650:	20000020 	.word	0x20000020
 8001654:	2000001c 	.word	0x2000001c

08001658 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001658:	b480      	push	{r7}
 800165a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800165c:	4b06      	ldr	r3, [pc, #24]	; (8001678 <HAL_IncTick+0x20>)
 800165e:	781b      	ldrb	r3, [r3, #0]
 8001660:	461a      	mov	r2, r3
 8001662:	4b06      	ldr	r3, [pc, #24]	; (800167c <HAL_IncTick+0x24>)
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	4413      	add	r3, r2
 8001668:	4a04      	ldr	r2, [pc, #16]	; (800167c <HAL_IncTick+0x24>)
 800166a:	6013      	str	r3, [r2, #0]
}
 800166c:	bf00      	nop
 800166e:	46bd      	mov	sp, r7
 8001670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001674:	4770      	bx	lr
 8001676:	bf00      	nop
 8001678:	20000020 	.word	0x20000020
 800167c:	20000488 	.word	0x20000488

08001680 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001680:	b480      	push	{r7}
 8001682:	af00      	add	r7, sp, #0
  return uwTick;
 8001684:	4b03      	ldr	r3, [pc, #12]	; (8001694 <HAL_GetTick+0x14>)
 8001686:	681b      	ldr	r3, [r3, #0]
}
 8001688:	4618      	mov	r0, r3
 800168a:	46bd      	mov	sp, r7
 800168c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001690:	4770      	bx	lr
 8001692:	bf00      	nop
 8001694:	20000488 	.word	0x20000488

08001698 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001698:	b580      	push	{r7, lr}
 800169a:	b084      	sub	sp, #16
 800169c:	af00      	add	r7, sp, #0
 800169e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80016a0:	f7ff ffee 	bl	8001680 <HAL_GetTick>
 80016a4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80016aa:	68fb      	ldr	r3, [r7, #12]
 80016ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80016b0:	d005      	beq.n	80016be <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80016b2:	4b09      	ldr	r3, [pc, #36]	; (80016d8 <HAL_Delay+0x40>)
 80016b4:	781b      	ldrb	r3, [r3, #0]
 80016b6:	461a      	mov	r2, r3
 80016b8:	68fb      	ldr	r3, [r7, #12]
 80016ba:	4413      	add	r3, r2
 80016bc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80016be:	bf00      	nop
 80016c0:	f7ff ffde 	bl	8001680 <HAL_GetTick>
 80016c4:	4602      	mov	r2, r0
 80016c6:	68bb      	ldr	r3, [r7, #8]
 80016c8:	1ad3      	subs	r3, r2, r3
 80016ca:	68fa      	ldr	r2, [r7, #12]
 80016cc:	429a      	cmp	r2, r3
 80016ce:	d8f7      	bhi.n	80016c0 <HAL_Delay+0x28>
  {
  }
}
 80016d0:	bf00      	nop
 80016d2:	3710      	adds	r7, #16
 80016d4:	46bd      	mov	sp, r7
 80016d6:	bd80      	pop	{r7, pc}
 80016d8:	20000020 	.word	0x20000020

080016dc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016dc:	b480      	push	{r7}
 80016de:	b085      	sub	sp, #20
 80016e0:	af00      	add	r7, sp, #0
 80016e2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	f003 0307 	and.w	r3, r3, #7
 80016ea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80016ec:	4b0c      	ldr	r3, [pc, #48]	; (8001720 <__NVIC_SetPriorityGrouping+0x44>)
 80016ee:	68db      	ldr	r3, [r3, #12]
 80016f0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80016f2:	68ba      	ldr	r2, [r7, #8]
 80016f4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80016f8:	4013      	ands	r3, r2
 80016fa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80016fc:	68fb      	ldr	r3, [r7, #12]
 80016fe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001700:	68bb      	ldr	r3, [r7, #8]
 8001702:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001704:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001708:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800170c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800170e:	4a04      	ldr	r2, [pc, #16]	; (8001720 <__NVIC_SetPriorityGrouping+0x44>)
 8001710:	68bb      	ldr	r3, [r7, #8]
 8001712:	60d3      	str	r3, [r2, #12]
}
 8001714:	bf00      	nop
 8001716:	3714      	adds	r7, #20
 8001718:	46bd      	mov	sp, r7
 800171a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800171e:	4770      	bx	lr
 8001720:	e000ed00 	.word	0xe000ed00

08001724 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001724:	b480      	push	{r7}
 8001726:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001728:	4b04      	ldr	r3, [pc, #16]	; (800173c <__NVIC_GetPriorityGrouping+0x18>)
 800172a:	68db      	ldr	r3, [r3, #12]
 800172c:	0a1b      	lsrs	r3, r3, #8
 800172e:	f003 0307 	and.w	r3, r3, #7
}
 8001732:	4618      	mov	r0, r3
 8001734:	46bd      	mov	sp, r7
 8001736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800173a:	4770      	bx	lr
 800173c:	e000ed00 	.word	0xe000ed00

08001740 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001740:	b480      	push	{r7}
 8001742:	b083      	sub	sp, #12
 8001744:	af00      	add	r7, sp, #0
 8001746:	4603      	mov	r3, r0
 8001748:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800174a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800174e:	2b00      	cmp	r3, #0
 8001750:	db0b      	blt.n	800176a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001752:	79fb      	ldrb	r3, [r7, #7]
 8001754:	f003 021f 	and.w	r2, r3, #31
 8001758:	4907      	ldr	r1, [pc, #28]	; (8001778 <__NVIC_EnableIRQ+0x38>)
 800175a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800175e:	095b      	lsrs	r3, r3, #5
 8001760:	2001      	movs	r0, #1
 8001762:	fa00 f202 	lsl.w	r2, r0, r2
 8001766:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800176a:	bf00      	nop
 800176c:	370c      	adds	r7, #12
 800176e:	46bd      	mov	sp, r7
 8001770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001774:	4770      	bx	lr
 8001776:	bf00      	nop
 8001778:	e000e100 	.word	0xe000e100

0800177c <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800177c:	b480      	push	{r7}
 800177e:	b083      	sub	sp, #12
 8001780:	af00      	add	r7, sp, #0
 8001782:	4603      	mov	r3, r0
 8001784:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001786:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800178a:	2b00      	cmp	r3, #0
 800178c:	db10      	blt.n	80017b0 <__NVIC_DisableIRQ+0x34>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800178e:	79fb      	ldrb	r3, [r7, #7]
 8001790:	f003 021f 	and.w	r2, r3, #31
 8001794:	4909      	ldr	r1, [pc, #36]	; (80017bc <__NVIC_DisableIRQ+0x40>)
 8001796:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800179a:	095b      	lsrs	r3, r3, #5
 800179c:	2001      	movs	r0, #1
 800179e:	fa00 f202 	lsl.w	r2, r0, r2
 80017a2:	3320      	adds	r3, #32
 80017a4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80017a8:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80017ac:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
  }
}
 80017b0:	bf00      	nop
 80017b2:	370c      	adds	r7, #12
 80017b4:	46bd      	mov	sp, r7
 80017b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ba:	4770      	bx	lr
 80017bc:	e000e100 	.word	0xe000e100

080017c0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80017c0:	b480      	push	{r7}
 80017c2:	b083      	sub	sp, #12
 80017c4:	af00      	add	r7, sp, #0
 80017c6:	4603      	mov	r3, r0
 80017c8:	6039      	str	r1, [r7, #0]
 80017ca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80017cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	db0a      	blt.n	80017ea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017d4:	683b      	ldr	r3, [r7, #0]
 80017d6:	b2da      	uxtb	r2, r3
 80017d8:	490c      	ldr	r1, [pc, #48]	; (800180c <__NVIC_SetPriority+0x4c>)
 80017da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017de:	0112      	lsls	r2, r2, #4
 80017e0:	b2d2      	uxtb	r2, r2
 80017e2:	440b      	add	r3, r1
 80017e4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80017e8:	e00a      	b.n	8001800 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017ea:	683b      	ldr	r3, [r7, #0]
 80017ec:	b2da      	uxtb	r2, r3
 80017ee:	4908      	ldr	r1, [pc, #32]	; (8001810 <__NVIC_SetPriority+0x50>)
 80017f0:	79fb      	ldrb	r3, [r7, #7]
 80017f2:	f003 030f 	and.w	r3, r3, #15
 80017f6:	3b04      	subs	r3, #4
 80017f8:	0112      	lsls	r2, r2, #4
 80017fa:	b2d2      	uxtb	r2, r2
 80017fc:	440b      	add	r3, r1
 80017fe:	761a      	strb	r2, [r3, #24]
}
 8001800:	bf00      	nop
 8001802:	370c      	adds	r7, #12
 8001804:	46bd      	mov	sp, r7
 8001806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800180a:	4770      	bx	lr
 800180c:	e000e100 	.word	0xe000e100
 8001810:	e000ed00 	.word	0xe000ed00

08001814 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001814:	b480      	push	{r7}
 8001816:	b089      	sub	sp, #36	; 0x24
 8001818:	af00      	add	r7, sp, #0
 800181a:	60f8      	str	r0, [r7, #12]
 800181c:	60b9      	str	r1, [r7, #8]
 800181e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001820:	68fb      	ldr	r3, [r7, #12]
 8001822:	f003 0307 	and.w	r3, r3, #7
 8001826:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001828:	69fb      	ldr	r3, [r7, #28]
 800182a:	f1c3 0307 	rsb	r3, r3, #7
 800182e:	2b04      	cmp	r3, #4
 8001830:	bf28      	it	cs
 8001832:	2304      	movcs	r3, #4
 8001834:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001836:	69fb      	ldr	r3, [r7, #28]
 8001838:	3304      	adds	r3, #4
 800183a:	2b06      	cmp	r3, #6
 800183c:	d902      	bls.n	8001844 <NVIC_EncodePriority+0x30>
 800183e:	69fb      	ldr	r3, [r7, #28]
 8001840:	3b03      	subs	r3, #3
 8001842:	e000      	b.n	8001846 <NVIC_EncodePriority+0x32>
 8001844:	2300      	movs	r3, #0
 8001846:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001848:	f04f 32ff 	mov.w	r2, #4294967295
 800184c:	69bb      	ldr	r3, [r7, #24]
 800184e:	fa02 f303 	lsl.w	r3, r2, r3
 8001852:	43da      	mvns	r2, r3
 8001854:	68bb      	ldr	r3, [r7, #8]
 8001856:	401a      	ands	r2, r3
 8001858:	697b      	ldr	r3, [r7, #20]
 800185a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800185c:	f04f 31ff 	mov.w	r1, #4294967295
 8001860:	697b      	ldr	r3, [r7, #20]
 8001862:	fa01 f303 	lsl.w	r3, r1, r3
 8001866:	43d9      	mvns	r1, r3
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800186c:	4313      	orrs	r3, r2
         );
}
 800186e:	4618      	mov	r0, r3
 8001870:	3724      	adds	r7, #36	; 0x24
 8001872:	46bd      	mov	sp, r7
 8001874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001878:	4770      	bx	lr
	...

0800187c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800187c:	b580      	push	{r7, lr}
 800187e:	b082      	sub	sp, #8
 8001880:	af00      	add	r7, sp, #0
 8001882:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	3b01      	subs	r3, #1
 8001888:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800188c:	d301      	bcc.n	8001892 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800188e:	2301      	movs	r3, #1
 8001890:	e00f      	b.n	80018b2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001892:	4a0a      	ldr	r2, [pc, #40]	; (80018bc <SysTick_Config+0x40>)
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	3b01      	subs	r3, #1
 8001898:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800189a:	210f      	movs	r1, #15
 800189c:	f04f 30ff 	mov.w	r0, #4294967295
 80018a0:	f7ff ff8e 	bl	80017c0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80018a4:	4b05      	ldr	r3, [pc, #20]	; (80018bc <SysTick_Config+0x40>)
 80018a6:	2200      	movs	r2, #0
 80018a8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80018aa:	4b04      	ldr	r3, [pc, #16]	; (80018bc <SysTick_Config+0x40>)
 80018ac:	2207      	movs	r2, #7
 80018ae:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80018b0:	2300      	movs	r3, #0
}
 80018b2:	4618      	mov	r0, r3
 80018b4:	3708      	adds	r7, #8
 80018b6:	46bd      	mov	sp, r7
 80018b8:	bd80      	pop	{r7, pc}
 80018ba:	bf00      	nop
 80018bc:	e000e010 	.word	0xe000e010

080018c0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80018c0:	b580      	push	{r7, lr}
 80018c2:	b082      	sub	sp, #8
 80018c4:	af00      	add	r7, sp, #0
 80018c6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80018c8:	6878      	ldr	r0, [r7, #4]
 80018ca:	f7ff ff07 	bl	80016dc <__NVIC_SetPriorityGrouping>
}
 80018ce:	bf00      	nop
 80018d0:	3708      	adds	r7, #8
 80018d2:	46bd      	mov	sp, r7
 80018d4:	bd80      	pop	{r7, pc}

080018d6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80018d6:	b580      	push	{r7, lr}
 80018d8:	b086      	sub	sp, #24
 80018da:	af00      	add	r7, sp, #0
 80018dc:	4603      	mov	r3, r0
 80018de:	60b9      	str	r1, [r7, #8]
 80018e0:	607a      	str	r2, [r7, #4]
 80018e2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80018e4:	2300      	movs	r3, #0
 80018e6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80018e8:	f7ff ff1c 	bl	8001724 <__NVIC_GetPriorityGrouping>
 80018ec:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80018ee:	687a      	ldr	r2, [r7, #4]
 80018f0:	68b9      	ldr	r1, [r7, #8]
 80018f2:	6978      	ldr	r0, [r7, #20]
 80018f4:	f7ff ff8e 	bl	8001814 <NVIC_EncodePriority>
 80018f8:	4602      	mov	r2, r0
 80018fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80018fe:	4611      	mov	r1, r2
 8001900:	4618      	mov	r0, r3
 8001902:	f7ff ff5d 	bl	80017c0 <__NVIC_SetPriority>
}
 8001906:	bf00      	nop
 8001908:	3718      	adds	r7, #24
 800190a:	46bd      	mov	sp, r7
 800190c:	bd80      	pop	{r7, pc}

0800190e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800190e:	b580      	push	{r7, lr}
 8001910:	b082      	sub	sp, #8
 8001912:	af00      	add	r7, sp, #0
 8001914:	4603      	mov	r3, r0
 8001916:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001918:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800191c:	4618      	mov	r0, r3
 800191e:	f7ff ff0f 	bl	8001740 <__NVIC_EnableIRQ>
}
 8001922:	bf00      	nop
 8001924:	3708      	adds	r7, #8
 8001926:	46bd      	mov	sp, r7
 8001928:	bd80      	pop	{r7, pc}

0800192a <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800192a:	b580      	push	{r7, lr}
 800192c:	b082      	sub	sp, #8
 800192e:	af00      	add	r7, sp, #0
 8001930:	4603      	mov	r3, r0
 8001932:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8001934:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001938:	4618      	mov	r0, r3
 800193a:	f7ff ff1f 	bl	800177c <__NVIC_DisableIRQ>
}
 800193e:	bf00      	nop
 8001940:	3708      	adds	r7, #8
 8001942:	46bd      	mov	sp, r7
 8001944:	bd80      	pop	{r7, pc}

08001946 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001946:	b580      	push	{r7, lr}
 8001948:	b082      	sub	sp, #8
 800194a:	af00      	add	r7, sp, #0
 800194c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800194e:	6878      	ldr	r0, [r7, #4]
 8001950:	f7ff ff94 	bl	800187c <SysTick_Config>
 8001954:	4603      	mov	r3, r0
}
 8001956:	4618      	mov	r0, r3
 8001958:	3708      	adds	r7, #8
 800195a:	46bd      	mov	sp, r7
 800195c:	bd80      	pop	{r7, pc}
	...

08001960 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001960:	b580      	push	{r7, lr}
 8001962:	b086      	sub	sp, #24
 8001964:	af00      	add	r7, sp, #0
 8001966:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001968:	2300      	movs	r3, #0
 800196a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800196c:	f7ff fe88 	bl	8001680 <HAL_GetTick>
 8001970:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	2b00      	cmp	r3, #0
 8001976:	d101      	bne.n	800197c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001978:	2301      	movs	r3, #1
 800197a:	e099      	b.n	8001ab0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	2200      	movs	r2, #0
 8001980:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	2202      	movs	r2, #2
 8001988:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	681a      	ldr	r2, [r3, #0]
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	f022 0201 	bic.w	r2, r2, #1
 800199a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800199c:	e00f      	b.n	80019be <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800199e:	f7ff fe6f 	bl	8001680 <HAL_GetTick>
 80019a2:	4602      	mov	r2, r0
 80019a4:	693b      	ldr	r3, [r7, #16]
 80019a6:	1ad3      	subs	r3, r2, r3
 80019a8:	2b05      	cmp	r3, #5
 80019aa:	d908      	bls.n	80019be <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	2220      	movs	r2, #32
 80019b0:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	2203      	movs	r2, #3
 80019b6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80019ba:	2303      	movs	r3, #3
 80019bc:	e078      	b.n	8001ab0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	f003 0301 	and.w	r3, r3, #1
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d1e8      	bne.n	800199e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80019d4:	697a      	ldr	r2, [r7, #20]
 80019d6:	4b38      	ldr	r3, [pc, #224]	; (8001ab8 <HAL_DMA_Init+0x158>)
 80019d8:	4013      	ands	r3, r2
 80019da:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	685a      	ldr	r2, [r3, #4]
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	689b      	ldr	r3, [r3, #8]
 80019e4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80019ea:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	691b      	ldr	r3, [r3, #16]
 80019f0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80019f6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	699b      	ldr	r3, [r3, #24]
 80019fc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001a02:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	6a1b      	ldr	r3, [r3, #32]
 8001a08:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001a0a:	697a      	ldr	r2, [r7, #20]
 8001a0c:	4313      	orrs	r3, r2
 8001a0e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a14:	2b04      	cmp	r3, #4
 8001a16:	d107      	bne.n	8001a28 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a20:	4313      	orrs	r3, r2
 8001a22:	697a      	ldr	r2, [r7, #20]
 8001a24:	4313      	orrs	r3, r2
 8001a26:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	697a      	ldr	r2, [r7, #20]
 8001a2e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	695b      	ldr	r3, [r3, #20]
 8001a36:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001a38:	697b      	ldr	r3, [r7, #20]
 8001a3a:	f023 0307 	bic.w	r3, r3, #7
 8001a3e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a44:	697a      	ldr	r2, [r7, #20]
 8001a46:	4313      	orrs	r3, r2
 8001a48:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a4e:	2b04      	cmp	r3, #4
 8001a50:	d117      	bne.n	8001a82 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a56:	697a      	ldr	r2, [r7, #20]
 8001a58:	4313      	orrs	r3, r2
 8001a5a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d00e      	beq.n	8001a82 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001a64:	6878      	ldr	r0, [r7, #4]
 8001a66:	f000 faef 	bl	8002048 <DMA_CheckFifoParam>
 8001a6a:	4603      	mov	r3, r0
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d008      	beq.n	8001a82 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	2240      	movs	r2, #64	; 0x40
 8001a74:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	2201      	movs	r2, #1
 8001a7a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001a7e:	2301      	movs	r3, #1
 8001a80:	e016      	b.n	8001ab0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	697a      	ldr	r2, [r7, #20]
 8001a88:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001a8a:	6878      	ldr	r0, [r7, #4]
 8001a8c:	f000 faa6 	bl	8001fdc <DMA_CalcBaseAndBitshift>
 8001a90:	4603      	mov	r3, r0
 8001a92:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a98:	223f      	movs	r2, #63	; 0x3f
 8001a9a:	409a      	lsls	r2, r3
 8001a9c:	68fb      	ldr	r3, [r7, #12]
 8001a9e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	2200      	movs	r2, #0
 8001aa4:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	2201      	movs	r2, #1
 8001aaa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001aae:	2300      	movs	r3, #0
}
 8001ab0:	4618      	mov	r0, r3
 8001ab2:	3718      	adds	r7, #24
 8001ab4:	46bd      	mov	sp, r7
 8001ab6:	bd80      	pop	{r7, pc}
 8001ab8:	f010803f 	.word	0xf010803f

08001abc <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8001abc:	b580      	push	{r7, lr}
 8001abe:	b084      	sub	sp, #16
 8001ac0:	af00      	add	r7, sp, #0
 8001ac2:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d101      	bne.n	8001ace <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8001aca:	2301      	movs	r3, #1
 8001acc:	e050      	b.n	8001b70 <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001ad4:	b2db      	uxtb	r3, r3
 8001ad6:	2b02      	cmp	r3, #2
 8001ad8:	d101      	bne.n	8001ade <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 8001ada:	2302      	movs	r3, #2
 8001adc:	e048      	b.n	8001b70 <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	681a      	ldr	r2, [r3, #0]
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	f022 0201 	bic.w	r2, r2, #1
 8001aec:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	2200      	movs	r2, #0
 8001af4:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	2200      	movs	r2, #0
 8001afc:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	2200      	movs	r2, #0
 8001b04:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	2200      	movs	r2, #0
 8001b0c:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	2200      	movs	r2, #0
 8001b14:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = 0x00000021U;
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	2221      	movs	r2, #33	; 0x21
 8001b1c:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001b1e:	6878      	ldr	r0, [r7, #4]
 8001b20:	f000 fa5c 	bl	8001fdc <DMA_CalcBaseAndBitshift>
 8001b24:	4603      	mov	r3, r0
 8001b26:	60fb      	str	r3, [r7, #12]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	2200      	movs	r2, #0
 8001b2c:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->XferHalfCpltCallback = NULL;
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	2200      	movs	r2, #0
 8001b32:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->XferM1CpltCallback = NULL;
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	2200      	movs	r2, #0
 8001b38:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	2200      	movs	r2, #0
 8001b3e:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->XferErrorCallback = NULL;
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	2200      	movs	r2, #0
 8001b44:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->XferAbortCallback = NULL;
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	2200      	movs	r2, #0
 8001b4a:	651a      	str	r2, [r3, #80]	; 0x50

  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b50:	223f      	movs	r2, #63	; 0x3f
 8001b52:	409a      	lsls	r2, r3
 8001b54:	68fb      	ldr	r3, [r7, #12]
 8001b56:	609a      	str	r2, [r3, #8]

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	2200      	movs	r2, #0
 8001b5c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	2200      	movs	r2, #0
 8001b62:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	2200      	movs	r2, #0
 8001b6a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8001b6e:	2300      	movs	r3, #0
}
 8001b70:	4618      	mov	r0, r3
 8001b72:	3710      	adds	r7, #16
 8001b74:	46bd      	mov	sp, r7
 8001b76:	bd80      	pop	{r7, pc}

08001b78 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001b78:	b580      	push	{r7, lr}
 8001b7a:	b086      	sub	sp, #24
 8001b7c:	af00      	add	r7, sp, #0
 8001b7e:	60f8      	str	r0, [r7, #12]
 8001b80:	60b9      	str	r1, [r7, #8]
 8001b82:	607a      	str	r2, [r7, #4]
 8001b84:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001b86:	2300      	movs	r3, #0
 8001b88:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001b8a:	68fb      	ldr	r3, [r7, #12]
 8001b8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b8e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001b96:	2b01      	cmp	r3, #1
 8001b98:	d101      	bne.n	8001b9e <HAL_DMA_Start_IT+0x26>
 8001b9a:	2302      	movs	r3, #2
 8001b9c:	e040      	b.n	8001c20 <HAL_DMA_Start_IT+0xa8>
 8001b9e:	68fb      	ldr	r3, [r7, #12]
 8001ba0:	2201      	movs	r2, #1
 8001ba2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001ba6:	68fb      	ldr	r3, [r7, #12]
 8001ba8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001bac:	b2db      	uxtb	r3, r3
 8001bae:	2b01      	cmp	r3, #1
 8001bb0:	d12f      	bne.n	8001c12 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001bb2:	68fb      	ldr	r3, [r7, #12]
 8001bb4:	2202      	movs	r2, #2
 8001bb6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001bba:	68fb      	ldr	r3, [r7, #12]
 8001bbc:	2200      	movs	r2, #0
 8001bbe:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001bc0:	683b      	ldr	r3, [r7, #0]
 8001bc2:	687a      	ldr	r2, [r7, #4]
 8001bc4:	68b9      	ldr	r1, [r7, #8]
 8001bc6:	68f8      	ldr	r0, [r7, #12]
 8001bc8:	f000 f9da 	bl	8001f80 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001bd0:	223f      	movs	r2, #63	; 0x3f
 8001bd2:	409a      	lsls	r2, r3
 8001bd4:	693b      	ldr	r3, [r7, #16]
 8001bd6:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	681a      	ldr	r2, [r3, #0]
 8001bde:	68fb      	ldr	r3, [r7, #12]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	f042 0216 	orr.w	r2, r2, #22
 8001be6:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001be8:	68fb      	ldr	r3, [r7, #12]
 8001bea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d007      	beq.n	8001c00 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	681a      	ldr	r2, [r3, #0]
 8001bf6:	68fb      	ldr	r3, [r7, #12]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	f042 0208 	orr.w	r2, r2, #8
 8001bfe:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001c00:	68fb      	ldr	r3, [r7, #12]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	681a      	ldr	r2, [r3, #0]
 8001c06:	68fb      	ldr	r3, [r7, #12]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	f042 0201 	orr.w	r2, r2, #1
 8001c0e:	601a      	str	r2, [r3, #0]
 8001c10:	e005      	b.n	8001c1e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001c12:	68fb      	ldr	r3, [r7, #12]
 8001c14:	2200      	movs	r2, #0
 8001c16:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001c1a:	2302      	movs	r3, #2
 8001c1c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001c1e:	7dfb      	ldrb	r3, [r7, #23]
}
 8001c20:	4618      	mov	r0, r3
 8001c22:	3718      	adds	r7, #24
 8001c24:	46bd      	mov	sp, r7
 8001c26:	bd80      	pop	{r7, pc}

08001c28 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001c28:	b480      	push	{r7}
 8001c2a:	b083      	sub	sp, #12
 8001c2c:	af00      	add	r7, sp, #0
 8001c2e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001c36:	b2db      	uxtb	r3, r3
 8001c38:	2b02      	cmp	r3, #2
 8001c3a:	d004      	beq.n	8001c46 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	2280      	movs	r2, #128	; 0x80
 8001c40:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001c42:	2301      	movs	r3, #1
 8001c44:	e00c      	b.n	8001c60 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	2205      	movs	r2, #5
 8001c4a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	681a      	ldr	r2, [r3, #0]
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	f022 0201 	bic.w	r2, r2, #1
 8001c5c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001c5e:	2300      	movs	r3, #0
}
 8001c60:	4618      	mov	r0, r3
 8001c62:	370c      	adds	r7, #12
 8001c64:	46bd      	mov	sp, r7
 8001c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c6a:	4770      	bx	lr

08001c6c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001c6c:	b580      	push	{r7, lr}
 8001c6e:	b086      	sub	sp, #24
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001c74:	2300      	movs	r3, #0
 8001c76:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001c78:	4b92      	ldr	r3, [pc, #584]	; (8001ec4 <HAL_DMA_IRQHandler+0x258>)
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	4a92      	ldr	r2, [pc, #584]	; (8001ec8 <HAL_DMA_IRQHandler+0x25c>)
 8001c7e:	fba2 2303 	umull	r2, r3, r2, r3
 8001c82:	0a9b      	lsrs	r3, r3, #10
 8001c84:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c8a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001c8c:	693b      	ldr	r3, [r7, #16]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c96:	2208      	movs	r2, #8
 8001c98:	409a      	lsls	r2, r3
 8001c9a:	68fb      	ldr	r3, [r7, #12]
 8001c9c:	4013      	ands	r3, r2
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d01a      	beq.n	8001cd8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	f003 0304 	and.w	r3, r3, #4
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d013      	beq.n	8001cd8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	681a      	ldr	r2, [r3, #0]
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	f022 0204 	bic.w	r2, r2, #4
 8001cbe:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001cc4:	2208      	movs	r2, #8
 8001cc6:	409a      	lsls	r2, r3
 8001cc8:	693b      	ldr	r3, [r7, #16]
 8001cca:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001cd0:	f043 0201 	orr.w	r2, r3, #1
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001cdc:	2201      	movs	r2, #1
 8001cde:	409a      	lsls	r2, r3
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	4013      	ands	r3, r2
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d012      	beq.n	8001d0e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	695b      	ldr	r3, [r3, #20]
 8001cee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d00b      	beq.n	8001d0e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001cfa:	2201      	movs	r2, #1
 8001cfc:	409a      	lsls	r2, r3
 8001cfe:	693b      	ldr	r3, [r7, #16]
 8001d00:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d06:	f043 0202 	orr.w	r2, r3, #2
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d12:	2204      	movs	r2, #4
 8001d14:	409a      	lsls	r2, r3
 8001d16:	68fb      	ldr	r3, [r7, #12]
 8001d18:	4013      	ands	r3, r2
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d012      	beq.n	8001d44 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	f003 0302 	and.w	r3, r3, #2
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d00b      	beq.n	8001d44 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d30:	2204      	movs	r2, #4
 8001d32:	409a      	lsls	r2, r3
 8001d34:	693b      	ldr	r3, [r7, #16]
 8001d36:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d3c:	f043 0204 	orr.w	r2, r3, #4
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d48:	2210      	movs	r2, #16
 8001d4a:	409a      	lsls	r2, r3
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	4013      	ands	r3, r2
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d043      	beq.n	8001ddc <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	f003 0308 	and.w	r3, r3, #8
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d03c      	beq.n	8001ddc <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d66:	2210      	movs	r2, #16
 8001d68:	409a      	lsls	r2, r3
 8001d6a:	693b      	ldr	r3, [r7, #16]
 8001d6c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d018      	beq.n	8001dae <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d108      	bne.n	8001d9c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d024      	beq.n	8001ddc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d96:	6878      	ldr	r0, [r7, #4]
 8001d98:	4798      	blx	r3
 8001d9a:	e01f      	b.n	8001ddc <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d01b      	beq.n	8001ddc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001da8:	6878      	ldr	r0, [r7, #4]
 8001daa:	4798      	blx	r3
 8001dac:	e016      	b.n	8001ddc <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d107      	bne.n	8001dcc <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	681a      	ldr	r2, [r3, #0]
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	f022 0208 	bic.w	r2, r2, #8
 8001dca:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d003      	beq.n	8001ddc <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dd8:	6878      	ldr	r0, [r7, #4]
 8001dda:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001de0:	2220      	movs	r2, #32
 8001de2:	409a      	lsls	r2, r3
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	4013      	ands	r3, r2
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	f000 808e 	beq.w	8001f0a <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	f003 0310 	and.w	r3, r3, #16
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	f000 8086 	beq.w	8001f0a <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e02:	2220      	movs	r2, #32
 8001e04:	409a      	lsls	r2, r3
 8001e06:	693b      	ldr	r3, [r7, #16]
 8001e08:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001e10:	b2db      	uxtb	r3, r3
 8001e12:	2b05      	cmp	r3, #5
 8001e14:	d136      	bne.n	8001e84 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	681a      	ldr	r2, [r3, #0]
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	f022 0216 	bic.w	r2, r2, #22
 8001e24:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	695a      	ldr	r2, [r3, #20]
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001e34:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d103      	bne.n	8001e46 <HAL_DMA_IRQHandler+0x1da>
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d007      	beq.n	8001e56 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	681a      	ldr	r2, [r3, #0]
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	f022 0208 	bic.w	r2, r2, #8
 8001e54:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e5a:	223f      	movs	r2, #63	; 0x3f
 8001e5c:	409a      	lsls	r2, r3
 8001e5e:	693b      	ldr	r3, [r7, #16]
 8001e60:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	2200      	movs	r2, #0
 8001e66:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	2201      	movs	r2, #1
 8001e6e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d07d      	beq.n	8001f76 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001e7e:	6878      	ldr	r0, [r7, #4]
 8001e80:	4798      	blx	r3
        }
        return;
 8001e82:	e078      	b.n	8001f76 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d01c      	beq.n	8001ecc <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d108      	bne.n	8001eb2 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d030      	beq.n	8001f0a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001eac:	6878      	ldr	r0, [r7, #4]
 8001eae:	4798      	blx	r3
 8001eb0:	e02b      	b.n	8001f0a <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d027      	beq.n	8001f0a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ebe:	6878      	ldr	r0, [r7, #4]
 8001ec0:	4798      	blx	r3
 8001ec2:	e022      	b.n	8001f0a <HAL_DMA_IRQHandler+0x29e>
 8001ec4:	20000000 	.word	0x20000000
 8001ec8:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d10f      	bne.n	8001efa <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	681a      	ldr	r2, [r3, #0]
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	f022 0210 	bic.w	r2, r2, #16
 8001ee8:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	2200      	movs	r2, #0
 8001eee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	2201      	movs	r2, #1
 8001ef6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d003      	beq.n	8001f0a <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f06:	6878      	ldr	r0, [r7, #4]
 8001f08:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d032      	beq.n	8001f78 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f16:	f003 0301 	and.w	r3, r3, #1
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d022      	beq.n	8001f64 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	2205      	movs	r2, #5
 8001f22:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	681a      	ldr	r2, [r3, #0]
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	f022 0201 	bic.w	r2, r2, #1
 8001f34:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001f36:	68bb      	ldr	r3, [r7, #8]
 8001f38:	3301      	adds	r3, #1
 8001f3a:	60bb      	str	r3, [r7, #8]
 8001f3c:	697a      	ldr	r2, [r7, #20]
 8001f3e:	429a      	cmp	r2, r3
 8001f40:	d307      	bcc.n	8001f52 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	f003 0301 	and.w	r3, r3, #1
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d1f2      	bne.n	8001f36 <HAL_DMA_IRQHandler+0x2ca>
 8001f50:	e000      	b.n	8001f54 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8001f52:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	2200      	movs	r2, #0
 8001f58:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	2201      	movs	r2, #1
 8001f60:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d005      	beq.n	8001f78 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f70:	6878      	ldr	r0, [r7, #4]
 8001f72:	4798      	blx	r3
 8001f74:	e000      	b.n	8001f78 <HAL_DMA_IRQHandler+0x30c>
        return;
 8001f76:	bf00      	nop
    }
  }
}
 8001f78:	3718      	adds	r7, #24
 8001f7a:	46bd      	mov	sp, r7
 8001f7c:	bd80      	pop	{r7, pc}
 8001f7e:	bf00      	nop

08001f80 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001f80:	b480      	push	{r7}
 8001f82:	b085      	sub	sp, #20
 8001f84:	af00      	add	r7, sp, #0
 8001f86:	60f8      	str	r0, [r7, #12]
 8001f88:	60b9      	str	r1, [r7, #8]
 8001f8a:	607a      	str	r2, [r7, #4]
 8001f8c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	681a      	ldr	r2, [r3, #0]
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001f9c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	683a      	ldr	r2, [r7, #0]
 8001fa4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	689b      	ldr	r3, [r3, #8]
 8001faa:	2b40      	cmp	r3, #64	; 0x40
 8001fac:	d108      	bne.n	8001fc0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	687a      	ldr	r2, [r7, #4]
 8001fb4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8001fb6:	68fb      	ldr	r3, [r7, #12]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	68ba      	ldr	r2, [r7, #8]
 8001fbc:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8001fbe:	e007      	b.n	8001fd0 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	68ba      	ldr	r2, [r7, #8]
 8001fc6:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	687a      	ldr	r2, [r7, #4]
 8001fce:	60da      	str	r2, [r3, #12]
}
 8001fd0:	bf00      	nop
 8001fd2:	3714      	adds	r7, #20
 8001fd4:	46bd      	mov	sp, r7
 8001fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fda:	4770      	bx	lr

08001fdc <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001fdc:	b480      	push	{r7}
 8001fde:	b085      	sub	sp, #20
 8001fe0:	af00      	add	r7, sp, #0
 8001fe2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	b2db      	uxtb	r3, r3
 8001fea:	3b10      	subs	r3, #16
 8001fec:	4a14      	ldr	r2, [pc, #80]	; (8002040 <DMA_CalcBaseAndBitshift+0x64>)
 8001fee:	fba2 2303 	umull	r2, r3, r2, r3
 8001ff2:	091b      	lsrs	r3, r3, #4
 8001ff4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001ff6:	4a13      	ldr	r2, [pc, #76]	; (8002044 <DMA_CalcBaseAndBitshift+0x68>)
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	4413      	add	r3, r2
 8001ffc:	781b      	ldrb	r3, [r3, #0]
 8001ffe:	461a      	mov	r2, r3
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	2b03      	cmp	r3, #3
 8002008:	d909      	bls.n	800201e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002012:	f023 0303 	bic.w	r3, r3, #3
 8002016:	1d1a      	adds	r2, r3, #4
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	659a      	str	r2, [r3, #88]	; 0x58
 800201c:	e007      	b.n	800202e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002026:	f023 0303 	bic.w	r3, r3, #3
 800202a:	687a      	ldr	r2, [r7, #4]
 800202c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002032:	4618      	mov	r0, r3
 8002034:	3714      	adds	r7, #20
 8002036:	46bd      	mov	sp, r7
 8002038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800203c:	4770      	bx	lr
 800203e:	bf00      	nop
 8002040:	aaaaaaab 	.word	0xaaaaaaab
 8002044:	0800a77c 	.word	0x0800a77c

08002048 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002048:	b480      	push	{r7}
 800204a:	b085      	sub	sp, #20
 800204c:	af00      	add	r7, sp, #0
 800204e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002050:	2300      	movs	r3, #0
 8002052:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002058:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	699b      	ldr	r3, [r3, #24]
 800205e:	2b00      	cmp	r3, #0
 8002060:	d11f      	bne.n	80020a2 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002062:	68bb      	ldr	r3, [r7, #8]
 8002064:	2b03      	cmp	r3, #3
 8002066:	d855      	bhi.n	8002114 <DMA_CheckFifoParam+0xcc>
 8002068:	a201      	add	r2, pc, #4	; (adr r2, 8002070 <DMA_CheckFifoParam+0x28>)
 800206a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800206e:	bf00      	nop
 8002070:	08002081 	.word	0x08002081
 8002074:	08002093 	.word	0x08002093
 8002078:	08002081 	.word	0x08002081
 800207c:	08002115 	.word	0x08002115
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002084:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002088:	2b00      	cmp	r3, #0
 800208a:	d045      	beq.n	8002118 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 800208c:	2301      	movs	r3, #1
 800208e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002090:	e042      	b.n	8002118 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002096:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800209a:	d13f      	bne.n	800211c <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 800209c:	2301      	movs	r3, #1
 800209e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80020a0:	e03c      	b.n	800211c <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	699b      	ldr	r3, [r3, #24]
 80020a6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80020aa:	d121      	bne.n	80020f0 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80020ac:	68bb      	ldr	r3, [r7, #8]
 80020ae:	2b03      	cmp	r3, #3
 80020b0:	d836      	bhi.n	8002120 <DMA_CheckFifoParam+0xd8>
 80020b2:	a201      	add	r2, pc, #4	; (adr r2, 80020b8 <DMA_CheckFifoParam+0x70>)
 80020b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80020b8:	080020c9 	.word	0x080020c9
 80020bc:	080020cf 	.word	0x080020cf
 80020c0:	080020c9 	.word	0x080020c9
 80020c4:	080020e1 	.word	0x080020e1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80020c8:	2301      	movs	r3, #1
 80020ca:	73fb      	strb	r3, [r7, #15]
      break;
 80020cc:	e02f      	b.n	800212e <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020d2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d024      	beq.n	8002124 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 80020da:	2301      	movs	r3, #1
 80020dc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80020de:	e021      	b.n	8002124 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020e4:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80020e8:	d11e      	bne.n	8002128 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 80020ea:	2301      	movs	r3, #1
 80020ec:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80020ee:	e01b      	b.n	8002128 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80020f0:	68bb      	ldr	r3, [r7, #8]
 80020f2:	2b02      	cmp	r3, #2
 80020f4:	d902      	bls.n	80020fc <DMA_CheckFifoParam+0xb4>
 80020f6:	2b03      	cmp	r3, #3
 80020f8:	d003      	beq.n	8002102 <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80020fa:	e018      	b.n	800212e <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 80020fc:	2301      	movs	r3, #1
 80020fe:	73fb      	strb	r3, [r7, #15]
      break;
 8002100:	e015      	b.n	800212e <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002106:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800210a:	2b00      	cmp	r3, #0
 800210c:	d00e      	beq.n	800212c <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 800210e:	2301      	movs	r3, #1
 8002110:	73fb      	strb	r3, [r7, #15]
      break;
 8002112:	e00b      	b.n	800212c <DMA_CheckFifoParam+0xe4>
      break;
 8002114:	bf00      	nop
 8002116:	e00a      	b.n	800212e <DMA_CheckFifoParam+0xe6>
      break;
 8002118:	bf00      	nop
 800211a:	e008      	b.n	800212e <DMA_CheckFifoParam+0xe6>
      break;
 800211c:	bf00      	nop
 800211e:	e006      	b.n	800212e <DMA_CheckFifoParam+0xe6>
      break;
 8002120:	bf00      	nop
 8002122:	e004      	b.n	800212e <DMA_CheckFifoParam+0xe6>
      break;
 8002124:	bf00      	nop
 8002126:	e002      	b.n	800212e <DMA_CheckFifoParam+0xe6>
      break;   
 8002128:	bf00      	nop
 800212a:	e000      	b.n	800212e <DMA_CheckFifoParam+0xe6>
      break;
 800212c:	bf00      	nop
    }
  } 
  
  return status; 
 800212e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002130:	4618      	mov	r0, r3
 8002132:	3714      	adds	r7, #20
 8002134:	46bd      	mov	sp, r7
 8002136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800213a:	4770      	bx	lr

0800213c <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 800213c:	b580      	push	{r7, lr}
 800213e:	b086      	sub	sp, #24
 8002140:	af00      	add	r7, sp, #0
 8002142:	60f8      	str	r0, [r7, #12]
 8002144:	60b9      	str	r1, [r7, #8]
 8002146:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 800214a:	2301      	movs	r3, #1
 800214c:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800214e:	4b23      	ldr	r3, [pc, #140]	; (80021dc <HAL_FLASH_Program+0xa0>)
 8002150:	7e1b      	ldrb	r3, [r3, #24]
 8002152:	2b01      	cmp	r3, #1
 8002154:	d101      	bne.n	800215a <HAL_FLASH_Program+0x1e>
 8002156:	2302      	movs	r3, #2
 8002158:	e03b      	b.n	80021d2 <HAL_FLASH_Program+0x96>
 800215a:	4b20      	ldr	r3, [pc, #128]	; (80021dc <HAL_FLASH_Program+0xa0>)
 800215c:	2201      	movs	r2, #1
 800215e:	761a      	strb	r2, [r3, #24]
  
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002160:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002164:	f000 f870 	bl	8002248 <FLASH_WaitForLastOperation>
 8002168:	4603      	mov	r3, r0
 800216a:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 800216c:	7dfb      	ldrb	r3, [r7, #23]
 800216e:	2b00      	cmp	r3, #0
 8002170:	d12b      	bne.n	80021ca <HAL_FLASH_Program+0x8e>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	2b00      	cmp	r3, #0
 8002176:	d105      	bne.n	8002184 <HAL_FLASH_Program+0x48>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 8002178:	783b      	ldrb	r3, [r7, #0]
 800217a:	4619      	mov	r1, r3
 800217c:	68b8      	ldr	r0, [r7, #8]
 800217e:	f000 f919 	bl	80023b4 <FLASH_Program_Byte>
 8002182:	e016      	b.n	80021b2 <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	2b01      	cmp	r3, #1
 8002188:	d105      	bne.n	8002196 <HAL_FLASH_Program+0x5a>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 800218a:	883b      	ldrh	r3, [r7, #0]
 800218c:	4619      	mov	r1, r3
 800218e:	68b8      	ldr	r0, [r7, #8]
 8002190:	f000 f8ec 	bl	800236c <FLASH_Program_HalfWord>
 8002194:	e00d      	b.n	80021b2 <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	2b02      	cmp	r3, #2
 800219a:	d105      	bne.n	80021a8 <HAL_FLASH_Program+0x6c>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 800219c:	683b      	ldr	r3, [r7, #0]
 800219e:	4619      	mov	r1, r3
 80021a0:	68b8      	ldr	r0, [r7, #8]
 80021a2:	f000 f8c1 	bl	8002328 <FLASH_Program_Word>
 80021a6:	e004      	b.n	80021b2 <HAL_FLASH_Program+0x76>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 80021a8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80021ac:	68b8      	ldr	r0, [r7, #8]
 80021ae:	f000 f88b 	bl	80022c8 <FLASH_Program_DoubleWord>
    }
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80021b2:	f24c 3050 	movw	r0, #50000	; 0xc350
 80021b6:	f000 f847 	bl	8002248 <FLASH_WaitForLastOperation>
 80021ba:	4603      	mov	r3, r0
 80021bc:	75fb      	strb	r3, [r7, #23]
    
    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);  
 80021be:	4b08      	ldr	r3, [pc, #32]	; (80021e0 <HAL_FLASH_Program+0xa4>)
 80021c0:	691b      	ldr	r3, [r3, #16]
 80021c2:	4a07      	ldr	r2, [pc, #28]	; (80021e0 <HAL_FLASH_Program+0xa4>)
 80021c4:	f023 0301 	bic.w	r3, r3, #1
 80021c8:	6113      	str	r3, [r2, #16]
  }
  
  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80021ca:	4b04      	ldr	r3, [pc, #16]	; (80021dc <HAL_FLASH_Program+0xa0>)
 80021cc:	2200      	movs	r2, #0
 80021ce:	761a      	strb	r2, [r3, #24]
  
  return status;
 80021d0:	7dfb      	ldrb	r3, [r7, #23]
}
 80021d2:	4618      	mov	r0, r3
 80021d4:	3718      	adds	r7, #24
 80021d6:	46bd      	mov	sp, r7
 80021d8:	bd80      	pop	{r7, pc}
 80021da:	bf00      	nop
 80021dc:	2000048c 	.word	0x2000048c
 80021e0:	40023c00 	.word	0x40023c00

080021e4 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 80021e4:	b480      	push	{r7}
 80021e6:	b083      	sub	sp, #12
 80021e8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 80021ea:	2300      	movs	r3, #0
 80021ec:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 80021ee:	4b0b      	ldr	r3, [pc, #44]	; (800221c <HAL_FLASH_Unlock+0x38>)
 80021f0:	691b      	ldr	r3, [r3, #16]
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	da0b      	bge.n	800220e <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 80021f6:	4b09      	ldr	r3, [pc, #36]	; (800221c <HAL_FLASH_Unlock+0x38>)
 80021f8:	4a09      	ldr	r2, [pc, #36]	; (8002220 <HAL_FLASH_Unlock+0x3c>)
 80021fa:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 80021fc:	4b07      	ldr	r3, [pc, #28]	; (800221c <HAL_FLASH_Unlock+0x38>)
 80021fe:	4a09      	ldr	r2, [pc, #36]	; (8002224 <HAL_FLASH_Unlock+0x40>)
 8002200:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8002202:	4b06      	ldr	r3, [pc, #24]	; (800221c <HAL_FLASH_Unlock+0x38>)
 8002204:	691b      	ldr	r3, [r3, #16]
 8002206:	2b00      	cmp	r3, #0
 8002208:	da01      	bge.n	800220e <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 800220a:	2301      	movs	r3, #1
 800220c:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 800220e:	79fb      	ldrb	r3, [r7, #7]
}
 8002210:	4618      	mov	r0, r3
 8002212:	370c      	adds	r7, #12
 8002214:	46bd      	mov	sp, r7
 8002216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800221a:	4770      	bx	lr
 800221c:	40023c00 	.word	0x40023c00
 8002220:	45670123 	.word	0x45670123
 8002224:	cdef89ab 	.word	0xcdef89ab

08002228 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8002228:	b480      	push	{r7}
 800222a:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 800222c:	4b05      	ldr	r3, [pc, #20]	; (8002244 <HAL_FLASH_Lock+0x1c>)
 800222e:	691b      	ldr	r3, [r3, #16]
 8002230:	4a04      	ldr	r2, [pc, #16]	; (8002244 <HAL_FLASH_Lock+0x1c>)
 8002232:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002236:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 8002238:	2300      	movs	r3, #0
}
 800223a:	4618      	mov	r0, r3
 800223c:	46bd      	mov	sp, r7
 800223e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002242:	4770      	bx	lr
 8002244:	40023c00 	.word	0x40023c00

08002248 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 8002248:	b580      	push	{r7, lr}
 800224a:	b084      	sub	sp, #16
 800224c:	af00      	add	r7, sp, #0
 800224e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002250:	2300      	movs	r3, #0
 8002252:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8002254:	4b1a      	ldr	r3, [pc, #104]	; (80022c0 <FLASH_WaitForLastOperation+0x78>)
 8002256:	2200      	movs	r2, #0
 8002258:	61da      	str	r2, [r3, #28]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 800225a:	f7ff fa11 	bl	8001680 <HAL_GetTick>
 800225e:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8002260:	e010      	b.n	8002284 <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002268:	d00c      	beq.n	8002284 <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	2b00      	cmp	r3, #0
 800226e:	d007      	beq.n	8002280 <FLASH_WaitForLastOperation+0x38>
 8002270:	f7ff fa06 	bl	8001680 <HAL_GetTick>
 8002274:	4602      	mov	r2, r0
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	1ad3      	subs	r3, r2, r3
 800227a:	687a      	ldr	r2, [r7, #4]
 800227c:	429a      	cmp	r2, r3
 800227e:	d201      	bcs.n	8002284 <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 8002280:	2303      	movs	r3, #3
 8002282:	e019      	b.n	80022b8 <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8002284:	4b0f      	ldr	r3, [pc, #60]	; (80022c4 <FLASH_WaitForLastOperation+0x7c>)
 8002286:	68db      	ldr	r3, [r3, #12]
 8002288:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800228c:	2b00      	cmp	r3, #0
 800228e:	d1e8      	bne.n	8002262 <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 8002290:	4b0c      	ldr	r3, [pc, #48]	; (80022c4 <FLASH_WaitForLastOperation+0x7c>)
 8002292:	68db      	ldr	r3, [r3, #12]
 8002294:	f003 0301 	and.w	r3, r3, #1
 8002298:	2b00      	cmp	r3, #0
 800229a:	d002      	beq.n	80022a2 <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 800229c:	4b09      	ldr	r3, [pc, #36]	; (80022c4 <FLASH_WaitForLastOperation+0x7c>)
 800229e:	2201      	movs	r2, #1
 80022a0:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)  
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR | FLASH_FLAG_RDERR)) != RESET)
#else
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 80022a2:	4b08      	ldr	r3, [pc, #32]	; (80022c4 <FLASH_WaitForLastOperation+0x7c>)
 80022a4:	68db      	ldr	r3, [r3, #12]
 80022a6:	f003 03f2 	and.w	r3, r3, #242	; 0xf2
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d003      	beq.n	80022b6 <FLASH_WaitForLastOperation+0x6e>
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 80022ae:	f000 f8a3 	bl	80023f8 <FLASH_SetErrorCode>
    return HAL_ERROR;
 80022b2:	2301      	movs	r3, #1
 80022b4:	e000      	b.n	80022b8 <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 80022b6:	2300      	movs	r3, #0
  
}  
 80022b8:	4618      	mov	r0, r3
 80022ba:	3710      	adds	r7, #16
 80022bc:	46bd      	mov	sp, r7
 80022be:	bd80      	pop	{r7, pc}
 80022c0:	2000048c 	.word	0x2000048c
 80022c4:	40023c00 	.word	0x40023c00

080022c8 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 80022c8:	b490      	push	{r4, r7}
 80022ca:	b084      	sub	sp, #16
 80022cc:	af00      	add	r7, sp, #0
 80022ce:	60f8      	str	r0, [r7, #12]
 80022d0:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80022d4:	4b13      	ldr	r3, [pc, #76]	; (8002324 <FLASH_Program_DoubleWord+0x5c>)
 80022d6:	691b      	ldr	r3, [r3, #16]
 80022d8:	4a12      	ldr	r2, [pc, #72]	; (8002324 <FLASH_Program_DoubleWord+0x5c>)
 80022da:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80022de:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 80022e0:	4b10      	ldr	r3, [pc, #64]	; (8002324 <FLASH_Program_DoubleWord+0x5c>)
 80022e2:	691b      	ldr	r3, [r3, #16]
 80022e4:	4a0f      	ldr	r2, [pc, #60]	; (8002324 <FLASH_Program_DoubleWord+0x5c>)
 80022e6:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 80022ea:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 80022ec:	4b0d      	ldr	r3, [pc, #52]	; (8002324 <FLASH_Program_DoubleWord+0x5c>)
 80022ee:	691b      	ldr	r3, [r3, #16]
 80022f0:	4a0c      	ldr	r2, [pc, #48]	; (8002324 <FLASH_Program_DoubleWord+0x5c>)
 80022f2:	f043 0301 	orr.w	r3, r3, #1
 80022f6:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	683a      	ldr	r2, [r7, #0]
 80022fc:	601a      	str	r2, [r3, #0]
 80022fe:	f3bf 8f6f 	isb	sy
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 8002302:	e9d7 1200 	ldrd	r1, r2, [r7]
 8002306:	f04f 0300 	mov.w	r3, #0
 800230a:	f04f 0400 	mov.w	r4, #0
 800230e:	0013      	movs	r3, r2
 8002310:	2400      	movs	r4, #0
 8002312:	68fa      	ldr	r2, [r7, #12]
 8002314:	3204      	adds	r2, #4
 8002316:	6013      	str	r3, [r2, #0]
}
 8002318:	bf00      	nop
 800231a:	3710      	adds	r7, #16
 800231c:	46bd      	mov	sp, r7
 800231e:	bc90      	pop	{r4, r7}
 8002320:	4770      	bx	lr
 8002322:	bf00      	nop
 8002324:	40023c00 	.word	0x40023c00

08002328 <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 8002328:	b480      	push	{r7}
 800232a:	b083      	sub	sp, #12
 800232c:	af00      	add	r7, sp, #0
 800232e:	6078      	str	r0, [r7, #4]
 8002330:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8002332:	4b0d      	ldr	r3, [pc, #52]	; (8002368 <FLASH_Program_Word+0x40>)
 8002334:	691b      	ldr	r3, [r3, #16]
 8002336:	4a0c      	ldr	r2, [pc, #48]	; (8002368 <FLASH_Program_Word+0x40>)
 8002338:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800233c:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 800233e:	4b0a      	ldr	r3, [pc, #40]	; (8002368 <FLASH_Program_Word+0x40>)
 8002340:	691b      	ldr	r3, [r3, #16]
 8002342:	4a09      	ldr	r2, [pc, #36]	; (8002368 <FLASH_Program_Word+0x40>)
 8002344:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002348:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 800234a:	4b07      	ldr	r3, [pc, #28]	; (8002368 <FLASH_Program_Word+0x40>)
 800234c:	691b      	ldr	r3, [r3, #16]
 800234e:	4a06      	ldr	r2, [pc, #24]	; (8002368 <FLASH_Program_Word+0x40>)
 8002350:	f043 0301 	orr.w	r3, r3, #1
 8002354:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t*)Address = Data;
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	683a      	ldr	r2, [r7, #0]
 800235a:	601a      	str	r2, [r3, #0]
}
 800235c:	bf00      	nop
 800235e:	370c      	adds	r7, #12
 8002360:	46bd      	mov	sp, r7
 8002362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002366:	4770      	bx	lr
 8002368:	40023c00 	.word	0x40023c00

0800236c <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 800236c:	b480      	push	{r7}
 800236e:	b083      	sub	sp, #12
 8002370:	af00      	add	r7, sp, #0
 8002372:	6078      	str	r0, [r7, #4]
 8002374:	460b      	mov	r3, r1
 8002376:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8002378:	4b0d      	ldr	r3, [pc, #52]	; (80023b0 <FLASH_Program_HalfWord+0x44>)
 800237a:	691b      	ldr	r3, [r3, #16]
 800237c:	4a0c      	ldr	r2, [pc, #48]	; (80023b0 <FLASH_Program_HalfWord+0x44>)
 800237e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002382:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 8002384:	4b0a      	ldr	r3, [pc, #40]	; (80023b0 <FLASH_Program_HalfWord+0x44>)
 8002386:	691b      	ldr	r3, [r3, #16]
 8002388:	4a09      	ldr	r2, [pc, #36]	; (80023b0 <FLASH_Program_HalfWord+0x44>)
 800238a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800238e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8002390:	4b07      	ldr	r3, [pc, #28]	; (80023b0 <FLASH_Program_HalfWord+0x44>)
 8002392:	691b      	ldr	r3, [r3, #16]
 8002394:	4a06      	ldr	r2, [pc, #24]	; (80023b0 <FLASH_Program_HalfWord+0x44>)
 8002396:	f043 0301 	orr.w	r3, r3, #1
 800239a:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t*)Address = Data;
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	887a      	ldrh	r2, [r7, #2]
 80023a0:	801a      	strh	r2, [r3, #0]
}
 80023a2:	bf00      	nop
 80023a4:	370c      	adds	r7, #12
 80023a6:	46bd      	mov	sp, r7
 80023a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ac:	4770      	bx	lr
 80023ae:	bf00      	nop
 80023b0:	40023c00 	.word	0x40023c00

080023b4 <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 80023b4:	b480      	push	{r7}
 80023b6:	b083      	sub	sp, #12
 80023b8:	af00      	add	r7, sp, #0
 80023ba:	6078      	str	r0, [r7, #4]
 80023bc:	460b      	mov	r3, r1
 80023be:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80023c0:	4b0c      	ldr	r3, [pc, #48]	; (80023f4 <FLASH_Program_Byte+0x40>)
 80023c2:	691b      	ldr	r3, [r3, #16]
 80023c4:	4a0b      	ldr	r2, [pc, #44]	; (80023f4 <FLASH_Program_Byte+0x40>)
 80023c6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80023ca:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 80023cc:	4b09      	ldr	r3, [pc, #36]	; (80023f4 <FLASH_Program_Byte+0x40>)
 80023ce:	4a09      	ldr	r2, [pc, #36]	; (80023f4 <FLASH_Program_Byte+0x40>)
 80023d0:	691b      	ldr	r3, [r3, #16]
 80023d2:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 80023d4:	4b07      	ldr	r3, [pc, #28]	; (80023f4 <FLASH_Program_Byte+0x40>)
 80023d6:	691b      	ldr	r3, [r3, #16]
 80023d8:	4a06      	ldr	r2, [pc, #24]	; (80023f4 <FLASH_Program_Byte+0x40>)
 80023da:	f043 0301 	orr.w	r3, r3, #1
 80023de:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t*)Address = Data;
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	78fa      	ldrb	r2, [r7, #3]
 80023e4:	701a      	strb	r2, [r3, #0]
}
 80023e6:	bf00      	nop
 80023e8:	370c      	adds	r7, #12
 80023ea:	46bd      	mov	sp, r7
 80023ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f0:	4770      	bx	lr
 80023f2:	bf00      	nop
 80023f4:	40023c00 	.word	0x40023c00

080023f8 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
 80023f8:	b480      	push	{r7}
 80023fa:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 80023fc:	4b27      	ldr	r3, [pc, #156]	; (800249c <FLASH_SetErrorCode+0xa4>)
 80023fe:	68db      	ldr	r3, [r3, #12]
 8002400:	f003 0310 	and.w	r3, r3, #16
 8002404:	2b00      	cmp	r3, #0
 8002406:	d008      	beq.n	800241a <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8002408:	4b25      	ldr	r3, [pc, #148]	; (80024a0 <FLASH_SetErrorCode+0xa8>)
 800240a:	69db      	ldr	r3, [r3, #28]
 800240c:	f043 0310 	orr.w	r3, r3, #16
 8002410:	4a23      	ldr	r2, [pc, #140]	; (80024a0 <FLASH_SetErrorCode+0xa8>)
 8002412:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 8002414:	4b21      	ldr	r3, [pc, #132]	; (800249c <FLASH_SetErrorCode+0xa4>)
 8002416:	2210      	movs	r2, #16
 8002418:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 800241a:	4b20      	ldr	r3, [pc, #128]	; (800249c <FLASH_SetErrorCode+0xa4>)
 800241c:	68db      	ldr	r3, [r3, #12]
 800241e:	f003 0320 	and.w	r3, r3, #32
 8002422:	2b00      	cmp	r3, #0
 8002424:	d008      	beq.n	8002438 <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 8002426:	4b1e      	ldr	r3, [pc, #120]	; (80024a0 <FLASH_SetErrorCode+0xa8>)
 8002428:	69db      	ldr	r3, [r3, #28]
 800242a:	f043 0308 	orr.w	r3, r3, #8
 800242e:	4a1c      	ldr	r2, [pc, #112]	; (80024a0 <FLASH_SetErrorCode+0xa8>)
 8002430:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 8002432:	4b1a      	ldr	r3, [pc, #104]	; (800249c <FLASH_SetErrorCode+0xa4>)
 8002434:	2220      	movs	r2, #32
 8002436:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 8002438:	4b18      	ldr	r3, [pc, #96]	; (800249c <FLASH_SetErrorCode+0xa4>)
 800243a:	68db      	ldr	r3, [r3, #12]
 800243c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002440:	2b00      	cmp	r3, #0
 8002442:	d008      	beq.n	8002456 <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 8002444:	4b16      	ldr	r3, [pc, #88]	; (80024a0 <FLASH_SetErrorCode+0xa8>)
 8002446:	69db      	ldr	r3, [r3, #28]
 8002448:	f043 0304 	orr.w	r3, r3, #4
 800244c:	4a14      	ldr	r2, [pc, #80]	; (80024a0 <FLASH_SetErrorCode+0xa8>)
 800244e:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 8002450:	4b12      	ldr	r3, [pc, #72]	; (800249c <FLASH_SetErrorCode+0xa4>)
 8002452:	2240      	movs	r2, #64	; 0x40
 8002454:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 8002456:	4b11      	ldr	r3, [pc, #68]	; (800249c <FLASH_SetErrorCode+0xa4>)
 8002458:	68db      	ldr	r3, [r3, #12]
 800245a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800245e:	2b00      	cmp	r3, #0
 8002460:	d008      	beq.n	8002474 <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 8002462:	4b0f      	ldr	r3, [pc, #60]	; (80024a0 <FLASH_SetErrorCode+0xa8>)
 8002464:	69db      	ldr	r3, [r3, #28]
 8002466:	f043 0302 	orr.w	r3, r3, #2
 800246a:	4a0d      	ldr	r2, [pc, #52]	; (80024a0 <FLASH_SetErrorCode+0xa8>)
 800246c:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 800246e:	4b0b      	ldr	r3, [pc, #44]	; (800249c <FLASH_SetErrorCode+0xa4>)
 8002470:	2280      	movs	r2, #128	; 0x80
 8002472:	60da      	str	r2, [r3, #12]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 8002474:	4b09      	ldr	r3, [pc, #36]	; (800249c <FLASH_SetErrorCode+0xa4>)
 8002476:	68db      	ldr	r3, [r3, #12]
 8002478:	f003 0302 	and.w	r3, r3, #2
 800247c:	2b00      	cmp	r3, #0
 800247e:	d008      	beq.n	8002492 <FLASH_SetErrorCode+0x9a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 8002480:	4b07      	ldr	r3, [pc, #28]	; (80024a0 <FLASH_SetErrorCode+0xa8>)
 8002482:	69db      	ldr	r3, [r3, #28]
 8002484:	f043 0320 	orr.w	r3, r3, #32
 8002488:	4a05      	ldr	r2, [pc, #20]	; (80024a0 <FLASH_SetErrorCode+0xa8>)
 800248a:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 800248c:	4b03      	ldr	r3, [pc, #12]	; (800249c <FLASH_SetErrorCode+0xa4>)
 800248e:	2202      	movs	r2, #2
 8002490:	60da      	str	r2, [r3, #12]
  }
}
 8002492:	bf00      	nop
 8002494:	46bd      	mov	sp, r7
 8002496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800249a:	4770      	bx	lr
 800249c:	40023c00 	.word	0x40023c00
 80024a0:	2000048c 	.word	0x2000048c

080024a4 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFFU means that all the sectors have been correctly erased)
  * 
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 80024a4:	b580      	push	{r7, lr}
 80024a6:	b084      	sub	sp, #16
 80024a8:	af00      	add	r7, sp, #0
 80024aa:	6078      	str	r0, [r7, #4]
 80024ac:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 80024ae:	2301      	movs	r3, #1
 80024b0:	73fb      	strb	r3, [r7, #15]
  uint32_t index = 0U;
 80024b2:	2300      	movs	r3, #0
 80024b4:	60bb      	str	r3, [r7, #8]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80024b6:	4b31      	ldr	r3, [pc, #196]	; (800257c <HAL_FLASHEx_Erase+0xd8>)
 80024b8:	7e1b      	ldrb	r3, [r3, #24]
 80024ba:	2b01      	cmp	r3, #1
 80024bc:	d101      	bne.n	80024c2 <HAL_FLASHEx_Erase+0x1e>
 80024be:	2302      	movs	r3, #2
 80024c0:	e058      	b.n	8002574 <HAL_FLASHEx_Erase+0xd0>
 80024c2:	4b2e      	ldr	r3, [pc, #184]	; (800257c <HAL_FLASHEx_Erase+0xd8>)
 80024c4:	2201      	movs	r2, #1
 80024c6:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80024c8:	f24c 3050 	movw	r0, #50000	; 0xc350
 80024cc:	f7ff febc 	bl	8002248 <FLASH_WaitForLastOperation>
 80024d0:	4603      	mov	r3, r0
 80024d2:	73fb      	strb	r3, [r7, #15]

  if(status == HAL_OK)
 80024d4:	7bfb      	ldrb	r3, [r7, #15]
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d148      	bne.n	800256c <HAL_FLASHEx_Erase+0xc8>
  {
    /*Initialization of SectorError variable*/
    *SectorError = 0xFFFFFFFFU;
 80024da:	683b      	ldr	r3, [r7, #0]
 80024dc:	f04f 32ff 	mov.w	r2, #4294967295
 80024e0:	601a      	str	r2, [r3, #0]
    
    if(pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	2b01      	cmp	r3, #1
 80024e8:	d115      	bne.n	8002516 <HAL_FLASHEx_Erase+0x72>
    {
      /*Mass erase to be done*/
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	691b      	ldr	r3, [r3, #16]
 80024ee:	b2da      	uxtb	r2, r3
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	685b      	ldr	r3, [r3, #4]
 80024f4:	4619      	mov	r1, r3
 80024f6:	4610      	mov	r0, r2
 80024f8:	f000 f844 	bl	8002584 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80024fc:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002500:	f7ff fea2 	bl	8002248 <FLASH_WaitForLastOperation>
 8002504:	4603      	mov	r3, r0
 8002506:	73fb      	strb	r3, [r7, #15]
      
      /* if the erase operation is completed, disable the MER Bit */
      FLASH->CR &= (~FLASH_MER_BIT);
 8002508:	4b1d      	ldr	r3, [pc, #116]	; (8002580 <HAL_FLASHEx_Erase+0xdc>)
 800250a:	691b      	ldr	r3, [r3, #16]
 800250c:	4a1c      	ldr	r2, [pc, #112]	; (8002580 <HAL_FLASHEx_Erase+0xdc>)
 800250e:	f023 0304 	bic.w	r3, r3, #4
 8002512:	6113      	str	r3, [r2, #16]
 8002514:	e028      	b.n	8002568 <HAL_FLASHEx_Erase+0xc4>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));

      /* Erase by sector by sector to be done*/
      for(index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	689b      	ldr	r3, [r3, #8]
 800251a:	60bb      	str	r3, [r7, #8]
 800251c:	e01c      	b.n	8002558 <HAL_FLASHEx_Erase+0xb4>
      {
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	691b      	ldr	r3, [r3, #16]
 8002522:	b2db      	uxtb	r3, r3
 8002524:	4619      	mov	r1, r3
 8002526:	68b8      	ldr	r0, [r7, #8]
 8002528:	f000 f850 	bl	80025cc <FLASH_Erase_Sector>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800252c:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002530:	f7ff fe8a 	bl	8002248 <FLASH_WaitForLastOperation>
 8002534:	4603      	mov	r3, r0
 8002536:	73fb      	strb	r3, [r7, #15]
        
        /* If the erase operation is completed, disable the SER and SNB Bits */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 8002538:	4b11      	ldr	r3, [pc, #68]	; (8002580 <HAL_FLASHEx_Erase+0xdc>)
 800253a:	691b      	ldr	r3, [r3, #16]
 800253c:	4a10      	ldr	r2, [pc, #64]	; (8002580 <HAL_FLASHEx_Erase+0xdc>)
 800253e:	f023 03fa 	bic.w	r3, r3, #250	; 0xfa
 8002542:	6113      	str	r3, [r2, #16]

        if(status != HAL_OK) 
 8002544:	7bfb      	ldrb	r3, [r7, #15]
 8002546:	2b00      	cmp	r3, #0
 8002548:	d003      	beq.n	8002552 <HAL_FLASHEx_Erase+0xae>
        {
          /* In case of error, stop erase procedure and return the faulty sector*/
          *SectorError = index;
 800254a:	683b      	ldr	r3, [r7, #0]
 800254c:	68ba      	ldr	r2, [r7, #8]
 800254e:	601a      	str	r2, [r3, #0]
          break;
 8002550:	e00a      	b.n	8002568 <HAL_FLASHEx_Erase+0xc4>
      for(index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8002552:	68bb      	ldr	r3, [r7, #8]
 8002554:	3301      	adds	r3, #1
 8002556:	60bb      	str	r3, [r7, #8]
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	68da      	ldr	r2, [r3, #12]
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	689b      	ldr	r3, [r3, #8]
 8002560:	4413      	add	r3, r2
 8002562:	68ba      	ldr	r2, [r7, #8]
 8002564:	429a      	cmp	r2, r3
 8002566:	d3da      	bcc.n	800251e <HAL_FLASHEx_Erase+0x7a>
        }
      }
    }
    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();    
 8002568:	f000 f878 	bl	800265c <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800256c:	4b03      	ldr	r3, [pc, #12]	; (800257c <HAL_FLASHEx_Erase+0xd8>)
 800256e:	2200      	movs	r2, #0
 8002570:	761a      	strb	r2, [r3, #24]

  return status;
 8002572:	7bfb      	ldrb	r3, [r7, #15]
}
 8002574:	4618      	mov	r0, r3
 8002576:	3710      	adds	r7, #16
 8002578:	46bd      	mov	sp, r7
 800257a:	bd80      	pop	{r7, pc}
 800257c:	2000048c 	.word	0x2000048c
 8002580:	40023c00 	.word	0x40023c00

08002584 <FLASH_MassErase>:
  *            @arg FLASH_BANK_1: Bank1 to be erased
  *
  * @retval None
  */
static void FLASH_MassErase(uint8_t VoltageRange, uint32_t Banks)
{
 8002584:	b480      	push	{r7}
 8002586:	b083      	sub	sp, #12
 8002588:	af00      	add	r7, sp, #0
 800258a:	4603      	mov	r3, r0
 800258c:	6039      	str	r1, [r7, #0]
 800258e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  assert_param(IS_FLASH_BANK(Banks));
  
  /* If the previous operation is completed, proceed to erase all sectors */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8002590:	4b0d      	ldr	r3, [pc, #52]	; (80025c8 <FLASH_MassErase+0x44>)
 8002592:	691b      	ldr	r3, [r3, #16]
 8002594:	4a0c      	ldr	r2, [pc, #48]	; (80025c8 <FLASH_MassErase+0x44>)
 8002596:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800259a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_MER;
 800259c:	4b0a      	ldr	r3, [pc, #40]	; (80025c8 <FLASH_MassErase+0x44>)
 800259e:	691b      	ldr	r3, [r3, #16]
 80025a0:	4a09      	ldr	r2, [pc, #36]	; (80025c8 <FLASH_MassErase+0x44>)
 80025a2:	f043 0304 	orr.w	r3, r3, #4
 80025a6:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange <<8U);
 80025a8:	4b07      	ldr	r3, [pc, #28]	; (80025c8 <FLASH_MassErase+0x44>)
 80025aa:	691a      	ldr	r2, [r3, #16]
 80025ac:	79fb      	ldrb	r3, [r7, #7]
 80025ae:	021b      	lsls	r3, r3, #8
 80025b0:	4313      	orrs	r3, r2
 80025b2:	4a05      	ldr	r2, [pc, #20]	; (80025c8 <FLASH_MassErase+0x44>)
 80025b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80025b8:	6113      	str	r3, [r2, #16]
}
 80025ba:	bf00      	nop
 80025bc:	370c      	adds	r7, #12
 80025be:	46bd      	mov	sp, r7
 80025c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c4:	4770      	bx	lr
 80025c6:	bf00      	nop
 80025c8:	40023c00 	.word	0x40023c00

080025cc <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  * 
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 80025cc:	b480      	push	{r7}
 80025ce:	b085      	sub	sp, #20
 80025d0:	af00      	add	r7, sp, #0
 80025d2:	6078      	str	r0, [r7, #4]
 80025d4:	460b      	mov	r3, r1
 80025d6:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 80025d8:	2300      	movs	r3, #0
 80025da:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  
  if(VoltageRange == FLASH_VOLTAGE_RANGE_1)
 80025dc:	78fb      	ldrb	r3, [r7, #3]
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d102      	bne.n	80025e8 <FLASH_Erase_Sector+0x1c>
  {
     tmp_psize = FLASH_PSIZE_BYTE;
 80025e2:	2300      	movs	r3, #0
 80025e4:	60fb      	str	r3, [r7, #12]
 80025e6:	e010      	b.n	800260a <FLASH_Erase_Sector+0x3e>
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_2)
 80025e8:	78fb      	ldrb	r3, [r7, #3]
 80025ea:	2b01      	cmp	r3, #1
 80025ec:	d103      	bne.n	80025f6 <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 80025ee:	f44f 7380 	mov.w	r3, #256	; 0x100
 80025f2:	60fb      	str	r3, [r7, #12]
 80025f4:	e009      	b.n	800260a <FLASH_Erase_Sector+0x3e>
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_3)
 80025f6:	78fb      	ldrb	r3, [r7, #3]
 80025f8:	2b02      	cmp	r3, #2
 80025fa:	d103      	bne.n	8002604 <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 80025fc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002600:	60fb      	str	r3, [r7, #12]
 8002602:	e002      	b.n	800260a <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 8002604:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002608:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800260a:	4b13      	ldr	r3, [pc, #76]	; (8002658 <FLASH_Erase_Sector+0x8c>)
 800260c:	691b      	ldr	r3, [r3, #16]
 800260e:	4a12      	ldr	r2, [pc, #72]	; (8002658 <FLASH_Erase_Sector+0x8c>)
 8002610:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002614:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 8002616:	4b10      	ldr	r3, [pc, #64]	; (8002658 <FLASH_Erase_Sector+0x8c>)
 8002618:	691a      	ldr	r2, [r3, #16]
 800261a:	490f      	ldr	r1, [pc, #60]	; (8002658 <FLASH_Erase_Sector+0x8c>)
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	4313      	orrs	r3, r2
 8002620:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 8002622:	4b0d      	ldr	r3, [pc, #52]	; (8002658 <FLASH_Erase_Sector+0x8c>)
 8002624:	691b      	ldr	r3, [r3, #16]
 8002626:	4a0c      	ldr	r2, [pc, #48]	; (8002658 <FLASH_Erase_Sector+0x8c>)
 8002628:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800262c:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 800262e:	4b0a      	ldr	r3, [pc, #40]	; (8002658 <FLASH_Erase_Sector+0x8c>)
 8002630:	691a      	ldr	r2, [r3, #16]
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	00db      	lsls	r3, r3, #3
 8002636:	4313      	orrs	r3, r2
 8002638:	4a07      	ldr	r2, [pc, #28]	; (8002658 <FLASH_Erase_Sector+0x8c>)
 800263a:	f043 0302 	orr.w	r3, r3, #2
 800263e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 8002640:	4b05      	ldr	r3, [pc, #20]	; (8002658 <FLASH_Erase_Sector+0x8c>)
 8002642:	691b      	ldr	r3, [r3, #16]
 8002644:	4a04      	ldr	r2, [pc, #16]	; (8002658 <FLASH_Erase_Sector+0x8c>)
 8002646:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800264a:	6113      	str	r3, [r2, #16]
}
 800264c:	bf00      	nop
 800264e:	3714      	adds	r7, #20
 8002650:	46bd      	mov	sp, r7
 8002652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002656:	4770      	bx	lr
 8002658:	40023c00 	.word	0x40023c00

0800265c <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 800265c:	b480      	push	{r7}
 800265e:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if(READ_BIT(FLASH->ACR, FLASH_ACR_ICEN)!= RESET)
 8002660:	4b20      	ldr	r3, [pc, #128]	; (80026e4 <FLASH_FlushCaches+0x88>)
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002668:	2b00      	cmp	r3, #0
 800266a:	d017      	beq.n	800269c <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 800266c:	4b1d      	ldr	r3, [pc, #116]	; (80026e4 <FLASH_FlushCaches+0x88>)
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	4a1c      	ldr	r2, [pc, #112]	; (80026e4 <FLASH_FlushCaches+0x88>)
 8002672:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002676:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8002678:	4b1a      	ldr	r3, [pc, #104]	; (80026e4 <FLASH_FlushCaches+0x88>)
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	4a19      	ldr	r2, [pc, #100]	; (80026e4 <FLASH_FlushCaches+0x88>)
 800267e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002682:	6013      	str	r3, [r2, #0]
 8002684:	4b17      	ldr	r3, [pc, #92]	; (80026e4 <FLASH_FlushCaches+0x88>)
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	4a16      	ldr	r2, [pc, #88]	; (80026e4 <FLASH_FlushCaches+0x88>)
 800268a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800268e:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002690:	4b14      	ldr	r3, [pc, #80]	; (80026e4 <FLASH_FlushCaches+0x88>)
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	4a13      	ldr	r2, [pc, #76]	; (80026e4 <FLASH_FlushCaches+0x88>)
 8002696:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800269a:	6013      	str	r3, [r2, #0]
  }
  
  /* Flush data cache */
  if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 800269c:	4b11      	ldr	r3, [pc, #68]	; (80026e4 <FLASH_FlushCaches+0x88>)
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d017      	beq.n	80026d8 <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 80026a8:	4b0e      	ldr	r3, [pc, #56]	; (80026e4 <FLASH_FlushCaches+0x88>)
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	4a0d      	ldr	r2, [pc, #52]	; (80026e4 <FLASH_FlushCaches+0x88>)
 80026ae:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80026b2:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 80026b4:	4b0b      	ldr	r3, [pc, #44]	; (80026e4 <FLASH_FlushCaches+0x88>)
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	4a0a      	ldr	r2, [pc, #40]	; (80026e4 <FLASH_FlushCaches+0x88>)
 80026ba:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80026be:	6013      	str	r3, [r2, #0]
 80026c0:	4b08      	ldr	r3, [pc, #32]	; (80026e4 <FLASH_FlushCaches+0x88>)
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	4a07      	ldr	r2, [pc, #28]	; (80026e4 <FLASH_FlushCaches+0x88>)
 80026c6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80026ca:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 80026cc:	4b05      	ldr	r3, [pc, #20]	; (80026e4 <FLASH_FlushCaches+0x88>)
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	4a04      	ldr	r2, [pc, #16]	; (80026e4 <FLASH_FlushCaches+0x88>)
 80026d2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80026d6:	6013      	str	r3, [r2, #0]
  }
}
 80026d8:	bf00      	nop
 80026da:	46bd      	mov	sp, r7
 80026dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e0:	4770      	bx	lr
 80026e2:	bf00      	nop
 80026e4:	40023c00 	.word	0x40023c00

080026e8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80026e8:	b480      	push	{r7}
 80026ea:	b089      	sub	sp, #36	; 0x24
 80026ec:	af00      	add	r7, sp, #0
 80026ee:	6078      	str	r0, [r7, #4]
 80026f0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80026f2:	2300      	movs	r3, #0
 80026f4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80026f6:	2300      	movs	r3, #0
 80026f8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80026fa:	2300      	movs	r3, #0
 80026fc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80026fe:	2300      	movs	r3, #0
 8002700:	61fb      	str	r3, [r7, #28]
 8002702:	e16b      	b.n	80029dc <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002704:	2201      	movs	r2, #1
 8002706:	69fb      	ldr	r3, [r7, #28]
 8002708:	fa02 f303 	lsl.w	r3, r2, r3
 800270c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800270e:	683b      	ldr	r3, [r7, #0]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	697a      	ldr	r2, [r7, #20]
 8002714:	4013      	ands	r3, r2
 8002716:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002718:	693a      	ldr	r2, [r7, #16]
 800271a:	697b      	ldr	r3, [r7, #20]
 800271c:	429a      	cmp	r2, r3
 800271e:	f040 815a 	bne.w	80029d6 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002722:	683b      	ldr	r3, [r7, #0]
 8002724:	685b      	ldr	r3, [r3, #4]
 8002726:	2b01      	cmp	r3, #1
 8002728:	d00b      	beq.n	8002742 <HAL_GPIO_Init+0x5a>
 800272a:	683b      	ldr	r3, [r7, #0]
 800272c:	685b      	ldr	r3, [r3, #4]
 800272e:	2b02      	cmp	r3, #2
 8002730:	d007      	beq.n	8002742 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002732:	683b      	ldr	r3, [r7, #0]
 8002734:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002736:	2b11      	cmp	r3, #17
 8002738:	d003      	beq.n	8002742 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800273a:	683b      	ldr	r3, [r7, #0]
 800273c:	685b      	ldr	r3, [r3, #4]
 800273e:	2b12      	cmp	r3, #18
 8002740:	d130      	bne.n	80027a4 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	689b      	ldr	r3, [r3, #8]
 8002746:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002748:	69fb      	ldr	r3, [r7, #28]
 800274a:	005b      	lsls	r3, r3, #1
 800274c:	2203      	movs	r2, #3
 800274e:	fa02 f303 	lsl.w	r3, r2, r3
 8002752:	43db      	mvns	r3, r3
 8002754:	69ba      	ldr	r2, [r7, #24]
 8002756:	4013      	ands	r3, r2
 8002758:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800275a:	683b      	ldr	r3, [r7, #0]
 800275c:	68da      	ldr	r2, [r3, #12]
 800275e:	69fb      	ldr	r3, [r7, #28]
 8002760:	005b      	lsls	r3, r3, #1
 8002762:	fa02 f303 	lsl.w	r3, r2, r3
 8002766:	69ba      	ldr	r2, [r7, #24]
 8002768:	4313      	orrs	r3, r2
 800276a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	69ba      	ldr	r2, [r7, #24]
 8002770:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	685b      	ldr	r3, [r3, #4]
 8002776:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002778:	2201      	movs	r2, #1
 800277a:	69fb      	ldr	r3, [r7, #28]
 800277c:	fa02 f303 	lsl.w	r3, r2, r3
 8002780:	43db      	mvns	r3, r3
 8002782:	69ba      	ldr	r2, [r7, #24]
 8002784:	4013      	ands	r3, r2
 8002786:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002788:	683b      	ldr	r3, [r7, #0]
 800278a:	685b      	ldr	r3, [r3, #4]
 800278c:	091b      	lsrs	r3, r3, #4
 800278e:	f003 0201 	and.w	r2, r3, #1
 8002792:	69fb      	ldr	r3, [r7, #28]
 8002794:	fa02 f303 	lsl.w	r3, r2, r3
 8002798:	69ba      	ldr	r2, [r7, #24]
 800279a:	4313      	orrs	r3, r2
 800279c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	69ba      	ldr	r2, [r7, #24]
 80027a2:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	68db      	ldr	r3, [r3, #12]
 80027a8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80027aa:	69fb      	ldr	r3, [r7, #28]
 80027ac:	005b      	lsls	r3, r3, #1
 80027ae:	2203      	movs	r2, #3
 80027b0:	fa02 f303 	lsl.w	r3, r2, r3
 80027b4:	43db      	mvns	r3, r3
 80027b6:	69ba      	ldr	r2, [r7, #24]
 80027b8:	4013      	ands	r3, r2
 80027ba:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80027bc:	683b      	ldr	r3, [r7, #0]
 80027be:	689a      	ldr	r2, [r3, #8]
 80027c0:	69fb      	ldr	r3, [r7, #28]
 80027c2:	005b      	lsls	r3, r3, #1
 80027c4:	fa02 f303 	lsl.w	r3, r2, r3
 80027c8:	69ba      	ldr	r2, [r7, #24]
 80027ca:	4313      	orrs	r3, r2
 80027cc:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	69ba      	ldr	r2, [r7, #24]
 80027d2:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80027d4:	683b      	ldr	r3, [r7, #0]
 80027d6:	685b      	ldr	r3, [r3, #4]
 80027d8:	2b02      	cmp	r3, #2
 80027da:	d003      	beq.n	80027e4 <HAL_GPIO_Init+0xfc>
 80027dc:	683b      	ldr	r3, [r7, #0]
 80027de:	685b      	ldr	r3, [r3, #4]
 80027e0:	2b12      	cmp	r3, #18
 80027e2:	d123      	bne.n	800282c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80027e4:	69fb      	ldr	r3, [r7, #28]
 80027e6:	08da      	lsrs	r2, r3, #3
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	3208      	adds	r2, #8
 80027ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80027f0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80027f2:	69fb      	ldr	r3, [r7, #28]
 80027f4:	f003 0307 	and.w	r3, r3, #7
 80027f8:	009b      	lsls	r3, r3, #2
 80027fa:	220f      	movs	r2, #15
 80027fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002800:	43db      	mvns	r3, r3
 8002802:	69ba      	ldr	r2, [r7, #24]
 8002804:	4013      	ands	r3, r2
 8002806:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002808:	683b      	ldr	r3, [r7, #0]
 800280a:	691a      	ldr	r2, [r3, #16]
 800280c:	69fb      	ldr	r3, [r7, #28]
 800280e:	f003 0307 	and.w	r3, r3, #7
 8002812:	009b      	lsls	r3, r3, #2
 8002814:	fa02 f303 	lsl.w	r3, r2, r3
 8002818:	69ba      	ldr	r2, [r7, #24]
 800281a:	4313      	orrs	r3, r2
 800281c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800281e:	69fb      	ldr	r3, [r7, #28]
 8002820:	08da      	lsrs	r2, r3, #3
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	3208      	adds	r2, #8
 8002826:	69b9      	ldr	r1, [r7, #24]
 8002828:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002832:	69fb      	ldr	r3, [r7, #28]
 8002834:	005b      	lsls	r3, r3, #1
 8002836:	2203      	movs	r2, #3
 8002838:	fa02 f303 	lsl.w	r3, r2, r3
 800283c:	43db      	mvns	r3, r3
 800283e:	69ba      	ldr	r2, [r7, #24]
 8002840:	4013      	ands	r3, r2
 8002842:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002844:	683b      	ldr	r3, [r7, #0]
 8002846:	685b      	ldr	r3, [r3, #4]
 8002848:	f003 0203 	and.w	r2, r3, #3
 800284c:	69fb      	ldr	r3, [r7, #28]
 800284e:	005b      	lsls	r3, r3, #1
 8002850:	fa02 f303 	lsl.w	r3, r2, r3
 8002854:	69ba      	ldr	r2, [r7, #24]
 8002856:	4313      	orrs	r3, r2
 8002858:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	69ba      	ldr	r2, [r7, #24]
 800285e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002860:	683b      	ldr	r3, [r7, #0]
 8002862:	685b      	ldr	r3, [r3, #4]
 8002864:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002868:	2b00      	cmp	r3, #0
 800286a:	f000 80b4 	beq.w	80029d6 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800286e:	2300      	movs	r3, #0
 8002870:	60fb      	str	r3, [r7, #12]
 8002872:	4b5f      	ldr	r3, [pc, #380]	; (80029f0 <HAL_GPIO_Init+0x308>)
 8002874:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002876:	4a5e      	ldr	r2, [pc, #376]	; (80029f0 <HAL_GPIO_Init+0x308>)
 8002878:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800287c:	6453      	str	r3, [r2, #68]	; 0x44
 800287e:	4b5c      	ldr	r3, [pc, #368]	; (80029f0 <HAL_GPIO_Init+0x308>)
 8002880:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002882:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002886:	60fb      	str	r3, [r7, #12]
 8002888:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800288a:	4a5a      	ldr	r2, [pc, #360]	; (80029f4 <HAL_GPIO_Init+0x30c>)
 800288c:	69fb      	ldr	r3, [r7, #28]
 800288e:	089b      	lsrs	r3, r3, #2
 8002890:	3302      	adds	r3, #2
 8002892:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002896:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002898:	69fb      	ldr	r3, [r7, #28]
 800289a:	f003 0303 	and.w	r3, r3, #3
 800289e:	009b      	lsls	r3, r3, #2
 80028a0:	220f      	movs	r2, #15
 80028a2:	fa02 f303 	lsl.w	r3, r2, r3
 80028a6:	43db      	mvns	r3, r3
 80028a8:	69ba      	ldr	r2, [r7, #24]
 80028aa:	4013      	ands	r3, r2
 80028ac:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	4a51      	ldr	r2, [pc, #324]	; (80029f8 <HAL_GPIO_Init+0x310>)
 80028b2:	4293      	cmp	r3, r2
 80028b4:	d02b      	beq.n	800290e <HAL_GPIO_Init+0x226>
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	4a50      	ldr	r2, [pc, #320]	; (80029fc <HAL_GPIO_Init+0x314>)
 80028ba:	4293      	cmp	r3, r2
 80028bc:	d025      	beq.n	800290a <HAL_GPIO_Init+0x222>
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	4a4f      	ldr	r2, [pc, #316]	; (8002a00 <HAL_GPIO_Init+0x318>)
 80028c2:	4293      	cmp	r3, r2
 80028c4:	d01f      	beq.n	8002906 <HAL_GPIO_Init+0x21e>
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	4a4e      	ldr	r2, [pc, #312]	; (8002a04 <HAL_GPIO_Init+0x31c>)
 80028ca:	4293      	cmp	r3, r2
 80028cc:	d019      	beq.n	8002902 <HAL_GPIO_Init+0x21a>
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	4a4d      	ldr	r2, [pc, #308]	; (8002a08 <HAL_GPIO_Init+0x320>)
 80028d2:	4293      	cmp	r3, r2
 80028d4:	d013      	beq.n	80028fe <HAL_GPIO_Init+0x216>
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	4a4c      	ldr	r2, [pc, #304]	; (8002a0c <HAL_GPIO_Init+0x324>)
 80028da:	4293      	cmp	r3, r2
 80028dc:	d00d      	beq.n	80028fa <HAL_GPIO_Init+0x212>
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	4a4b      	ldr	r2, [pc, #300]	; (8002a10 <HAL_GPIO_Init+0x328>)
 80028e2:	4293      	cmp	r3, r2
 80028e4:	d007      	beq.n	80028f6 <HAL_GPIO_Init+0x20e>
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	4a4a      	ldr	r2, [pc, #296]	; (8002a14 <HAL_GPIO_Init+0x32c>)
 80028ea:	4293      	cmp	r3, r2
 80028ec:	d101      	bne.n	80028f2 <HAL_GPIO_Init+0x20a>
 80028ee:	2307      	movs	r3, #7
 80028f0:	e00e      	b.n	8002910 <HAL_GPIO_Init+0x228>
 80028f2:	2308      	movs	r3, #8
 80028f4:	e00c      	b.n	8002910 <HAL_GPIO_Init+0x228>
 80028f6:	2306      	movs	r3, #6
 80028f8:	e00a      	b.n	8002910 <HAL_GPIO_Init+0x228>
 80028fa:	2305      	movs	r3, #5
 80028fc:	e008      	b.n	8002910 <HAL_GPIO_Init+0x228>
 80028fe:	2304      	movs	r3, #4
 8002900:	e006      	b.n	8002910 <HAL_GPIO_Init+0x228>
 8002902:	2303      	movs	r3, #3
 8002904:	e004      	b.n	8002910 <HAL_GPIO_Init+0x228>
 8002906:	2302      	movs	r3, #2
 8002908:	e002      	b.n	8002910 <HAL_GPIO_Init+0x228>
 800290a:	2301      	movs	r3, #1
 800290c:	e000      	b.n	8002910 <HAL_GPIO_Init+0x228>
 800290e:	2300      	movs	r3, #0
 8002910:	69fa      	ldr	r2, [r7, #28]
 8002912:	f002 0203 	and.w	r2, r2, #3
 8002916:	0092      	lsls	r2, r2, #2
 8002918:	4093      	lsls	r3, r2
 800291a:	69ba      	ldr	r2, [r7, #24]
 800291c:	4313      	orrs	r3, r2
 800291e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002920:	4934      	ldr	r1, [pc, #208]	; (80029f4 <HAL_GPIO_Init+0x30c>)
 8002922:	69fb      	ldr	r3, [r7, #28]
 8002924:	089b      	lsrs	r3, r3, #2
 8002926:	3302      	adds	r3, #2
 8002928:	69ba      	ldr	r2, [r7, #24]
 800292a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800292e:	4b3a      	ldr	r3, [pc, #232]	; (8002a18 <HAL_GPIO_Init+0x330>)
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002934:	693b      	ldr	r3, [r7, #16]
 8002936:	43db      	mvns	r3, r3
 8002938:	69ba      	ldr	r2, [r7, #24]
 800293a:	4013      	ands	r3, r2
 800293c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800293e:	683b      	ldr	r3, [r7, #0]
 8002940:	685b      	ldr	r3, [r3, #4]
 8002942:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002946:	2b00      	cmp	r3, #0
 8002948:	d003      	beq.n	8002952 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800294a:	69ba      	ldr	r2, [r7, #24]
 800294c:	693b      	ldr	r3, [r7, #16]
 800294e:	4313      	orrs	r3, r2
 8002950:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002952:	4a31      	ldr	r2, [pc, #196]	; (8002a18 <HAL_GPIO_Init+0x330>)
 8002954:	69bb      	ldr	r3, [r7, #24]
 8002956:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002958:	4b2f      	ldr	r3, [pc, #188]	; (8002a18 <HAL_GPIO_Init+0x330>)
 800295a:	685b      	ldr	r3, [r3, #4]
 800295c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800295e:	693b      	ldr	r3, [r7, #16]
 8002960:	43db      	mvns	r3, r3
 8002962:	69ba      	ldr	r2, [r7, #24]
 8002964:	4013      	ands	r3, r2
 8002966:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002968:	683b      	ldr	r3, [r7, #0]
 800296a:	685b      	ldr	r3, [r3, #4]
 800296c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002970:	2b00      	cmp	r3, #0
 8002972:	d003      	beq.n	800297c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002974:	69ba      	ldr	r2, [r7, #24]
 8002976:	693b      	ldr	r3, [r7, #16]
 8002978:	4313      	orrs	r3, r2
 800297a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800297c:	4a26      	ldr	r2, [pc, #152]	; (8002a18 <HAL_GPIO_Init+0x330>)
 800297e:	69bb      	ldr	r3, [r7, #24]
 8002980:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002982:	4b25      	ldr	r3, [pc, #148]	; (8002a18 <HAL_GPIO_Init+0x330>)
 8002984:	689b      	ldr	r3, [r3, #8]
 8002986:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002988:	693b      	ldr	r3, [r7, #16]
 800298a:	43db      	mvns	r3, r3
 800298c:	69ba      	ldr	r2, [r7, #24]
 800298e:	4013      	ands	r3, r2
 8002990:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002992:	683b      	ldr	r3, [r7, #0]
 8002994:	685b      	ldr	r3, [r3, #4]
 8002996:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800299a:	2b00      	cmp	r3, #0
 800299c:	d003      	beq.n	80029a6 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800299e:	69ba      	ldr	r2, [r7, #24]
 80029a0:	693b      	ldr	r3, [r7, #16]
 80029a2:	4313      	orrs	r3, r2
 80029a4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80029a6:	4a1c      	ldr	r2, [pc, #112]	; (8002a18 <HAL_GPIO_Init+0x330>)
 80029a8:	69bb      	ldr	r3, [r7, #24]
 80029aa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80029ac:	4b1a      	ldr	r3, [pc, #104]	; (8002a18 <HAL_GPIO_Init+0x330>)
 80029ae:	68db      	ldr	r3, [r3, #12]
 80029b0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80029b2:	693b      	ldr	r3, [r7, #16]
 80029b4:	43db      	mvns	r3, r3
 80029b6:	69ba      	ldr	r2, [r7, #24]
 80029b8:	4013      	ands	r3, r2
 80029ba:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80029bc:	683b      	ldr	r3, [r7, #0]
 80029be:	685b      	ldr	r3, [r3, #4]
 80029c0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d003      	beq.n	80029d0 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80029c8:	69ba      	ldr	r2, [r7, #24]
 80029ca:	693b      	ldr	r3, [r7, #16]
 80029cc:	4313      	orrs	r3, r2
 80029ce:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80029d0:	4a11      	ldr	r2, [pc, #68]	; (8002a18 <HAL_GPIO_Init+0x330>)
 80029d2:	69bb      	ldr	r3, [r7, #24]
 80029d4:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80029d6:	69fb      	ldr	r3, [r7, #28]
 80029d8:	3301      	adds	r3, #1
 80029da:	61fb      	str	r3, [r7, #28]
 80029dc:	69fb      	ldr	r3, [r7, #28]
 80029de:	2b0f      	cmp	r3, #15
 80029e0:	f67f ae90 	bls.w	8002704 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80029e4:	bf00      	nop
 80029e6:	3724      	adds	r7, #36	; 0x24
 80029e8:	46bd      	mov	sp, r7
 80029ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ee:	4770      	bx	lr
 80029f0:	40023800 	.word	0x40023800
 80029f4:	40013800 	.word	0x40013800
 80029f8:	40020000 	.word	0x40020000
 80029fc:	40020400 	.word	0x40020400
 8002a00:	40020800 	.word	0x40020800
 8002a04:	40020c00 	.word	0x40020c00
 8002a08:	40021000 	.word	0x40021000
 8002a0c:	40021400 	.word	0x40021400
 8002a10:	40021800 	.word	0x40021800
 8002a14:	40021c00 	.word	0x40021c00
 8002a18:	40013c00 	.word	0x40013c00

08002a1c <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8002a1c:	b480      	push	{r7}
 8002a1e:	b087      	sub	sp, #28
 8002a20:	af00      	add	r7, sp, #0
 8002a22:	6078      	str	r0, [r7, #4]
 8002a24:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002a26:	2300      	movs	r3, #0
 8002a28:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 8002a2a:	2300      	movs	r3, #0
 8002a2c:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 8002a2e:	2300      	movs	r3, #0
 8002a30:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002a32:	2300      	movs	r3, #0
 8002a34:	617b      	str	r3, [r7, #20]
 8002a36:	e0cd      	b.n	8002bd4 <HAL_GPIO_DeInit+0x1b8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002a38:	2201      	movs	r2, #1
 8002a3a:	697b      	ldr	r3, [r7, #20]
 8002a3c:	fa02 f303 	lsl.w	r3, r2, r3
 8002a40:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8002a42:	683a      	ldr	r2, [r7, #0]
 8002a44:	693b      	ldr	r3, [r7, #16]
 8002a46:	4013      	ands	r3, r2
 8002a48:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 8002a4a:	68fa      	ldr	r2, [r7, #12]
 8002a4c:	693b      	ldr	r3, [r7, #16]
 8002a4e:	429a      	cmp	r2, r3
 8002a50:	f040 80bd 	bne.w	8002bce <HAL_GPIO_DeInit+0x1b2>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 8002a54:	4a64      	ldr	r2, [pc, #400]	; (8002be8 <HAL_GPIO_DeInit+0x1cc>)
 8002a56:	697b      	ldr	r3, [r7, #20]
 8002a58:	089b      	lsrs	r3, r3, #2
 8002a5a:	3302      	adds	r3, #2
 8002a5c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002a60:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 8002a62:	697b      	ldr	r3, [r7, #20]
 8002a64:	f003 0303 	and.w	r3, r3, #3
 8002a68:	009b      	lsls	r3, r3, #2
 8002a6a:	220f      	movs	r2, #15
 8002a6c:	fa02 f303 	lsl.w	r3, r2, r3
 8002a70:	68ba      	ldr	r2, [r7, #8]
 8002a72:	4013      	ands	r3, r2
 8002a74:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	4a5c      	ldr	r2, [pc, #368]	; (8002bec <HAL_GPIO_DeInit+0x1d0>)
 8002a7a:	4293      	cmp	r3, r2
 8002a7c:	d02b      	beq.n	8002ad6 <HAL_GPIO_DeInit+0xba>
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	4a5b      	ldr	r2, [pc, #364]	; (8002bf0 <HAL_GPIO_DeInit+0x1d4>)
 8002a82:	4293      	cmp	r3, r2
 8002a84:	d025      	beq.n	8002ad2 <HAL_GPIO_DeInit+0xb6>
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	4a5a      	ldr	r2, [pc, #360]	; (8002bf4 <HAL_GPIO_DeInit+0x1d8>)
 8002a8a:	4293      	cmp	r3, r2
 8002a8c:	d01f      	beq.n	8002ace <HAL_GPIO_DeInit+0xb2>
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	4a59      	ldr	r2, [pc, #356]	; (8002bf8 <HAL_GPIO_DeInit+0x1dc>)
 8002a92:	4293      	cmp	r3, r2
 8002a94:	d019      	beq.n	8002aca <HAL_GPIO_DeInit+0xae>
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	4a58      	ldr	r2, [pc, #352]	; (8002bfc <HAL_GPIO_DeInit+0x1e0>)
 8002a9a:	4293      	cmp	r3, r2
 8002a9c:	d013      	beq.n	8002ac6 <HAL_GPIO_DeInit+0xaa>
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	4a57      	ldr	r2, [pc, #348]	; (8002c00 <HAL_GPIO_DeInit+0x1e4>)
 8002aa2:	4293      	cmp	r3, r2
 8002aa4:	d00d      	beq.n	8002ac2 <HAL_GPIO_DeInit+0xa6>
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	4a56      	ldr	r2, [pc, #344]	; (8002c04 <HAL_GPIO_DeInit+0x1e8>)
 8002aaa:	4293      	cmp	r3, r2
 8002aac:	d007      	beq.n	8002abe <HAL_GPIO_DeInit+0xa2>
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	4a55      	ldr	r2, [pc, #340]	; (8002c08 <HAL_GPIO_DeInit+0x1ec>)
 8002ab2:	4293      	cmp	r3, r2
 8002ab4:	d101      	bne.n	8002aba <HAL_GPIO_DeInit+0x9e>
 8002ab6:	2307      	movs	r3, #7
 8002ab8:	e00e      	b.n	8002ad8 <HAL_GPIO_DeInit+0xbc>
 8002aba:	2308      	movs	r3, #8
 8002abc:	e00c      	b.n	8002ad8 <HAL_GPIO_DeInit+0xbc>
 8002abe:	2306      	movs	r3, #6
 8002ac0:	e00a      	b.n	8002ad8 <HAL_GPIO_DeInit+0xbc>
 8002ac2:	2305      	movs	r3, #5
 8002ac4:	e008      	b.n	8002ad8 <HAL_GPIO_DeInit+0xbc>
 8002ac6:	2304      	movs	r3, #4
 8002ac8:	e006      	b.n	8002ad8 <HAL_GPIO_DeInit+0xbc>
 8002aca:	2303      	movs	r3, #3
 8002acc:	e004      	b.n	8002ad8 <HAL_GPIO_DeInit+0xbc>
 8002ace:	2302      	movs	r3, #2
 8002ad0:	e002      	b.n	8002ad8 <HAL_GPIO_DeInit+0xbc>
 8002ad2:	2301      	movs	r3, #1
 8002ad4:	e000      	b.n	8002ad8 <HAL_GPIO_DeInit+0xbc>
 8002ad6:	2300      	movs	r3, #0
 8002ad8:	697a      	ldr	r2, [r7, #20]
 8002ada:	f002 0203 	and.w	r2, r2, #3
 8002ade:	0092      	lsls	r2, r2, #2
 8002ae0:	4093      	lsls	r3, r2
 8002ae2:	68ba      	ldr	r2, [r7, #8]
 8002ae4:	429a      	cmp	r2, r3
 8002ae6:	d132      	bne.n	8002b4e <HAL_GPIO_DeInit+0x132>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8002ae8:	4b48      	ldr	r3, [pc, #288]	; (8002c0c <HAL_GPIO_DeInit+0x1f0>)
 8002aea:	681a      	ldr	r2, [r3, #0]
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	43db      	mvns	r3, r3
 8002af0:	4946      	ldr	r1, [pc, #280]	; (8002c0c <HAL_GPIO_DeInit+0x1f0>)
 8002af2:	4013      	ands	r3, r2
 8002af4:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8002af6:	4b45      	ldr	r3, [pc, #276]	; (8002c0c <HAL_GPIO_DeInit+0x1f0>)
 8002af8:	685a      	ldr	r2, [r3, #4]
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	43db      	mvns	r3, r3
 8002afe:	4943      	ldr	r1, [pc, #268]	; (8002c0c <HAL_GPIO_DeInit+0x1f0>)
 8002b00:	4013      	ands	r3, r2
 8002b02:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8002b04:	4b41      	ldr	r3, [pc, #260]	; (8002c0c <HAL_GPIO_DeInit+0x1f0>)
 8002b06:	689a      	ldr	r2, [r3, #8]
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	43db      	mvns	r3, r3
 8002b0c:	493f      	ldr	r1, [pc, #252]	; (8002c0c <HAL_GPIO_DeInit+0x1f0>)
 8002b0e:	4013      	ands	r3, r2
 8002b10:	608b      	str	r3, [r1, #8]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8002b12:	4b3e      	ldr	r3, [pc, #248]	; (8002c0c <HAL_GPIO_DeInit+0x1f0>)
 8002b14:	68da      	ldr	r2, [r3, #12]
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	43db      	mvns	r3, r3
 8002b1a:	493c      	ldr	r1, [pc, #240]	; (8002c0c <HAL_GPIO_DeInit+0x1f0>)
 8002b1c:	4013      	ands	r3, r2
 8002b1e:	60cb      	str	r3, [r1, #12]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 8002b20:	697b      	ldr	r3, [r7, #20]
 8002b22:	f003 0303 	and.w	r3, r3, #3
 8002b26:	009b      	lsls	r3, r3, #2
 8002b28:	220f      	movs	r2, #15
 8002b2a:	fa02 f303 	lsl.w	r3, r2, r3
 8002b2e:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8002b30:	4a2d      	ldr	r2, [pc, #180]	; (8002be8 <HAL_GPIO_DeInit+0x1cc>)
 8002b32:	697b      	ldr	r3, [r7, #20]
 8002b34:	089b      	lsrs	r3, r3, #2
 8002b36:	3302      	adds	r3, #2
 8002b38:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8002b3c:	68bb      	ldr	r3, [r7, #8]
 8002b3e:	43da      	mvns	r2, r3
 8002b40:	4829      	ldr	r0, [pc, #164]	; (8002be8 <HAL_GPIO_DeInit+0x1cc>)
 8002b42:	697b      	ldr	r3, [r7, #20]
 8002b44:	089b      	lsrs	r3, r3, #2
 8002b46:	400a      	ands	r2, r1
 8002b48:	3302      	adds	r3, #2
 8002b4a:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681a      	ldr	r2, [r3, #0]
 8002b52:	697b      	ldr	r3, [r7, #20]
 8002b54:	005b      	lsls	r3, r3, #1
 8002b56:	2103      	movs	r1, #3
 8002b58:	fa01 f303 	lsl.w	r3, r1, r3
 8002b5c:	43db      	mvns	r3, r3
 8002b5e:	401a      	ands	r2, r3
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002b64:	697b      	ldr	r3, [r7, #20]
 8002b66:	08da      	lsrs	r2, r3, #3
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	3208      	adds	r2, #8
 8002b6c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8002b70:	697b      	ldr	r3, [r7, #20]
 8002b72:	f003 0307 	and.w	r3, r3, #7
 8002b76:	009b      	lsls	r3, r3, #2
 8002b78:	220f      	movs	r2, #15
 8002b7a:	fa02 f303 	lsl.w	r3, r2, r3
 8002b7e:	43db      	mvns	r3, r3
 8002b80:	697a      	ldr	r2, [r7, #20]
 8002b82:	08d2      	lsrs	r2, r2, #3
 8002b84:	4019      	ands	r1, r3
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	3208      	adds	r2, #8
 8002b8a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	68da      	ldr	r2, [r3, #12]
 8002b92:	697b      	ldr	r3, [r7, #20]
 8002b94:	005b      	lsls	r3, r3, #1
 8002b96:	2103      	movs	r1, #3
 8002b98:	fa01 f303 	lsl.w	r3, r1, r3
 8002b9c:	43db      	mvns	r3, r3
 8002b9e:	401a      	ands	r2, r3
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	685a      	ldr	r2, [r3, #4]
 8002ba8:	2101      	movs	r1, #1
 8002baa:	697b      	ldr	r3, [r7, #20]
 8002bac:	fa01 f303 	lsl.w	r3, r1, r3
 8002bb0:	43db      	mvns	r3, r3
 8002bb2:	401a      	ands	r2, r3
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	689a      	ldr	r2, [r3, #8]
 8002bbc:	697b      	ldr	r3, [r7, #20]
 8002bbe:	005b      	lsls	r3, r3, #1
 8002bc0:	2103      	movs	r1, #3
 8002bc2:	fa01 f303 	lsl.w	r3, r1, r3
 8002bc6:	43db      	mvns	r3, r3
 8002bc8:	401a      	ands	r2, r3
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002bce:	697b      	ldr	r3, [r7, #20]
 8002bd0:	3301      	adds	r3, #1
 8002bd2:	617b      	str	r3, [r7, #20]
 8002bd4:	697b      	ldr	r3, [r7, #20]
 8002bd6:	2b0f      	cmp	r3, #15
 8002bd8:	f67f af2e 	bls.w	8002a38 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8002bdc:	bf00      	nop
 8002bde:	371c      	adds	r7, #28
 8002be0:	46bd      	mov	sp, r7
 8002be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be6:	4770      	bx	lr
 8002be8:	40013800 	.word	0x40013800
 8002bec:	40020000 	.word	0x40020000
 8002bf0:	40020400 	.word	0x40020400
 8002bf4:	40020800 	.word	0x40020800
 8002bf8:	40020c00 	.word	0x40020c00
 8002bfc:	40021000 	.word	0x40021000
 8002c00:	40021400 	.word	0x40021400
 8002c04:	40021800 	.word	0x40021800
 8002c08:	40021c00 	.word	0x40021c00
 8002c0c:	40013c00 	.word	0x40013c00

08002c10 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002c10:	b480      	push	{r7}
 8002c12:	b083      	sub	sp, #12
 8002c14:	af00      	add	r7, sp, #0
 8002c16:	6078      	str	r0, [r7, #4]
 8002c18:	460b      	mov	r3, r1
 8002c1a:	807b      	strh	r3, [r7, #2]
 8002c1c:	4613      	mov	r3, r2
 8002c1e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002c20:	787b      	ldrb	r3, [r7, #1]
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d003      	beq.n	8002c2e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002c26:	887a      	ldrh	r2, [r7, #2]
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002c2c:	e003      	b.n	8002c36 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002c2e:	887b      	ldrh	r3, [r7, #2]
 8002c30:	041a      	lsls	r2, r3, #16
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	619a      	str	r2, [r3, #24]
}
 8002c36:	bf00      	nop
 8002c38:	370c      	adds	r7, #12
 8002c3a:	46bd      	mov	sp, r7
 8002c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c40:	4770      	bx	lr

08002c42 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002c42:	b480      	push	{r7}
 8002c44:	b083      	sub	sp, #12
 8002c46:	af00      	add	r7, sp, #0
 8002c48:	6078      	str	r0, [r7, #4]
 8002c4a:	460b      	mov	r3, r1
 8002c4c:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	695a      	ldr	r2, [r3, #20]
 8002c52:	887b      	ldrh	r3, [r7, #2]
 8002c54:	401a      	ands	r2, r3
 8002c56:	887b      	ldrh	r3, [r7, #2]
 8002c58:	429a      	cmp	r2, r3
 8002c5a:	d104      	bne.n	8002c66 <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8002c5c:	887b      	ldrh	r3, [r7, #2]
 8002c5e:	041a      	lsls	r2, r3, #16
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8002c64:	e002      	b.n	8002c6c <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 8002c66:	887a      	ldrh	r2, [r7, #2]
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	619a      	str	r2, [r3, #24]
}
 8002c6c:	bf00      	nop
 8002c6e:	370c      	adds	r7, #12
 8002c70:	46bd      	mov	sp, r7
 8002c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c76:	4770      	bx	lr

08002c78 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002c78:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002c7a:	b08f      	sub	sp, #60	; 0x3c
 8002c7c:	af0a      	add	r7, sp, #40	; 0x28
 8002c7e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d101      	bne.n	8002c8a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002c86:	2301      	movs	r3, #1
 8002c88:	e10f      	b.n	8002eaa <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8002c96:	b2db      	uxtb	r3, r3
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d106      	bne.n	8002caa <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	2200      	movs	r2, #0
 8002ca0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002ca4:	6878      	ldr	r0, [r7, #4]
 8002ca6:	f006 fa6b 	bl	8009180 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	2203      	movs	r2, #3
 8002cae:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002cb2:	68bb      	ldr	r3, [r7, #8]
 8002cb4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002cb6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d102      	bne.n	8002cc4 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	2200      	movs	r2, #0
 8002cc2:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	4618      	mov	r0, r3
 8002cca:	f003 f8fa 	bl	8005ec2 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	603b      	str	r3, [r7, #0]
 8002cd4:	687e      	ldr	r6, [r7, #4]
 8002cd6:	466d      	mov	r5, sp
 8002cd8:	f106 0410 	add.w	r4, r6, #16
 8002cdc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002cde:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002ce0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002ce2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002ce4:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002ce8:	e885 0003 	stmia.w	r5, {r0, r1}
 8002cec:	1d33      	adds	r3, r6, #4
 8002cee:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002cf0:	6838      	ldr	r0, [r7, #0]
 8002cf2:	f002 ffd1 	bl	8005c98 <USB_CoreInit>
 8002cf6:	4603      	mov	r3, r0
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d005      	beq.n	8002d08 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	2202      	movs	r2, #2
 8002d00:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8002d04:	2301      	movs	r3, #1
 8002d06:	e0d0      	b.n	8002eaa <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	2100      	movs	r1, #0
 8002d0e:	4618      	mov	r0, r3
 8002d10:	f003 f8e8 	bl	8005ee4 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002d14:	2300      	movs	r3, #0
 8002d16:	73fb      	strb	r3, [r7, #15]
 8002d18:	e04a      	b.n	8002db0 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002d1a:	7bfa      	ldrb	r2, [r7, #15]
 8002d1c:	6879      	ldr	r1, [r7, #4]
 8002d1e:	4613      	mov	r3, r2
 8002d20:	00db      	lsls	r3, r3, #3
 8002d22:	1a9b      	subs	r3, r3, r2
 8002d24:	009b      	lsls	r3, r3, #2
 8002d26:	440b      	add	r3, r1
 8002d28:	333d      	adds	r3, #61	; 0x3d
 8002d2a:	2201      	movs	r2, #1
 8002d2c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002d2e:	7bfa      	ldrb	r2, [r7, #15]
 8002d30:	6879      	ldr	r1, [r7, #4]
 8002d32:	4613      	mov	r3, r2
 8002d34:	00db      	lsls	r3, r3, #3
 8002d36:	1a9b      	subs	r3, r3, r2
 8002d38:	009b      	lsls	r3, r3, #2
 8002d3a:	440b      	add	r3, r1
 8002d3c:	333c      	adds	r3, #60	; 0x3c
 8002d3e:	7bfa      	ldrb	r2, [r7, #15]
 8002d40:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002d42:	7bfa      	ldrb	r2, [r7, #15]
 8002d44:	7bfb      	ldrb	r3, [r7, #15]
 8002d46:	b298      	uxth	r0, r3
 8002d48:	6879      	ldr	r1, [r7, #4]
 8002d4a:	4613      	mov	r3, r2
 8002d4c:	00db      	lsls	r3, r3, #3
 8002d4e:	1a9b      	subs	r3, r3, r2
 8002d50:	009b      	lsls	r3, r3, #2
 8002d52:	440b      	add	r3, r1
 8002d54:	3342      	adds	r3, #66	; 0x42
 8002d56:	4602      	mov	r2, r0
 8002d58:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002d5a:	7bfa      	ldrb	r2, [r7, #15]
 8002d5c:	6879      	ldr	r1, [r7, #4]
 8002d5e:	4613      	mov	r3, r2
 8002d60:	00db      	lsls	r3, r3, #3
 8002d62:	1a9b      	subs	r3, r3, r2
 8002d64:	009b      	lsls	r3, r3, #2
 8002d66:	440b      	add	r3, r1
 8002d68:	333f      	adds	r3, #63	; 0x3f
 8002d6a:	2200      	movs	r2, #0
 8002d6c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002d6e:	7bfa      	ldrb	r2, [r7, #15]
 8002d70:	6879      	ldr	r1, [r7, #4]
 8002d72:	4613      	mov	r3, r2
 8002d74:	00db      	lsls	r3, r3, #3
 8002d76:	1a9b      	subs	r3, r3, r2
 8002d78:	009b      	lsls	r3, r3, #2
 8002d7a:	440b      	add	r3, r1
 8002d7c:	3344      	adds	r3, #68	; 0x44
 8002d7e:	2200      	movs	r2, #0
 8002d80:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002d82:	7bfa      	ldrb	r2, [r7, #15]
 8002d84:	6879      	ldr	r1, [r7, #4]
 8002d86:	4613      	mov	r3, r2
 8002d88:	00db      	lsls	r3, r3, #3
 8002d8a:	1a9b      	subs	r3, r3, r2
 8002d8c:	009b      	lsls	r3, r3, #2
 8002d8e:	440b      	add	r3, r1
 8002d90:	3348      	adds	r3, #72	; 0x48
 8002d92:	2200      	movs	r2, #0
 8002d94:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002d96:	7bfa      	ldrb	r2, [r7, #15]
 8002d98:	6879      	ldr	r1, [r7, #4]
 8002d9a:	4613      	mov	r3, r2
 8002d9c:	00db      	lsls	r3, r3, #3
 8002d9e:	1a9b      	subs	r3, r3, r2
 8002da0:	009b      	lsls	r3, r3, #2
 8002da2:	440b      	add	r3, r1
 8002da4:	3350      	adds	r3, #80	; 0x50
 8002da6:	2200      	movs	r2, #0
 8002da8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002daa:	7bfb      	ldrb	r3, [r7, #15]
 8002dac:	3301      	adds	r3, #1
 8002dae:	73fb      	strb	r3, [r7, #15]
 8002db0:	7bfa      	ldrb	r2, [r7, #15]
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	685b      	ldr	r3, [r3, #4]
 8002db6:	429a      	cmp	r2, r3
 8002db8:	d3af      	bcc.n	8002d1a <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002dba:	2300      	movs	r3, #0
 8002dbc:	73fb      	strb	r3, [r7, #15]
 8002dbe:	e044      	b.n	8002e4a <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002dc0:	7bfa      	ldrb	r2, [r7, #15]
 8002dc2:	6879      	ldr	r1, [r7, #4]
 8002dc4:	4613      	mov	r3, r2
 8002dc6:	00db      	lsls	r3, r3, #3
 8002dc8:	1a9b      	subs	r3, r3, r2
 8002dca:	009b      	lsls	r3, r3, #2
 8002dcc:	440b      	add	r3, r1
 8002dce:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8002dd2:	2200      	movs	r2, #0
 8002dd4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002dd6:	7bfa      	ldrb	r2, [r7, #15]
 8002dd8:	6879      	ldr	r1, [r7, #4]
 8002dda:	4613      	mov	r3, r2
 8002ddc:	00db      	lsls	r3, r3, #3
 8002dde:	1a9b      	subs	r3, r3, r2
 8002de0:	009b      	lsls	r3, r3, #2
 8002de2:	440b      	add	r3, r1
 8002de4:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8002de8:	7bfa      	ldrb	r2, [r7, #15]
 8002dea:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002dec:	7bfa      	ldrb	r2, [r7, #15]
 8002dee:	6879      	ldr	r1, [r7, #4]
 8002df0:	4613      	mov	r3, r2
 8002df2:	00db      	lsls	r3, r3, #3
 8002df4:	1a9b      	subs	r3, r3, r2
 8002df6:	009b      	lsls	r3, r3, #2
 8002df8:	440b      	add	r3, r1
 8002dfa:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8002dfe:	2200      	movs	r2, #0
 8002e00:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002e02:	7bfa      	ldrb	r2, [r7, #15]
 8002e04:	6879      	ldr	r1, [r7, #4]
 8002e06:	4613      	mov	r3, r2
 8002e08:	00db      	lsls	r3, r3, #3
 8002e0a:	1a9b      	subs	r3, r3, r2
 8002e0c:	009b      	lsls	r3, r3, #2
 8002e0e:	440b      	add	r3, r1
 8002e10:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8002e14:	2200      	movs	r2, #0
 8002e16:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002e18:	7bfa      	ldrb	r2, [r7, #15]
 8002e1a:	6879      	ldr	r1, [r7, #4]
 8002e1c:	4613      	mov	r3, r2
 8002e1e:	00db      	lsls	r3, r3, #3
 8002e20:	1a9b      	subs	r3, r3, r2
 8002e22:	009b      	lsls	r3, r3, #2
 8002e24:	440b      	add	r3, r1
 8002e26:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002e2a:	2200      	movs	r2, #0
 8002e2c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002e2e:	7bfa      	ldrb	r2, [r7, #15]
 8002e30:	6879      	ldr	r1, [r7, #4]
 8002e32:	4613      	mov	r3, r2
 8002e34:	00db      	lsls	r3, r3, #3
 8002e36:	1a9b      	subs	r3, r3, r2
 8002e38:	009b      	lsls	r3, r3, #2
 8002e3a:	440b      	add	r3, r1
 8002e3c:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8002e40:	2200      	movs	r2, #0
 8002e42:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002e44:	7bfb      	ldrb	r3, [r7, #15]
 8002e46:	3301      	adds	r3, #1
 8002e48:	73fb      	strb	r3, [r7, #15]
 8002e4a:	7bfa      	ldrb	r2, [r7, #15]
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	685b      	ldr	r3, [r3, #4]
 8002e50:	429a      	cmp	r2, r3
 8002e52:	d3b5      	bcc.n	8002dc0 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	603b      	str	r3, [r7, #0]
 8002e5a:	687e      	ldr	r6, [r7, #4]
 8002e5c:	466d      	mov	r5, sp
 8002e5e:	f106 0410 	add.w	r4, r6, #16
 8002e62:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002e64:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002e66:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002e68:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002e6a:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002e6e:	e885 0003 	stmia.w	r5, {r0, r1}
 8002e72:	1d33      	adds	r3, r6, #4
 8002e74:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002e76:	6838      	ldr	r0, [r7, #0]
 8002e78:	f003 f85e 	bl	8005f38 <USB_DevInit>
 8002e7c:	4603      	mov	r3, r0
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d005      	beq.n	8002e8e <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	2202      	movs	r2, #2
 8002e86:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8002e8a:	2301      	movs	r3, #1
 8002e8c:	e00d      	b.n	8002eaa <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	2200      	movs	r2, #0
 8002e92:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	2201      	movs	r2, #1
 8002e9a:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	4618      	mov	r0, r3
 8002ea4:	f004 f8a6 	bl	8006ff4 <USB_DevDisconnect>

  return HAL_OK;
 8002ea8:	2300      	movs	r3, #0
}
 8002eaa:	4618      	mov	r0, r3
 8002eac:	3714      	adds	r7, #20
 8002eae:	46bd      	mov	sp, r7
 8002eb0:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002eb2 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002eb2:	b580      	push	{r7, lr}
 8002eb4:	b084      	sub	sp, #16
 8002eb6:	af00      	add	r7, sp, #0
 8002eb8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002ec6:	2b01      	cmp	r3, #1
 8002ec8:	d101      	bne.n	8002ece <HAL_PCD_Start+0x1c>
 8002eca:	2302      	movs	r3, #2
 8002ecc:	e020      	b.n	8002f10 <HAL_PCD_Start+0x5e>
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	2201      	movs	r2, #1
 8002ed2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002eda:	2b01      	cmp	r3, #1
 8002edc:	d109      	bne.n	8002ef2 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8002ee2:	2b01      	cmp	r3, #1
 8002ee4:	d005      	beq.n	8002ef2 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002eea:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	4618      	mov	r0, r3
 8002ef8:	f002 ffd2 	bl	8005ea0 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	4618      	mov	r0, r3
 8002f02:	f004 f856 	bl	8006fb2 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	2200      	movs	r2, #0
 8002f0a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8002f0e:	2300      	movs	r3, #0
}
 8002f10:	4618      	mov	r0, r3
 8002f12:	3710      	adds	r7, #16
 8002f14:	46bd      	mov	sp, r7
 8002f16:	bd80      	pop	{r7, pc}

08002f18 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002f18:	b590      	push	{r4, r7, lr}
 8002f1a:	b08d      	sub	sp, #52	; 0x34
 8002f1c:	af00      	add	r7, sp, #0
 8002f1e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002f26:	6a3b      	ldr	r3, [r7, #32]
 8002f28:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	4618      	mov	r0, r3
 8002f30:	f004 f914 	bl	800715c <USB_GetMode>
 8002f34:	4603      	mov	r3, r0
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	f040 839d 	bne.w	8003676 <HAL_PCD_IRQHandler+0x75e>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	4618      	mov	r0, r3
 8002f42:	f004 f878 	bl	8007036 <USB_ReadInterrupts>
 8002f46:	4603      	mov	r3, r0
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	f000 8393 	beq.w	8003674 <HAL_PCD_IRQHandler+0x75c>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	4618      	mov	r0, r3
 8002f54:	f004 f86f 	bl	8007036 <USB_ReadInterrupts>
 8002f58:	4603      	mov	r3, r0
 8002f5a:	f003 0302 	and.w	r3, r3, #2
 8002f5e:	2b02      	cmp	r3, #2
 8002f60:	d107      	bne.n	8002f72 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	695a      	ldr	r2, [r3, #20]
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	f002 0202 	and.w	r2, r2, #2
 8002f70:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	4618      	mov	r0, r3
 8002f78:	f004 f85d 	bl	8007036 <USB_ReadInterrupts>
 8002f7c:	4603      	mov	r3, r0
 8002f7e:	f003 0310 	and.w	r3, r3, #16
 8002f82:	2b10      	cmp	r3, #16
 8002f84:	d161      	bne.n	800304a <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	699a      	ldr	r2, [r3, #24]
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	f022 0210 	bic.w	r2, r2, #16
 8002f94:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 8002f96:	6a3b      	ldr	r3, [r7, #32]
 8002f98:	6a1b      	ldr	r3, [r3, #32]
 8002f9a:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8002f9c:	69bb      	ldr	r3, [r7, #24]
 8002f9e:	f003 020f 	and.w	r2, r3, #15
 8002fa2:	4613      	mov	r3, r2
 8002fa4:	00db      	lsls	r3, r3, #3
 8002fa6:	1a9b      	subs	r3, r3, r2
 8002fa8:	009b      	lsls	r3, r3, #2
 8002faa:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002fae:	687a      	ldr	r2, [r7, #4]
 8002fb0:	4413      	add	r3, r2
 8002fb2:	3304      	adds	r3, #4
 8002fb4:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8002fb6:	69bb      	ldr	r3, [r7, #24]
 8002fb8:	0c5b      	lsrs	r3, r3, #17
 8002fba:	f003 030f 	and.w	r3, r3, #15
 8002fbe:	2b02      	cmp	r3, #2
 8002fc0:	d124      	bne.n	800300c <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8002fc2:	69ba      	ldr	r2, [r7, #24]
 8002fc4:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8002fc8:	4013      	ands	r3, r2
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d035      	beq.n	800303a <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002fce:	697b      	ldr	r3, [r7, #20]
 8002fd0:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8002fd2:	69bb      	ldr	r3, [r7, #24]
 8002fd4:	091b      	lsrs	r3, r3, #4
 8002fd6:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002fd8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002fdc:	b29b      	uxth	r3, r3
 8002fde:	461a      	mov	r2, r3
 8002fe0:	6a38      	ldr	r0, [r7, #32]
 8002fe2:	f003 fec3 	bl	8006d6c <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002fe6:	697b      	ldr	r3, [r7, #20]
 8002fe8:	68da      	ldr	r2, [r3, #12]
 8002fea:	69bb      	ldr	r3, [r7, #24]
 8002fec:	091b      	lsrs	r3, r3, #4
 8002fee:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002ff2:	441a      	add	r2, r3
 8002ff4:	697b      	ldr	r3, [r7, #20]
 8002ff6:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002ff8:	697b      	ldr	r3, [r7, #20]
 8002ffa:	699a      	ldr	r2, [r3, #24]
 8002ffc:	69bb      	ldr	r3, [r7, #24]
 8002ffe:	091b      	lsrs	r3, r3, #4
 8003000:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003004:	441a      	add	r2, r3
 8003006:	697b      	ldr	r3, [r7, #20]
 8003008:	619a      	str	r2, [r3, #24]
 800300a:	e016      	b.n	800303a <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 800300c:	69bb      	ldr	r3, [r7, #24]
 800300e:	0c5b      	lsrs	r3, r3, #17
 8003010:	f003 030f 	and.w	r3, r3, #15
 8003014:	2b06      	cmp	r3, #6
 8003016:	d110      	bne.n	800303a <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800301e:	2208      	movs	r2, #8
 8003020:	4619      	mov	r1, r3
 8003022:	6a38      	ldr	r0, [r7, #32]
 8003024:	f003 fea2 	bl	8006d6c <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003028:	697b      	ldr	r3, [r7, #20]
 800302a:	699a      	ldr	r2, [r3, #24]
 800302c:	69bb      	ldr	r3, [r7, #24]
 800302e:	091b      	lsrs	r3, r3, #4
 8003030:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003034:	441a      	add	r2, r3
 8003036:	697b      	ldr	r3, [r7, #20]
 8003038:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	699a      	ldr	r2, [r3, #24]
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	f042 0210 	orr.w	r2, r2, #16
 8003048:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	4618      	mov	r0, r3
 8003050:	f003 fff1 	bl	8007036 <USB_ReadInterrupts>
 8003054:	4603      	mov	r3, r0
 8003056:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800305a:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800305e:	d16e      	bne.n	800313e <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 8003060:	2300      	movs	r3, #0
 8003062:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	4618      	mov	r0, r3
 800306a:	f003 fff7 	bl	800705c <USB_ReadDevAllOutEpInterrupt>
 800306e:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8003070:	e062      	b.n	8003138 <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 8003072:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003074:	f003 0301 	and.w	r3, r3, #1
 8003078:	2b00      	cmp	r3, #0
 800307a:	d057      	beq.n	800312c <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003082:	b2d2      	uxtb	r2, r2
 8003084:	4611      	mov	r1, r2
 8003086:	4618      	mov	r0, r3
 8003088:	f004 f81c 	bl	80070c4 <USB_ReadDevOutEPInterrupt>
 800308c:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800308e:	693b      	ldr	r3, [r7, #16]
 8003090:	f003 0301 	and.w	r3, r3, #1
 8003094:	2b00      	cmp	r3, #0
 8003096:	d00c      	beq.n	80030b2 <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8003098:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800309a:	015a      	lsls	r2, r3, #5
 800309c:	69fb      	ldr	r3, [r7, #28]
 800309e:	4413      	add	r3, r2
 80030a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80030a4:	461a      	mov	r2, r3
 80030a6:	2301      	movs	r3, #1
 80030a8:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80030aa:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80030ac:	6878      	ldr	r0, [r7, #4]
 80030ae:	f000 fdb1 	bl	8003c14 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80030b2:	693b      	ldr	r3, [r7, #16]
 80030b4:	f003 0308 	and.w	r3, r3, #8
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d00c      	beq.n	80030d6 <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80030bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030be:	015a      	lsls	r2, r3, #5
 80030c0:	69fb      	ldr	r3, [r7, #28]
 80030c2:	4413      	add	r3, r2
 80030c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80030c8:	461a      	mov	r2, r3
 80030ca:	2308      	movs	r3, #8
 80030cc:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80030ce:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80030d0:	6878      	ldr	r0, [r7, #4]
 80030d2:	f000 feab 	bl	8003e2c <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80030d6:	693b      	ldr	r3, [r7, #16]
 80030d8:	f003 0310 	and.w	r3, r3, #16
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d008      	beq.n	80030f2 <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80030e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030e2:	015a      	lsls	r2, r3, #5
 80030e4:	69fb      	ldr	r3, [r7, #28]
 80030e6:	4413      	add	r3, r2
 80030e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80030ec:	461a      	mov	r2, r3
 80030ee:	2310      	movs	r3, #16
 80030f0:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80030f2:	693b      	ldr	r3, [r7, #16]
 80030f4:	f003 0320 	and.w	r3, r3, #32
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d008      	beq.n	800310e <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80030fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030fe:	015a      	lsls	r2, r3, #5
 8003100:	69fb      	ldr	r3, [r7, #28]
 8003102:	4413      	add	r3, r2
 8003104:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003108:	461a      	mov	r2, r3
 800310a:	2320      	movs	r3, #32
 800310c:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 800310e:	693b      	ldr	r3, [r7, #16]
 8003110:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003114:	2b00      	cmp	r3, #0
 8003116:	d009      	beq.n	800312c <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8003118:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800311a:	015a      	lsls	r2, r3, #5
 800311c:	69fb      	ldr	r3, [r7, #28]
 800311e:	4413      	add	r3, r2
 8003120:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003124:	461a      	mov	r2, r3
 8003126:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800312a:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800312c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800312e:	3301      	adds	r3, #1
 8003130:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8003132:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003134:	085b      	lsrs	r3, r3, #1
 8003136:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8003138:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800313a:	2b00      	cmp	r3, #0
 800313c:	d199      	bne.n	8003072 <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	4618      	mov	r0, r3
 8003144:	f003 ff77 	bl	8007036 <USB_ReadInterrupts>
 8003148:	4603      	mov	r3, r0
 800314a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800314e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003152:	f040 80c0 	bne.w	80032d6 <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	4618      	mov	r0, r3
 800315c:	f003 ff98 	bl	8007090 <USB_ReadDevAllInEpInterrupt>
 8003160:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8003162:	2300      	movs	r3, #0
 8003164:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8003166:	e0b2      	b.n	80032ce <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8003168:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800316a:	f003 0301 	and.w	r3, r3, #1
 800316e:	2b00      	cmp	r3, #0
 8003170:	f000 80a7 	beq.w	80032c2 <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800317a:	b2d2      	uxtb	r2, r2
 800317c:	4611      	mov	r1, r2
 800317e:	4618      	mov	r0, r3
 8003180:	f003 ffbe 	bl	8007100 <USB_ReadDevInEPInterrupt>
 8003184:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8003186:	693b      	ldr	r3, [r7, #16]
 8003188:	f003 0301 	and.w	r3, r3, #1
 800318c:	2b00      	cmp	r3, #0
 800318e:	d057      	beq.n	8003240 <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003190:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003192:	f003 030f 	and.w	r3, r3, #15
 8003196:	2201      	movs	r2, #1
 8003198:	fa02 f303 	lsl.w	r3, r2, r3
 800319c:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800319e:	69fb      	ldr	r3, [r7, #28]
 80031a0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80031a4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	43db      	mvns	r3, r3
 80031aa:	69f9      	ldr	r1, [r7, #28]
 80031ac:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80031b0:	4013      	ands	r3, r2
 80031b2:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80031b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031b6:	015a      	lsls	r2, r3, #5
 80031b8:	69fb      	ldr	r3, [r7, #28]
 80031ba:	4413      	add	r3, r2
 80031bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80031c0:	461a      	mov	r2, r3
 80031c2:	2301      	movs	r3, #1
 80031c4:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	691b      	ldr	r3, [r3, #16]
 80031ca:	2b01      	cmp	r3, #1
 80031cc:	d132      	bne.n	8003234 <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80031ce:	6879      	ldr	r1, [r7, #4]
 80031d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80031d2:	4613      	mov	r3, r2
 80031d4:	00db      	lsls	r3, r3, #3
 80031d6:	1a9b      	subs	r3, r3, r2
 80031d8:	009b      	lsls	r3, r3, #2
 80031da:	440b      	add	r3, r1
 80031dc:	3348      	adds	r3, #72	; 0x48
 80031de:	6819      	ldr	r1, [r3, #0]
 80031e0:	6878      	ldr	r0, [r7, #4]
 80031e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80031e4:	4613      	mov	r3, r2
 80031e6:	00db      	lsls	r3, r3, #3
 80031e8:	1a9b      	subs	r3, r3, r2
 80031ea:	009b      	lsls	r3, r3, #2
 80031ec:	4403      	add	r3, r0
 80031ee:	3344      	adds	r3, #68	; 0x44
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	4419      	add	r1, r3
 80031f4:	6878      	ldr	r0, [r7, #4]
 80031f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80031f8:	4613      	mov	r3, r2
 80031fa:	00db      	lsls	r3, r3, #3
 80031fc:	1a9b      	subs	r3, r3, r2
 80031fe:	009b      	lsls	r3, r3, #2
 8003200:	4403      	add	r3, r0
 8003202:	3348      	adds	r3, #72	; 0x48
 8003204:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8003206:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003208:	2b00      	cmp	r3, #0
 800320a:	d113      	bne.n	8003234 <HAL_PCD_IRQHandler+0x31c>
 800320c:	6879      	ldr	r1, [r7, #4]
 800320e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003210:	4613      	mov	r3, r2
 8003212:	00db      	lsls	r3, r3, #3
 8003214:	1a9b      	subs	r3, r3, r2
 8003216:	009b      	lsls	r3, r3, #2
 8003218:	440b      	add	r3, r1
 800321a:	3350      	adds	r3, #80	; 0x50
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	2b00      	cmp	r3, #0
 8003220:	d108      	bne.n	8003234 <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	6818      	ldr	r0, [r3, #0]
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800322c:	461a      	mov	r2, r3
 800322e:	2101      	movs	r1, #1
 8003230:	f003 ffc6 	bl	80071c0 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8003234:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003236:	b2db      	uxtb	r3, r3
 8003238:	4619      	mov	r1, r3
 800323a:	6878      	ldr	r0, [r7, #4]
 800323c:	f006 f821 	bl	8009282 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8003240:	693b      	ldr	r3, [r7, #16]
 8003242:	f003 0308 	and.w	r3, r3, #8
 8003246:	2b00      	cmp	r3, #0
 8003248:	d008      	beq.n	800325c <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800324a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800324c:	015a      	lsls	r2, r3, #5
 800324e:	69fb      	ldr	r3, [r7, #28]
 8003250:	4413      	add	r3, r2
 8003252:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003256:	461a      	mov	r2, r3
 8003258:	2308      	movs	r3, #8
 800325a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800325c:	693b      	ldr	r3, [r7, #16]
 800325e:	f003 0310 	and.w	r3, r3, #16
 8003262:	2b00      	cmp	r3, #0
 8003264:	d008      	beq.n	8003278 <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8003266:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003268:	015a      	lsls	r2, r3, #5
 800326a:	69fb      	ldr	r3, [r7, #28]
 800326c:	4413      	add	r3, r2
 800326e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003272:	461a      	mov	r2, r3
 8003274:	2310      	movs	r3, #16
 8003276:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8003278:	693b      	ldr	r3, [r7, #16]
 800327a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800327e:	2b00      	cmp	r3, #0
 8003280:	d008      	beq.n	8003294 <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8003282:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003284:	015a      	lsls	r2, r3, #5
 8003286:	69fb      	ldr	r3, [r7, #28]
 8003288:	4413      	add	r3, r2
 800328a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800328e:	461a      	mov	r2, r3
 8003290:	2340      	movs	r3, #64	; 0x40
 8003292:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8003294:	693b      	ldr	r3, [r7, #16]
 8003296:	f003 0302 	and.w	r3, r3, #2
 800329a:	2b00      	cmp	r3, #0
 800329c:	d008      	beq.n	80032b0 <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 800329e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032a0:	015a      	lsls	r2, r3, #5
 80032a2:	69fb      	ldr	r3, [r7, #28]
 80032a4:	4413      	add	r3, r2
 80032a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80032aa:	461a      	mov	r2, r3
 80032ac:	2302      	movs	r3, #2
 80032ae:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80032b0:	693b      	ldr	r3, [r7, #16]
 80032b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d003      	beq.n	80032c2 <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80032ba:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80032bc:	6878      	ldr	r0, [r7, #4]
 80032be:	f000 fc1b 	bl	8003af8 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80032c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032c4:	3301      	adds	r3, #1
 80032c6:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80032c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032ca:	085b      	lsrs	r3, r3, #1
 80032cc:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80032ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	f47f af49 	bne.w	8003168 <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	4618      	mov	r0, r3
 80032dc:	f003 feab 	bl	8007036 <USB_ReadInterrupts>
 80032e0:	4603      	mov	r3, r0
 80032e2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80032e6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80032ea:	d122      	bne.n	8003332 <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80032ec:	69fb      	ldr	r3, [r7, #28]
 80032ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80032f2:	685b      	ldr	r3, [r3, #4]
 80032f4:	69fa      	ldr	r2, [r7, #28]
 80032f6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80032fa:	f023 0301 	bic.w	r3, r3, #1
 80032fe:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8003306:	2b01      	cmp	r3, #1
 8003308:	d108      	bne.n	800331c <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	2200      	movs	r2, #0
 800330e:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8003312:	2100      	movs	r1, #0
 8003314:	6878      	ldr	r0, [r7, #4]
 8003316:	f000 fe27 	bl	8003f68 <HAL_PCDEx_LPM_Callback>
 800331a:	e002      	b.n	8003322 <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 800331c:	6878      	ldr	r0, [r7, #4]
 800331e:	f006 f827 	bl	8009370 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	695a      	ldr	r2, [r3, #20]
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8003330:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	4618      	mov	r0, r3
 8003338:	f003 fe7d 	bl	8007036 <USB_ReadInterrupts>
 800333c:	4603      	mov	r3, r0
 800333e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003342:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003346:	d112      	bne.n	800336e <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8003348:	69fb      	ldr	r3, [r7, #28]
 800334a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800334e:	689b      	ldr	r3, [r3, #8]
 8003350:	f003 0301 	and.w	r3, r3, #1
 8003354:	2b01      	cmp	r3, #1
 8003356:	d102      	bne.n	800335e <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8003358:	6878      	ldr	r0, [r7, #4]
 800335a:	f005 ffe3 	bl	8009324 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	695a      	ldr	r2, [r3, #20]
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 800336c:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	4618      	mov	r0, r3
 8003374:	f003 fe5f 	bl	8007036 <USB_ReadInterrupts>
 8003378:	4603      	mov	r3, r0
 800337a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800337e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003382:	f040 80c7 	bne.w	8003514 <HAL_PCD_IRQHandler+0x5fc>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003386:	69fb      	ldr	r3, [r7, #28]
 8003388:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800338c:	685b      	ldr	r3, [r3, #4]
 800338e:	69fa      	ldr	r2, [r7, #28]
 8003390:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003394:	f023 0301 	bic.w	r3, r3, #1
 8003398:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	2110      	movs	r1, #16
 80033a0:	4618      	mov	r0, r3
 80033a2:	f002 ff2d 	bl	8006200 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80033a6:	2300      	movs	r3, #0
 80033a8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80033aa:	e056      	b.n	800345a <HAL_PCD_IRQHandler+0x542>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80033ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033ae:	015a      	lsls	r2, r3, #5
 80033b0:	69fb      	ldr	r3, [r7, #28]
 80033b2:	4413      	add	r3, r2
 80033b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80033b8:	461a      	mov	r2, r3
 80033ba:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80033be:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80033c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033c2:	015a      	lsls	r2, r3, #5
 80033c4:	69fb      	ldr	r3, [r7, #28]
 80033c6:	4413      	add	r3, r2
 80033c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80033d0:	0151      	lsls	r1, r2, #5
 80033d2:	69fa      	ldr	r2, [r7, #28]
 80033d4:	440a      	add	r2, r1
 80033d6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80033da:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80033de:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80033e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033e2:	015a      	lsls	r2, r3, #5
 80033e4:	69fb      	ldr	r3, [r7, #28]
 80033e6:	4413      	add	r3, r2
 80033e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80033f0:	0151      	lsls	r1, r2, #5
 80033f2:	69fa      	ldr	r2, [r7, #28]
 80033f4:	440a      	add	r2, r1
 80033f6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80033fa:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80033fe:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8003400:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003402:	015a      	lsls	r2, r3, #5
 8003404:	69fb      	ldr	r3, [r7, #28]
 8003406:	4413      	add	r3, r2
 8003408:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800340c:	461a      	mov	r2, r3
 800340e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003412:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8003414:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003416:	015a      	lsls	r2, r3, #5
 8003418:	69fb      	ldr	r3, [r7, #28]
 800341a:	4413      	add	r3, r2
 800341c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003424:	0151      	lsls	r1, r2, #5
 8003426:	69fa      	ldr	r2, [r7, #28]
 8003428:	440a      	add	r2, r1
 800342a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800342e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003432:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8003434:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003436:	015a      	lsls	r2, r3, #5
 8003438:	69fb      	ldr	r3, [r7, #28]
 800343a:	4413      	add	r3, r2
 800343c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003444:	0151      	lsls	r1, r2, #5
 8003446:	69fa      	ldr	r2, [r7, #28]
 8003448:	440a      	add	r2, r1
 800344a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800344e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003452:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003454:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003456:	3301      	adds	r3, #1
 8003458:	62fb      	str	r3, [r7, #44]	; 0x2c
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	685b      	ldr	r3, [r3, #4]
 800345e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003460:	429a      	cmp	r2, r3
 8003462:	d3a3      	bcc.n	80033ac <HAL_PCD_IRQHandler+0x494>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8003464:	69fb      	ldr	r3, [r7, #28]
 8003466:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800346a:	69db      	ldr	r3, [r3, #28]
 800346c:	69fa      	ldr	r2, [r7, #28]
 800346e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003472:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8003476:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800347c:	2b00      	cmp	r3, #0
 800347e:	d016      	beq.n	80034ae <HAL_PCD_IRQHandler+0x596>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8003480:	69fb      	ldr	r3, [r7, #28]
 8003482:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003486:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800348a:	69fa      	ldr	r2, [r7, #28]
 800348c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003490:	f043 030b 	orr.w	r3, r3, #11
 8003494:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8003498:	69fb      	ldr	r3, [r7, #28]
 800349a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800349e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034a0:	69fa      	ldr	r2, [r7, #28]
 80034a2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80034a6:	f043 030b 	orr.w	r3, r3, #11
 80034aa:	6453      	str	r3, [r2, #68]	; 0x44
 80034ac:	e015      	b.n	80034da <HAL_PCD_IRQHandler+0x5c2>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80034ae:	69fb      	ldr	r3, [r7, #28]
 80034b0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80034b4:	695b      	ldr	r3, [r3, #20]
 80034b6:	69fa      	ldr	r2, [r7, #28]
 80034b8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80034bc:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80034c0:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 80034c4:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80034c6:	69fb      	ldr	r3, [r7, #28]
 80034c8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80034cc:	691b      	ldr	r3, [r3, #16]
 80034ce:	69fa      	ldr	r2, [r7, #28]
 80034d0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80034d4:	f043 030b 	orr.w	r3, r3, #11
 80034d8:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80034da:	69fb      	ldr	r3, [r7, #28]
 80034dc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	69fa      	ldr	r2, [r7, #28]
 80034e4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80034e8:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80034ec:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	6818      	ldr	r0, [r3, #0]
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	691b      	ldr	r3, [r3, #16]
 80034f6:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80034fe:	461a      	mov	r2, r3
 8003500:	f003 fe5e 	bl	80071c0 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	695a      	ldr	r2, [r3, #20]
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8003512:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	4618      	mov	r0, r3
 800351a:	f003 fd8c 	bl	8007036 <USB_ReadInterrupts>
 800351e:	4603      	mov	r3, r0
 8003520:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003524:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003528:	d124      	bne.n	8003574 <HAL_PCD_IRQHandler+0x65c>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	4618      	mov	r0, r3
 8003530:	f003 fe22 	bl	8007178 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	4618      	mov	r0, r3
 800353a:	f002 fec2 	bl	80062c2 <USB_GetDevSpeed>
 800353e:	4603      	mov	r3, r0
 8003540:	461a      	mov	r2, r3
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681c      	ldr	r4, [r3, #0]
 800354a:	f001 f947 	bl	80047dc <HAL_RCC_GetHCLKFreq>
 800354e:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003554:	b2db      	uxtb	r3, r3
 8003556:	461a      	mov	r2, r3
 8003558:	4620      	mov	r0, r4
 800355a:	f002 fbff 	bl	8005d5c <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 800355e:	6878      	ldr	r0, [r7, #4]
 8003560:	f005 feb7 	bl	80092d2 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	695a      	ldr	r2, [r3, #20]
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8003572:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	4618      	mov	r0, r3
 800357a:	f003 fd5c 	bl	8007036 <USB_ReadInterrupts>
 800357e:	4603      	mov	r3, r0
 8003580:	f003 0308 	and.w	r3, r3, #8
 8003584:	2b08      	cmp	r3, #8
 8003586:	d10a      	bne.n	800359e <HAL_PCD_IRQHandler+0x686>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8003588:	6878      	ldr	r0, [r7, #4]
 800358a:	f005 fe94 	bl	80092b6 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	695a      	ldr	r2, [r3, #20]
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	f002 0208 	and.w	r2, r2, #8
 800359c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	4618      	mov	r0, r3
 80035a4:	f003 fd47 	bl	8007036 <USB_ReadInterrupts>
 80035a8:	4603      	mov	r3, r0
 80035aa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80035ae:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80035b2:	d10f      	bne.n	80035d4 <HAL_PCD_IRQHandler+0x6bc>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 80035b4:	2300      	movs	r3, #0
 80035b6:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80035b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035ba:	b2db      	uxtb	r3, r3
 80035bc:	4619      	mov	r1, r3
 80035be:	6878      	ldr	r0, [r7, #4]
 80035c0:	f005 fef6 	bl	80093b0 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	695a      	ldr	r2, [r3, #20]
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 80035d2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	4618      	mov	r0, r3
 80035da:	f003 fd2c 	bl	8007036 <USB_ReadInterrupts>
 80035de:	4603      	mov	r3, r0
 80035e0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80035e4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80035e8:	d10f      	bne.n	800360a <HAL_PCD_IRQHandler+0x6f2>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 80035ea:	2300      	movs	r3, #0
 80035ec:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80035ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035f0:	b2db      	uxtb	r3, r3
 80035f2:	4619      	mov	r1, r3
 80035f4:	6878      	ldr	r0, [r7, #4]
 80035f6:	f005 fec9 	bl	800938c <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	695a      	ldr	r2, [r3, #20]
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8003608:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	4618      	mov	r0, r3
 8003610:	f003 fd11 	bl	8007036 <USB_ReadInterrupts>
 8003614:	4603      	mov	r3, r0
 8003616:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800361a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800361e:	d10a      	bne.n	8003636 <HAL_PCD_IRQHandler+0x71e>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8003620:	6878      	ldr	r0, [r7, #4]
 8003622:	f005 fed7 	bl	80093d4 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	695a      	ldr	r2, [r3, #20]
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8003634:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	4618      	mov	r0, r3
 800363c:	f003 fcfb 	bl	8007036 <USB_ReadInterrupts>
 8003640:	4603      	mov	r3, r0
 8003642:	f003 0304 	and.w	r3, r3, #4
 8003646:	2b04      	cmp	r3, #4
 8003648:	d115      	bne.n	8003676 <HAL_PCD_IRQHandler+0x75e>
    {
      temp = hpcd->Instance->GOTGINT;
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	685b      	ldr	r3, [r3, #4]
 8003650:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8003652:	69bb      	ldr	r3, [r7, #24]
 8003654:	f003 0304 	and.w	r3, r3, #4
 8003658:	2b00      	cmp	r3, #0
 800365a:	d002      	beq.n	8003662 <HAL_PCD_IRQHandler+0x74a>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 800365c:	6878      	ldr	r0, [r7, #4]
 800365e:	f005 fec7 	bl	80093f0 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	6859      	ldr	r1, [r3, #4]
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	69ba      	ldr	r2, [r7, #24]
 800366e:	430a      	orrs	r2, r1
 8003670:	605a      	str	r2, [r3, #4]
 8003672:	e000      	b.n	8003676 <HAL_PCD_IRQHandler+0x75e>
      return;
 8003674:	bf00      	nop
    }
  }
}
 8003676:	3734      	adds	r7, #52	; 0x34
 8003678:	46bd      	mov	sp, r7
 800367a:	bd90      	pop	{r4, r7, pc}

0800367c <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800367c:	b580      	push	{r7, lr}
 800367e:	b082      	sub	sp, #8
 8003680:	af00      	add	r7, sp, #0
 8003682:	6078      	str	r0, [r7, #4]
 8003684:	460b      	mov	r3, r1
 8003686:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800368e:	2b01      	cmp	r3, #1
 8003690:	d101      	bne.n	8003696 <HAL_PCD_SetAddress+0x1a>
 8003692:	2302      	movs	r3, #2
 8003694:	e013      	b.n	80036be <HAL_PCD_SetAddress+0x42>
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	2201      	movs	r2, #1
 800369a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	78fa      	ldrb	r2, [r7, #3]
 80036a2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	78fa      	ldrb	r2, [r7, #3]
 80036ac:	4611      	mov	r1, r2
 80036ae:	4618      	mov	r0, r3
 80036b0:	f003 fc59 	bl	8006f66 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	2200      	movs	r2, #0
 80036b8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80036bc:	2300      	movs	r3, #0
}
 80036be:	4618      	mov	r0, r3
 80036c0:	3708      	adds	r7, #8
 80036c2:	46bd      	mov	sp, r7
 80036c4:	bd80      	pop	{r7, pc}

080036c6 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80036c6:	b580      	push	{r7, lr}
 80036c8:	b084      	sub	sp, #16
 80036ca:	af00      	add	r7, sp, #0
 80036cc:	6078      	str	r0, [r7, #4]
 80036ce:	4608      	mov	r0, r1
 80036d0:	4611      	mov	r1, r2
 80036d2:	461a      	mov	r2, r3
 80036d4:	4603      	mov	r3, r0
 80036d6:	70fb      	strb	r3, [r7, #3]
 80036d8:	460b      	mov	r3, r1
 80036da:	803b      	strh	r3, [r7, #0]
 80036dc:	4613      	mov	r3, r2
 80036de:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80036e0:	2300      	movs	r3, #0
 80036e2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80036e4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	da0f      	bge.n	800370c <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80036ec:	78fb      	ldrb	r3, [r7, #3]
 80036ee:	f003 020f 	and.w	r2, r3, #15
 80036f2:	4613      	mov	r3, r2
 80036f4:	00db      	lsls	r3, r3, #3
 80036f6:	1a9b      	subs	r3, r3, r2
 80036f8:	009b      	lsls	r3, r3, #2
 80036fa:	3338      	adds	r3, #56	; 0x38
 80036fc:	687a      	ldr	r2, [r7, #4]
 80036fe:	4413      	add	r3, r2
 8003700:	3304      	adds	r3, #4
 8003702:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	2201      	movs	r2, #1
 8003708:	705a      	strb	r2, [r3, #1]
 800370a:	e00f      	b.n	800372c <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800370c:	78fb      	ldrb	r3, [r7, #3]
 800370e:	f003 020f 	and.w	r2, r3, #15
 8003712:	4613      	mov	r3, r2
 8003714:	00db      	lsls	r3, r3, #3
 8003716:	1a9b      	subs	r3, r3, r2
 8003718:	009b      	lsls	r3, r3, #2
 800371a:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800371e:	687a      	ldr	r2, [r7, #4]
 8003720:	4413      	add	r3, r2
 8003722:	3304      	adds	r3, #4
 8003724:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	2200      	movs	r2, #0
 800372a:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800372c:	78fb      	ldrb	r3, [r7, #3]
 800372e:	f003 030f 	and.w	r3, r3, #15
 8003732:	b2da      	uxtb	r2, r3
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8003738:	883a      	ldrh	r2, [r7, #0]
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	78ba      	ldrb	r2, [r7, #2]
 8003742:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	785b      	ldrb	r3, [r3, #1]
 8003748:	2b00      	cmp	r3, #0
 800374a:	d004      	beq.n	8003756 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	781b      	ldrb	r3, [r3, #0]
 8003750:	b29a      	uxth	r2, r3
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8003756:	78bb      	ldrb	r3, [r7, #2]
 8003758:	2b02      	cmp	r3, #2
 800375a:	d102      	bne.n	8003762 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	2200      	movs	r2, #0
 8003760:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003768:	2b01      	cmp	r3, #1
 800376a:	d101      	bne.n	8003770 <HAL_PCD_EP_Open+0xaa>
 800376c:	2302      	movs	r3, #2
 800376e:	e00e      	b.n	800378e <HAL_PCD_EP_Open+0xc8>
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	2201      	movs	r2, #1
 8003774:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	68f9      	ldr	r1, [r7, #12]
 800377e:	4618      	mov	r0, r3
 8003780:	f002 fdc4 	bl	800630c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	2200      	movs	r2, #0
 8003788:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 800378c:	7afb      	ldrb	r3, [r7, #11]
}
 800378e:	4618      	mov	r0, r3
 8003790:	3710      	adds	r7, #16
 8003792:	46bd      	mov	sp, r7
 8003794:	bd80      	pop	{r7, pc}

08003796 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003796:	b580      	push	{r7, lr}
 8003798:	b084      	sub	sp, #16
 800379a:	af00      	add	r7, sp, #0
 800379c:	6078      	str	r0, [r7, #4]
 800379e:	460b      	mov	r3, r1
 80037a0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80037a2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	da0f      	bge.n	80037ca <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80037aa:	78fb      	ldrb	r3, [r7, #3]
 80037ac:	f003 020f 	and.w	r2, r3, #15
 80037b0:	4613      	mov	r3, r2
 80037b2:	00db      	lsls	r3, r3, #3
 80037b4:	1a9b      	subs	r3, r3, r2
 80037b6:	009b      	lsls	r3, r3, #2
 80037b8:	3338      	adds	r3, #56	; 0x38
 80037ba:	687a      	ldr	r2, [r7, #4]
 80037bc:	4413      	add	r3, r2
 80037be:	3304      	adds	r3, #4
 80037c0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	2201      	movs	r2, #1
 80037c6:	705a      	strb	r2, [r3, #1]
 80037c8:	e00f      	b.n	80037ea <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80037ca:	78fb      	ldrb	r3, [r7, #3]
 80037cc:	f003 020f 	and.w	r2, r3, #15
 80037d0:	4613      	mov	r3, r2
 80037d2:	00db      	lsls	r3, r3, #3
 80037d4:	1a9b      	subs	r3, r3, r2
 80037d6:	009b      	lsls	r3, r3, #2
 80037d8:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80037dc:	687a      	ldr	r2, [r7, #4]
 80037de:	4413      	add	r3, r2
 80037e0:	3304      	adds	r3, #4
 80037e2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	2200      	movs	r2, #0
 80037e8:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 80037ea:	78fb      	ldrb	r3, [r7, #3]
 80037ec:	f003 030f 	and.w	r3, r3, #15
 80037f0:	b2da      	uxtb	r2, r3
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80037fc:	2b01      	cmp	r3, #1
 80037fe:	d101      	bne.n	8003804 <HAL_PCD_EP_Close+0x6e>
 8003800:	2302      	movs	r3, #2
 8003802:	e00e      	b.n	8003822 <HAL_PCD_EP_Close+0x8c>
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	2201      	movs	r2, #1
 8003808:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	68f9      	ldr	r1, [r7, #12]
 8003812:	4618      	mov	r0, r3
 8003814:	f002 fe02 	bl	800641c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	2200      	movs	r2, #0
 800381c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8003820:	2300      	movs	r3, #0
}
 8003822:	4618      	mov	r0, r3
 8003824:	3710      	adds	r7, #16
 8003826:	46bd      	mov	sp, r7
 8003828:	bd80      	pop	{r7, pc}

0800382a <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800382a:	b580      	push	{r7, lr}
 800382c:	b086      	sub	sp, #24
 800382e:	af00      	add	r7, sp, #0
 8003830:	60f8      	str	r0, [r7, #12]
 8003832:	607a      	str	r2, [r7, #4]
 8003834:	603b      	str	r3, [r7, #0]
 8003836:	460b      	mov	r3, r1
 8003838:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800383a:	7afb      	ldrb	r3, [r7, #11]
 800383c:	f003 020f 	and.w	r2, r3, #15
 8003840:	4613      	mov	r3, r2
 8003842:	00db      	lsls	r3, r3, #3
 8003844:	1a9b      	subs	r3, r3, r2
 8003846:	009b      	lsls	r3, r3, #2
 8003848:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800384c:	68fa      	ldr	r2, [r7, #12]
 800384e:	4413      	add	r3, r2
 8003850:	3304      	adds	r3, #4
 8003852:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003854:	697b      	ldr	r3, [r7, #20]
 8003856:	687a      	ldr	r2, [r7, #4]
 8003858:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800385a:	697b      	ldr	r3, [r7, #20]
 800385c:	683a      	ldr	r2, [r7, #0]
 800385e:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8003860:	697b      	ldr	r3, [r7, #20]
 8003862:	2200      	movs	r2, #0
 8003864:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 8003866:	697b      	ldr	r3, [r7, #20]
 8003868:	2200      	movs	r2, #0
 800386a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800386c:	7afb      	ldrb	r3, [r7, #11]
 800386e:	f003 030f 	and.w	r3, r3, #15
 8003872:	b2da      	uxtb	r2, r3
 8003874:	697b      	ldr	r3, [r7, #20]
 8003876:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	691b      	ldr	r3, [r3, #16]
 800387c:	2b01      	cmp	r3, #1
 800387e:	d102      	bne.n	8003886 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003880:	687a      	ldr	r2, [r7, #4]
 8003882:	697b      	ldr	r3, [r7, #20]
 8003884:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003886:	7afb      	ldrb	r3, [r7, #11]
 8003888:	f003 030f 	and.w	r3, r3, #15
 800388c:	2b00      	cmp	r3, #0
 800388e:	d109      	bne.n	80038a4 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	6818      	ldr	r0, [r3, #0]
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	691b      	ldr	r3, [r3, #16]
 8003898:	b2db      	uxtb	r3, r3
 800389a:	461a      	mov	r2, r3
 800389c:	6979      	ldr	r1, [r7, #20]
 800389e:	f003 f8dd 	bl	8006a5c <USB_EP0StartXfer>
 80038a2:	e008      	b.n	80038b6 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	6818      	ldr	r0, [r3, #0]
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	691b      	ldr	r3, [r3, #16]
 80038ac:	b2db      	uxtb	r3, r3
 80038ae:	461a      	mov	r2, r3
 80038b0:	6979      	ldr	r1, [r7, #20]
 80038b2:	f002 fe8f 	bl	80065d4 <USB_EPStartXfer>
  }

  return HAL_OK;
 80038b6:	2300      	movs	r3, #0
}
 80038b8:	4618      	mov	r0, r3
 80038ba:	3718      	adds	r7, #24
 80038bc:	46bd      	mov	sp, r7
 80038be:	bd80      	pop	{r7, pc}

080038c0 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80038c0:	b480      	push	{r7}
 80038c2:	b083      	sub	sp, #12
 80038c4:	af00      	add	r7, sp, #0
 80038c6:	6078      	str	r0, [r7, #4]
 80038c8:	460b      	mov	r3, r1
 80038ca:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80038cc:	78fb      	ldrb	r3, [r7, #3]
 80038ce:	f003 020f 	and.w	r2, r3, #15
 80038d2:	6879      	ldr	r1, [r7, #4]
 80038d4:	4613      	mov	r3, r2
 80038d6:	00db      	lsls	r3, r3, #3
 80038d8:	1a9b      	subs	r3, r3, r2
 80038da:	009b      	lsls	r3, r3, #2
 80038dc:	440b      	add	r3, r1
 80038de:	f503 7305 	add.w	r3, r3, #532	; 0x214
 80038e2:	681b      	ldr	r3, [r3, #0]
}
 80038e4:	4618      	mov	r0, r3
 80038e6:	370c      	adds	r7, #12
 80038e8:	46bd      	mov	sp, r7
 80038ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ee:	4770      	bx	lr

080038f0 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80038f0:	b580      	push	{r7, lr}
 80038f2:	b086      	sub	sp, #24
 80038f4:	af00      	add	r7, sp, #0
 80038f6:	60f8      	str	r0, [r7, #12]
 80038f8:	607a      	str	r2, [r7, #4]
 80038fa:	603b      	str	r3, [r7, #0]
 80038fc:	460b      	mov	r3, r1
 80038fe:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003900:	7afb      	ldrb	r3, [r7, #11]
 8003902:	f003 020f 	and.w	r2, r3, #15
 8003906:	4613      	mov	r3, r2
 8003908:	00db      	lsls	r3, r3, #3
 800390a:	1a9b      	subs	r3, r3, r2
 800390c:	009b      	lsls	r3, r3, #2
 800390e:	3338      	adds	r3, #56	; 0x38
 8003910:	68fa      	ldr	r2, [r7, #12]
 8003912:	4413      	add	r3, r2
 8003914:	3304      	adds	r3, #4
 8003916:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003918:	697b      	ldr	r3, [r7, #20]
 800391a:	687a      	ldr	r2, [r7, #4]
 800391c:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800391e:	697b      	ldr	r3, [r7, #20]
 8003920:	683a      	ldr	r2, [r7, #0]
 8003922:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8003924:	697b      	ldr	r3, [r7, #20]
 8003926:	2200      	movs	r2, #0
 8003928:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 800392a:	697b      	ldr	r3, [r7, #20]
 800392c:	2201      	movs	r2, #1
 800392e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003930:	7afb      	ldrb	r3, [r7, #11]
 8003932:	f003 030f 	and.w	r3, r3, #15
 8003936:	b2da      	uxtb	r2, r3
 8003938:	697b      	ldr	r3, [r7, #20]
 800393a:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	691b      	ldr	r3, [r3, #16]
 8003940:	2b01      	cmp	r3, #1
 8003942:	d102      	bne.n	800394a <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003944:	687a      	ldr	r2, [r7, #4]
 8003946:	697b      	ldr	r3, [r7, #20]
 8003948:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800394a:	7afb      	ldrb	r3, [r7, #11]
 800394c:	f003 030f 	and.w	r3, r3, #15
 8003950:	2b00      	cmp	r3, #0
 8003952:	d109      	bne.n	8003968 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	6818      	ldr	r0, [r3, #0]
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	691b      	ldr	r3, [r3, #16]
 800395c:	b2db      	uxtb	r3, r3
 800395e:	461a      	mov	r2, r3
 8003960:	6979      	ldr	r1, [r7, #20]
 8003962:	f003 f87b 	bl	8006a5c <USB_EP0StartXfer>
 8003966:	e008      	b.n	800397a <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	6818      	ldr	r0, [r3, #0]
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	691b      	ldr	r3, [r3, #16]
 8003970:	b2db      	uxtb	r3, r3
 8003972:	461a      	mov	r2, r3
 8003974:	6979      	ldr	r1, [r7, #20]
 8003976:	f002 fe2d 	bl	80065d4 <USB_EPStartXfer>
  }

  return HAL_OK;
 800397a:	2300      	movs	r3, #0
}
 800397c:	4618      	mov	r0, r3
 800397e:	3718      	adds	r7, #24
 8003980:	46bd      	mov	sp, r7
 8003982:	bd80      	pop	{r7, pc}

08003984 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003984:	b580      	push	{r7, lr}
 8003986:	b084      	sub	sp, #16
 8003988:	af00      	add	r7, sp, #0
 800398a:	6078      	str	r0, [r7, #4]
 800398c:	460b      	mov	r3, r1
 800398e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8003990:	78fb      	ldrb	r3, [r7, #3]
 8003992:	f003 020f 	and.w	r2, r3, #15
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	685b      	ldr	r3, [r3, #4]
 800399a:	429a      	cmp	r2, r3
 800399c:	d901      	bls.n	80039a2 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800399e:	2301      	movs	r3, #1
 80039a0:	e050      	b.n	8003a44 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80039a2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	da0f      	bge.n	80039ca <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80039aa:	78fb      	ldrb	r3, [r7, #3]
 80039ac:	f003 020f 	and.w	r2, r3, #15
 80039b0:	4613      	mov	r3, r2
 80039b2:	00db      	lsls	r3, r3, #3
 80039b4:	1a9b      	subs	r3, r3, r2
 80039b6:	009b      	lsls	r3, r3, #2
 80039b8:	3338      	adds	r3, #56	; 0x38
 80039ba:	687a      	ldr	r2, [r7, #4]
 80039bc:	4413      	add	r3, r2
 80039be:	3304      	adds	r3, #4
 80039c0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	2201      	movs	r2, #1
 80039c6:	705a      	strb	r2, [r3, #1]
 80039c8:	e00d      	b.n	80039e6 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80039ca:	78fa      	ldrb	r2, [r7, #3]
 80039cc:	4613      	mov	r3, r2
 80039ce:	00db      	lsls	r3, r3, #3
 80039d0:	1a9b      	subs	r3, r3, r2
 80039d2:	009b      	lsls	r3, r3, #2
 80039d4:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80039d8:	687a      	ldr	r2, [r7, #4]
 80039da:	4413      	add	r3, r2
 80039dc:	3304      	adds	r3, #4
 80039de:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	2200      	movs	r2, #0
 80039e4:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	2201      	movs	r2, #1
 80039ea:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80039ec:	78fb      	ldrb	r3, [r7, #3]
 80039ee:	f003 030f 	and.w	r3, r3, #15
 80039f2:	b2da      	uxtb	r2, r3
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80039fe:	2b01      	cmp	r3, #1
 8003a00:	d101      	bne.n	8003a06 <HAL_PCD_EP_SetStall+0x82>
 8003a02:	2302      	movs	r3, #2
 8003a04:	e01e      	b.n	8003a44 <HAL_PCD_EP_SetStall+0xc0>
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	2201      	movs	r2, #1
 8003a0a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	68f9      	ldr	r1, [r7, #12]
 8003a14:	4618      	mov	r0, r3
 8003a16:	f003 f9d2 	bl	8006dbe <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003a1a:	78fb      	ldrb	r3, [r7, #3]
 8003a1c:	f003 030f 	and.w	r3, r3, #15
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d10a      	bne.n	8003a3a <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	6818      	ldr	r0, [r3, #0]
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	691b      	ldr	r3, [r3, #16]
 8003a2c:	b2d9      	uxtb	r1, r3
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003a34:	461a      	mov	r2, r3
 8003a36:	f003 fbc3 	bl	80071c0 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	2200      	movs	r2, #0
 8003a3e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8003a42:	2300      	movs	r3, #0
}
 8003a44:	4618      	mov	r0, r3
 8003a46:	3710      	adds	r7, #16
 8003a48:	46bd      	mov	sp, r7
 8003a4a:	bd80      	pop	{r7, pc}

08003a4c <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003a4c:	b580      	push	{r7, lr}
 8003a4e:	b084      	sub	sp, #16
 8003a50:	af00      	add	r7, sp, #0
 8003a52:	6078      	str	r0, [r7, #4]
 8003a54:	460b      	mov	r3, r1
 8003a56:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8003a58:	78fb      	ldrb	r3, [r7, #3]
 8003a5a:	f003 020f 	and.w	r2, r3, #15
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	685b      	ldr	r3, [r3, #4]
 8003a62:	429a      	cmp	r2, r3
 8003a64:	d901      	bls.n	8003a6a <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8003a66:	2301      	movs	r3, #1
 8003a68:	e042      	b.n	8003af0 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003a6a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	da0f      	bge.n	8003a92 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003a72:	78fb      	ldrb	r3, [r7, #3]
 8003a74:	f003 020f 	and.w	r2, r3, #15
 8003a78:	4613      	mov	r3, r2
 8003a7a:	00db      	lsls	r3, r3, #3
 8003a7c:	1a9b      	subs	r3, r3, r2
 8003a7e:	009b      	lsls	r3, r3, #2
 8003a80:	3338      	adds	r3, #56	; 0x38
 8003a82:	687a      	ldr	r2, [r7, #4]
 8003a84:	4413      	add	r3, r2
 8003a86:	3304      	adds	r3, #4
 8003a88:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	2201      	movs	r2, #1
 8003a8e:	705a      	strb	r2, [r3, #1]
 8003a90:	e00f      	b.n	8003ab2 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003a92:	78fb      	ldrb	r3, [r7, #3]
 8003a94:	f003 020f 	and.w	r2, r3, #15
 8003a98:	4613      	mov	r3, r2
 8003a9a:	00db      	lsls	r3, r3, #3
 8003a9c:	1a9b      	subs	r3, r3, r2
 8003a9e:	009b      	lsls	r3, r3, #2
 8003aa0:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003aa4:	687a      	ldr	r2, [r7, #4]
 8003aa6:	4413      	add	r3, r2
 8003aa8:	3304      	adds	r3, #4
 8003aaa:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	2200      	movs	r2, #0
 8003ab0:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	2200      	movs	r2, #0
 8003ab6:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003ab8:	78fb      	ldrb	r3, [r7, #3]
 8003aba:	f003 030f 	and.w	r3, r3, #15
 8003abe:	b2da      	uxtb	r2, r3
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003aca:	2b01      	cmp	r3, #1
 8003acc:	d101      	bne.n	8003ad2 <HAL_PCD_EP_ClrStall+0x86>
 8003ace:	2302      	movs	r3, #2
 8003ad0:	e00e      	b.n	8003af0 <HAL_PCD_EP_ClrStall+0xa4>
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	2201      	movs	r2, #1
 8003ad6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	68f9      	ldr	r1, [r7, #12]
 8003ae0:	4618      	mov	r0, r3
 8003ae2:	f003 f9da 	bl	8006e9a <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	2200      	movs	r2, #0
 8003aea:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8003aee:	2300      	movs	r3, #0
}
 8003af0:	4618      	mov	r0, r3
 8003af2:	3710      	adds	r7, #16
 8003af4:	46bd      	mov	sp, r7
 8003af6:	bd80      	pop	{r7, pc}

08003af8 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003af8:	b580      	push	{r7, lr}
 8003afa:	b08a      	sub	sp, #40	; 0x28
 8003afc:	af02      	add	r7, sp, #8
 8003afe:	6078      	str	r0, [r7, #4]
 8003b00:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003b08:	697b      	ldr	r3, [r7, #20]
 8003b0a:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8003b0c:	683a      	ldr	r2, [r7, #0]
 8003b0e:	4613      	mov	r3, r2
 8003b10:	00db      	lsls	r3, r3, #3
 8003b12:	1a9b      	subs	r3, r3, r2
 8003b14:	009b      	lsls	r3, r3, #2
 8003b16:	3338      	adds	r3, #56	; 0x38
 8003b18:	687a      	ldr	r2, [r7, #4]
 8003b1a:	4413      	add	r3, r2
 8003b1c:	3304      	adds	r3, #4
 8003b1e:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	699a      	ldr	r2, [r3, #24]
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	695b      	ldr	r3, [r3, #20]
 8003b28:	429a      	cmp	r2, r3
 8003b2a:	d901      	bls.n	8003b30 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8003b2c:	2301      	movs	r3, #1
 8003b2e:	e06c      	b.n	8003c0a <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	695a      	ldr	r2, [r3, #20]
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	699b      	ldr	r3, [r3, #24]
 8003b38:	1ad3      	subs	r3, r2, r3
 8003b3a:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	689b      	ldr	r3, [r3, #8]
 8003b40:	69fa      	ldr	r2, [r7, #28]
 8003b42:	429a      	cmp	r2, r3
 8003b44:	d902      	bls.n	8003b4c <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	689b      	ldr	r3, [r3, #8]
 8003b4a:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8003b4c:	69fb      	ldr	r3, [r7, #28]
 8003b4e:	3303      	adds	r3, #3
 8003b50:	089b      	lsrs	r3, r3, #2
 8003b52:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003b54:	e02b      	b.n	8003bae <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	695a      	ldr	r2, [r3, #20]
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	699b      	ldr	r3, [r3, #24]
 8003b5e:	1ad3      	subs	r3, r2, r3
 8003b60:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	689b      	ldr	r3, [r3, #8]
 8003b66:	69fa      	ldr	r2, [r7, #28]
 8003b68:	429a      	cmp	r2, r3
 8003b6a:	d902      	bls.n	8003b72 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	689b      	ldr	r3, [r3, #8]
 8003b70:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8003b72:	69fb      	ldr	r3, [r7, #28]
 8003b74:	3303      	adds	r3, #3
 8003b76:	089b      	lsrs	r3, r3, #2
 8003b78:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	68d9      	ldr	r1, [r3, #12]
 8003b7e:	683b      	ldr	r3, [r7, #0]
 8003b80:	b2da      	uxtb	r2, r3
 8003b82:	69fb      	ldr	r3, [r7, #28]
 8003b84:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003b8a:	b2db      	uxtb	r3, r3
 8003b8c:	9300      	str	r3, [sp, #0]
 8003b8e:	4603      	mov	r3, r0
 8003b90:	6978      	ldr	r0, [r7, #20]
 8003b92:	f003 f8b6 	bl	8006d02 <USB_WritePacket>

    ep->xfer_buff  += len;
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	68da      	ldr	r2, [r3, #12]
 8003b9a:	69fb      	ldr	r3, [r7, #28]
 8003b9c:	441a      	add	r2, r3
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	699a      	ldr	r2, [r3, #24]
 8003ba6:	69fb      	ldr	r3, [r7, #28]
 8003ba8:	441a      	add	r2, r3
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003bae:	683b      	ldr	r3, [r7, #0]
 8003bb0:	015a      	lsls	r2, r3, #5
 8003bb2:	693b      	ldr	r3, [r7, #16]
 8003bb4:	4413      	add	r3, r2
 8003bb6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003bba:	699b      	ldr	r3, [r3, #24]
 8003bbc:	b29b      	uxth	r3, r3
 8003bbe:	69ba      	ldr	r2, [r7, #24]
 8003bc0:	429a      	cmp	r2, r3
 8003bc2:	d809      	bhi.n	8003bd8 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	699a      	ldr	r2, [r3, #24]
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003bcc:	429a      	cmp	r2, r3
 8003bce:	d203      	bcs.n	8003bd8 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	695b      	ldr	r3, [r3, #20]
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d1be      	bne.n	8003b56 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	695a      	ldr	r2, [r3, #20]
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	699b      	ldr	r3, [r3, #24]
 8003be0:	429a      	cmp	r2, r3
 8003be2:	d811      	bhi.n	8003c08 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003be4:	683b      	ldr	r3, [r7, #0]
 8003be6:	f003 030f 	and.w	r3, r3, #15
 8003bea:	2201      	movs	r2, #1
 8003bec:	fa02 f303 	lsl.w	r3, r2, r3
 8003bf0:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003bf2:	693b      	ldr	r3, [r7, #16]
 8003bf4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003bf8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003bfa:	68bb      	ldr	r3, [r7, #8]
 8003bfc:	43db      	mvns	r3, r3
 8003bfe:	6939      	ldr	r1, [r7, #16]
 8003c00:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003c04:	4013      	ands	r3, r2
 8003c06:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8003c08:	2300      	movs	r3, #0
}
 8003c0a:	4618      	mov	r0, r3
 8003c0c:	3720      	adds	r7, #32
 8003c0e:	46bd      	mov	sp, r7
 8003c10:	bd80      	pop	{r7, pc}
	...

08003c14 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003c14:	b580      	push	{r7, lr}
 8003c16:	b086      	sub	sp, #24
 8003c18:	af00      	add	r7, sp, #0
 8003c1a:	6078      	str	r0, [r7, #4]
 8003c1c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003c24:	697b      	ldr	r3, [r7, #20]
 8003c26:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003c28:	697b      	ldr	r3, [r7, #20]
 8003c2a:	333c      	adds	r3, #60	; 0x3c
 8003c2c:	3304      	adds	r3, #4
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003c32:	683b      	ldr	r3, [r7, #0]
 8003c34:	015a      	lsls	r2, r3, #5
 8003c36:	693b      	ldr	r3, [r7, #16]
 8003c38:	4413      	add	r3, r2
 8003c3a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c3e:	689b      	ldr	r3, [r3, #8]
 8003c40:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	691b      	ldr	r3, [r3, #16]
 8003c46:	2b01      	cmp	r3, #1
 8003c48:	f040 80a0 	bne.w	8003d8c <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8003c4c:	68bb      	ldr	r3, [r7, #8]
 8003c4e:	f003 0308 	and.w	r3, r3, #8
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d015      	beq.n	8003c82 <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	4a72      	ldr	r2, [pc, #456]	; (8003e24 <PCD_EP_OutXfrComplete_int+0x210>)
 8003c5a:	4293      	cmp	r3, r2
 8003c5c:	f240 80dd 	bls.w	8003e1a <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003c60:	68bb      	ldr	r3, [r7, #8]
 8003c62:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	f000 80d7 	beq.w	8003e1a <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003c6c:	683b      	ldr	r3, [r7, #0]
 8003c6e:	015a      	lsls	r2, r3, #5
 8003c70:	693b      	ldr	r3, [r7, #16]
 8003c72:	4413      	add	r3, r2
 8003c74:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c78:	461a      	mov	r2, r3
 8003c7a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003c7e:	6093      	str	r3, [r2, #8]
 8003c80:	e0cb      	b.n	8003e1a <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8003c82:	68bb      	ldr	r3, [r7, #8]
 8003c84:	f003 0320 	and.w	r3, r3, #32
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d009      	beq.n	8003ca0 <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003c8c:	683b      	ldr	r3, [r7, #0]
 8003c8e:	015a      	lsls	r2, r3, #5
 8003c90:	693b      	ldr	r3, [r7, #16]
 8003c92:	4413      	add	r3, r2
 8003c94:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c98:	461a      	mov	r2, r3
 8003c9a:	2320      	movs	r3, #32
 8003c9c:	6093      	str	r3, [r2, #8]
 8003c9e:	e0bc      	b.n	8003e1a <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8003ca0:	68bb      	ldr	r3, [r7, #8]
 8003ca2:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	f040 80b7 	bne.w	8003e1a <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	4a5d      	ldr	r2, [pc, #372]	; (8003e24 <PCD_EP_OutXfrComplete_int+0x210>)
 8003cb0:	4293      	cmp	r3, r2
 8003cb2:	d90f      	bls.n	8003cd4 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003cb4:	68bb      	ldr	r3, [r7, #8]
 8003cb6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d00a      	beq.n	8003cd4 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003cbe:	683b      	ldr	r3, [r7, #0]
 8003cc0:	015a      	lsls	r2, r3, #5
 8003cc2:	693b      	ldr	r3, [r7, #16]
 8003cc4:	4413      	add	r3, r2
 8003cc6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003cca:	461a      	mov	r2, r3
 8003ccc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003cd0:	6093      	str	r3, [r2, #8]
 8003cd2:	e0a2      	b.n	8003e1a <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 8003cd4:	6879      	ldr	r1, [r7, #4]
 8003cd6:	683a      	ldr	r2, [r7, #0]
 8003cd8:	4613      	mov	r3, r2
 8003cda:	00db      	lsls	r3, r3, #3
 8003cdc:	1a9b      	subs	r3, r3, r2
 8003cde:	009b      	lsls	r3, r3, #2
 8003ce0:	440b      	add	r3, r1
 8003ce2:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8003ce6:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8003ce8:	683b      	ldr	r3, [r7, #0]
 8003cea:	0159      	lsls	r1, r3, #5
 8003cec:	693b      	ldr	r3, [r7, #16]
 8003cee:	440b      	add	r3, r1
 8003cf0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003cf4:	691b      	ldr	r3, [r3, #16]
 8003cf6:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 8003cfa:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 8003cfc:	6878      	ldr	r0, [r7, #4]
 8003cfe:	683a      	ldr	r2, [r7, #0]
 8003d00:	4613      	mov	r3, r2
 8003d02:	00db      	lsls	r3, r3, #3
 8003d04:	1a9b      	subs	r3, r3, r2
 8003d06:	009b      	lsls	r3, r3, #2
 8003d08:	4403      	add	r3, r0
 8003d0a:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8003d0e:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 8003d10:	6879      	ldr	r1, [r7, #4]
 8003d12:	683a      	ldr	r2, [r7, #0]
 8003d14:	4613      	mov	r3, r2
 8003d16:	00db      	lsls	r3, r3, #3
 8003d18:	1a9b      	subs	r3, r3, r2
 8003d1a:	009b      	lsls	r3, r3, #2
 8003d1c:	440b      	add	r3, r1
 8003d1e:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003d22:	6819      	ldr	r1, [r3, #0]
 8003d24:	6878      	ldr	r0, [r7, #4]
 8003d26:	683a      	ldr	r2, [r7, #0]
 8003d28:	4613      	mov	r3, r2
 8003d2a:	00db      	lsls	r3, r3, #3
 8003d2c:	1a9b      	subs	r3, r3, r2
 8003d2e:	009b      	lsls	r3, r3, #2
 8003d30:	4403      	add	r3, r0
 8003d32:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	4419      	add	r1, r3
 8003d3a:	6878      	ldr	r0, [r7, #4]
 8003d3c:	683a      	ldr	r2, [r7, #0]
 8003d3e:	4613      	mov	r3, r2
 8003d40:	00db      	lsls	r3, r3, #3
 8003d42:	1a9b      	subs	r3, r3, r2
 8003d44:	009b      	lsls	r3, r3, #2
 8003d46:	4403      	add	r3, r0
 8003d48:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003d4c:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8003d4e:	683b      	ldr	r3, [r7, #0]
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d114      	bne.n	8003d7e <PCD_EP_OutXfrComplete_int+0x16a>
 8003d54:	6879      	ldr	r1, [r7, #4]
 8003d56:	683a      	ldr	r2, [r7, #0]
 8003d58:	4613      	mov	r3, r2
 8003d5a:	00db      	lsls	r3, r3, #3
 8003d5c:	1a9b      	subs	r3, r3, r2
 8003d5e:	009b      	lsls	r3, r3, #2
 8003d60:	440b      	add	r3, r1
 8003d62:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d108      	bne.n	8003d7e <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	6818      	ldr	r0, [r3, #0]
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003d76:	461a      	mov	r2, r3
 8003d78:	2101      	movs	r1, #1
 8003d7a:	f003 fa21 	bl	80071c0 <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003d7e:	683b      	ldr	r3, [r7, #0]
 8003d80:	b2db      	uxtb	r3, r3
 8003d82:	4619      	mov	r1, r3
 8003d84:	6878      	ldr	r0, [r7, #4]
 8003d86:	f005 fa61 	bl	800924c <HAL_PCD_DataOutStageCallback>
 8003d8a:	e046      	b.n	8003e1a <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	4a26      	ldr	r2, [pc, #152]	; (8003e28 <PCD_EP_OutXfrComplete_int+0x214>)
 8003d90:	4293      	cmp	r3, r2
 8003d92:	d124      	bne.n	8003dde <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8003d94:	68bb      	ldr	r3, [r7, #8]
 8003d96:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d00a      	beq.n	8003db4 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003d9e:	683b      	ldr	r3, [r7, #0]
 8003da0:	015a      	lsls	r2, r3, #5
 8003da2:	693b      	ldr	r3, [r7, #16]
 8003da4:	4413      	add	r3, r2
 8003da6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003daa:	461a      	mov	r2, r3
 8003dac:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003db0:	6093      	str	r3, [r2, #8]
 8003db2:	e032      	b.n	8003e1a <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003db4:	68bb      	ldr	r3, [r7, #8]
 8003db6:	f003 0320 	and.w	r3, r3, #32
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d008      	beq.n	8003dd0 <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003dbe:	683b      	ldr	r3, [r7, #0]
 8003dc0:	015a      	lsls	r2, r3, #5
 8003dc2:	693b      	ldr	r3, [r7, #16]
 8003dc4:	4413      	add	r3, r2
 8003dc6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003dca:	461a      	mov	r2, r3
 8003dcc:	2320      	movs	r3, #32
 8003dce:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003dd0:	683b      	ldr	r3, [r7, #0]
 8003dd2:	b2db      	uxtb	r3, r3
 8003dd4:	4619      	mov	r1, r3
 8003dd6:	6878      	ldr	r0, [r7, #4]
 8003dd8:	f005 fa38 	bl	800924c <HAL_PCD_DataOutStageCallback>
 8003ddc:	e01d      	b.n	8003e1a <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8003dde:	683b      	ldr	r3, [r7, #0]
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d114      	bne.n	8003e0e <PCD_EP_OutXfrComplete_int+0x1fa>
 8003de4:	6879      	ldr	r1, [r7, #4]
 8003de6:	683a      	ldr	r2, [r7, #0]
 8003de8:	4613      	mov	r3, r2
 8003dea:	00db      	lsls	r3, r3, #3
 8003dec:	1a9b      	subs	r3, r3, r2
 8003dee:	009b      	lsls	r3, r3, #2
 8003df0:	440b      	add	r3, r1
 8003df2:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d108      	bne.n	8003e0e <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	6818      	ldr	r0, [r3, #0]
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003e06:	461a      	mov	r2, r3
 8003e08:	2100      	movs	r1, #0
 8003e0a:	f003 f9d9 	bl	80071c0 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003e0e:	683b      	ldr	r3, [r7, #0]
 8003e10:	b2db      	uxtb	r3, r3
 8003e12:	4619      	mov	r1, r3
 8003e14:	6878      	ldr	r0, [r7, #4]
 8003e16:	f005 fa19 	bl	800924c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8003e1a:	2300      	movs	r3, #0
}
 8003e1c:	4618      	mov	r0, r3
 8003e1e:	3718      	adds	r7, #24
 8003e20:	46bd      	mov	sp, r7
 8003e22:	bd80      	pop	{r7, pc}
 8003e24:	4f54300a 	.word	0x4f54300a
 8003e28:	4f54310a 	.word	0x4f54310a

08003e2c <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003e2c:	b580      	push	{r7, lr}
 8003e2e:	b086      	sub	sp, #24
 8003e30:	af00      	add	r7, sp, #0
 8003e32:	6078      	str	r0, [r7, #4]
 8003e34:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003e3c:	697b      	ldr	r3, [r7, #20]
 8003e3e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003e40:	697b      	ldr	r3, [r7, #20]
 8003e42:	333c      	adds	r3, #60	; 0x3c
 8003e44:	3304      	adds	r3, #4
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003e4a:	683b      	ldr	r3, [r7, #0]
 8003e4c:	015a      	lsls	r2, r3, #5
 8003e4e:	693b      	ldr	r3, [r7, #16]
 8003e50:	4413      	add	r3, r2
 8003e52:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e56:	689b      	ldr	r3, [r3, #8]
 8003e58:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	4a15      	ldr	r2, [pc, #84]	; (8003eb4 <PCD_EP_OutSetupPacket_int+0x88>)
 8003e5e:	4293      	cmp	r3, r2
 8003e60:	d90e      	bls.n	8003e80 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003e62:	68bb      	ldr	r3, [r7, #8]
 8003e64:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d009      	beq.n	8003e80 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003e6c:	683b      	ldr	r3, [r7, #0]
 8003e6e:	015a      	lsls	r2, r3, #5
 8003e70:	693b      	ldr	r3, [r7, #16]
 8003e72:	4413      	add	r3, r2
 8003e74:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e78:	461a      	mov	r2, r3
 8003e7a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003e7e:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8003e80:	6878      	ldr	r0, [r7, #4]
 8003e82:	f005 f9d1 	bl	8009228 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	4a0a      	ldr	r2, [pc, #40]	; (8003eb4 <PCD_EP_OutSetupPacket_int+0x88>)
 8003e8a:	4293      	cmp	r3, r2
 8003e8c:	d90c      	bls.n	8003ea8 <PCD_EP_OutSetupPacket_int+0x7c>
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	691b      	ldr	r3, [r3, #16]
 8003e92:	2b01      	cmp	r3, #1
 8003e94:	d108      	bne.n	8003ea8 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	6818      	ldr	r0, [r3, #0]
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003ea0:	461a      	mov	r2, r3
 8003ea2:	2101      	movs	r1, #1
 8003ea4:	f003 f98c 	bl	80071c0 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8003ea8:	2300      	movs	r3, #0
}
 8003eaa:	4618      	mov	r0, r3
 8003eac:	3718      	adds	r7, #24
 8003eae:	46bd      	mov	sp, r7
 8003eb0:	bd80      	pop	{r7, pc}
 8003eb2:	bf00      	nop
 8003eb4:	4f54300a 	.word	0x4f54300a

08003eb8 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8003eb8:	b480      	push	{r7}
 8003eba:	b085      	sub	sp, #20
 8003ebc:	af00      	add	r7, sp, #0
 8003ebe:	6078      	str	r0, [r7, #4]
 8003ec0:	460b      	mov	r3, r1
 8003ec2:	70fb      	strb	r3, [r7, #3]
 8003ec4:	4613      	mov	r3, r2
 8003ec6:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ece:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8003ed0:	78fb      	ldrb	r3, [r7, #3]
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d107      	bne.n	8003ee6 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8003ed6:	883b      	ldrh	r3, [r7, #0]
 8003ed8:	0419      	lsls	r1, r3, #16
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	68ba      	ldr	r2, [r7, #8]
 8003ee0:	430a      	orrs	r2, r1
 8003ee2:	629a      	str	r2, [r3, #40]	; 0x28
 8003ee4:	e028      	b.n	8003f38 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003eec:	0c1b      	lsrs	r3, r3, #16
 8003eee:	68ba      	ldr	r2, [r7, #8]
 8003ef0:	4413      	add	r3, r2
 8003ef2:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003ef4:	2300      	movs	r3, #0
 8003ef6:	73fb      	strb	r3, [r7, #15]
 8003ef8:	e00d      	b.n	8003f16 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681a      	ldr	r2, [r3, #0]
 8003efe:	7bfb      	ldrb	r3, [r7, #15]
 8003f00:	3340      	adds	r3, #64	; 0x40
 8003f02:	009b      	lsls	r3, r3, #2
 8003f04:	4413      	add	r3, r2
 8003f06:	685b      	ldr	r3, [r3, #4]
 8003f08:	0c1b      	lsrs	r3, r3, #16
 8003f0a:	68ba      	ldr	r2, [r7, #8]
 8003f0c:	4413      	add	r3, r2
 8003f0e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003f10:	7bfb      	ldrb	r3, [r7, #15]
 8003f12:	3301      	adds	r3, #1
 8003f14:	73fb      	strb	r3, [r7, #15]
 8003f16:	7bfa      	ldrb	r2, [r7, #15]
 8003f18:	78fb      	ldrb	r3, [r7, #3]
 8003f1a:	3b01      	subs	r3, #1
 8003f1c:	429a      	cmp	r2, r3
 8003f1e:	d3ec      	bcc.n	8003efa <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8003f20:	883b      	ldrh	r3, [r7, #0]
 8003f22:	0418      	lsls	r0, r3, #16
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	6819      	ldr	r1, [r3, #0]
 8003f28:	78fb      	ldrb	r3, [r7, #3]
 8003f2a:	3b01      	subs	r3, #1
 8003f2c:	68ba      	ldr	r2, [r7, #8]
 8003f2e:	4302      	orrs	r2, r0
 8003f30:	3340      	adds	r3, #64	; 0x40
 8003f32:	009b      	lsls	r3, r3, #2
 8003f34:	440b      	add	r3, r1
 8003f36:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8003f38:	2300      	movs	r3, #0
}
 8003f3a:	4618      	mov	r0, r3
 8003f3c:	3714      	adds	r7, #20
 8003f3e:	46bd      	mov	sp, r7
 8003f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f44:	4770      	bx	lr

08003f46 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8003f46:	b480      	push	{r7}
 8003f48:	b083      	sub	sp, #12
 8003f4a:	af00      	add	r7, sp, #0
 8003f4c:	6078      	str	r0, [r7, #4]
 8003f4e:	460b      	mov	r3, r1
 8003f50:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	887a      	ldrh	r2, [r7, #2]
 8003f58:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8003f5a:	2300      	movs	r3, #0
}
 8003f5c:	4618      	mov	r0, r3
 8003f5e:	370c      	adds	r7, #12
 8003f60:	46bd      	mov	sp, r7
 8003f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f66:	4770      	bx	lr

08003f68 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8003f68:	b480      	push	{r7}
 8003f6a:	b083      	sub	sp, #12
 8003f6c:	af00      	add	r7, sp, #0
 8003f6e:	6078      	str	r0, [r7, #4]
 8003f70:	460b      	mov	r3, r1
 8003f72:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8003f74:	bf00      	nop
 8003f76:	370c      	adds	r7, #12
 8003f78:	46bd      	mov	sp, r7
 8003f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f7e:	4770      	bx	lr

08003f80 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003f80:	b580      	push	{r7, lr}
 8003f82:	b086      	sub	sp, #24
 8003f84:	af00      	add	r7, sp, #0
 8003f86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d101      	bne.n	8003f92 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003f8e:	2301      	movs	r3, #1
 8003f90:	e25b      	b.n	800444a <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	f003 0301 	and.w	r3, r3, #1
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d075      	beq.n	800408a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003f9e:	4ba3      	ldr	r3, [pc, #652]	; (800422c <HAL_RCC_OscConfig+0x2ac>)
 8003fa0:	689b      	ldr	r3, [r3, #8]
 8003fa2:	f003 030c 	and.w	r3, r3, #12
 8003fa6:	2b04      	cmp	r3, #4
 8003fa8:	d00c      	beq.n	8003fc4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003faa:	4ba0      	ldr	r3, [pc, #640]	; (800422c <HAL_RCC_OscConfig+0x2ac>)
 8003fac:	689b      	ldr	r3, [r3, #8]
 8003fae:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003fb2:	2b08      	cmp	r3, #8
 8003fb4:	d112      	bne.n	8003fdc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003fb6:	4b9d      	ldr	r3, [pc, #628]	; (800422c <HAL_RCC_OscConfig+0x2ac>)
 8003fb8:	685b      	ldr	r3, [r3, #4]
 8003fba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003fbe:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003fc2:	d10b      	bne.n	8003fdc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003fc4:	4b99      	ldr	r3, [pc, #612]	; (800422c <HAL_RCC_OscConfig+0x2ac>)
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d05b      	beq.n	8004088 <HAL_RCC_OscConfig+0x108>
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	685b      	ldr	r3, [r3, #4]
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d157      	bne.n	8004088 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003fd8:	2301      	movs	r3, #1
 8003fda:	e236      	b.n	800444a <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	685b      	ldr	r3, [r3, #4]
 8003fe0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003fe4:	d106      	bne.n	8003ff4 <HAL_RCC_OscConfig+0x74>
 8003fe6:	4b91      	ldr	r3, [pc, #580]	; (800422c <HAL_RCC_OscConfig+0x2ac>)
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	4a90      	ldr	r2, [pc, #576]	; (800422c <HAL_RCC_OscConfig+0x2ac>)
 8003fec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003ff0:	6013      	str	r3, [r2, #0]
 8003ff2:	e01d      	b.n	8004030 <HAL_RCC_OscConfig+0xb0>
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	685b      	ldr	r3, [r3, #4]
 8003ff8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003ffc:	d10c      	bne.n	8004018 <HAL_RCC_OscConfig+0x98>
 8003ffe:	4b8b      	ldr	r3, [pc, #556]	; (800422c <HAL_RCC_OscConfig+0x2ac>)
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	4a8a      	ldr	r2, [pc, #552]	; (800422c <HAL_RCC_OscConfig+0x2ac>)
 8004004:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004008:	6013      	str	r3, [r2, #0]
 800400a:	4b88      	ldr	r3, [pc, #544]	; (800422c <HAL_RCC_OscConfig+0x2ac>)
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	4a87      	ldr	r2, [pc, #540]	; (800422c <HAL_RCC_OscConfig+0x2ac>)
 8004010:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004014:	6013      	str	r3, [r2, #0]
 8004016:	e00b      	b.n	8004030 <HAL_RCC_OscConfig+0xb0>
 8004018:	4b84      	ldr	r3, [pc, #528]	; (800422c <HAL_RCC_OscConfig+0x2ac>)
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	4a83      	ldr	r2, [pc, #524]	; (800422c <HAL_RCC_OscConfig+0x2ac>)
 800401e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004022:	6013      	str	r3, [r2, #0]
 8004024:	4b81      	ldr	r3, [pc, #516]	; (800422c <HAL_RCC_OscConfig+0x2ac>)
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	4a80      	ldr	r2, [pc, #512]	; (800422c <HAL_RCC_OscConfig+0x2ac>)
 800402a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800402e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	685b      	ldr	r3, [r3, #4]
 8004034:	2b00      	cmp	r3, #0
 8004036:	d013      	beq.n	8004060 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004038:	f7fd fb22 	bl	8001680 <HAL_GetTick>
 800403c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800403e:	e008      	b.n	8004052 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004040:	f7fd fb1e 	bl	8001680 <HAL_GetTick>
 8004044:	4602      	mov	r2, r0
 8004046:	693b      	ldr	r3, [r7, #16]
 8004048:	1ad3      	subs	r3, r2, r3
 800404a:	2b64      	cmp	r3, #100	; 0x64
 800404c:	d901      	bls.n	8004052 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800404e:	2303      	movs	r3, #3
 8004050:	e1fb      	b.n	800444a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004052:	4b76      	ldr	r3, [pc, #472]	; (800422c <HAL_RCC_OscConfig+0x2ac>)
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800405a:	2b00      	cmp	r3, #0
 800405c:	d0f0      	beq.n	8004040 <HAL_RCC_OscConfig+0xc0>
 800405e:	e014      	b.n	800408a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004060:	f7fd fb0e 	bl	8001680 <HAL_GetTick>
 8004064:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004066:	e008      	b.n	800407a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004068:	f7fd fb0a 	bl	8001680 <HAL_GetTick>
 800406c:	4602      	mov	r2, r0
 800406e:	693b      	ldr	r3, [r7, #16]
 8004070:	1ad3      	subs	r3, r2, r3
 8004072:	2b64      	cmp	r3, #100	; 0x64
 8004074:	d901      	bls.n	800407a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004076:	2303      	movs	r3, #3
 8004078:	e1e7      	b.n	800444a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800407a:	4b6c      	ldr	r3, [pc, #432]	; (800422c <HAL_RCC_OscConfig+0x2ac>)
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004082:	2b00      	cmp	r3, #0
 8004084:	d1f0      	bne.n	8004068 <HAL_RCC_OscConfig+0xe8>
 8004086:	e000      	b.n	800408a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004088:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	f003 0302 	and.w	r3, r3, #2
 8004092:	2b00      	cmp	r3, #0
 8004094:	d063      	beq.n	800415e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004096:	4b65      	ldr	r3, [pc, #404]	; (800422c <HAL_RCC_OscConfig+0x2ac>)
 8004098:	689b      	ldr	r3, [r3, #8]
 800409a:	f003 030c 	and.w	r3, r3, #12
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d00b      	beq.n	80040ba <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80040a2:	4b62      	ldr	r3, [pc, #392]	; (800422c <HAL_RCC_OscConfig+0x2ac>)
 80040a4:	689b      	ldr	r3, [r3, #8]
 80040a6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80040aa:	2b08      	cmp	r3, #8
 80040ac:	d11c      	bne.n	80040e8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80040ae:	4b5f      	ldr	r3, [pc, #380]	; (800422c <HAL_RCC_OscConfig+0x2ac>)
 80040b0:	685b      	ldr	r3, [r3, #4]
 80040b2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d116      	bne.n	80040e8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80040ba:	4b5c      	ldr	r3, [pc, #368]	; (800422c <HAL_RCC_OscConfig+0x2ac>)
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	f003 0302 	and.w	r3, r3, #2
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d005      	beq.n	80040d2 <HAL_RCC_OscConfig+0x152>
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	68db      	ldr	r3, [r3, #12]
 80040ca:	2b01      	cmp	r3, #1
 80040cc:	d001      	beq.n	80040d2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80040ce:	2301      	movs	r3, #1
 80040d0:	e1bb      	b.n	800444a <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80040d2:	4b56      	ldr	r3, [pc, #344]	; (800422c <HAL_RCC_OscConfig+0x2ac>)
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	691b      	ldr	r3, [r3, #16]
 80040de:	00db      	lsls	r3, r3, #3
 80040e0:	4952      	ldr	r1, [pc, #328]	; (800422c <HAL_RCC_OscConfig+0x2ac>)
 80040e2:	4313      	orrs	r3, r2
 80040e4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80040e6:	e03a      	b.n	800415e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	68db      	ldr	r3, [r3, #12]
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d020      	beq.n	8004132 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80040f0:	4b4f      	ldr	r3, [pc, #316]	; (8004230 <HAL_RCC_OscConfig+0x2b0>)
 80040f2:	2201      	movs	r2, #1
 80040f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040f6:	f7fd fac3 	bl	8001680 <HAL_GetTick>
 80040fa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80040fc:	e008      	b.n	8004110 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80040fe:	f7fd fabf 	bl	8001680 <HAL_GetTick>
 8004102:	4602      	mov	r2, r0
 8004104:	693b      	ldr	r3, [r7, #16]
 8004106:	1ad3      	subs	r3, r2, r3
 8004108:	2b02      	cmp	r3, #2
 800410a:	d901      	bls.n	8004110 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800410c:	2303      	movs	r3, #3
 800410e:	e19c      	b.n	800444a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004110:	4b46      	ldr	r3, [pc, #280]	; (800422c <HAL_RCC_OscConfig+0x2ac>)
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	f003 0302 	and.w	r3, r3, #2
 8004118:	2b00      	cmp	r3, #0
 800411a:	d0f0      	beq.n	80040fe <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800411c:	4b43      	ldr	r3, [pc, #268]	; (800422c <HAL_RCC_OscConfig+0x2ac>)
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	691b      	ldr	r3, [r3, #16]
 8004128:	00db      	lsls	r3, r3, #3
 800412a:	4940      	ldr	r1, [pc, #256]	; (800422c <HAL_RCC_OscConfig+0x2ac>)
 800412c:	4313      	orrs	r3, r2
 800412e:	600b      	str	r3, [r1, #0]
 8004130:	e015      	b.n	800415e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004132:	4b3f      	ldr	r3, [pc, #252]	; (8004230 <HAL_RCC_OscConfig+0x2b0>)
 8004134:	2200      	movs	r2, #0
 8004136:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004138:	f7fd faa2 	bl	8001680 <HAL_GetTick>
 800413c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800413e:	e008      	b.n	8004152 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004140:	f7fd fa9e 	bl	8001680 <HAL_GetTick>
 8004144:	4602      	mov	r2, r0
 8004146:	693b      	ldr	r3, [r7, #16]
 8004148:	1ad3      	subs	r3, r2, r3
 800414a:	2b02      	cmp	r3, #2
 800414c:	d901      	bls.n	8004152 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800414e:	2303      	movs	r3, #3
 8004150:	e17b      	b.n	800444a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004152:	4b36      	ldr	r3, [pc, #216]	; (800422c <HAL_RCC_OscConfig+0x2ac>)
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	f003 0302 	and.w	r3, r3, #2
 800415a:	2b00      	cmp	r3, #0
 800415c:	d1f0      	bne.n	8004140 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	f003 0308 	and.w	r3, r3, #8
 8004166:	2b00      	cmp	r3, #0
 8004168:	d030      	beq.n	80041cc <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	695b      	ldr	r3, [r3, #20]
 800416e:	2b00      	cmp	r3, #0
 8004170:	d016      	beq.n	80041a0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004172:	4b30      	ldr	r3, [pc, #192]	; (8004234 <HAL_RCC_OscConfig+0x2b4>)
 8004174:	2201      	movs	r2, #1
 8004176:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004178:	f7fd fa82 	bl	8001680 <HAL_GetTick>
 800417c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800417e:	e008      	b.n	8004192 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004180:	f7fd fa7e 	bl	8001680 <HAL_GetTick>
 8004184:	4602      	mov	r2, r0
 8004186:	693b      	ldr	r3, [r7, #16]
 8004188:	1ad3      	subs	r3, r2, r3
 800418a:	2b02      	cmp	r3, #2
 800418c:	d901      	bls.n	8004192 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800418e:	2303      	movs	r3, #3
 8004190:	e15b      	b.n	800444a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004192:	4b26      	ldr	r3, [pc, #152]	; (800422c <HAL_RCC_OscConfig+0x2ac>)
 8004194:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004196:	f003 0302 	and.w	r3, r3, #2
 800419a:	2b00      	cmp	r3, #0
 800419c:	d0f0      	beq.n	8004180 <HAL_RCC_OscConfig+0x200>
 800419e:	e015      	b.n	80041cc <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80041a0:	4b24      	ldr	r3, [pc, #144]	; (8004234 <HAL_RCC_OscConfig+0x2b4>)
 80041a2:	2200      	movs	r2, #0
 80041a4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80041a6:	f7fd fa6b 	bl	8001680 <HAL_GetTick>
 80041aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80041ac:	e008      	b.n	80041c0 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80041ae:	f7fd fa67 	bl	8001680 <HAL_GetTick>
 80041b2:	4602      	mov	r2, r0
 80041b4:	693b      	ldr	r3, [r7, #16]
 80041b6:	1ad3      	subs	r3, r2, r3
 80041b8:	2b02      	cmp	r3, #2
 80041ba:	d901      	bls.n	80041c0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80041bc:	2303      	movs	r3, #3
 80041be:	e144      	b.n	800444a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80041c0:	4b1a      	ldr	r3, [pc, #104]	; (800422c <HAL_RCC_OscConfig+0x2ac>)
 80041c2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80041c4:	f003 0302 	and.w	r3, r3, #2
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d1f0      	bne.n	80041ae <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	f003 0304 	and.w	r3, r3, #4
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	f000 80a0 	beq.w	800431a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80041da:	2300      	movs	r3, #0
 80041dc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80041de:	4b13      	ldr	r3, [pc, #76]	; (800422c <HAL_RCC_OscConfig+0x2ac>)
 80041e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d10f      	bne.n	800420a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80041ea:	2300      	movs	r3, #0
 80041ec:	60bb      	str	r3, [r7, #8]
 80041ee:	4b0f      	ldr	r3, [pc, #60]	; (800422c <HAL_RCC_OscConfig+0x2ac>)
 80041f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041f2:	4a0e      	ldr	r2, [pc, #56]	; (800422c <HAL_RCC_OscConfig+0x2ac>)
 80041f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80041f8:	6413      	str	r3, [r2, #64]	; 0x40
 80041fa:	4b0c      	ldr	r3, [pc, #48]	; (800422c <HAL_RCC_OscConfig+0x2ac>)
 80041fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004202:	60bb      	str	r3, [r7, #8]
 8004204:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004206:	2301      	movs	r3, #1
 8004208:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800420a:	4b0b      	ldr	r3, [pc, #44]	; (8004238 <HAL_RCC_OscConfig+0x2b8>)
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004212:	2b00      	cmp	r3, #0
 8004214:	d121      	bne.n	800425a <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004216:	4b08      	ldr	r3, [pc, #32]	; (8004238 <HAL_RCC_OscConfig+0x2b8>)
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	4a07      	ldr	r2, [pc, #28]	; (8004238 <HAL_RCC_OscConfig+0x2b8>)
 800421c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004220:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004222:	f7fd fa2d 	bl	8001680 <HAL_GetTick>
 8004226:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004228:	e011      	b.n	800424e <HAL_RCC_OscConfig+0x2ce>
 800422a:	bf00      	nop
 800422c:	40023800 	.word	0x40023800
 8004230:	42470000 	.word	0x42470000
 8004234:	42470e80 	.word	0x42470e80
 8004238:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800423c:	f7fd fa20 	bl	8001680 <HAL_GetTick>
 8004240:	4602      	mov	r2, r0
 8004242:	693b      	ldr	r3, [r7, #16]
 8004244:	1ad3      	subs	r3, r2, r3
 8004246:	2b02      	cmp	r3, #2
 8004248:	d901      	bls.n	800424e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800424a:	2303      	movs	r3, #3
 800424c:	e0fd      	b.n	800444a <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800424e:	4b81      	ldr	r3, [pc, #516]	; (8004454 <HAL_RCC_OscConfig+0x4d4>)
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004256:	2b00      	cmp	r3, #0
 8004258:	d0f0      	beq.n	800423c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	689b      	ldr	r3, [r3, #8]
 800425e:	2b01      	cmp	r3, #1
 8004260:	d106      	bne.n	8004270 <HAL_RCC_OscConfig+0x2f0>
 8004262:	4b7d      	ldr	r3, [pc, #500]	; (8004458 <HAL_RCC_OscConfig+0x4d8>)
 8004264:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004266:	4a7c      	ldr	r2, [pc, #496]	; (8004458 <HAL_RCC_OscConfig+0x4d8>)
 8004268:	f043 0301 	orr.w	r3, r3, #1
 800426c:	6713      	str	r3, [r2, #112]	; 0x70
 800426e:	e01c      	b.n	80042aa <HAL_RCC_OscConfig+0x32a>
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	689b      	ldr	r3, [r3, #8]
 8004274:	2b05      	cmp	r3, #5
 8004276:	d10c      	bne.n	8004292 <HAL_RCC_OscConfig+0x312>
 8004278:	4b77      	ldr	r3, [pc, #476]	; (8004458 <HAL_RCC_OscConfig+0x4d8>)
 800427a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800427c:	4a76      	ldr	r2, [pc, #472]	; (8004458 <HAL_RCC_OscConfig+0x4d8>)
 800427e:	f043 0304 	orr.w	r3, r3, #4
 8004282:	6713      	str	r3, [r2, #112]	; 0x70
 8004284:	4b74      	ldr	r3, [pc, #464]	; (8004458 <HAL_RCC_OscConfig+0x4d8>)
 8004286:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004288:	4a73      	ldr	r2, [pc, #460]	; (8004458 <HAL_RCC_OscConfig+0x4d8>)
 800428a:	f043 0301 	orr.w	r3, r3, #1
 800428e:	6713      	str	r3, [r2, #112]	; 0x70
 8004290:	e00b      	b.n	80042aa <HAL_RCC_OscConfig+0x32a>
 8004292:	4b71      	ldr	r3, [pc, #452]	; (8004458 <HAL_RCC_OscConfig+0x4d8>)
 8004294:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004296:	4a70      	ldr	r2, [pc, #448]	; (8004458 <HAL_RCC_OscConfig+0x4d8>)
 8004298:	f023 0301 	bic.w	r3, r3, #1
 800429c:	6713      	str	r3, [r2, #112]	; 0x70
 800429e:	4b6e      	ldr	r3, [pc, #440]	; (8004458 <HAL_RCC_OscConfig+0x4d8>)
 80042a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042a2:	4a6d      	ldr	r2, [pc, #436]	; (8004458 <HAL_RCC_OscConfig+0x4d8>)
 80042a4:	f023 0304 	bic.w	r3, r3, #4
 80042a8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	689b      	ldr	r3, [r3, #8]
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d015      	beq.n	80042de <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80042b2:	f7fd f9e5 	bl	8001680 <HAL_GetTick>
 80042b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80042b8:	e00a      	b.n	80042d0 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80042ba:	f7fd f9e1 	bl	8001680 <HAL_GetTick>
 80042be:	4602      	mov	r2, r0
 80042c0:	693b      	ldr	r3, [r7, #16]
 80042c2:	1ad3      	subs	r3, r2, r3
 80042c4:	f241 3288 	movw	r2, #5000	; 0x1388
 80042c8:	4293      	cmp	r3, r2
 80042ca:	d901      	bls.n	80042d0 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80042cc:	2303      	movs	r3, #3
 80042ce:	e0bc      	b.n	800444a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80042d0:	4b61      	ldr	r3, [pc, #388]	; (8004458 <HAL_RCC_OscConfig+0x4d8>)
 80042d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042d4:	f003 0302 	and.w	r3, r3, #2
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d0ee      	beq.n	80042ba <HAL_RCC_OscConfig+0x33a>
 80042dc:	e014      	b.n	8004308 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80042de:	f7fd f9cf 	bl	8001680 <HAL_GetTick>
 80042e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80042e4:	e00a      	b.n	80042fc <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80042e6:	f7fd f9cb 	bl	8001680 <HAL_GetTick>
 80042ea:	4602      	mov	r2, r0
 80042ec:	693b      	ldr	r3, [r7, #16]
 80042ee:	1ad3      	subs	r3, r2, r3
 80042f0:	f241 3288 	movw	r2, #5000	; 0x1388
 80042f4:	4293      	cmp	r3, r2
 80042f6:	d901      	bls.n	80042fc <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80042f8:	2303      	movs	r3, #3
 80042fa:	e0a6      	b.n	800444a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80042fc:	4b56      	ldr	r3, [pc, #344]	; (8004458 <HAL_RCC_OscConfig+0x4d8>)
 80042fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004300:	f003 0302 	and.w	r3, r3, #2
 8004304:	2b00      	cmp	r3, #0
 8004306:	d1ee      	bne.n	80042e6 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004308:	7dfb      	ldrb	r3, [r7, #23]
 800430a:	2b01      	cmp	r3, #1
 800430c:	d105      	bne.n	800431a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800430e:	4b52      	ldr	r3, [pc, #328]	; (8004458 <HAL_RCC_OscConfig+0x4d8>)
 8004310:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004312:	4a51      	ldr	r2, [pc, #324]	; (8004458 <HAL_RCC_OscConfig+0x4d8>)
 8004314:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004318:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	699b      	ldr	r3, [r3, #24]
 800431e:	2b00      	cmp	r3, #0
 8004320:	f000 8092 	beq.w	8004448 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004324:	4b4c      	ldr	r3, [pc, #304]	; (8004458 <HAL_RCC_OscConfig+0x4d8>)
 8004326:	689b      	ldr	r3, [r3, #8]
 8004328:	f003 030c 	and.w	r3, r3, #12
 800432c:	2b08      	cmp	r3, #8
 800432e:	d05c      	beq.n	80043ea <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	699b      	ldr	r3, [r3, #24]
 8004334:	2b02      	cmp	r3, #2
 8004336:	d141      	bne.n	80043bc <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004338:	4b48      	ldr	r3, [pc, #288]	; (800445c <HAL_RCC_OscConfig+0x4dc>)
 800433a:	2200      	movs	r2, #0
 800433c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800433e:	f7fd f99f 	bl	8001680 <HAL_GetTick>
 8004342:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004344:	e008      	b.n	8004358 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004346:	f7fd f99b 	bl	8001680 <HAL_GetTick>
 800434a:	4602      	mov	r2, r0
 800434c:	693b      	ldr	r3, [r7, #16]
 800434e:	1ad3      	subs	r3, r2, r3
 8004350:	2b02      	cmp	r3, #2
 8004352:	d901      	bls.n	8004358 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8004354:	2303      	movs	r3, #3
 8004356:	e078      	b.n	800444a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004358:	4b3f      	ldr	r3, [pc, #252]	; (8004458 <HAL_RCC_OscConfig+0x4d8>)
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004360:	2b00      	cmp	r3, #0
 8004362:	d1f0      	bne.n	8004346 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	69da      	ldr	r2, [r3, #28]
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	6a1b      	ldr	r3, [r3, #32]
 800436c:	431a      	orrs	r2, r3
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004372:	019b      	lsls	r3, r3, #6
 8004374:	431a      	orrs	r2, r3
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800437a:	085b      	lsrs	r3, r3, #1
 800437c:	3b01      	subs	r3, #1
 800437e:	041b      	lsls	r3, r3, #16
 8004380:	431a      	orrs	r2, r3
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004386:	061b      	lsls	r3, r3, #24
 8004388:	4933      	ldr	r1, [pc, #204]	; (8004458 <HAL_RCC_OscConfig+0x4d8>)
 800438a:	4313      	orrs	r3, r2
 800438c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800438e:	4b33      	ldr	r3, [pc, #204]	; (800445c <HAL_RCC_OscConfig+0x4dc>)
 8004390:	2201      	movs	r2, #1
 8004392:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004394:	f7fd f974 	bl	8001680 <HAL_GetTick>
 8004398:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800439a:	e008      	b.n	80043ae <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800439c:	f7fd f970 	bl	8001680 <HAL_GetTick>
 80043a0:	4602      	mov	r2, r0
 80043a2:	693b      	ldr	r3, [r7, #16]
 80043a4:	1ad3      	subs	r3, r2, r3
 80043a6:	2b02      	cmp	r3, #2
 80043a8:	d901      	bls.n	80043ae <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80043aa:	2303      	movs	r3, #3
 80043ac:	e04d      	b.n	800444a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80043ae:	4b2a      	ldr	r3, [pc, #168]	; (8004458 <HAL_RCC_OscConfig+0x4d8>)
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d0f0      	beq.n	800439c <HAL_RCC_OscConfig+0x41c>
 80043ba:	e045      	b.n	8004448 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80043bc:	4b27      	ldr	r3, [pc, #156]	; (800445c <HAL_RCC_OscConfig+0x4dc>)
 80043be:	2200      	movs	r2, #0
 80043c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80043c2:	f7fd f95d 	bl	8001680 <HAL_GetTick>
 80043c6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80043c8:	e008      	b.n	80043dc <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80043ca:	f7fd f959 	bl	8001680 <HAL_GetTick>
 80043ce:	4602      	mov	r2, r0
 80043d0:	693b      	ldr	r3, [r7, #16]
 80043d2:	1ad3      	subs	r3, r2, r3
 80043d4:	2b02      	cmp	r3, #2
 80043d6:	d901      	bls.n	80043dc <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80043d8:	2303      	movs	r3, #3
 80043da:	e036      	b.n	800444a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80043dc:	4b1e      	ldr	r3, [pc, #120]	; (8004458 <HAL_RCC_OscConfig+0x4d8>)
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d1f0      	bne.n	80043ca <HAL_RCC_OscConfig+0x44a>
 80043e8:	e02e      	b.n	8004448 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	699b      	ldr	r3, [r3, #24]
 80043ee:	2b01      	cmp	r3, #1
 80043f0:	d101      	bne.n	80043f6 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80043f2:	2301      	movs	r3, #1
 80043f4:	e029      	b.n	800444a <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80043f6:	4b18      	ldr	r3, [pc, #96]	; (8004458 <HAL_RCC_OscConfig+0x4d8>)
 80043f8:	685b      	ldr	r3, [r3, #4]
 80043fa:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	69db      	ldr	r3, [r3, #28]
 8004406:	429a      	cmp	r2, r3
 8004408:	d11c      	bne.n	8004444 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004414:	429a      	cmp	r2, r3
 8004416:	d115      	bne.n	8004444 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8004418:	68fa      	ldr	r2, [r7, #12]
 800441a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800441e:	4013      	ands	r3, r2
 8004420:	687a      	ldr	r2, [r7, #4]
 8004422:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004424:	4293      	cmp	r3, r2
 8004426:	d10d      	bne.n	8004444 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8004432:	429a      	cmp	r2, r3
 8004434:	d106      	bne.n	8004444 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004440:	429a      	cmp	r2, r3
 8004442:	d001      	beq.n	8004448 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8004444:	2301      	movs	r3, #1
 8004446:	e000      	b.n	800444a <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8004448:	2300      	movs	r3, #0
}
 800444a:	4618      	mov	r0, r3
 800444c:	3718      	adds	r7, #24
 800444e:	46bd      	mov	sp, r7
 8004450:	bd80      	pop	{r7, pc}
 8004452:	bf00      	nop
 8004454:	40007000 	.word	0x40007000
 8004458:	40023800 	.word	0x40023800
 800445c:	42470060 	.word	0x42470060

08004460 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004460:	b580      	push	{r7, lr}
 8004462:	b084      	sub	sp, #16
 8004464:	af00      	add	r7, sp, #0
 8004466:	6078      	str	r0, [r7, #4]
 8004468:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	2b00      	cmp	r3, #0
 800446e:	d101      	bne.n	8004474 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004470:	2301      	movs	r3, #1
 8004472:	e0cc      	b.n	800460e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004474:	4b68      	ldr	r3, [pc, #416]	; (8004618 <HAL_RCC_ClockConfig+0x1b8>)
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	f003 030f 	and.w	r3, r3, #15
 800447c:	683a      	ldr	r2, [r7, #0]
 800447e:	429a      	cmp	r2, r3
 8004480:	d90c      	bls.n	800449c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004482:	4b65      	ldr	r3, [pc, #404]	; (8004618 <HAL_RCC_ClockConfig+0x1b8>)
 8004484:	683a      	ldr	r2, [r7, #0]
 8004486:	b2d2      	uxtb	r2, r2
 8004488:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800448a:	4b63      	ldr	r3, [pc, #396]	; (8004618 <HAL_RCC_ClockConfig+0x1b8>)
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	f003 030f 	and.w	r3, r3, #15
 8004492:	683a      	ldr	r2, [r7, #0]
 8004494:	429a      	cmp	r2, r3
 8004496:	d001      	beq.n	800449c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004498:	2301      	movs	r3, #1
 800449a:	e0b8      	b.n	800460e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	f003 0302 	and.w	r3, r3, #2
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d020      	beq.n	80044ea <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	f003 0304 	and.w	r3, r3, #4
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d005      	beq.n	80044c0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80044b4:	4b59      	ldr	r3, [pc, #356]	; (800461c <HAL_RCC_ClockConfig+0x1bc>)
 80044b6:	689b      	ldr	r3, [r3, #8]
 80044b8:	4a58      	ldr	r2, [pc, #352]	; (800461c <HAL_RCC_ClockConfig+0x1bc>)
 80044ba:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80044be:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	f003 0308 	and.w	r3, r3, #8
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d005      	beq.n	80044d8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80044cc:	4b53      	ldr	r3, [pc, #332]	; (800461c <HAL_RCC_ClockConfig+0x1bc>)
 80044ce:	689b      	ldr	r3, [r3, #8]
 80044d0:	4a52      	ldr	r2, [pc, #328]	; (800461c <HAL_RCC_ClockConfig+0x1bc>)
 80044d2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80044d6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80044d8:	4b50      	ldr	r3, [pc, #320]	; (800461c <HAL_RCC_ClockConfig+0x1bc>)
 80044da:	689b      	ldr	r3, [r3, #8]
 80044dc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	689b      	ldr	r3, [r3, #8]
 80044e4:	494d      	ldr	r1, [pc, #308]	; (800461c <HAL_RCC_ClockConfig+0x1bc>)
 80044e6:	4313      	orrs	r3, r2
 80044e8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	f003 0301 	and.w	r3, r3, #1
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d044      	beq.n	8004580 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	685b      	ldr	r3, [r3, #4]
 80044fa:	2b01      	cmp	r3, #1
 80044fc:	d107      	bne.n	800450e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80044fe:	4b47      	ldr	r3, [pc, #284]	; (800461c <HAL_RCC_ClockConfig+0x1bc>)
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004506:	2b00      	cmp	r3, #0
 8004508:	d119      	bne.n	800453e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800450a:	2301      	movs	r3, #1
 800450c:	e07f      	b.n	800460e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	685b      	ldr	r3, [r3, #4]
 8004512:	2b02      	cmp	r3, #2
 8004514:	d003      	beq.n	800451e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800451a:	2b03      	cmp	r3, #3
 800451c:	d107      	bne.n	800452e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800451e:	4b3f      	ldr	r3, [pc, #252]	; (800461c <HAL_RCC_ClockConfig+0x1bc>)
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004526:	2b00      	cmp	r3, #0
 8004528:	d109      	bne.n	800453e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800452a:	2301      	movs	r3, #1
 800452c:	e06f      	b.n	800460e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800452e:	4b3b      	ldr	r3, [pc, #236]	; (800461c <HAL_RCC_ClockConfig+0x1bc>)
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	f003 0302 	and.w	r3, r3, #2
 8004536:	2b00      	cmp	r3, #0
 8004538:	d101      	bne.n	800453e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800453a:	2301      	movs	r3, #1
 800453c:	e067      	b.n	800460e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800453e:	4b37      	ldr	r3, [pc, #220]	; (800461c <HAL_RCC_ClockConfig+0x1bc>)
 8004540:	689b      	ldr	r3, [r3, #8]
 8004542:	f023 0203 	bic.w	r2, r3, #3
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	685b      	ldr	r3, [r3, #4]
 800454a:	4934      	ldr	r1, [pc, #208]	; (800461c <HAL_RCC_ClockConfig+0x1bc>)
 800454c:	4313      	orrs	r3, r2
 800454e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004550:	f7fd f896 	bl	8001680 <HAL_GetTick>
 8004554:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004556:	e00a      	b.n	800456e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004558:	f7fd f892 	bl	8001680 <HAL_GetTick>
 800455c:	4602      	mov	r2, r0
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	1ad3      	subs	r3, r2, r3
 8004562:	f241 3288 	movw	r2, #5000	; 0x1388
 8004566:	4293      	cmp	r3, r2
 8004568:	d901      	bls.n	800456e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800456a:	2303      	movs	r3, #3
 800456c:	e04f      	b.n	800460e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800456e:	4b2b      	ldr	r3, [pc, #172]	; (800461c <HAL_RCC_ClockConfig+0x1bc>)
 8004570:	689b      	ldr	r3, [r3, #8]
 8004572:	f003 020c 	and.w	r2, r3, #12
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	685b      	ldr	r3, [r3, #4]
 800457a:	009b      	lsls	r3, r3, #2
 800457c:	429a      	cmp	r2, r3
 800457e:	d1eb      	bne.n	8004558 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004580:	4b25      	ldr	r3, [pc, #148]	; (8004618 <HAL_RCC_ClockConfig+0x1b8>)
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	f003 030f 	and.w	r3, r3, #15
 8004588:	683a      	ldr	r2, [r7, #0]
 800458a:	429a      	cmp	r2, r3
 800458c:	d20c      	bcs.n	80045a8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800458e:	4b22      	ldr	r3, [pc, #136]	; (8004618 <HAL_RCC_ClockConfig+0x1b8>)
 8004590:	683a      	ldr	r2, [r7, #0]
 8004592:	b2d2      	uxtb	r2, r2
 8004594:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004596:	4b20      	ldr	r3, [pc, #128]	; (8004618 <HAL_RCC_ClockConfig+0x1b8>)
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	f003 030f 	and.w	r3, r3, #15
 800459e:	683a      	ldr	r2, [r7, #0]
 80045a0:	429a      	cmp	r2, r3
 80045a2:	d001      	beq.n	80045a8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80045a4:	2301      	movs	r3, #1
 80045a6:	e032      	b.n	800460e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	f003 0304 	and.w	r3, r3, #4
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d008      	beq.n	80045c6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80045b4:	4b19      	ldr	r3, [pc, #100]	; (800461c <HAL_RCC_ClockConfig+0x1bc>)
 80045b6:	689b      	ldr	r3, [r3, #8]
 80045b8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	68db      	ldr	r3, [r3, #12]
 80045c0:	4916      	ldr	r1, [pc, #88]	; (800461c <HAL_RCC_ClockConfig+0x1bc>)
 80045c2:	4313      	orrs	r3, r2
 80045c4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	f003 0308 	and.w	r3, r3, #8
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d009      	beq.n	80045e6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80045d2:	4b12      	ldr	r3, [pc, #72]	; (800461c <HAL_RCC_ClockConfig+0x1bc>)
 80045d4:	689b      	ldr	r3, [r3, #8]
 80045d6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	691b      	ldr	r3, [r3, #16]
 80045de:	00db      	lsls	r3, r3, #3
 80045e0:	490e      	ldr	r1, [pc, #56]	; (800461c <HAL_RCC_ClockConfig+0x1bc>)
 80045e2:	4313      	orrs	r3, r2
 80045e4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80045e6:	f000 f821 	bl	800462c <HAL_RCC_GetSysClockFreq>
 80045ea:	4601      	mov	r1, r0
 80045ec:	4b0b      	ldr	r3, [pc, #44]	; (800461c <HAL_RCC_ClockConfig+0x1bc>)
 80045ee:	689b      	ldr	r3, [r3, #8]
 80045f0:	091b      	lsrs	r3, r3, #4
 80045f2:	f003 030f 	and.w	r3, r3, #15
 80045f6:	4a0a      	ldr	r2, [pc, #40]	; (8004620 <HAL_RCC_ClockConfig+0x1c0>)
 80045f8:	5cd3      	ldrb	r3, [r2, r3]
 80045fa:	fa21 f303 	lsr.w	r3, r1, r3
 80045fe:	4a09      	ldr	r2, [pc, #36]	; (8004624 <HAL_RCC_ClockConfig+0x1c4>)
 8004600:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004602:	4b09      	ldr	r3, [pc, #36]	; (8004628 <HAL_RCC_ClockConfig+0x1c8>)
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	4618      	mov	r0, r3
 8004608:	f7fc fff6 	bl	80015f8 <HAL_InitTick>

  return HAL_OK;
 800460c:	2300      	movs	r3, #0
}
 800460e:	4618      	mov	r0, r3
 8004610:	3710      	adds	r7, #16
 8004612:	46bd      	mov	sp, r7
 8004614:	bd80      	pop	{r7, pc}
 8004616:	bf00      	nop
 8004618:	40023c00 	.word	0x40023c00
 800461c:	40023800 	.word	0x40023800
 8004620:	0800a764 	.word	0x0800a764
 8004624:	20000000 	.word	0x20000000
 8004628:	2000001c 	.word	0x2000001c

0800462c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800462c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800462e:	b085      	sub	sp, #20
 8004630:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004632:	2300      	movs	r3, #0
 8004634:	607b      	str	r3, [r7, #4]
 8004636:	2300      	movs	r3, #0
 8004638:	60fb      	str	r3, [r7, #12]
 800463a:	2300      	movs	r3, #0
 800463c:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800463e:	2300      	movs	r3, #0
 8004640:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004642:	4b63      	ldr	r3, [pc, #396]	; (80047d0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004644:	689b      	ldr	r3, [r3, #8]
 8004646:	f003 030c 	and.w	r3, r3, #12
 800464a:	2b04      	cmp	r3, #4
 800464c:	d007      	beq.n	800465e <HAL_RCC_GetSysClockFreq+0x32>
 800464e:	2b08      	cmp	r3, #8
 8004650:	d008      	beq.n	8004664 <HAL_RCC_GetSysClockFreq+0x38>
 8004652:	2b00      	cmp	r3, #0
 8004654:	f040 80b4 	bne.w	80047c0 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004658:	4b5e      	ldr	r3, [pc, #376]	; (80047d4 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800465a:	60bb      	str	r3, [r7, #8]
       break;
 800465c:	e0b3      	b.n	80047c6 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800465e:	4b5e      	ldr	r3, [pc, #376]	; (80047d8 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8004660:	60bb      	str	r3, [r7, #8]
      break;
 8004662:	e0b0      	b.n	80047c6 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004664:	4b5a      	ldr	r3, [pc, #360]	; (80047d0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004666:	685b      	ldr	r3, [r3, #4]
 8004668:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800466c:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800466e:	4b58      	ldr	r3, [pc, #352]	; (80047d0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004670:	685b      	ldr	r3, [r3, #4]
 8004672:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004676:	2b00      	cmp	r3, #0
 8004678:	d04a      	beq.n	8004710 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800467a:	4b55      	ldr	r3, [pc, #340]	; (80047d0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800467c:	685b      	ldr	r3, [r3, #4]
 800467e:	099b      	lsrs	r3, r3, #6
 8004680:	f04f 0400 	mov.w	r4, #0
 8004684:	f240 11ff 	movw	r1, #511	; 0x1ff
 8004688:	f04f 0200 	mov.w	r2, #0
 800468c:	ea03 0501 	and.w	r5, r3, r1
 8004690:	ea04 0602 	and.w	r6, r4, r2
 8004694:	4629      	mov	r1, r5
 8004696:	4632      	mov	r2, r6
 8004698:	f04f 0300 	mov.w	r3, #0
 800469c:	f04f 0400 	mov.w	r4, #0
 80046a0:	0154      	lsls	r4, r2, #5
 80046a2:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80046a6:	014b      	lsls	r3, r1, #5
 80046a8:	4619      	mov	r1, r3
 80046aa:	4622      	mov	r2, r4
 80046ac:	1b49      	subs	r1, r1, r5
 80046ae:	eb62 0206 	sbc.w	r2, r2, r6
 80046b2:	f04f 0300 	mov.w	r3, #0
 80046b6:	f04f 0400 	mov.w	r4, #0
 80046ba:	0194      	lsls	r4, r2, #6
 80046bc:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80046c0:	018b      	lsls	r3, r1, #6
 80046c2:	1a5b      	subs	r3, r3, r1
 80046c4:	eb64 0402 	sbc.w	r4, r4, r2
 80046c8:	f04f 0100 	mov.w	r1, #0
 80046cc:	f04f 0200 	mov.w	r2, #0
 80046d0:	00e2      	lsls	r2, r4, #3
 80046d2:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80046d6:	00d9      	lsls	r1, r3, #3
 80046d8:	460b      	mov	r3, r1
 80046da:	4614      	mov	r4, r2
 80046dc:	195b      	adds	r3, r3, r5
 80046de:	eb44 0406 	adc.w	r4, r4, r6
 80046e2:	f04f 0100 	mov.w	r1, #0
 80046e6:	f04f 0200 	mov.w	r2, #0
 80046ea:	0262      	lsls	r2, r4, #9
 80046ec:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 80046f0:	0259      	lsls	r1, r3, #9
 80046f2:	460b      	mov	r3, r1
 80046f4:	4614      	mov	r4, r2
 80046f6:	4618      	mov	r0, r3
 80046f8:	4621      	mov	r1, r4
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	f04f 0400 	mov.w	r4, #0
 8004700:	461a      	mov	r2, r3
 8004702:	4623      	mov	r3, r4
 8004704:	f7fb fdb4 	bl	8000270 <__aeabi_uldivmod>
 8004708:	4603      	mov	r3, r0
 800470a:	460c      	mov	r4, r1
 800470c:	60fb      	str	r3, [r7, #12]
 800470e:	e049      	b.n	80047a4 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004710:	4b2f      	ldr	r3, [pc, #188]	; (80047d0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004712:	685b      	ldr	r3, [r3, #4]
 8004714:	099b      	lsrs	r3, r3, #6
 8004716:	f04f 0400 	mov.w	r4, #0
 800471a:	f240 11ff 	movw	r1, #511	; 0x1ff
 800471e:	f04f 0200 	mov.w	r2, #0
 8004722:	ea03 0501 	and.w	r5, r3, r1
 8004726:	ea04 0602 	and.w	r6, r4, r2
 800472a:	4629      	mov	r1, r5
 800472c:	4632      	mov	r2, r6
 800472e:	f04f 0300 	mov.w	r3, #0
 8004732:	f04f 0400 	mov.w	r4, #0
 8004736:	0154      	lsls	r4, r2, #5
 8004738:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800473c:	014b      	lsls	r3, r1, #5
 800473e:	4619      	mov	r1, r3
 8004740:	4622      	mov	r2, r4
 8004742:	1b49      	subs	r1, r1, r5
 8004744:	eb62 0206 	sbc.w	r2, r2, r6
 8004748:	f04f 0300 	mov.w	r3, #0
 800474c:	f04f 0400 	mov.w	r4, #0
 8004750:	0194      	lsls	r4, r2, #6
 8004752:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8004756:	018b      	lsls	r3, r1, #6
 8004758:	1a5b      	subs	r3, r3, r1
 800475a:	eb64 0402 	sbc.w	r4, r4, r2
 800475e:	f04f 0100 	mov.w	r1, #0
 8004762:	f04f 0200 	mov.w	r2, #0
 8004766:	00e2      	lsls	r2, r4, #3
 8004768:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800476c:	00d9      	lsls	r1, r3, #3
 800476e:	460b      	mov	r3, r1
 8004770:	4614      	mov	r4, r2
 8004772:	195b      	adds	r3, r3, r5
 8004774:	eb44 0406 	adc.w	r4, r4, r6
 8004778:	f04f 0100 	mov.w	r1, #0
 800477c:	f04f 0200 	mov.w	r2, #0
 8004780:	02a2      	lsls	r2, r4, #10
 8004782:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8004786:	0299      	lsls	r1, r3, #10
 8004788:	460b      	mov	r3, r1
 800478a:	4614      	mov	r4, r2
 800478c:	4618      	mov	r0, r3
 800478e:	4621      	mov	r1, r4
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	f04f 0400 	mov.w	r4, #0
 8004796:	461a      	mov	r2, r3
 8004798:	4623      	mov	r3, r4
 800479a:	f7fb fd69 	bl	8000270 <__aeabi_uldivmod>
 800479e:	4603      	mov	r3, r0
 80047a0:	460c      	mov	r4, r1
 80047a2:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80047a4:	4b0a      	ldr	r3, [pc, #40]	; (80047d0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80047a6:	685b      	ldr	r3, [r3, #4]
 80047a8:	0c1b      	lsrs	r3, r3, #16
 80047aa:	f003 0303 	and.w	r3, r3, #3
 80047ae:	3301      	adds	r3, #1
 80047b0:	005b      	lsls	r3, r3, #1
 80047b2:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80047b4:	68fa      	ldr	r2, [r7, #12]
 80047b6:	683b      	ldr	r3, [r7, #0]
 80047b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80047bc:	60bb      	str	r3, [r7, #8]
      break;
 80047be:	e002      	b.n	80047c6 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80047c0:	4b04      	ldr	r3, [pc, #16]	; (80047d4 <HAL_RCC_GetSysClockFreq+0x1a8>)
 80047c2:	60bb      	str	r3, [r7, #8]
      break;
 80047c4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80047c6:	68bb      	ldr	r3, [r7, #8]
}
 80047c8:	4618      	mov	r0, r3
 80047ca:	3714      	adds	r7, #20
 80047cc:	46bd      	mov	sp, r7
 80047ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80047d0:	40023800 	.word	0x40023800
 80047d4:	00f42400 	.word	0x00f42400
 80047d8:	007a1200 	.word	0x007a1200

080047dc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80047dc:	b480      	push	{r7}
 80047de:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80047e0:	4b03      	ldr	r3, [pc, #12]	; (80047f0 <HAL_RCC_GetHCLKFreq+0x14>)
 80047e2:	681b      	ldr	r3, [r3, #0]
}
 80047e4:	4618      	mov	r0, r3
 80047e6:	46bd      	mov	sp, r7
 80047e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ec:	4770      	bx	lr
 80047ee:	bf00      	nop
 80047f0:	20000000 	.word	0x20000000

080047f4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80047f4:	b580      	push	{r7, lr}
 80047f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80047f8:	f7ff fff0 	bl	80047dc <HAL_RCC_GetHCLKFreq>
 80047fc:	4601      	mov	r1, r0
 80047fe:	4b05      	ldr	r3, [pc, #20]	; (8004814 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004800:	689b      	ldr	r3, [r3, #8]
 8004802:	0a9b      	lsrs	r3, r3, #10
 8004804:	f003 0307 	and.w	r3, r3, #7
 8004808:	4a03      	ldr	r2, [pc, #12]	; (8004818 <HAL_RCC_GetPCLK1Freq+0x24>)
 800480a:	5cd3      	ldrb	r3, [r2, r3]
 800480c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004810:	4618      	mov	r0, r3
 8004812:	bd80      	pop	{r7, pc}
 8004814:	40023800 	.word	0x40023800
 8004818:	0800a774 	.word	0x0800a774

0800481c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800481c:	b580      	push	{r7, lr}
 800481e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004820:	f7ff ffdc 	bl	80047dc <HAL_RCC_GetHCLKFreq>
 8004824:	4601      	mov	r1, r0
 8004826:	4b05      	ldr	r3, [pc, #20]	; (800483c <HAL_RCC_GetPCLK2Freq+0x20>)
 8004828:	689b      	ldr	r3, [r3, #8]
 800482a:	0b5b      	lsrs	r3, r3, #13
 800482c:	f003 0307 	and.w	r3, r3, #7
 8004830:	4a03      	ldr	r2, [pc, #12]	; (8004840 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004832:	5cd3      	ldrb	r3, [r2, r3]
 8004834:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004838:	4618      	mov	r0, r3
 800483a:	bd80      	pop	{r7, pc}
 800483c:	40023800 	.word	0x40023800
 8004840:	0800a774 	.word	0x0800a774

08004844 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004844:	b580      	push	{r7, lr}
 8004846:	b086      	sub	sp, #24
 8004848:	af00      	add	r7, sp, #0
 800484a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800484c:	2300      	movs	r3, #0
 800484e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8004850:	2300      	movs	r3, #0
 8004852:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	f003 0301 	and.w	r3, r3, #1
 800485c:	2b00      	cmp	r3, #0
 800485e:	d105      	bne.n	800486c <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004868:	2b00      	cmp	r3, #0
 800486a:	d035      	beq.n	80048d8 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800486c:	4b62      	ldr	r3, [pc, #392]	; (80049f8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 800486e:	2200      	movs	r2, #0
 8004870:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004872:	f7fc ff05 	bl	8001680 <HAL_GetTick>
 8004876:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004878:	e008      	b.n	800488c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800487a:	f7fc ff01 	bl	8001680 <HAL_GetTick>
 800487e:	4602      	mov	r2, r0
 8004880:	697b      	ldr	r3, [r7, #20]
 8004882:	1ad3      	subs	r3, r2, r3
 8004884:	2b02      	cmp	r3, #2
 8004886:	d901      	bls.n	800488c <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004888:	2303      	movs	r3, #3
 800488a:	e0b0      	b.n	80049ee <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800488c:	4b5b      	ldr	r3, [pc, #364]	; (80049fc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004894:	2b00      	cmp	r3, #0
 8004896:	d1f0      	bne.n	800487a <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	685b      	ldr	r3, [r3, #4]
 800489c:	019a      	lsls	r2, r3, #6
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	689b      	ldr	r3, [r3, #8]
 80048a2:	071b      	lsls	r3, r3, #28
 80048a4:	4955      	ldr	r1, [pc, #340]	; (80049fc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80048a6:	4313      	orrs	r3, r2
 80048a8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80048ac:	4b52      	ldr	r3, [pc, #328]	; (80049f8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 80048ae:	2201      	movs	r2, #1
 80048b0:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80048b2:	f7fc fee5 	bl	8001680 <HAL_GetTick>
 80048b6:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80048b8:	e008      	b.n	80048cc <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80048ba:	f7fc fee1 	bl	8001680 <HAL_GetTick>
 80048be:	4602      	mov	r2, r0
 80048c0:	697b      	ldr	r3, [r7, #20]
 80048c2:	1ad3      	subs	r3, r2, r3
 80048c4:	2b02      	cmp	r3, #2
 80048c6:	d901      	bls.n	80048cc <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80048c8:	2303      	movs	r3, #3
 80048ca:	e090      	b.n	80049ee <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80048cc:	4b4b      	ldr	r3, [pc, #300]	; (80049fc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d0f0      	beq.n	80048ba <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	f003 0302 	and.w	r3, r3, #2
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	f000 8083 	beq.w	80049ec <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80048e6:	2300      	movs	r3, #0
 80048e8:	60fb      	str	r3, [r7, #12]
 80048ea:	4b44      	ldr	r3, [pc, #272]	; (80049fc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80048ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048ee:	4a43      	ldr	r2, [pc, #268]	; (80049fc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80048f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80048f4:	6413      	str	r3, [r2, #64]	; 0x40
 80048f6:	4b41      	ldr	r3, [pc, #260]	; (80049fc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80048f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80048fe:	60fb      	str	r3, [r7, #12]
 8004900:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8004902:	4b3f      	ldr	r3, [pc, #252]	; (8004a00 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	4a3e      	ldr	r2, [pc, #248]	; (8004a00 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004908:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800490c:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800490e:	f7fc feb7 	bl	8001680 <HAL_GetTick>
 8004912:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004914:	e008      	b.n	8004928 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8004916:	f7fc feb3 	bl	8001680 <HAL_GetTick>
 800491a:	4602      	mov	r2, r0
 800491c:	697b      	ldr	r3, [r7, #20]
 800491e:	1ad3      	subs	r3, r2, r3
 8004920:	2b02      	cmp	r3, #2
 8004922:	d901      	bls.n	8004928 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8004924:	2303      	movs	r3, #3
 8004926:	e062      	b.n	80049ee <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004928:	4b35      	ldr	r3, [pc, #212]	; (8004a00 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004930:	2b00      	cmp	r3, #0
 8004932:	d0f0      	beq.n	8004916 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004934:	4b31      	ldr	r3, [pc, #196]	; (80049fc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004936:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004938:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800493c:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800493e:	693b      	ldr	r3, [r7, #16]
 8004940:	2b00      	cmp	r3, #0
 8004942:	d02f      	beq.n	80049a4 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	68db      	ldr	r3, [r3, #12]
 8004948:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800494c:	693a      	ldr	r2, [r7, #16]
 800494e:	429a      	cmp	r2, r3
 8004950:	d028      	beq.n	80049a4 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004952:	4b2a      	ldr	r3, [pc, #168]	; (80049fc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004954:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004956:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800495a:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800495c:	4b29      	ldr	r3, [pc, #164]	; (8004a04 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800495e:	2201      	movs	r2, #1
 8004960:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004962:	4b28      	ldr	r3, [pc, #160]	; (8004a04 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8004964:	2200      	movs	r2, #0
 8004966:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8004968:	4a24      	ldr	r2, [pc, #144]	; (80049fc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800496a:	693b      	ldr	r3, [r7, #16]
 800496c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800496e:	4b23      	ldr	r3, [pc, #140]	; (80049fc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004970:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004972:	f003 0301 	and.w	r3, r3, #1
 8004976:	2b01      	cmp	r3, #1
 8004978:	d114      	bne.n	80049a4 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800497a:	f7fc fe81 	bl	8001680 <HAL_GetTick>
 800497e:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004980:	e00a      	b.n	8004998 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004982:	f7fc fe7d 	bl	8001680 <HAL_GetTick>
 8004986:	4602      	mov	r2, r0
 8004988:	697b      	ldr	r3, [r7, #20]
 800498a:	1ad3      	subs	r3, r2, r3
 800498c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004990:	4293      	cmp	r3, r2
 8004992:	d901      	bls.n	8004998 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8004994:	2303      	movs	r3, #3
 8004996:	e02a      	b.n	80049ee <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004998:	4b18      	ldr	r3, [pc, #96]	; (80049fc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800499a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800499c:	f003 0302 	and.w	r3, r3, #2
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d0ee      	beq.n	8004982 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	68db      	ldr	r3, [r3, #12]
 80049a8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80049ac:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80049b0:	d10d      	bne.n	80049ce <HAL_RCCEx_PeriphCLKConfig+0x18a>
 80049b2:	4b12      	ldr	r3, [pc, #72]	; (80049fc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80049b4:	689b      	ldr	r3, [r3, #8]
 80049b6:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	68db      	ldr	r3, [r3, #12]
 80049be:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80049c2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80049c6:	490d      	ldr	r1, [pc, #52]	; (80049fc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80049c8:	4313      	orrs	r3, r2
 80049ca:	608b      	str	r3, [r1, #8]
 80049cc:	e005      	b.n	80049da <HAL_RCCEx_PeriphCLKConfig+0x196>
 80049ce:	4b0b      	ldr	r3, [pc, #44]	; (80049fc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80049d0:	689b      	ldr	r3, [r3, #8]
 80049d2:	4a0a      	ldr	r2, [pc, #40]	; (80049fc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80049d4:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80049d8:	6093      	str	r3, [r2, #8]
 80049da:	4b08      	ldr	r3, [pc, #32]	; (80049fc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80049dc:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	68db      	ldr	r3, [r3, #12]
 80049e2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80049e6:	4905      	ldr	r1, [pc, #20]	; (80049fc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80049e8:	4313      	orrs	r3, r2
 80049ea:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 80049ec:	2300      	movs	r3, #0
}
 80049ee:	4618      	mov	r0, r3
 80049f0:	3718      	adds	r7, #24
 80049f2:	46bd      	mov	sp, r7
 80049f4:	bd80      	pop	{r7, pc}
 80049f6:	bf00      	nop
 80049f8:	42470068 	.word	0x42470068
 80049fc:	40023800 	.word	0x40023800
 8004a00:	40007000 	.word	0x40007000
 8004a04:	42470e40 	.word	0x42470e40

08004a08 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8004a08:	b580      	push	{r7, lr}
 8004a0a:	b082      	sub	sp, #8
 8004a0c:	af00      	add	r7, sp, #0
 8004a0e:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d101      	bne.n	8004a1a <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 8004a16:	2301      	movs	r3, #1
 8004a18:	e083      	b.n	8004b22 <HAL_RTC_Init+0x11a>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	7f5b      	ldrb	r3, [r3, #29]
 8004a1e:	b2db      	uxtb	r3, r3
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d105      	bne.n	8004a30 <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	2200      	movs	r2, #0
 8004a28:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8004a2a:	6878      	ldr	r0, [r7, #4]
 8004a2c:	f7fc fb74 	bl	8001118 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	2202      	movs	r2, #2
 8004a34:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	22ca      	movs	r2, #202	; 0xca
 8004a3c:	625a      	str	r2, [r3, #36]	; 0x24
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	2253      	movs	r2, #83	; 0x53
 8004a44:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8004a46:	6878      	ldr	r0, [r7, #4]
 8004a48:	f000 f897 	bl	8004b7a <RTC_EnterInitMode>
 8004a4c:	4603      	mov	r3, r0
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d008      	beq.n	8004a64 <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	22ff      	movs	r2, #255	; 0xff
 8004a58:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	2204      	movs	r2, #4
 8004a5e:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 8004a60:	2301      	movs	r3, #1
 8004a62:	e05e      	b.n	8004b22 <HAL_RTC_Init+0x11a>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	689b      	ldr	r3, [r3, #8]
 8004a6a:	687a      	ldr	r2, [r7, #4]
 8004a6c:	6812      	ldr	r2, [r2, #0]
 8004a6e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8004a72:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004a76:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	6899      	ldr	r1, [r3, #8]
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	685a      	ldr	r2, [r3, #4]
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	691b      	ldr	r3, [r3, #16]
 8004a86:	431a      	orrs	r2, r3
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	695b      	ldr	r3, [r3, #20]
 8004a8c:	431a      	orrs	r2, r3
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	430a      	orrs	r2, r1
 8004a94:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	687a      	ldr	r2, [r7, #4]
 8004a9c:	68d2      	ldr	r2, [r2, #12]
 8004a9e:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	6919      	ldr	r1, [r3, #16]
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	689b      	ldr	r3, [r3, #8]
 8004aaa:	041a      	lsls	r2, r3, #16
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	430a      	orrs	r2, r1
 8004ab2:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	68da      	ldr	r2, [r3, #12]
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004ac2:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	689b      	ldr	r3, [r3, #8]
 8004aca:	f003 0320 	and.w	r3, r3, #32
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d10e      	bne.n	8004af0 <HAL_RTC_Init+0xe8>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8004ad2:	6878      	ldr	r0, [r7, #4]
 8004ad4:	f000 f829 	bl	8004b2a <HAL_RTC_WaitForSynchro>
 8004ad8:	4603      	mov	r3, r0
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d008      	beq.n	8004af0 <HAL_RTC_Init+0xe8>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	22ff      	movs	r2, #255	; 0xff
 8004ae4:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	2204      	movs	r2, #4
 8004aea:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 8004aec:	2301      	movs	r3, #1
 8004aee:	e018      	b.n	8004b22 <HAL_RTC_Init+0x11a>
      }
    }

    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004afe:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	699a      	ldr	r2, [r3, #24]
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	430a      	orrs	r2, r1
 8004b10:	641a      	str	r2, [r3, #64]	; 0x40

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	22ff      	movs	r2, #255	; 0xff
 8004b18:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	2201      	movs	r2, #1
 8004b1e:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 8004b20:	2300      	movs	r3, #0
  }
}
 8004b22:	4618      	mov	r0, r3
 8004b24:	3708      	adds	r7, #8
 8004b26:	46bd      	mov	sp, r7
 8004b28:	bd80      	pop	{r7, pc}

08004b2a <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 8004b2a:	b580      	push	{r7, lr}
 8004b2c:	b084      	sub	sp, #16
 8004b2e:	af00      	add	r7, sp, #0
 8004b30:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004b32:	2300      	movs	r3, #0
 8004b34:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	68da      	ldr	r2, [r3, #12]
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004b44:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004b46:	f7fc fd9b 	bl	8001680 <HAL_GetTick>
 8004b4a:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8004b4c:	e009      	b.n	8004b62 <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8004b4e:	f7fc fd97 	bl	8001680 <HAL_GetTick>
 8004b52:	4602      	mov	r2, r0
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	1ad3      	subs	r3, r2, r3
 8004b58:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004b5c:	d901      	bls.n	8004b62 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8004b5e:	2303      	movs	r3, #3
 8004b60:	e007      	b.n	8004b72 <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	68db      	ldr	r3, [r3, #12]
 8004b68:	f003 0320 	and.w	r3, r3, #32
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d0ee      	beq.n	8004b4e <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8004b70:	2300      	movs	r3, #0
}
 8004b72:	4618      	mov	r0, r3
 8004b74:	3710      	adds	r7, #16
 8004b76:	46bd      	mov	sp, r7
 8004b78:	bd80      	pop	{r7, pc}

08004b7a <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8004b7a:	b580      	push	{r7, lr}
 8004b7c:	b084      	sub	sp, #16
 8004b7e:	af00      	add	r7, sp, #0
 8004b80:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004b82:	2300      	movs	r3, #0
 8004b84:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	68db      	ldr	r3, [r3, #12]
 8004b8c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d119      	bne.n	8004bc8 <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	f04f 32ff 	mov.w	r2, #4294967295
 8004b9c:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004b9e:	f7fc fd6f 	bl	8001680 <HAL_GetTick>
 8004ba2:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8004ba4:	e009      	b.n	8004bba <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8004ba6:	f7fc fd6b 	bl	8001680 <HAL_GetTick>
 8004baa:	4602      	mov	r2, r0
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	1ad3      	subs	r3, r2, r3
 8004bb0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004bb4:	d901      	bls.n	8004bba <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 8004bb6:	2303      	movs	r3, #3
 8004bb8:	e007      	b.n	8004bca <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	68db      	ldr	r3, [r3, #12]
 8004bc0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	d0ee      	beq.n	8004ba6 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 8004bc8:	2300      	movs	r3, #0
}
 8004bca:	4618      	mov	r0, r3
 8004bcc:	3710      	adds	r7, #16
 8004bce:	46bd      	mov	sp, r7
 8004bd0:	bd80      	pop	{r7, pc}

08004bd2 <HAL_RTCEx_BKUPWrite>:
  *                                 specify the register.
  * @param  Data Data to be written in the specified RTC Backup data register.
  * @retval None
  */
void HAL_RTCEx_BKUPWrite(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister, uint32_t Data)
{
 8004bd2:	b480      	push	{r7}
 8004bd4:	b087      	sub	sp, #28
 8004bd6:	af00      	add	r7, sp, #0
 8004bd8:	60f8      	str	r0, [r7, #12]
 8004bda:	60b9      	str	r1, [r7, #8]
 8004bdc:	607a      	str	r2, [r7, #4]
  uint32_t tmp = 0U;
 8004bde:	2300      	movs	r3, #0
 8004be0:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t)&(hrtc->Instance->BKP0R);
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	3350      	adds	r3, #80	; 0x50
 8004be8:	617b      	str	r3, [r7, #20]
  tmp += (BackupRegister * 4U);
 8004bea:	68bb      	ldr	r3, [r7, #8]
 8004bec:	009b      	lsls	r3, r3, #2
 8004bee:	697a      	ldr	r2, [r7, #20]
 8004bf0:	4413      	add	r3, r2
 8004bf2:	617b      	str	r3, [r7, #20]

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 8004bf4:	697b      	ldr	r3, [r7, #20]
 8004bf6:	687a      	ldr	r2, [r7, #4]
 8004bf8:	601a      	str	r2, [r3, #0]
}
 8004bfa:	bf00      	nop
 8004bfc:	371c      	adds	r7, #28
 8004bfe:	46bd      	mov	sp, r7
 8004c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c04:	4770      	bx	lr

08004c06 <HAL_RTCEx_BKUPRead>:
  *          This parameter can be: RTC_BKP_DRx where x can be from 0 to 19 to
  *                                 specify the register.
  * @retval Read value
  */
uint32_t HAL_RTCEx_BKUPRead(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister)
{
 8004c06:	b480      	push	{r7}
 8004c08:	b085      	sub	sp, #20
 8004c0a:	af00      	add	r7, sp, #0
 8004c0c:	6078      	str	r0, [r7, #4]
 8004c0e:	6039      	str	r1, [r7, #0]
  uint32_t tmp = 0U;
 8004c10:	2300      	movs	r3, #0
 8004c12:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t)&(hrtc->Instance->BKP0R);
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	3350      	adds	r3, #80	; 0x50
 8004c1a:	60fb      	str	r3, [r7, #12]
  tmp += (BackupRegister * 4U);
 8004c1c:	683b      	ldr	r3, [r7, #0]
 8004c1e:	009b      	lsls	r3, r3, #2
 8004c20:	68fa      	ldr	r2, [r7, #12]
 8004c22:	4413      	add	r3, r2
 8004c24:	60fb      	str	r3, [r7, #12]

  /* Read the specified register */
  return (*(__IO uint32_t *)tmp);
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	681b      	ldr	r3, [r3, #0]
}
 8004c2a:	4618      	mov	r0, r3
 8004c2c:	3714      	adds	r7, #20
 8004c2e:	46bd      	mov	sp, r7
 8004c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c34:	4770      	bx	lr

08004c36 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004c36:	b580      	push	{r7, lr}
 8004c38:	b082      	sub	sp, #8
 8004c3a:	af00      	add	r7, sp, #0
 8004c3c:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	d101      	bne.n	8004c48 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004c44:	2301      	movs	r3, #1
 8004c46:	e03f      	b.n	8004cc8 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004c4e:	b2db      	uxtb	r3, r3
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d106      	bne.n	8004c62 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	2200      	movs	r2, #0
 8004c58:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004c5c:	6878      	ldr	r0, [r7, #4]
 8004c5e:	f7fc fbb3 	bl	80013c8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	2224      	movs	r2, #36	; 0x24
 8004c66:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	68da      	ldr	r2, [r3, #12]
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004c78:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004c7a:	6878      	ldr	r0, [r7, #4]
 8004c7c:	f000 fc90 	bl	80055a0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	691a      	ldr	r2, [r3, #16]
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004c8e:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	695a      	ldr	r2, [r3, #20]
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004c9e:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	68da      	ldr	r2, [r3, #12]
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004cae:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	2200      	movs	r2, #0
 8004cb4:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	2220      	movs	r2, #32
 8004cba:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	2220      	movs	r2, #32
 8004cc2:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8004cc6:	2300      	movs	r3, #0
}
 8004cc8:	4618      	mov	r0, r3
 8004cca:	3708      	adds	r7, #8
 8004ccc:	46bd      	mov	sp, r7
 8004cce:	bd80      	pop	{r7, pc}

08004cd0 <HAL_UART_DeInit>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 8004cd0:	b580      	push	{r7, lr}
 8004cd2:	b082      	sub	sp, #8
 8004cd4:	af00      	add	r7, sp, #0
 8004cd6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d101      	bne.n	8004ce2 <HAL_UART_DeInit+0x12>
  {
    return HAL_ERROR;
 8004cde:	2301      	movs	r3, #1
 8004ce0:	e01e      	b.n	8004d20 <HAL_UART_DeInit+0x50>
  }

  /* Check the parameters */
  assert_param(IS_UART_INSTANCE(huart->Instance));

  huart->gState = HAL_UART_STATE_BUSY;
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	2224      	movs	r2, #36	; 0x24
 8004ce6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	68da      	ldr	r2, [r3, #12]
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004cf8:	60da      	str	r2, [r3, #12]
  }
  /* DeInit the low level hardware */
  huart->MspDeInitCallback(huart);
#else
  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 8004cfa:	6878      	ldr	r0, [r7, #4]
 8004cfc:	f7fc fbe8 	bl	80014d0 <HAL_UART_MspDeInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	2200      	movs	r2, #0
 8004d04:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_RESET;
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	2200      	movs	r2, #0
 8004d0a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_RESET;
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	2200      	movs	r2, #0
 8004d12:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  /* Process Unlock */
  __HAL_UNLOCK(huart);
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	2200      	movs	r2, #0
 8004d1a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8004d1e:	2300      	movs	r3, #0
}
 8004d20:	4618      	mov	r0, r3
 8004d22:	3708      	adds	r7, #8
 8004d24:	46bd      	mov	sp, r7
 8004d26:	bd80      	pop	{r7, pc}

08004d28 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004d28:	b580      	push	{r7, lr}
 8004d2a:	b088      	sub	sp, #32
 8004d2c:	af02      	add	r7, sp, #8
 8004d2e:	60f8      	str	r0, [r7, #12]
 8004d30:	60b9      	str	r1, [r7, #8]
 8004d32:	603b      	str	r3, [r7, #0]
 8004d34:	4613      	mov	r3, r2
 8004d36:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8004d38:	2300      	movs	r3, #0
 8004d3a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004d42:	b2db      	uxtb	r3, r3
 8004d44:	2b20      	cmp	r3, #32
 8004d46:	f040 8083 	bne.w	8004e50 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8004d4a:	68bb      	ldr	r3, [r7, #8]
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d002      	beq.n	8004d56 <HAL_UART_Transmit+0x2e>
 8004d50:	88fb      	ldrh	r3, [r7, #6]
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d101      	bne.n	8004d5a <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8004d56:	2301      	movs	r3, #1
 8004d58:	e07b      	b.n	8004e52 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004d60:	2b01      	cmp	r3, #1
 8004d62:	d101      	bne.n	8004d68 <HAL_UART_Transmit+0x40>
 8004d64:	2302      	movs	r3, #2
 8004d66:	e074      	b.n	8004e52 <HAL_UART_Transmit+0x12a>
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	2201      	movs	r2, #1
 8004d6c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	2200      	movs	r2, #0
 8004d74:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	2221      	movs	r2, #33	; 0x21
 8004d7a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8004d7e:	f7fc fc7f 	bl	8001680 <HAL_GetTick>
 8004d82:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	88fa      	ldrh	r2, [r7, #6]
 8004d88:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	88fa      	ldrh	r2, [r7, #6]
 8004d8e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	2200      	movs	r2, #0
 8004d94:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8004d98:	e042      	b.n	8004e20 <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004d9e:	b29b      	uxth	r3, r3
 8004da0:	3b01      	subs	r3, #1
 8004da2:	b29a      	uxth	r2, r3
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	689b      	ldr	r3, [r3, #8]
 8004dac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004db0:	d122      	bne.n	8004df8 <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004db2:	683b      	ldr	r3, [r7, #0]
 8004db4:	9300      	str	r3, [sp, #0]
 8004db6:	697b      	ldr	r3, [r7, #20]
 8004db8:	2200      	movs	r2, #0
 8004dba:	2180      	movs	r1, #128	; 0x80
 8004dbc:	68f8      	ldr	r0, [r7, #12]
 8004dbe:	f000 fa6d 	bl	800529c <UART_WaitOnFlagUntilTimeout>
 8004dc2:	4603      	mov	r3, r0
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d001      	beq.n	8004dcc <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 8004dc8:	2303      	movs	r3, #3
 8004dca:	e042      	b.n	8004e52 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8004dcc:	68bb      	ldr	r3, [r7, #8]
 8004dce:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8004dd0:	693b      	ldr	r3, [r7, #16]
 8004dd2:	881b      	ldrh	r3, [r3, #0]
 8004dd4:	461a      	mov	r2, r3
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004dde:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	691b      	ldr	r3, [r3, #16]
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d103      	bne.n	8004df0 <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 8004de8:	68bb      	ldr	r3, [r7, #8]
 8004dea:	3302      	adds	r3, #2
 8004dec:	60bb      	str	r3, [r7, #8]
 8004dee:	e017      	b.n	8004e20 <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 8004df0:	68bb      	ldr	r3, [r7, #8]
 8004df2:	3301      	adds	r3, #1
 8004df4:	60bb      	str	r3, [r7, #8]
 8004df6:	e013      	b.n	8004e20 <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004df8:	683b      	ldr	r3, [r7, #0]
 8004dfa:	9300      	str	r3, [sp, #0]
 8004dfc:	697b      	ldr	r3, [r7, #20]
 8004dfe:	2200      	movs	r2, #0
 8004e00:	2180      	movs	r1, #128	; 0x80
 8004e02:	68f8      	ldr	r0, [r7, #12]
 8004e04:	f000 fa4a 	bl	800529c <UART_WaitOnFlagUntilTimeout>
 8004e08:	4603      	mov	r3, r0
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d001      	beq.n	8004e12 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 8004e0e:	2303      	movs	r3, #3
 8004e10:	e01f      	b.n	8004e52 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8004e12:	68bb      	ldr	r3, [r7, #8]
 8004e14:	1c5a      	adds	r2, r3, #1
 8004e16:	60ba      	str	r2, [r7, #8]
 8004e18:	781a      	ldrb	r2, [r3, #0]
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004e24:	b29b      	uxth	r3, r3
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d1b7      	bne.n	8004d9a <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004e2a:	683b      	ldr	r3, [r7, #0]
 8004e2c:	9300      	str	r3, [sp, #0]
 8004e2e:	697b      	ldr	r3, [r7, #20]
 8004e30:	2200      	movs	r2, #0
 8004e32:	2140      	movs	r1, #64	; 0x40
 8004e34:	68f8      	ldr	r0, [r7, #12]
 8004e36:	f000 fa31 	bl	800529c <UART_WaitOnFlagUntilTimeout>
 8004e3a:	4603      	mov	r3, r0
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	d001      	beq.n	8004e44 <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 8004e40:	2303      	movs	r3, #3
 8004e42:	e006      	b.n	8004e52 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	2220      	movs	r2, #32
 8004e48:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8004e4c:	2300      	movs	r3, #0
 8004e4e:	e000      	b.n	8004e52 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8004e50:	2302      	movs	r3, #2
  }
}
 8004e52:	4618      	mov	r0, r3
 8004e54:	3718      	adds	r7, #24
 8004e56:	46bd      	mov	sp, r7
 8004e58:	bd80      	pop	{r7, pc}
	...

08004e5c <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004e5c:	b580      	push	{r7, lr}
 8004e5e:	b086      	sub	sp, #24
 8004e60:	af00      	add	r7, sp, #0
 8004e62:	60f8      	str	r0, [r7, #12]
 8004e64:	60b9      	str	r1, [r7, #8]
 8004e66:	4613      	mov	r3, r2
 8004e68:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8004e70:	b2db      	uxtb	r3, r3
 8004e72:	2b20      	cmp	r3, #32
 8004e74:	d166      	bne.n	8004f44 <HAL_UART_Receive_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 8004e76:	68bb      	ldr	r3, [r7, #8]
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	d002      	beq.n	8004e82 <HAL_UART_Receive_DMA+0x26>
 8004e7c:	88fb      	ldrh	r3, [r7, #6]
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d101      	bne.n	8004e86 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8004e82:	2301      	movs	r3, #1
 8004e84:	e05f      	b.n	8004f46 <HAL_UART_Receive_DMA+0xea>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004e8c:	2b01      	cmp	r3, #1
 8004e8e:	d101      	bne.n	8004e94 <HAL_UART_Receive_DMA+0x38>
 8004e90:	2302      	movs	r3, #2
 8004e92:	e058      	b.n	8004f46 <HAL_UART_Receive_DMA+0xea>
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	2201      	movs	r2, #1
 8004e98:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 8004e9c:	68ba      	ldr	r2, [r7, #8]
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	88fa      	ldrh	r2, [r7, #6]
 8004ea6:	859a      	strh	r2, [r3, #44]	; 0x2c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	2200      	movs	r2, #0
 8004eac:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	2222      	movs	r2, #34	; 0x22
 8004eb2:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004eba:	4a25      	ldr	r2, [pc, #148]	; (8004f50 <HAL_UART_Receive_DMA+0xf4>)
 8004ebc:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ec2:	4a24      	ldr	r2, [pc, #144]	; (8004f54 <HAL_UART_Receive_DMA+0xf8>)
 8004ec4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004eca:	4a23      	ldr	r2, [pc, #140]	; (8004f58 <HAL_UART_Receive_DMA+0xfc>)
 8004ecc:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ed2:	2200      	movs	r2, #0
 8004ed4:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA stream */
    tmp = (uint32_t *)&pData;
 8004ed6:	f107 0308 	add.w	r3, r7, #8
 8004eda:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	3304      	adds	r3, #4
 8004ee6:	4619      	mov	r1, r3
 8004ee8:	697b      	ldr	r3, [r7, #20]
 8004eea:	681a      	ldr	r2, [r3, #0]
 8004eec:	88fb      	ldrh	r3, [r7, #6]
 8004eee:	f7fc fe43 	bl	8001b78 <HAL_DMA_Start_IT>

    /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
    __HAL_UART_CLEAR_OREFLAG(huart);
 8004ef2:	2300      	movs	r3, #0
 8004ef4:	613b      	str	r3, [r7, #16]
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	613b      	str	r3, [r7, #16]
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	685b      	ldr	r3, [r3, #4]
 8004f04:	613b      	str	r3, [r7, #16]
 8004f06:	693b      	ldr	r3, [r7, #16]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	2200      	movs	r2, #0
 8004f0c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	68da      	ldr	r2, [r3, #12]
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004f1e:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	695a      	ldr	r2, [r3, #20]
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	f042 0201 	orr.w	r2, r2, #1
 8004f2e:	615a      	str	r2, [r3, #20]

    /* Enable the DMA transfer for the receiver request by setting the DMAR bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	695a      	ldr	r2, [r3, #20]
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004f3e:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 8004f40:	2300      	movs	r3, #0
 8004f42:	e000      	b.n	8004f46 <HAL_UART_Receive_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 8004f44:	2302      	movs	r3, #2
  }
}
 8004f46:	4618      	mov	r0, r3
 8004f48:	3718      	adds	r7, #24
 8004f4a:	46bd      	mov	sp, r7
 8004f4c:	bd80      	pop	{r7, pc}
 8004f4e:	bf00      	nop
 8004f50:	08005185 	.word	0x08005185
 8004f54:	080051ed 	.word	0x080051ed
 8004f58:	08005209 	.word	0x08005209

08004f5c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004f5c:	b580      	push	{r7, lr}
 8004f5e:	b088      	sub	sp, #32
 8004f60:	af00      	add	r7, sp, #0
 8004f62:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	68db      	ldr	r3, [r3, #12]
 8004f72:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	695b      	ldr	r3, [r3, #20]
 8004f7a:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8004f7c:	2300      	movs	r3, #0
 8004f7e:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8004f80:	2300      	movs	r3, #0
 8004f82:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004f84:	69fb      	ldr	r3, [r7, #28]
 8004f86:	f003 030f 	and.w	r3, r3, #15
 8004f8a:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8004f8c:	693b      	ldr	r3, [r7, #16]
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d10d      	bne.n	8004fae <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004f92:	69fb      	ldr	r3, [r7, #28]
 8004f94:	f003 0320 	and.w	r3, r3, #32
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d008      	beq.n	8004fae <HAL_UART_IRQHandler+0x52>
 8004f9c:	69bb      	ldr	r3, [r7, #24]
 8004f9e:	f003 0320 	and.w	r3, r3, #32
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d003      	beq.n	8004fae <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8004fa6:	6878      	ldr	r0, [r7, #4]
 8004fa8:	f000 fa78 	bl	800549c <UART_Receive_IT>
      return;
 8004fac:	e0d1      	b.n	8005152 <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004fae:	693b      	ldr	r3, [r7, #16]
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	f000 80b0 	beq.w	8005116 <HAL_UART_IRQHandler+0x1ba>
 8004fb6:	697b      	ldr	r3, [r7, #20]
 8004fb8:	f003 0301 	and.w	r3, r3, #1
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d105      	bne.n	8004fcc <HAL_UART_IRQHandler+0x70>
 8004fc0:	69bb      	ldr	r3, [r7, #24]
 8004fc2:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	f000 80a5 	beq.w	8005116 <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004fcc:	69fb      	ldr	r3, [r7, #28]
 8004fce:	f003 0301 	and.w	r3, r3, #1
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d00a      	beq.n	8004fec <HAL_UART_IRQHandler+0x90>
 8004fd6:	69bb      	ldr	r3, [r7, #24]
 8004fd8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	d005      	beq.n	8004fec <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004fe4:	f043 0201 	orr.w	r2, r3, #1
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004fec:	69fb      	ldr	r3, [r7, #28]
 8004fee:	f003 0304 	and.w	r3, r3, #4
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d00a      	beq.n	800500c <HAL_UART_IRQHandler+0xb0>
 8004ff6:	697b      	ldr	r3, [r7, #20]
 8004ff8:	f003 0301 	and.w	r3, r3, #1
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	d005      	beq.n	800500c <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005004:	f043 0202 	orr.w	r2, r3, #2
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800500c:	69fb      	ldr	r3, [r7, #28]
 800500e:	f003 0302 	and.w	r3, r3, #2
 8005012:	2b00      	cmp	r3, #0
 8005014:	d00a      	beq.n	800502c <HAL_UART_IRQHandler+0xd0>
 8005016:	697b      	ldr	r3, [r7, #20]
 8005018:	f003 0301 	and.w	r3, r3, #1
 800501c:	2b00      	cmp	r3, #0
 800501e:	d005      	beq.n	800502c <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005024:	f043 0204 	orr.w	r2, r3, #4
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 800502c:	69fb      	ldr	r3, [r7, #28]
 800502e:	f003 0308 	and.w	r3, r3, #8
 8005032:	2b00      	cmp	r3, #0
 8005034:	d00f      	beq.n	8005056 <HAL_UART_IRQHandler+0xfa>
 8005036:	69bb      	ldr	r3, [r7, #24]
 8005038:	f003 0320 	and.w	r3, r3, #32
 800503c:	2b00      	cmp	r3, #0
 800503e:	d104      	bne.n	800504a <HAL_UART_IRQHandler+0xee>
 8005040:	697b      	ldr	r3, [r7, #20]
 8005042:	f003 0301 	and.w	r3, r3, #1
 8005046:	2b00      	cmp	r3, #0
 8005048:	d005      	beq.n	8005056 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800504e:	f043 0208 	orr.w	r2, r3, #8
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800505a:	2b00      	cmp	r3, #0
 800505c:	d078      	beq.n	8005150 <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800505e:	69fb      	ldr	r3, [r7, #28]
 8005060:	f003 0320 	and.w	r3, r3, #32
 8005064:	2b00      	cmp	r3, #0
 8005066:	d007      	beq.n	8005078 <HAL_UART_IRQHandler+0x11c>
 8005068:	69bb      	ldr	r3, [r7, #24]
 800506a:	f003 0320 	and.w	r3, r3, #32
 800506e:	2b00      	cmp	r3, #0
 8005070:	d002      	beq.n	8005078 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 8005072:	6878      	ldr	r0, [r7, #4]
 8005074:	f000 fa12 	bl	800549c <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	695b      	ldr	r3, [r3, #20]
 800507e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005082:	2b40      	cmp	r3, #64	; 0x40
 8005084:	bf0c      	ite	eq
 8005086:	2301      	moveq	r3, #1
 8005088:	2300      	movne	r3, #0
 800508a:	b2db      	uxtb	r3, r3
 800508c:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005092:	f003 0308 	and.w	r3, r3, #8
 8005096:	2b00      	cmp	r3, #0
 8005098:	d102      	bne.n	80050a0 <HAL_UART_IRQHandler+0x144>
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	2b00      	cmp	r3, #0
 800509e:	d031      	beq.n	8005104 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80050a0:	6878      	ldr	r0, [r7, #4]
 80050a2:	f000 f95b 	bl	800535c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	695b      	ldr	r3, [r3, #20]
 80050ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80050b0:	2b40      	cmp	r3, #64	; 0x40
 80050b2:	d123      	bne.n	80050fc <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	695a      	ldr	r2, [r3, #20]
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80050c2:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	d013      	beq.n	80050f4 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80050d0:	4a21      	ldr	r2, [pc, #132]	; (8005158 <HAL_UART_IRQHandler+0x1fc>)
 80050d2:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80050d8:	4618      	mov	r0, r3
 80050da:	f7fc fda5 	bl	8001c28 <HAL_DMA_Abort_IT>
 80050de:	4603      	mov	r3, r0
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d016      	beq.n	8005112 <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80050e8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80050ea:	687a      	ldr	r2, [r7, #4]
 80050ec:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80050ee:	4610      	mov	r0, r2
 80050f0:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80050f2:	e00e      	b.n	8005112 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80050f4:	6878      	ldr	r0, [r7, #4]
 80050f6:	f7fc f95d 	bl	80013b4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80050fa:	e00a      	b.n	8005112 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80050fc:	6878      	ldr	r0, [r7, #4]
 80050fe:	f7fc f959 	bl	80013b4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005102:	e006      	b.n	8005112 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005104:	6878      	ldr	r0, [r7, #4]
 8005106:	f7fc f955 	bl	80013b4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	2200      	movs	r2, #0
 800510e:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8005110:	e01e      	b.n	8005150 <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005112:	bf00      	nop
    return;
 8005114:	e01c      	b.n	8005150 <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005116:	69fb      	ldr	r3, [r7, #28]
 8005118:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800511c:	2b00      	cmp	r3, #0
 800511e:	d008      	beq.n	8005132 <HAL_UART_IRQHandler+0x1d6>
 8005120:	69bb      	ldr	r3, [r7, #24]
 8005122:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005126:	2b00      	cmp	r3, #0
 8005128:	d003      	beq.n	8005132 <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 800512a:	6878      	ldr	r0, [r7, #4]
 800512c:	f000 f948 	bl	80053c0 <UART_Transmit_IT>
    return;
 8005130:	e00f      	b.n	8005152 <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005132:	69fb      	ldr	r3, [r7, #28]
 8005134:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005138:	2b00      	cmp	r3, #0
 800513a:	d00a      	beq.n	8005152 <HAL_UART_IRQHandler+0x1f6>
 800513c:	69bb      	ldr	r3, [r7, #24]
 800513e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005142:	2b00      	cmp	r3, #0
 8005144:	d005      	beq.n	8005152 <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 8005146:	6878      	ldr	r0, [r7, #4]
 8005148:	f000 f990 	bl	800546c <UART_EndTransmit_IT>
    return;
 800514c:	bf00      	nop
 800514e:	e000      	b.n	8005152 <HAL_UART_IRQHandler+0x1f6>
    return;
 8005150:	bf00      	nop
  }
}
 8005152:	3720      	adds	r7, #32
 8005154:	46bd      	mov	sp, r7
 8005156:	bd80      	pop	{r7, pc}
 8005158:	08005399 	.word	0x08005399

0800515c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800515c:	b480      	push	{r7}
 800515e:	b083      	sub	sp, #12
 8005160:	af00      	add	r7, sp, #0
 8005162:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005164:	bf00      	nop
 8005166:	370c      	adds	r7, #12
 8005168:	46bd      	mov	sp, r7
 800516a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800516e:	4770      	bx	lr

08005170 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8005170:	b480      	push	{r7}
 8005172:	b083      	sub	sp, #12
 8005174:	af00      	add	r7, sp, #0
 8005176:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8005178:	bf00      	nop
 800517a:	370c      	adds	r7, #12
 800517c:	46bd      	mov	sp, r7
 800517e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005182:	4770      	bx	lr

08005184 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8005184:	b580      	push	{r7, lr}
 8005186:	b084      	sub	sp, #16
 8005188:	af00      	add	r7, sp, #0
 800518a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005190:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800519c:	2b00      	cmp	r3, #0
 800519e:	d11e      	bne.n	80051de <UART_DMAReceiveCplt+0x5a>
  {
    huart->RxXferCount = 0U;
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	2200      	movs	r2, #0
 80051a4:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	68da      	ldr	r2, [r3, #12]
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80051b4:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	695a      	ldr	r2, [r3, #20]
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	f022 0201 	bic.w	r2, r2, #1
 80051c4:	615a      	str	r2, [r3, #20]

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	695a      	ldr	r2, [r3, #20]
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80051d4:	615a      	str	r2, [r3, #20]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	2220      	movs	r2, #32
 80051da:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx complete callback*/
  huart->RxCpltCallback(huart);
#else
  /*Call legacy weak Rx complete callback*/
  HAL_UART_RxCpltCallback(huart);
 80051de:	68f8      	ldr	r0, [r7, #12]
 80051e0:	f7fc f8de 	bl	80013a0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80051e4:	bf00      	nop
 80051e6:	3710      	adds	r7, #16
 80051e8:	46bd      	mov	sp, r7
 80051ea:	bd80      	pop	{r7, pc}

080051ec <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80051ec:	b580      	push	{r7, lr}
 80051ee:	b084      	sub	sp, #16
 80051f0:	af00      	add	r7, sp, #0
 80051f2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051f8:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx Half complete callback*/
  huart->RxHalfCpltCallback(huart);
#else
  /*Call legacy weak Rx Half complete callback*/
  HAL_UART_RxHalfCpltCallback(huart);
 80051fa:	68f8      	ldr	r0, [r7, #12]
 80051fc:	f7ff ffb8 	bl	8005170 <HAL_UART_RxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005200:	bf00      	nop
 8005202:	3710      	adds	r7, #16
 8005204:	46bd      	mov	sp, r7
 8005206:	bd80      	pop	{r7, pc}

08005208 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8005208:	b580      	push	{r7, lr}
 800520a:	b084      	sub	sp, #16
 800520c:	af00      	add	r7, sp, #0
 800520e:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8005210:	2300      	movs	r3, #0
 8005212:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005218:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800521a:	68bb      	ldr	r3, [r7, #8]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	695b      	ldr	r3, [r3, #20]
 8005220:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005224:	2b80      	cmp	r3, #128	; 0x80
 8005226:	bf0c      	ite	eq
 8005228:	2301      	moveq	r3, #1
 800522a:	2300      	movne	r3, #0
 800522c:	b2db      	uxtb	r3, r3
 800522e:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8005230:	68bb      	ldr	r3, [r7, #8]
 8005232:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005236:	b2db      	uxtb	r3, r3
 8005238:	2b21      	cmp	r3, #33	; 0x21
 800523a:	d108      	bne.n	800524e <UART_DMAError+0x46>
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	2b00      	cmp	r3, #0
 8005240:	d005      	beq.n	800524e <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8005242:	68bb      	ldr	r3, [r7, #8]
 8005244:	2200      	movs	r2, #0
 8005246:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8005248:	68b8      	ldr	r0, [r7, #8]
 800524a:	f000 f871 	bl	8005330 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800524e:	68bb      	ldr	r3, [r7, #8]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	695b      	ldr	r3, [r3, #20]
 8005254:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005258:	2b40      	cmp	r3, #64	; 0x40
 800525a:	bf0c      	ite	eq
 800525c:	2301      	moveq	r3, #1
 800525e:	2300      	movne	r3, #0
 8005260:	b2db      	uxtb	r3, r3
 8005262:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8005264:	68bb      	ldr	r3, [r7, #8]
 8005266:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800526a:	b2db      	uxtb	r3, r3
 800526c:	2b22      	cmp	r3, #34	; 0x22
 800526e:	d108      	bne.n	8005282 <UART_DMAError+0x7a>
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	2b00      	cmp	r3, #0
 8005274:	d005      	beq.n	8005282 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8005276:	68bb      	ldr	r3, [r7, #8]
 8005278:	2200      	movs	r2, #0
 800527a:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 800527c:	68b8      	ldr	r0, [r7, #8]
 800527e:	f000 f86d 	bl	800535c <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8005282:	68bb      	ldr	r3, [r7, #8]
 8005284:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005286:	f043 0210 	orr.w	r2, r3, #16
 800528a:	68bb      	ldr	r3, [r7, #8]
 800528c:	63da      	str	r2, [r3, #60]	; 0x3c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800528e:	68b8      	ldr	r0, [r7, #8]
 8005290:	f7fc f890 	bl	80013b4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005294:	bf00      	nop
 8005296:	3710      	adds	r7, #16
 8005298:	46bd      	mov	sp, r7
 800529a:	bd80      	pop	{r7, pc}

0800529c <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 800529c:	b580      	push	{r7, lr}
 800529e:	b084      	sub	sp, #16
 80052a0:	af00      	add	r7, sp, #0
 80052a2:	60f8      	str	r0, [r7, #12]
 80052a4:	60b9      	str	r1, [r7, #8]
 80052a6:	603b      	str	r3, [r7, #0]
 80052a8:	4613      	mov	r3, r2
 80052aa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80052ac:	e02c      	b.n	8005308 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80052ae:	69bb      	ldr	r3, [r7, #24]
 80052b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80052b4:	d028      	beq.n	8005308 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80052b6:	69bb      	ldr	r3, [r7, #24]
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	d007      	beq.n	80052cc <UART_WaitOnFlagUntilTimeout+0x30>
 80052bc:	f7fc f9e0 	bl	8001680 <HAL_GetTick>
 80052c0:	4602      	mov	r2, r0
 80052c2:	683b      	ldr	r3, [r7, #0]
 80052c4:	1ad3      	subs	r3, r2, r3
 80052c6:	69ba      	ldr	r2, [r7, #24]
 80052c8:	429a      	cmp	r2, r3
 80052ca:	d21d      	bcs.n	8005308 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	68da      	ldr	r2, [r3, #12]
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80052da:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	695a      	ldr	r2, [r3, #20]
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	f022 0201 	bic.w	r2, r2, #1
 80052ea:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	2220      	movs	r2, #32
 80052f0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	2220      	movs	r2, #32
 80052f8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	2200      	movs	r2, #0
 8005300:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8005304:	2303      	movs	r3, #3
 8005306:	e00f      	b.n	8005328 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	681a      	ldr	r2, [r3, #0]
 800530e:	68bb      	ldr	r3, [r7, #8]
 8005310:	4013      	ands	r3, r2
 8005312:	68ba      	ldr	r2, [r7, #8]
 8005314:	429a      	cmp	r2, r3
 8005316:	bf0c      	ite	eq
 8005318:	2301      	moveq	r3, #1
 800531a:	2300      	movne	r3, #0
 800531c:	b2db      	uxtb	r3, r3
 800531e:	461a      	mov	r2, r3
 8005320:	79fb      	ldrb	r3, [r7, #7]
 8005322:	429a      	cmp	r2, r3
 8005324:	d0c3      	beq.n	80052ae <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005326:	2300      	movs	r3, #0
}
 8005328:	4618      	mov	r0, r3
 800532a:	3710      	adds	r7, #16
 800532c:	46bd      	mov	sp, r7
 800532e:	bd80      	pop	{r7, pc}

08005330 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8005330:	b480      	push	{r7}
 8005332:	b083      	sub	sp, #12
 8005334:	af00      	add	r7, sp, #0
 8005336:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	68da      	ldr	r2, [r3, #12]
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8005346:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	2220      	movs	r2, #32
 800534c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
}
 8005350:	bf00      	nop
 8005352:	370c      	adds	r7, #12
 8005354:	46bd      	mov	sp, r7
 8005356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800535a:	4770      	bx	lr

0800535c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800535c:	b480      	push	{r7}
 800535e:	b083      	sub	sp, #12
 8005360:	af00      	add	r7, sp, #0
 8005362:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	68da      	ldr	r2, [r3, #12]
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8005372:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	695a      	ldr	r2, [r3, #20]
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	f022 0201 	bic.w	r2, r2, #1
 8005382:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	2220      	movs	r2, #32
 8005388:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 800538c:	bf00      	nop
 800538e:	370c      	adds	r7, #12
 8005390:	46bd      	mov	sp, r7
 8005392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005396:	4770      	bx	lr

08005398 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005398:	b580      	push	{r7, lr}
 800539a:	b084      	sub	sp, #16
 800539c:	af00      	add	r7, sp, #0
 800539e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053a4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	2200      	movs	r2, #0
 80053aa:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	2200      	movs	r2, #0
 80053b0:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80053b2:	68f8      	ldr	r0, [r7, #12]
 80053b4:	f7fb fffe 	bl	80013b4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80053b8:	bf00      	nop
 80053ba:	3710      	adds	r7, #16
 80053bc:	46bd      	mov	sp, r7
 80053be:	bd80      	pop	{r7, pc}

080053c0 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80053c0:	b480      	push	{r7}
 80053c2:	b085      	sub	sp, #20
 80053c4:	af00      	add	r7, sp, #0
 80053c6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80053ce:	b2db      	uxtb	r3, r3
 80053d0:	2b21      	cmp	r3, #33	; 0x21
 80053d2:	d144      	bne.n	800545e <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	689b      	ldr	r3, [r3, #8]
 80053d8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80053dc:	d11a      	bne.n	8005414 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	6a1b      	ldr	r3, [r3, #32]
 80053e2:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	881b      	ldrh	r3, [r3, #0]
 80053e8:	461a      	mov	r2, r3
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80053f2:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	691b      	ldr	r3, [r3, #16]
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	d105      	bne.n	8005408 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	6a1b      	ldr	r3, [r3, #32]
 8005400:	1c9a      	adds	r2, r3, #2
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	621a      	str	r2, [r3, #32]
 8005406:	e00e      	b.n	8005426 <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	6a1b      	ldr	r3, [r3, #32]
 800540c:	1c5a      	adds	r2, r3, #1
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	621a      	str	r2, [r3, #32]
 8005412:	e008      	b.n	8005426 <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	6a1b      	ldr	r3, [r3, #32]
 8005418:	1c59      	adds	r1, r3, #1
 800541a:	687a      	ldr	r2, [r7, #4]
 800541c:	6211      	str	r1, [r2, #32]
 800541e:	781a      	ldrb	r2, [r3, #0]
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800542a:	b29b      	uxth	r3, r3
 800542c:	3b01      	subs	r3, #1
 800542e:	b29b      	uxth	r3, r3
 8005430:	687a      	ldr	r2, [r7, #4]
 8005432:	4619      	mov	r1, r3
 8005434:	84d1      	strh	r1, [r2, #38]	; 0x26
 8005436:	2b00      	cmp	r3, #0
 8005438:	d10f      	bne.n	800545a <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	68da      	ldr	r2, [r3, #12]
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005448:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	68da      	ldr	r2, [r3, #12]
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005458:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800545a:	2300      	movs	r3, #0
 800545c:	e000      	b.n	8005460 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 800545e:	2302      	movs	r3, #2
  }
}
 8005460:	4618      	mov	r0, r3
 8005462:	3714      	adds	r7, #20
 8005464:	46bd      	mov	sp, r7
 8005466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800546a:	4770      	bx	lr

0800546c <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800546c:	b580      	push	{r7, lr}
 800546e:	b082      	sub	sp, #8
 8005470:	af00      	add	r7, sp, #0
 8005472:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	68da      	ldr	r2, [r3, #12]
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005482:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	2220      	movs	r2, #32
 8005488:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800548c:	6878      	ldr	r0, [r7, #4]
 800548e:	f7ff fe65 	bl	800515c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005492:	2300      	movs	r3, #0
}
 8005494:	4618      	mov	r0, r3
 8005496:	3708      	adds	r7, #8
 8005498:	46bd      	mov	sp, r7
 800549a:	bd80      	pop	{r7, pc}

0800549c <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800549c:	b580      	push	{r7, lr}
 800549e:	b084      	sub	sp, #16
 80054a0:	af00      	add	r7, sp, #0
 80054a2:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80054aa:	b2db      	uxtb	r3, r3
 80054ac:	2b22      	cmp	r3, #34	; 0x22
 80054ae:	d171      	bne.n	8005594 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	689b      	ldr	r3, [r3, #8]
 80054b4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80054b8:	d123      	bne.n	8005502 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054be:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	691b      	ldr	r3, [r3, #16]
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	d10e      	bne.n	80054e6 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	685b      	ldr	r3, [r3, #4]
 80054ce:	b29b      	uxth	r3, r3
 80054d0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80054d4:	b29a      	uxth	r2, r3
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054de:	1c9a      	adds	r2, r3, #2
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	629a      	str	r2, [r3, #40]	; 0x28
 80054e4:	e029      	b.n	800553a <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	685b      	ldr	r3, [r3, #4]
 80054ec:	b29b      	uxth	r3, r3
 80054ee:	b2db      	uxtb	r3, r3
 80054f0:	b29a      	uxth	r2, r3
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054fa:	1c5a      	adds	r2, r3, #1
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	629a      	str	r2, [r3, #40]	; 0x28
 8005500:	e01b      	b.n	800553a <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	691b      	ldr	r3, [r3, #16]
 8005506:	2b00      	cmp	r3, #0
 8005508:	d10a      	bne.n	8005520 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	6858      	ldr	r0, [r3, #4]
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005514:	1c59      	adds	r1, r3, #1
 8005516:	687a      	ldr	r2, [r7, #4]
 8005518:	6291      	str	r1, [r2, #40]	; 0x28
 800551a:	b2c2      	uxtb	r2, r0
 800551c:	701a      	strb	r2, [r3, #0]
 800551e:	e00c      	b.n	800553a <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	685b      	ldr	r3, [r3, #4]
 8005526:	b2da      	uxtb	r2, r3
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800552c:	1c58      	adds	r0, r3, #1
 800552e:	6879      	ldr	r1, [r7, #4]
 8005530:	6288      	str	r0, [r1, #40]	; 0x28
 8005532:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8005536:	b2d2      	uxtb	r2, r2
 8005538:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800553e:	b29b      	uxth	r3, r3
 8005540:	3b01      	subs	r3, #1
 8005542:	b29b      	uxth	r3, r3
 8005544:	687a      	ldr	r2, [r7, #4]
 8005546:	4619      	mov	r1, r3
 8005548:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800554a:	2b00      	cmp	r3, #0
 800554c:	d120      	bne.n	8005590 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	68da      	ldr	r2, [r3, #12]
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	f022 0220 	bic.w	r2, r2, #32
 800555c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	68da      	ldr	r2, [r3, #12]
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800556c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	695a      	ldr	r2, [r3, #20]
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	f022 0201 	bic.w	r2, r2, #1
 800557c:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	2220      	movs	r2, #32
 8005582:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8005586:	6878      	ldr	r0, [r7, #4]
 8005588:	f7fb ff0a 	bl	80013a0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 800558c:	2300      	movs	r3, #0
 800558e:	e002      	b.n	8005596 <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8005590:	2300      	movs	r3, #0
 8005592:	e000      	b.n	8005596 <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8005594:	2302      	movs	r3, #2
  }
}
 8005596:	4618      	mov	r0, r3
 8005598:	3710      	adds	r7, #16
 800559a:	46bd      	mov	sp, r7
 800559c:	bd80      	pop	{r7, pc}
	...

080055a0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80055a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80055a4:	b085      	sub	sp, #20
 80055a6:	af00      	add	r7, sp, #0
 80055a8:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	691b      	ldr	r3, [r3, #16]
 80055b0:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	68da      	ldr	r2, [r3, #12]
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	430a      	orrs	r2, r1
 80055be:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	689a      	ldr	r2, [r3, #8]
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	691b      	ldr	r3, [r3, #16]
 80055c8:	431a      	orrs	r2, r3
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	695b      	ldr	r3, [r3, #20]
 80055ce:	431a      	orrs	r2, r3
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	69db      	ldr	r3, [r3, #28]
 80055d4:	4313      	orrs	r3, r2
 80055d6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	68db      	ldr	r3, [r3, #12]
 80055de:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 80055e2:	f023 030c 	bic.w	r3, r3, #12
 80055e6:	687a      	ldr	r2, [r7, #4]
 80055e8:	6812      	ldr	r2, [r2, #0]
 80055ea:	68f9      	ldr	r1, [r7, #12]
 80055ec:	430b      	orrs	r3, r1
 80055ee:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	695b      	ldr	r3, [r3, #20]
 80055f6:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	699a      	ldr	r2, [r3, #24]
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	430a      	orrs	r2, r1
 8005604:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	69db      	ldr	r3, [r3, #28]
 800560a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800560e:	f040 818b 	bne.w	8005928 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	4ac1      	ldr	r2, [pc, #772]	; (800591c <UART_SetConfig+0x37c>)
 8005618:	4293      	cmp	r3, r2
 800561a:	d005      	beq.n	8005628 <UART_SetConfig+0x88>
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	4abf      	ldr	r2, [pc, #764]	; (8005920 <UART_SetConfig+0x380>)
 8005622:	4293      	cmp	r3, r2
 8005624:	f040 80bd 	bne.w	80057a2 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005628:	f7ff f8f8 	bl	800481c <HAL_RCC_GetPCLK2Freq>
 800562c:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800562e:	68bb      	ldr	r3, [r7, #8]
 8005630:	461d      	mov	r5, r3
 8005632:	f04f 0600 	mov.w	r6, #0
 8005636:	46a8      	mov	r8, r5
 8005638:	46b1      	mov	r9, r6
 800563a:	eb18 0308 	adds.w	r3, r8, r8
 800563e:	eb49 0409 	adc.w	r4, r9, r9
 8005642:	4698      	mov	r8, r3
 8005644:	46a1      	mov	r9, r4
 8005646:	eb18 0805 	adds.w	r8, r8, r5
 800564a:	eb49 0906 	adc.w	r9, r9, r6
 800564e:	f04f 0100 	mov.w	r1, #0
 8005652:	f04f 0200 	mov.w	r2, #0
 8005656:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800565a:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800565e:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8005662:	4688      	mov	r8, r1
 8005664:	4691      	mov	r9, r2
 8005666:	eb18 0005 	adds.w	r0, r8, r5
 800566a:	eb49 0106 	adc.w	r1, r9, r6
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	685b      	ldr	r3, [r3, #4]
 8005672:	461d      	mov	r5, r3
 8005674:	f04f 0600 	mov.w	r6, #0
 8005678:	196b      	adds	r3, r5, r5
 800567a:	eb46 0406 	adc.w	r4, r6, r6
 800567e:	461a      	mov	r2, r3
 8005680:	4623      	mov	r3, r4
 8005682:	f7fa fdf5 	bl	8000270 <__aeabi_uldivmod>
 8005686:	4603      	mov	r3, r0
 8005688:	460c      	mov	r4, r1
 800568a:	461a      	mov	r2, r3
 800568c:	4ba5      	ldr	r3, [pc, #660]	; (8005924 <UART_SetConfig+0x384>)
 800568e:	fba3 2302 	umull	r2, r3, r3, r2
 8005692:	095b      	lsrs	r3, r3, #5
 8005694:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8005698:	68bb      	ldr	r3, [r7, #8]
 800569a:	461d      	mov	r5, r3
 800569c:	f04f 0600 	mov.w	r6, #0
 80056a0:	46a9      	mov	r9, r5
 80056a2:	46b2      	mov	sl, r6
 80056a4:	eb19 0309 	adds.w	r3, r9, r9
 80056a8:	eb4a 040a 	adc.w	r4, sl, sl
 80056ac:	4699      	mov	r9, r3
 80056ae:	46a2      	mov	sl, r4
 80056b0:	eb19 0905 	adds.w	r9, r9, r5
 80056b4:	eb4a 0a06 	adc.w	sl, sl, r6
 80056b8:	f04f 0100 	mov.w	r1, #0
 80056bc:	f04f 0200 	mov.w	r2, #0
 80056c0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80056c4:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80056c8:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80056cc:	4689      	mov	r9, r1
 80056ce:	4692      	mov	sl, r2
 80056d0:	eb19 0005 	adds.w	r0, r9, r5
 80056d4:	eb4a 0106 	adc.w	r1, sl, r6
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	685b      	ldr	r3, [r3, #4]
 80056dc:	461d      	mov	r5, r3
 80056de:	f04f 0600 	mov.w	r6, #0
 80056e2:	196b      	adds	r3, r5, r5
 80056e4:	eb46 0406 	adc.w	r4, r6, r6
 80056e8:	461a      	mov	r2, r3
 80056ea:	4623      	mov	r3, r4
 80056ec:	f7fa fdc0 	bl	8000270 <__aeabi_uldivmod>
 80056f0:	4603      	mov	r3, r0
 80056f2:	460c      	mov	r4, r1
 80056f4:	461a      	mov	r2, r3
 80056f6:	4b8b      	ldr	r3, [pc, #556]	; (8005924 <UART_SetConfig+0x384>)
 80056f8:	fba3 1302 	umull	r1, r3, r3, r2
 80056fc:	095b      	lsrs	r3, r3, #5
 80056fe:	2164      	movs	r1, #100	; 0x64
 8005700:	fb01 f303 	mul.w	r3, r1, r3
 8005704:	1ad3      	subs	r3, r2, r3
 8005706:	00db      	lsls	r3, r3, #3
 8005708:	3332      	adds	r3, #50	; 0x32
 800570a:	4a86      	ldr	r2, [pc, #536]	; (8005924 <UART_SetConfig+0x384>)
 800570c:	fba2 2303 	umull	r2, r3, r2, r3
 8005710:	095b      	lsrs	r3, r3, #5
 8005712:	005b      	lsls	r3, r3, #1
 8005714:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005718:	4498      	add	r8, r3
 800571a:	68bb      	ldr	r3, [r7, #8]
 800571c:	461d      	mov	r5, r3
 800571e:	f04f 0600 	mov.w	r6, #0
 8005722:	46a9      	mov	r9, r5
 8005724:	46b2      	mov	sl, r6
 8005726:	eb19 0309 	adds.w	r3, r9, r9
 800572a:	eb4a 040a 	adc.w	r4, sl, sl
 800572e:	4699      	mov	r9, r3
 8005730:	46a2      	mov	sl, r4
 8005732:	eb19 0905 	adds.w	r9, r9, r5
 8005736:	eb4a 0a06 	adc.w	sl, sl, r6
 800573a:	f04f 0100 	mov.w	r1, #0
 800573e:	f04f 0200 	mov.w	r2, #0
 8005742:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005746:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800574a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800574e:	4689      	mov	r9, r1
 8005750:	4692      	mov	sl, r2
 8005752:	eb19 0005 	adds.w	r0, r9, r5
 8005756:	eb4a 0106 	adc.w	r1, sl, r6
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	685b      	ldr	r3, [r3, #4]
 800575e:	461d      	mov	r5, r3
 8005760:	f04f 0600 	mov.w	r6, #0
 8005764:	196b      	adds	r3, r5, r5
 8005766:	eb46 0406 	adc.w	r4, r6, r6
 800576a:	461a      	mov	r2, r3
 800576c:	4623      	mov	r3, r4
 800576e:	f7fa fd7f 	bl	8000270 <__aeabi_uldivmod>
 8005772:	4603      	mov	r3, r0
 8005774:	460c      	mov	r4, r1
 8005776:	461a      	mov	r2, r3
 8005778:	4b6a      	ldr	r3, [pc, #424]	; (8005924 <UART_SetConfig+0x384>)
 800577a:	fba3 1302 	umull	r1, r3, r3, r2
 800577e:	095b      	lsrs	r3, r3, #5
 8005780:	2164      	movs	r1, #100	; 0x64
 8005782:	fb01 f303 	mul.w	r3, r1, r3
 8005786:	1ad3      	subs	r3, r2, r3
 8005788:	00db      	lsls	r3, r3, #3
 800578a:	3332      	adds	r3, #50	; 0x32
 800578c:	4a65      	ldr	r2, [pc, #404]	; (8005924 <UART_SetConfig+0x384>)
 800578e:	fba2 2303 	umull	r2, r3, r2, r3
 8005792:	095b      	lsrs	r3, r3, #5
 8005794:	f003 0207 	and.w	r2, r3, #7
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	4442      	add	r2, r8
 800579e:	609a      	str	r2, [r3, #8]
 80057a0:	e26f      	b.n	8005c82 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80057a2:	f7ff f827 	bl	80047f4 <HAL_RCC_GetPCLK1Freq>
 80057a6:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80057a8:	68bb      	ldr	r3, [r7, #8]
 80057aa:	461d      	mov	r5, r3
 80057ac:	f04f 0600 	mov.w	r6, #0
 80057b0:	46a8      	mov	r8, r5
 80057b2:	46b1      	mov	r9, r6
 80057b4:	eb18 0308 	adds.w	r3, r8, r8
 80057b8:	eb49 0409 	adc.w	r4, r9, r9
 80057bc:	4698      	mov	r8, r3
 80057be:	46a1      	mov	r9, r4
 80057c0:	eb18 0805 	adds.w	r8, r8, r5
 80057c4:	eb49 0906 	adc.w	r9, r9, r6
 80057c8:	f04f 0100 	mov.w	r1, #0
 80057cc:	f04f 0200 	mov.w	r2, #0
 80057d0:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80057d4:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80057d8:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80057dc:	4688      	mov	r8, r1
 80057de:	4691      	mov	r9, r2
 80057e0:	eb18 0005 	adds.w	r0, r8, r5
 80057e4:	eb49 0106 	adc.w	r1, r9, r6
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	685b      	ldr	r3, [r3, #4]
 80057ec:	461d      	mov	r5, r3
 80057ee:	f04f 0600 	mov.w	r6, #0
 80057f2:	196b      	adds	r3, r5, r5
 80057f4:	eb46 0406 	adc.w	r4, r6, r6
 80057f8:	461a      	mov	r2, r3
 80057fa:	4623      	mov	r3, r4
 80057fc:	f7fa fd38 	bl	8000270 <__aeabi_uldivmod>
 8005800:	4603      	mov	r3, r0
 8005802:	460c      	mov	r4, r1
 8005804:	461a      	mov	r2, r3
 8005806:	4b47      	ldr	r3, [pc, #284]	; (8005924 <UART_SetConfig+0x384>)
 8005808:	fba3 2302 	umull	r2, r3, r3, r2
 800580c:	095b      	lsrs	r3, r3, #5
 800580e:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8005812:	68bb      	ldr	r3, [r7, #8]
 8005814:	461d      	mov	r5, r3
 8005816:	f04f 0600 	mov.w	r6, #0
 800581a:	46a9      	mov	r9, r5
 800581c:	46b2      	mov	sl, r6
 800581e:	eb19 0309 	adds.w	r3, r9, r9
 8005822:	eb4a 040a 	adc.w	r4, sl, sl
 8005826:	4699      	mov	r9, r3
 8005828:	46a2      	mov	sl, r4
 800582a:	eb19 0905 	adds.w	r9, r9, r5
 800582e:	eb4a 0a06 	adc.w	sl, sl, r6
 8005832:	f04f 0100 	mov.w	r1, #0
 8005836:	f04f 0200 	mov.w	r2, #0
 800583a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800583e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005842:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005846:	4689      	mov	r9, r1
 8005848:	4692      	mov	sl, r2
 800584a:	eb19 0005 	adds.w	r0, r9, r5
 800584e:	eb4a 0106 	adc.w	r1, sl, r6
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	685b      	ldr	r3, [r3, #4]
 8005856:	461d      	mov	r5, r3
 8005858:	f04f 0600 	mov.w	r6, #0
 800585c:	196b      	adds	r3, r5, r5
 800585e:	eb46 0406 	adc.w	r4, r6, r6
 8005862:	461a      	mov	r2, r3
 8005864:	4623      	mov	r3, r4
 8005866:	f7fa fd03 	bl	8000270 <__aeabi_uldivmod>
 800586a:	4603      	mov	r3, r0
 800586c:	460c      	mov	r4, r1
 800586e:	461a      	mov	r2, r3
 8005870:	4b2c      	ldr	r3, [pc, #176]	; (8005924 <UART_SetConfig+0x384>)
 8005872:	fba3 1302 	umull	r1, r3, r3, r2
 8005876:	095b      	lsrs	r3, r3, #5
 8005878:	2164      	movs	r1, #100	; 0x64
 800587a:	fb01 f303 	mul.w	r3, r1, r3
 800587e:	1ad3      	subs	r3, r2, r3
 8005880:	00db      	lsls	r3, r3, #3
 8005882:	3332      	adds	r3, #50	; 0x32
 8005884:	4a27      	ldr	r2, [pc, #156]	; (8005924 <UART_SetConfig+0x384>)
 8005886:	fba2 2303 	umull	r2, r3, r2, r3
 800588a:	095b      	lsrs	r3, r3, #5
 800588c:	005b      	lsls	r3, r3, #1
 800588e:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005892:	4498      	add	r8, r3
 8005894:	68bb      	ldr	r3, [r7, #8]
 8005896:	461d      	mov	r5, r3
 8005898:	f04f 0600 	mov.w	r6, #0
 800589c:	46a9      	mov	r9, r5
 800589e:	46b2      	mov	sl, r6
 80058a0:	eb19 0309 	adds.w	r3, r9, r9
 80058a4:	eb4a 040a 	adc.w	r4, sl, sl
 80058a8:	4699      	mov	r9, r3
 80058aa:	46a2      	mov	sl, r4
 80058ac:	eb19 0905 	adds.w	r9, r9, r5
 80058b0:	eb4a 0a06 	adc.w	sl, sl, r6
 80058b4:	f04f 0100 	mov.w	r1, #0
 80058b8:	f04f 0200 	mov.w	r2, #0
 80058bc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80058c0:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80058c4:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80058c8:	4689      	mov	r9, r1
 80058ca:	4692      	mov	sl, r2
 80058cc:	eb19 0005 	adds.w	r0, r9, r5
 80058d0:	eb4a 0106 	adc.w	r1, sl, r6
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	685b      	ldr	r3, [r3, #4]
 80058d8:	461d      	mov	r5, r3
 80058da:	f04f 0600 	mov.w	r6, #0
 80058de:	196b      	adds	r3, r5, r5
 80058e0:	eb46 0406 	adc.w	r4, r6, r6
 80058e4:	461a      	mov	r2, r3
 80058e6:	4623      	mov	r3, r4
 80058e8:	f7fa fcc2 	bl	8000270 <__aeabi_uldivmod>
 80058ec:	4603      	mov	r3, r0
 80058ee:	460c      	mov	r4, r1
 80058f0:	461a      	mov	r2, r3
 80058f2:	4b0c      	ldr	r3, [pc, #48]	; (8005924 <UART_SetConfig+0x384>)
 80058f4:	fba3 1302 	umull	r1, r3, r3, r2
 80058f8:	095b      	lsrs	r3, r3, #5
 80058fa:	2164      	movs	r1, #100	; 0x64
 80058fc:	fb01 f303 	mul.w	r3, r1, r3
 8005900:	1ad3      	subs	r3, r2, r3
 8005902:	00db      	lsls	r3, r3, #3
 8005904:	3332      	adds	r3, #50	; 0x32
 8005906:	4a07      	ldr	r2, [pc, #28]	; (8005924 <UART_SetConfig+0x384>)
 8005908:	fba2 2303 	umull	r2, r3, r2, r3
 800590c:	095b      	lsrs	r3, r3, #5
 800590e:	f003 0207 	and.w	r2, r3, #7
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	4442      	add	r2, r8
 8005918:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 800591a:	e1b2      	b.n	8005c82 <UART_SetConfig+0x6e2>
 800591c:	40011000 	.word	0x40011000
 8005920:	40011400 	.word	0x40011400
 8005924:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	4ad7      	ldr	r2, [pc, #860]	; (8005c8c <UART_SetConfig+0x6ec>)
 800592e:	4293      	cmp	r3, r2
 8005930:	d005      	beq.n	800593e <UART_SetConfig+0x39e>
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	4ad6      	ldr	r2, [pc, #856]	; (8005c90 <UART_SetConfig+0x6f0>)
 8005938:	4293      	cmp	r3, r2
 800593a:	f040 80d1 	bne.w	8005ae0 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 800593e:	f7fe ff6d 	bl	800481c <HAL_RCC_GetPCLK2Freq>
 8005942:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005944:	68bb      	ldr	r3, [r7, #8]
 8005946:	469a      	mov	sl, r3
 8005948:	f04f 0b00 	mov.w	fp, #0
 800594c:	46d0      	mov	r8, sl
 800594e:	46d9      	mov	r9, fp
 8005950:	eb18 0308 	adds.w	r3, r8, r8
 8005954:	eb49 0409 	adc.w	r4, r9, r9
 8005958:	4698      	mov	r8, r3
 800595a:	46a1      	mov	r9, r4
 800595c:	eb18 080a 	adds.w	r8, r8, sl
 8005960:	eb49 090b 	adc.w	r9, r9, fp
 8005964:	f04f 0100 	mov.w	r1, #0
 8005968:	f04f 0200 	mov.w	r2, #0
 800596c:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8005970:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8005974:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8005978:	4688      	mov	r8, r1
 800597a:	4691      	mov	r9, r2
 800597c:	eb1a 0508 	adds.w	r5, sl, r8
 8005980:	eb4b 0609 	adc.w	r6, fp, r9
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	685b      	ldr	r3, [r3, #4]
 8005988:	4619      	mov	r1, r3
 800598a:	f04f 0200 	mov.w	r2, #0
 800598e:	f04f 0300 	mov.w	r3, #0
 8005992:	f04f 0400 	mov.w	r4, #0
 8005996:	0094      	lsls	r4, r2, #2
 8005998:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800599c:	008b      	lsls	r3, r1, #2
 800599e:	461a      	mov	r2, r3
 80059a0:	4623      	mov	r3, r4
 80059a2:	4628      	mov	r0, r5
 80059a4:	4631      	mov	r1, r6
 80059a6:	f7fa fc63 	bl	8000270 <__aeabi_uldivmod>
 80059aa:	4603      	mov	r3, r0
 80059ac:	460c      	mov	r4, r1
 80059ae:	461a      	mov	r2, r3
 80059b0:	4bb8      	ldr	r3, [pc, #736]	; (8005c94 <UART_SetConfig+0x6f4>)
 80059b2:	fba3 2302 	umull	r2, r3, r3, r2
 80059b6:	095b      	lsrs	r3, r3, #5
 80059b8:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80059bc:	68bb      	ldr	r3, [r7, #8]
 80059be:	469b      	mov	fp, r3
 80059c0:	f04f 0c00 	mov.w	ip, #0
 80059c4:	46d9      	mov	r9, fp
 80059c6:	46e2      	mov	sl, ip
 80059c8:	eb19 0309 	adds.w	r3, r9, r9
 80059cc:	eb4a 040a 	adc.w	r4, sl, sl
 80059d0:	4699      	mov	r9, r3
 80059d2:	46a2      	mov	sl, r4
 80059d4:	eb19 090b 	adds.w	r9, r9, fp
 80059d8:	eb4a 0a0c 	adc.w	sl, sl, ip
 80059dc:	f04f 0100 	mov.w	r1, #0
 80059e0:	f04f 0200 	mov.w	r2, #0
 80059e4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80059e8:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80059ec:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80059f0:	4689      	mov	r9, r1
 80059f2:	4692      	mov	sl, r2
 80059f4:	eb1b 0509 	adds.w	r5, fp, r9
 80059f8:	eb4c 060a 	adc.w	r6, ip, sl
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	685b      	ldr	r3, [r3, #4]
 8005a00:	4619      	mov	r1, r3
 8005a02:	f04f 0200 	mov.w	r2, #0
 8005a06:	f04f 0300 	mov.w	r3, #0
 8005a0a:	f04f 0400 	mov.w	r4, #0
 8005a0e:	0094      	lsls	r4, r2, #2
 8005a10:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8005a14:	008b      	lsls	r3, r1, #2
 8005a16:	461a      	mov	r2, r3
 8005a18:	4623      	mov	r3, r4
 8005a1a:	4628      	mov	r0, r5
 8005a1c:	4631      	mov	r1, r6
 8005a1e:	f7fa fc27 	bl	8000270 <__aeabi_uldivmod>
 8005a22:	4603      	mov	r3, r0
 8005a24:	460c      	mov	r4, r1
 8005a26:	461a      	mov	r2, r3
 8005a28:	4b9a      	ldr	r3, [pc, #616]	; (8005c94 <UART_SetConfig+0x6f4>)
 8005a2a:	fba3 1302 	umull	r1, r3, r3, r2
 8005a2e:	095b      	lsrs	r3, r3, #5
 8005a30:	2164      	movs	r1, #100	; 0x64
 8005a32:	fb01 f303 	mul.w	r3, r1, r3
 8005a36:	1ad3      	subs	r3, r2, r3
 8005a38:	011b      	lsls	r3, r3, #4
 8005a3a:	3332      	adds	r3, #50	; 0x32
 8005a3c:	4a95      	ldr	r2, [pc, #596]	; (8005c94 <UART_SetConfig+0x6f4>)
 8005a3e:	fba2 2303 	umull	r2, r3, r2, r3
 8005a42:	095b      	lsrs	r3, r3, #5
 8005a44:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005a48:	4498      	add	r8, r3
 8005a4a:	68bb      	ldr	r3, [r7, #8]
 8005a4c:	469b      	mov	fp, r3
 8005a4e:	f04f 0c00 	mov.w	ip, #0
 8005a52:	46d9      	mov	r9, fp
 8005a54:	46e2      	mov	sl, ip
 8005a56:	eb19 0309 	adds.w	r3, r9, r9
 8005a5a:	eb4a 040a 	adc.w	r4, sl, sl
 8005a5e:	4699      	mov	r9, r3
 8005a60:	46a2      	mov	sl, r4
 8005a62:	eb19 090b 	adds.w	r9, r9, fp
 8005a66:	eb4a 0a0c 	adc.w	sl, sl, ip
 8005a6a:	f04f 0100 	mov.w	r1, #0
 8005a6e:	f04f 0200 	mov.w	r2, #0
 8005a72:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005a76:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005a7a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005a7e:	4689      	mov	r9, r1
 8005a80:	4692      	mov	sl, r2
 8005a82:	eb1b 0509 	adds.w	r5, fp, r9
 8005a86:	eb4c 060a 	adc.w	r6, ip, sl
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	685b      	ldr	r3, [r3, #4]
 8005a8e:	4619      	mov	r1, r3
 8005a90:	f04f 0200 	mov.w	r2, #0
 8005a94:	f04f 0300 	mov.w	r3, #0
 8005a98:	f04f 0400 	mov.w	r4, #0
 8005a9c:	0094      	lsls	r4, r2, #2
 8005a9e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8005aa2:	008b      	lsls	r3, r1, #2
 8005aa4:	461a      	mov	r2, r3
 8005aa6:	4623      	mov	r3, r4
 8005aa8:	4628      	mov	r0, r5
 8005aaa:	4631      	mov	r1, r6
 8005aac:	f7fa fbe0 	bl	8000270 <__aeabi_uldivmod>
 8005ab0:	4603      	mov	r3, r0
 8005ab2:	460c      	mov	r4, r1
 8005ab4:	461a      	mov	r2, r3
 8005ab6:	4b77      	ldr	r3, [pc, #476]	; (8005c94 <UART_SetConfig+0x6f4>)
 8005ab8:	fba3 1302 	umull	r1, r3, r3, r2
 8005abc:	095b      	lsrs	r3, r3, #5
 8005abe:	2164      	movs	r1, #100	; 0x64
 8005ac0:	fb01 f303 	mul.w	r3, r1, r3
 8005ac4:	1ad3      	subs	r3, r2, r3
 8005ac6:	011b      	lsls	r3, r3, #4
 8005ac8:	3332      	adds	r3, #50	; 0x32
 8005aca:	4a72      	ldr	r2, [pc, #456]	; (8005c94 <UART_SetConfig+0x6f4>)
 8005acc:	fba2 2303 	umull	r2, r3, r2, r3
 8005ad0:	095b      	lsrs	r3, r3, #5
 8005ad2:	f003 020f 	and.w	r2, r3, #15
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	4442      	add	r2, r8
 8005adc:	609a      	str	r2, [r3, #8]
 8005ade:	e0d0      	b.n	8005c82 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8005ae0:	f7fe fe88 	bl	80047f4 <HAL_RCC_GetPCLK1Freq>
 8005ae4:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005ae6:	68bb      	ldr	r3, [r7, #8]
 8005ae8:	469a      	mov	sl, r3
 8005aea:	f04f 0b00 	mov.w	fp, #0
 8005aee:	46d0      	mov	r8, sl
 8005af0:	46d9      	mov	r9, fp
 8005af2:	eb18 0308 	adds.w	r3, r8, r8
 8005af6:	eb49 0409 	adc.w	r4, r9, r9
 8005afa:	4698      	mov	r8, r3
 8005afc:	46a1      	mov	r9, r4
 8005afe:	eb18 080a 	adds.w	r8, r8, sl
 8005b02:	eb49 090b 	adc.w	r9, r9, fp
 8005b06:	f04f 0100 	mov.w	r1, #0
 8005b0a:	f04f 0200 	mov.w	r2, #0
 8005b0e:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8005b12:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8005b16:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8005b1a:	4688      	mov	r8, r1
 8005b1c:	4691      	mov	r9, r2
 8005b1e:	eb1a 0508 	adds.w	r5, sl, r8
 8005b22:	eb4b 0609 	adc.w	r6, fp, r9
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	685b      	ldr	r3, [r3, #4]
 8005b2a:	4619      	mov	r1, r3
 8005b2c:	f04f 0200 	mov.w	r2, #0
 8005b30:	f04f 0300 	mov.w	r3, #0
 8005b34:	f04f 0400 	mov.w	r4, #0
 8005b38:	0094      	lsls	r4, r2, #2
 8005b3a:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8005b3e:	008b      	lsls	r3, r1, #2
 8005b40:	461a      	mov	r2, r3
 8005b42:	4623      	mov	r3, r4
 8005b44:	4628      	mov	r0, r5
 8005b46:	4631      	mov	r1, r6
 8005b48:	f7fa fb92 	bl	8000270 <__aeabi_uldivmod>
 8005b4c:	4603      	mov	r3, r0
 8005b4e:	460c      	mov	r4, r1
 8005b50:	461a      	mov	r2, r3
 8005b52:	4b50      	ldr	r3, [pc, #320]	; (8005c94 <UART_SetConfig+0x6f4>)
 8005b54:	fba3 2302 	umull	r2, r3, r3, r2
 8005b58:	095b      	lsrs	r3, r3, #5
 8005b5a:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8005b5e:	68bb      	ldr	r3, [r7, #8]
 8005b60:	469b      	mov	fp, r3
 8005b62:	f04f 0c00 	mov.w	ip, #0
 8005b66:	46d9      	mov	r9, fp
 8005b68:	46e2      	mov	sl, ip
 8005b6a:	eb19 0309 	adds.w	r3, r9, r9
 8005b6e:	eb4a 040a 	adc.w	r4, sl, sl
 8005b72:	4699      	mov	r9, r3
 8005b74:	46a2      	mov	sl, r4
 8005b76:	eb19 090b 	adds.w	r9, r9, fp
 8005b7a:	eb4a 0a0c 	adc.w	sl, sl, ip
 8005b7e:	f04f 0100 	mov.w	r1, #0
 8005b82:	f04f 0200 	mov.w	r2, #0
 8005b86:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005b8a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005b8e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005b92:	4689      	mov	r9, r1
 8005b94:	4692      	mov	sl, r2
 8005b96:	eb1b 0509 	adds.w	r5, fp, r9
 8005b9a:	eb4c 060a 	adc.w	r6, ip, sl
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	685b      	ldr	r3, [r3, #4]
 8005ba2:	4619      	mov	r1, r3
 8005ba4:	f04f 0200 	mov.w	r2, #0
 8005ba8:	f04f 0300 	mov.w	r3, #0
 8005bac:	f04f 0400 	mov.w	r4, #0
 8005bb0:	0094      	lsls	r4, r2, #2
 8005bb2:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8005bb6:	008b      	lsls	r3, r1, #2
 8005bb8:	461a      	mov	r2, r3
 8005bba:	4623      	mov	r3, r4
 8005bbc:	4628      	mov	r0, r5
 8005bbe:	4631      	mov	r1, r6
 8005bc0:	f7fa fb56 	bl	8000270 <__aeabi_uldivmod>
 8005bc4:	4603      	mov	r3, r0
 8005bc6:	460c      	mov	r4, r1
 8005bc8:	461a      	mov	r2, r3
 8005bca:	4b32      	ldr	r3, [pc, #200]	; (8005c94 <UART_SetConfig+0x6f4>)
 8005bcc:	fba3 1302 	umull	r1, r3, r3, r2
 8005bd0:	095b      	lsrs	r3, r3, #5
 8005bd2:	2164      	movs	r1, #100	; 0x64
 8005bd4:	fb01 f303 	mul.w	r3, r1, r3
 8005bd8:	1ad3      	subs	r3, r2, r3
 8005bda:	011b      	lsls	r3, r3, #4
 8005bdc:	3332      	adds	r3, #50	; 0x32
 8005bde:	4a2d      	ldr	r2, [pc, #180]	; (8005c94 <UART_SetConfig+0x6f4>)
 8005be0:	fba2 2303 	umull	r2, r3, r2, r3
 8005be4:	095b      	lsrs	r3, r3, #5
 8005be6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005bea:	4498      	add	r8, r3
 8005bec:	68bb      	ldr	r3, [r7, #8]
 8005bee:	469b      	mov	fp, r3
 8005bf0:	f04f 0c00 	mov.w	ip, #0
 8005bf4:	46d9      	mov	r9, fp
 8005bf6:	46e2      	mov	sl, ip
 8005bf8:	eb19 0309 	adds.w	r3, r9, r9
 8005bfc:	eb4a 040a 	adc.w	r4, sl, sl
 8005c00:	4699      	mov	r9, r3
 8005c02:	46a2      	mov	sl, r4
 8005c04:	eb19 090b 	adds.w	r9, r9, fp
 8005c08:	eb4a 0a0c 	adc.w	sl, sl, ip
 8005c0c:	f04f 0100 	mov.w	r1, #0
 8005c10:	f04f 0200 	mov.w	r2, #0
 8005c14:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005c18:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005c1c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005c20:	4689      	mov	r9, r1
 8005c22:	4692      	mov	sl, r2
 8005c24:	eb1b 0509 	adds.w	r5, fp, r9
 8005c28:	eb4c 060a 	adc.w	r6, ip, sl
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	685b      	ldr	r3, [r3, #4]
 8005c30:	4619      	mov	r1, r3
 8005c32:	f04f 0200 	mov.w	r2, #0
 8005c36:	f04f 0300 	mov.w	r3, #0
 8005c3a:	f04f 0400 	mov.w	r4, #0
 8005c3e:	0094      	lsls	r4, r2, #2
 8005c40:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8005c44:	008b      	lsls	r3, r1, #2
 8005c46:	461a      	mov	r2, r3
 8005c48:	4623      	mov	r3, r4
 8005c4a:	4628      	mov	r0, r5
 8005c4c:	4631      	mov	r1, r6
 8005c4e:	f7fa fb0f 	bl	8000270 <__aeabi_uldivmod>
 8005c52:	4603      	mov	r3, r0
 8005c54:	460c      	mov	r4, r1
 8005c56:	461a      	mov	r2, r3
 8005c58:	4b0e      	ldr	r3, [pc, #56]	; (8005c94 <UART_SetConfig+0x6f4>)
 8005c5a:	fba3 1302 	umull	r1, r3, r3, r2
 8005c5e:	095b      	lsrs	r3, r3, #5
 8005c60:	2164      	movs	r1, #100	; 0x64
 8005c62:	fb01 f303 	mul.w	r3, r1, r3
 8005c66:	1ad3      	subs	r3, r2, r3
 8005c68:	011b      	lsls	r3, r3, #4
 8005c6a:	3332      	adds	r3, #50	; 0x32
 8005c6c:	4a09      	ldr	r2, [pc, #36]	; (8005c94 <UART_SetConfig+0x6f4>)
 8005c6e:	fba2 2303 	umull	r2, r3, r2, r3
 8005c72:	095b      	lsrs	r3, r3, #5
 8005c74:	f003 020f 	and.w	r2, r3, #15
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	4442      	add	r2, r8
 8005c7e:	609a      	str	r2, [r3, #8]
}
 8005c80:	e7ff      	b.n	8005c82 <UART_SetConfig+0x6e2>
 8005c82:	bf00      	nop
 8005c84:	3714      	adds	r7, #20
 8005c86:	46bd      	mov	sp, r7
 8005c88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005c8c:	40011000 	.word	0x40011000
 8005c90:	40011400 	.word	0x40011400
 8005c94:	51eb851f 	.word	0x51eb851f

08005c98 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005c98:	b084      	sub	sp, #16
 8005c9a:	b580      	push	{r7, lr}
 8005c9c:	b084      	sub	sp, #16
 8005c9e:	af00      	add	r7, sp, #0
 8005ca0:	6078      	str	r0, [r7, #4]
 8005ca2:	f107 001c 	add.w	r0, r7, #28
 8005ca6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005caa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cac:	2b01      	cmp	r3, #1
 8005cae:	d122      	bne.n	8005cf6 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005cb4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	68db      	ldr	r3, [r3, #12]
 8005cc0:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8005cc4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005cc8:	687a      	ldr	r2, [r7, #4]
 8005cca:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	68db      	ldr	r3, [r3, #12]
 8005cd0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8005cd8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005cda:	2b01      	cmp	r3, #1
 8005cdc:	d105      	bne.n	8005cea <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	68db      	ldr	r3, [r3, #12]
 8005ce2:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8005cea:	6878      	ldr	r0, [r7, #4]
 8005cec:	f001 fac6 	bl	800727c <USB_CoreReset>
 8005cf0:	4603      	mov	r3, r0
 8005cf2:	73fb      	strb	r3, [r7, #15]
 8005cf4:	e01a      	b.n	8005d2c <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	68db      	ldr	r3, [r3, #12]
 8005cfa:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005d02:	6878      	ldr	r0, [r7, #4]
 8005d04:	f001 faba 	bl	800727c <USB_CoreReset>
 8005d08:	4603      	mov	r3, r0
 8005d0a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8005d0c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	d106      	bne.n	8005d20 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d16:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	639a      	str	r2, [r3, #56]	; 0x38
 8005d1e:	e005      	b.n	8005d2c <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d24:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8005d2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d2e:	2b01      	cmp	r3, #1
 8005d30:	d10b      	bne.n	8005d4a <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	689b      	ldr	r3, [r3, #8]
 8005d36:	f043 0206 	orr.w	r2, r3, #6
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	689b      	ldr	r3, [r3, #8]
 8005d42:	f043 0220 	orr.w	r2, r3, #32
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8005d4a:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d4c:	4618      	mov	r0, r3
 8005d4e:	3710      	adds	r7, #16
 8005d50:	46bd      	mov	sp, r7
 8005d52:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005d56:	b004      	add	sp, #16
 8005d58:	4770      	bx	lr
	...

08005d5c <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8005d5c:	b480      	push	{r7}
 8005d5e:	b087      	sub	sp, #28
 8005d60:	af00      	add	r7, sp, #0
 8005d62:	60f8      	str	r0, [r7, #12]
 8005d64:	60b9      	str	r1, [r7, #8]
 8005d66:	4613      	mov	r3, r2
 8005d68:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8005d6a:	79fb      	ldrb	r3, [r7, #7]
 8005d6c:	2b02      	cmp	r3, #2
 8005d6e:	d165      	bne.n	8005e3c <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8005d70:	68bb      	ldr	r3, [r7, #8]
 8005d72:	4a41      	ldr	r2, [pc, #260]	; (8005e78 <USB_SetTurnaroundTime+0x11c>)
 8005d74:	4293      	cmp	r3, r2
 8005d76:	d906      	bls.n	8005d86 <USB_SetTurnaroundTime+0x2a>
 8005d78:	68bb      	ldr	r3, [r7, #8]
 8005d7a:	4a40      	ldr	r2, [pc, #256]	; (8005e7c <USB_SetTurnaroundTime+0x120>)
 8005d7c:	4293      	cmp	r3, r2
 8005d7e:	d802      	bhi.n	8005d86 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8005d80:	230f      	movs	r3, #15
 8005d82:	617b      	str	r3, [r7, #20]
 8005d84:	e062      	b.n	8005e4c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8005d86:	68bb      	ldr	r3, [r7, #8]
 8005d88:	4a3c      	ldr	r2, [pc, #240]	; (8005e7c <USB_SetTurnaroundTime+0x120>)
 8005d8a:	4293      	cmp	r3, r2
 8005d8c:	d906      	bls.n	8005d9c <USB_SetTurnaroundTime+0x40>
 8005d8e:	68bb      	ldr	r3, [r7, #8]
 8005d90:	4a3b      	ldr	r2, [pc, #236]	; (8005e80 <USB_SetTurnaroundTime+0x124>)
 8005d92:	4293      	cmp	r3, r2
 8005d94:	d802      	bhi.n	8005d9c <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8005d96:	230e      	movs	r3, #14
 8005d98:	617b      	str	r3, [r7, #20]
 8005d9a:	e057      	b.n	8005e4c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8005d9c:	68bb      	ldr	r3, [r7, #8]
 8005d9e:	4a38      	ldr	r2, [pc, #224]	; (8005e80 <USB_SetTurnaroundTime+0x124>)
 8005da0:	4293      	cmp	r3, r2
 8005da2:	d906      	bls.n	8005db2 <USB_SetTurnaroundTime+0x56>
 8005da4:	68bb      	ldr	r3, [r7, #8]
 8005da6:	4a37      	ldr	r2, [pc, #220]	; (8005e84 <USB_SetTurnaroundTime+0x128>)
 8005da8:	4293      	cmp	r3, r2
 8005daa:	d802      	bhi.n	8005db2 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8005dac:	230d      	movs	r3, #13
 8005dae:	617b      	str	r3, [r7, #20]
 8005db0:	e04c      	b.n	8005e4c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8005db2:	68bb      	ldr	r3, [r7, #8]
 8005db4:	4a33      	ldr	r2, [pc, #204]	; (8005e84 <USB_SetTurnaroundTime+0x128>)
 8005db6:	4293      	cmp	r3, r2
 8005db8:	d906      	bls.n	8005dc8 <USB_SetTurnaroundTime+0x6c>
 8005dba:	68bb      	ldr	r3, [r7, #8]
 8005dbc:	4a32      	ldr	r2, [pc, #200]	; (8005e88 <USB_SetTurnaroundTime+0x12c>)
 8005dbe:	4293      	cmp	r3, r2
 8005dc0:	d802      	bhi.n	8005dc8 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8005dc2:	230c      	movs	r3, #12
 8005dc4:	617b      	str	r3, [r7, #20]
 8005dc6:	e041      	b.n	8005e4c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8005dc8:	68bb      	ldr	r3, [r7, #8]
 8005dca:	4a2f      	ldr	r2, [pc, #188]	; (8005e88 <USB_SetTurnaroundTime+0x12c>)
 8005dcc:	4293      	cmp	r3, r2
 8005dce:	d906      	bls.n	8005dde <USB_SetTurnaroundTime+0x82>
 8005dd0:	68bb      	ldr	r3, [r7, #8]
 8005dd2:	4a2e      	ldr	r2, [pc, #184]	; (8005e8c <USB_SetTurnaroundTime+0x130>)
 8005dd4:	4293      	cmp	r3, r2
 8005dd6:	d802      	bhi.n	8005dde <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8005dd8:	230b      	movs	r3, #11
 8005dda:	617b      	str	r3, [r7, #20]
 8005ddc:	e036      	b.n	8005e4c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8005dde:	68bb      	ldr	r3, [r7, #8]
 8005de0:	4a2a      	ldr	r2, [pc, #168]	; (8005e8c <USB_SetTurnaroundTime+0x130>)
 8005de2:	4293      	cmp	r3, r2
 8005de4:	d906      	bls.n	8005df4 <USB_SetTurnaroundTime+0x98>
 8005de6:	68bb      	ldr	r3, [r7, #8]
 8005de8:	4a29      	ldr	r2, [pc, #164]	; (8005e90 <USB_SetTurnaroundTime+0x134>)
 8005dea:	4293      	cmp	r3, r2
 8005dec:	d802      	bhi.n	8005df4 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8005dee:	230a      	movs	r3, #10
 8005df0:	617b      	str	r3, [r7, #20]
 8005df2:	e02b      	b.n	8005e4c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8005df4:	68bb      	ldr	r3, [r7, #8]
 8005df6:	4a26      	ldr	r2, [pc, #152]	; (8005e90 <USB_SetTurnaroundTime+0x134>)
 8005df8:	4293      	cmp	r3, r2
 8005dfa:	d906      	bls.n	8005e0a <USB_SetTurnaroundTime+0xae>
 8005dfc:	68bb      	ldr	r3, [r7, #8]
 8005dfe:	4a25      	ldr	r2, [pc, #148]	; (8005e94 <USB_SetTurnaroundTime+0x138>)
 8005e00:	4293      	cmp	r3, r2
 8005e02:	d802      	bhi.n	8005e0a <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8005e04:	2309      	movs	r3, #9
 8005e06:	617b      	str	r3, [r7, #20]
 8005e08:	e020      	b.n	8005e4c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8005e0a:	68bb      	ldr	r3, [r7, #8]
 8005e0c:	4a21      	ldr	r2, [pc, #132]	; (8005e94 <USB_SetTurnaroundTime+0x138>)
 8005e0e:	4293      	cmp	r3, r2
 8005e10:	d906      	bls.n	8005e20 <USB_SetTurnaroundTime+0xc4>
 8005e12:	68bb      	ldr	r3, [r7, #8]
 8005e14:	4a20      	ldr	r2, [pc, #128]	; (8005e98 <USB_SetTurnaroundTime+0x13c>)
 8005e16:	4293      	cmp	r3, r2
 8005e18:	d802      	bhi.n	8005e20 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8005e1a:	2308      	movs	r3, #8
 8005e1c:	617b      	str	r3, [r7, #20]
 8005e1e:	e015      	b.n	8005e4c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8005e20:	68bb      	ldr	r3, [r7, #8]
 8005e22:	4a1d      	ldr	r2, [pc, #116]	; (8005e98 <USB_SetTurnaroundTime+0x13c>)
 8005e24:	4293      	cmp	r3, r2
 8005e26:	d906      	bls.n	8005e36 <USB_SetTurnaroundTime+0xda>
 8005e28:	68bb      	ldr	r3, [r7, #8]
 8005e2a:	4a1c      	ldr	r2, [pc, #112]	; (8005e9c <USB_SetTurnaroundTime+0x140>)
 8005e2c:	4293      	cmp	r3, r2
 8005e2e:	d802      	bhi.n	8005e36 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8005e30:	2307      	movs	r3, #7
 8005e32:	617b      	str	r3, [r7, #20]
 8005e34:	e00a      	b.n	8005e4c <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8005e36:	2306      	movs	r3, #6
 8005e38:	617b      	str	r3, [r7, #20]
 8005e3a:	e007      	b.n	8005e4c <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8005e3c:	79fb      	ldrb	r3, [r7, #7]
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	d102      	bne.n	8005e48 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8005e42:	2309      	movs	r3, #9
 8005e44:	617b      	str	r3, [r7, #20]
 8005e46:	e001      	b.n	8005e4c <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8005e48:	2309      	movs	r3, #9
 8005e4a:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	68db      	ldr	r3, [r3, #12]
 8005e50:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	68da      	ldr	r2, [r3, #12]
 8005e5c:	697b      	ldr	r3, [r7, #20]
 8005e5e:	029b      	lsls	r3, r3, #10
 8005e60:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8005e64:	431a      	orrs	r2, r3
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8005e6a:	2300      	movs	r3, #0
}
 8005e6c:	4618      	mov	r0, r3
 8005e6e:	371c      	adds	r7, #28
 8005e70:	46bd      	mov	sp, r7
 8005e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e76:	4770      	bx	lr
 8005e78:	00d8acbf 	.word	0x00d8acbf
 8005e7c:	00e4e1bf 	.word	0x00e4e1bf
 8005e80:	00f423ff 	.word	0x00f423ff
 8005e84:	0106737f 	.word	0x0106737f
 8005e88:	011a499f 	.word	0x011a499f
 8005e8c:	01312cff 	.word	0x01312cff
 8005e90:	014ca43f 	.word	0x014ca43f
 8005e94:	016e35ff 	.word	0x016e35ff
 8005e98:	01a6ab1f 	.word	0x01a6ab1f
 8005e9c:	01e847ff 	.word	0x01e847ff

08005ea0 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005ea0:	b480      	push	{r7}
 8005ea2:	b083      	sub	sp, #12
 8005ea4:	af00      	add	r7, sp, #0
 8005ea6:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	689b      	ldr	r3, [r3, #8]
 8005eac:	f043 0201 	orr.w	r2, r3, #1
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005eb4:	2300      	movs	r3, #0
}
 8005eb6:	4618      	mov	r0, r3
 8005eb8:	370c      	adds	r7, #12
 8005eba:	46bd      	mov	sp, r7
 8005ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ec0:	4770      	bx	lr

08005ec2 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005ec2:	b480      	push	{r7}
 8005ec4:	b083      	sub	sp, #12
 8005ec6:	af00      	add	r7, sp, #0
 8005ec8:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	689b      	ldr	r3, [r3, #8]
 8005ece:	f023 0201 	bic.w	r2, r3, #1
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005ed6:	2300      	movs	r3, #0
}
 8005ed8:	4618      	mov	r0, r3
 8005eda:	370c      	adds	r7, #12
 8005edc:	46bd      	mov	sp, r7
 8005ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ee2:	4770      	bx	lr

08005ee4 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8005ee4:	b580      	push	{r7, lr}
 8005ee6:	b082      	sub	sp, #8
 8005ee8:	af00      	add	r7, sp, #0
 8005eea:	6078      	str	r0, [r7, #4]
 8005eec:	460b      	mov	r3, r1
 8005eee:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	68db      	ldr	r3, [r3, #12]
 8005ef4:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005efc:	78fb      	ldrb	r3, [r7, #3]
 8005efe:	2b01      	cmp	r3, #1
 8005f00:	d106      	bne.n	8005f10 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	68db      	ldr	r3, [r3, #12]
 8005f06:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	60da      	str	r2, [r3, #12]
 8005f0e:	e00b      	b.n	8005f28 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8005f10:	78fb      	ldrb	r3, [r7, #3]
 8005f12:	2b00      	cmp	r3, #0
 8005f14:	d106      	bne.n	8005f24 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	68db      	ldr	r3, [r3, #12]
 8005f1a:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	60da      	str	r2, [r3, #12]
 8005f22:	e001      	b.n	8005f28 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8005f24:	2301      	movs	r3, #1
 8005f26:	e003      	b.n	8005f30 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8005f28:	2032      	movs	r0, #50	; 0x32
 8005f2a:	f7fb fbb5 	bl	8001698 <HAL_Delay>

  return HAL_OK;
 8005f2e:	2300      	movs	r3, #0
}
 8005f30:	4618      	mov	r0, r3
 8005f32:	3708      	adds	r7, #8
 8005f34:	46bd      	mov	sp, r7
 8005f36:	bd80      	pop	{r7, pc}

08005f38 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005f38:	b084      	sub	sp, #16
 8005f3a:	b580      	push	{r7, lr}
 8005f3c:	b086      	sub	sp, #24
 8005f3e:	af00      	add	r7, sp, #0
 8005f40:	6078      	str	r0, [r7, #4]
 8005f42:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8005f46:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8005f4a:	2300      	movs	r3, #0
 8005f4c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8005f52:	2300      	movs	r3, #0
 8005f54:	613b      	str	r3, [r7, #16]
 8005f56:	e009      	b.n	8005f6c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8005f58:	687a      	ldr	r2, [r7, #4]
 8005f5a:	693b      	ldr	r3, [r7, #16]
 8005f5c:	3340      	adds	r3, #64	; 0x40
 8005f5e:	009b      	lsls	r3, r3, #2
 8005f60:	4413      	add	r3, r2
 8005f62:	2200      	movs	r2, #0
 8005f64:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8005f66:	693b      	ldr	r3, [r7, #16]
 8005f68:	3301      	adds	r3, #1
 8005f6a:	613b      	str	r3, [r7, #16]
 8005f6c:	693b      	ldr	r3, [r7, #16]
 8005f6e:	2b0e      	cmp	r3, #14
 8005f70:	d9f2      	bls.n	8005f58 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8005f72:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005f74:	2b00      	cmp	r3, #0
 8005f76:	d11c      	bne.n	8005fb2 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005f7e:	685b      	ldr	r3, [r3, #4]
 8005f80:	68fa      	ldr	r2, [r7, #12]
 8005f82:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005f86:	f043 0302 	orr.w	r3, r3, #2
 8005f8a:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f90:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f9c:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fa8:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	639a      	str	r2, [r3, #56]	; 0x38
 8005fb0:	e00b      	b.n	8005fca <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fb6:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fc2:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005fd0:	461a      	mov	r2, r3
 8005fd2:	2300      	movs	r3, #0
 8005fd4:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005fdc:	4619      	mov	r1, r3
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005fe4:	461a      	mov	r2, r3
 8005fe6:	680b      	ldr	r3, [r1, #0]
 8005fe8:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005fea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005fec:	2b01      	cmp	r3, #1
 8005fee:	d10c      	bne.n	800600a <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8005ff0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	d104      	bne.n	8006000 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8005ff6:	2100      	movs	r1, #0
 8005ff8:	6878      	ldr	r0, [r7, #4]
 8005ffa:	f000 f949 	bl	8006290 <USB_SetDevSpeed>
 8005ffe:	e008      	b.n	8006012 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8006000:	2101      	movs	r1, #1
 8006002:	6878      	ldr	r0, [r7, #4]
 8006004:	f000 f944 	bl	8006290 <USB_SetDevSpeed>
 8006008:	e003      	b.n	8006012 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800600a:	2103      	movs	r1, #3
 800600c:	6878      	ldr	r0, [r7, #4]
 800600e:	f000 f93f 	bl	8006290 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8006012:	2110      	movs	r1, #16
 8006014:	6878      	ldr	r0, [r7, #4]
 8006016:	f000 f8f3 	bl	8006200 <USB_FlushTxFifo>
 800601a:	4603      	mov	r3, r0
 800601c:	2b00      	cmp	r3, #0
 800601e:	d001      	beq.n	8006024 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8006020:	2301      	movs	r3, #1
 8006022:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8006024:	6878      	ldr	r0, [r7, #4]
 8006026:	f000 f911 	bl	800624c <USB_FlushRxFifo>
 800602a:	4603      	mov	r3, r0
 800602c:	2b00      	cmp	r3, #0
 800602e:	d001      	beq.n	8006034 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8006030:	2301      	movs	r3, #1
 8006032:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800603a:	461a      	mov	r2, r3
 800603c:	2300      	movs	r3, #0
 800603e:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006046:	461a      	mov	r2, r3
 8006048:	2300      	movs	r3, #0
 800604a:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006052:	461a      	mov	r2, r3
 8006054:	2300      	movs	r3, #0
 8006056:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006058:	2300      	movs	r3, #0
 800605a:	613b      	str	r3, [r7, #16]
 800605c:	e043      	b.n	80060e6 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800605e:	693b      	ldr	r3, [r7, #16]
 8006060:	015a      	lsls	r2, r3, #5
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	4413      	add	r3, r2
 8006066:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006070:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006074:	d118      	bne.n	80060a8 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8006076:	693b      	ldr	r3, [r7, #16]
 8006078:	2b00      	cmp	r3, #0
 800607a:	d10a      	bne.n	8006092 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800607c:	693b      	ldr	r3, [r7, #16]
 800607e:	015a      	lsls	r2, r3, #5
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	4413      	add	r3, r2
 8006084:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006088:	461a      	mov	r2, r3
 800608a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800608e:	6013      	str	r3, [r2, #0]
 8006090:	e013      	b.n	80060ba <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8006092:	693b      	ldr	r3, [r7, #16]
 8006094:	015a      	lsls	r2, r3, #5
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	4413      	add	r3, r2
 800609a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800609e:	461a      	mov	r2, r3
 80060a0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80060a4:	6013      	str	r3, [r2, #0]
 80060a6:	e008      	b.n	80060ba <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80060a8:	693b      	ldr	r3, [r7, #16]
 80060aa:	015a      	lsls	r2, r3, #5
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	4413      	add	r3, r2
 80060b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80060b4:	461a      	mov	r2, r3
 80060b6:	2300      	movs	r3, #0
 80060b8:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80060ba:	693b      	ldr	r3, [r7, #16]
 80060bc:	015a      	lsls	r2, r3, #5
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	4413      	add	r3, r2
 80060c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80060c6:	461a      	mov	r2, r3
 80060c8:	2300      	movs	r3, #0
 80060ca:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80060cc:	693b      	ldr	r3, [r7, #16]
 80060ce:	015a      	lsls	r2, r3, #5
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	4413      	add	r3, r2
 80060d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80060d8:	461a      	mov	r2, r3
 80060da:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80060de:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80060e0:	693b      	ldr	r3, [r7, #16]
 80060e2:	3301      	adds	r3, #1
 80060e4:	613b      	str	r3, [r7, #16]
 80060e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060e8:	693a      	ldr	r2, [r7, #16]
 80060ea:	429a      	cmp	r2, r3
 80060ec:	d3b7      	bcc.n	800605e <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80060ee:	2300      	movs	r3, #0
 80060f0:	613b      	str	r3, [r7, #16]
 80060f2:	e043      	b.n	800617c <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80060f4:	693b      	ldr	r3, [r7, #16]
 80060f6:	015a      	lsls	r2, r3, #5
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	4413      	add	r3, r2
 80060fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006106:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800610a:	d118      	bne.n	800613e <USB_DevInit+0x206>
    {
      if (i == 0U)
 800610c:	693b      	ldr	r3, [r7, #16]
 800610e:	2b00      	cmp	r3, #0
 8006110:	d10a      	bne.n	8006128 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8006112:	693b      	ldr	r3, [r7, #16]
 8006114:	015a      	lsls	r2, r3, #5
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	4413      	add	r3, r2
 800611a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800611e:	461a      	mov	r2, r3
 8006120:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006124:	6013      	str	r3, [r2, #0]
 8006126:	e013      	b.n	8006150 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8006128:	693b      	ldr	r3, [r7, #16]
 800612a:	015a      	lsls	r2, r3, #5
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	4413      	add	r3, r2
 8006130:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006134:	461a      	mov	r2, r3
 8006136:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800613a:	6013      	str	r3, [r2, #0]
 800613c:	e008      	b.n	8006150 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800613e:	693b      	ldr	r3, [r7, #16]
 8006140:	015a      	lsls	r2, r3, #5
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	4413      	add	r3, r2
 8006146:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800614a:	461a      	mov	r2, r3
 800614c:	2300      	movs	r3, #0
 800614e:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8006150:	693b      	ldr	r3, [r7, #16]
 8006152:	015a      	lsls	r2, r3, #5
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	4413      	add	r3, r2
 8006158:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800615c:	461a      	mov	r2, r3
 800615e:	2300      	movs	r3, #0
 8006160:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8006162:	693b      	ldr	r3, [r7, #16]
 8006164:	015a      	lsls	r2, r3, #5
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	4413      	add	r3, r2
 800616a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800616e:	461a      	mov	r2, r3
 8006170:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006174:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006176:	693b      	ldr	r3, [r7, #16]
 8006178:	3301      	adds	r3, #1
 800617a:	613b      	str	r3, [r7, #16]
 800617c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800617e:	693a      	ldr	r2, [r7, #16]
 8006180:	429a      	cmp	r2, r3
 8006182:	d3b7      	bcc.n	80060f4 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800618a:	691b      	ldr	r3, [r3, #16]
 800618c:	68fa      	ldr	r2, [r7, #12]
 800618e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006192:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006196:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	2200      	movs	r2, #0
 800619c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80061a4:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80061a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061a8:	2b00      	cmp	r3, #0
 80061aa:	d105      	bne.n	80061b8 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	699b      	ldr	r3, [r3, #24]
 80061b0:	f043 0210 	orr.w	r2, r3, #16
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	699a      	ldr	r2, [r3, #24]
 80061bc:	4b0f      	ldr	r3, [pc, #60]	; (80061fc <USB_DevInit+0x2c4>)
 80061be:	4313      	orrs	r3, r2
 80061c0:	687a      	ldr	r2, [r7, #4]
 80061c2:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80061c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	d005      	beq.n	80061d6 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	699b      	ldr	r3, [r3, #24]
 80061ce:	f043 0208 	orr.w	r2, r3, #8
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80061d6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80061d8:	2b01      	cmp	r3, #1
 80061da:	d107      	bne.n	80061ec <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	699b      	ldr	r3, [r3, #24]
 80061e0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80061e4:	f043 0304 	orr.w	r3, r3, #4
 80061e8:	687a      	ldr	r2, [r7, #4]
 80061ea:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80061ec:	7dfb      	ldrb	r3, [r7, #23]
}
 80061ee:	4618      	mov	r0, r3
 80061f0:	3718      	adds	r7, #24
 80061f2:	46bd      	mov	sp, r7
 80061f4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80061f8:	b004      	add	sp, #16
 80061fa:	4770      	bx	lr
 80061fc:	803c3800 	.word	0x803c3800

08006200 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8006200:	b480      	push	{r7}
 8006202:	b085      	sub	sp, #20
 8006204:	af00      	add	r7, sp, #0
 8006206:	6078      	str	r0, [r7, #4]
 8006208:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 800620a:	2300      	movs	r3, #0
 800620c:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800620e:	683b      	ldr	r3, [r7, #0]
 8006210:	019b      	lsls	r3, r3, #6
 8006212:	f043 0220 	orr.w	r2, r3, #32
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	3301      	adds	r3, #1
 800621e:	60fb      	str	r3, [r7, #12]
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	4a09      	ldr	r2, [pc, #36]	; (8006248 <USB_FlushTxFifo+0x48>)
 8006224:	4293      	cmp	r3, r2
 8006226:	d901      	bls.n	800622c <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8006228:	2303      	movs	r3, #3
 800622a:	e006      	b.n	800623a <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	691b      	ldr	r3, [r3, #16]
 8006230:	f003 0320 	and.w	r3, r3, #32
 8006234:	2b20      	cmp	r3, #32
 8006236:	d0f0      	beq.n	800621a <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8006238:	2300      	movs	r3, #0
}
 800623a:	4618      	mov	r0, r3
 800623c:	3714      	adds	r7, #20
 800623e:	46bd      	mov	sp, r7
 8006240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006244:	4770      	bx	lr
 8006246:	bf00      	nop
 8006248:	00030d40 	.word	0x00030d40

0800624c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800624c:	b480      	push	{r7}
 800624e:	b085      	sub	sp, #20
 8006250:	af00      	add	r7, sp, #0
 8006252:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8006254:	2300      	movs	r3, #0
 8006256:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	2210      	movs	r2, #16
 800625c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	3301      	adds	r3, #1
 8006262:	60fb      	str	r3, [r7, #12]
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	4a09      	ldr	r2, [pc, #36]	; (800628c <USB_FlushRxFifo+0x40>)
 8006268:	4293      	cmp	r3, r2
 800626a:	d901      	bls.n	8006270 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 800626c:	2303      	movs	r3, #3
 800626e:	e006      	b.n	800627e <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	691b      	ldr	r3, [r3, #16]
 8006274:	f003 0310 	and.w	r3, r3, #16
 8006278:	2b10      	cmp	r3, #16
 800627a:	d0f0      	beq.n	800625e <USB_FlushRxFifo+0x12>

  return HAL_OK;
 800627c:	2300      	movs	r3, #0
}
 800627e:	4618      	mov	r0, r3
 8006280:	3714      	adds	r7, #20
 8006282:	46bd      	mov	sp, r7
 8006284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006288:	4770      	bx	lr
 800628a:	bf00      	nop
 800628c:	00030d40 	.word	0x00030d40

08006290 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8006290:	b480      	push	{r7}
 8006292:	b085      	sub	sp, #20
 8006294:	af00      	add	r7, sp, #0
 8006296:	6078      	str	r0, [r7, #4]
 8006298:	460b      	mov	r3, r1
 800629a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80062a6:	681a      	ldr	r2, [r3, #0]
 80062a8:	78fb      	ldrb	r3, [r7, #3]
 80062aa:	68f9      	ldr	r1, [r7, #12]
 80062ac:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80062b0:	4313      	orrs	r3, r2
 80062b2:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80062b4:	2300      	movs	r3, #0
}
 80062b6:	4618      	mov	r0, r3
 80062b8:	3714      	adds	r7, #20
 80062ba:	46bd      	mov	sp, r7
 80062bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062c0:	4770      	bx	lr

080062c2 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg PCD_SPEED_HIGH: High speed mode
  *            @arg PCD_SPEED_FULL: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 80062c2:	b480      	push	{r7}
 80062c4:	b087      	sub	sp, #28
 80062c6:	af00      	add	r7, sp, #0
 80062c8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80062ce:	693b      	ldr	r3, [r7, #16]
 80062d0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80062d4:	689b      	ldr	r3, [r3, #8]
 80062d6:	f003 0306 	and.w	r3, r3, #6
 80062da:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	2b00      	cmp	r3, #0
 80062e0:	d102      	bne.n	80062e8 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 80062e2:	2300      	movs	r3, #0
 80062e4:	75fb      	strb	r3, [r7, #23]
 80062e6:	e00a      	b.n	80062fe <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	2b02      	cmp	r3, #2
 80062ec:	d002      	beq.n	80062f4 <USB_GetDevSpeed+0x32>
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	2b06      	cmp	r3, #6
 80062f2:	d102      	bne.n	80062fa <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 80062f4:	2302      	movs	r3, #2
 80062f6:	75fb      	strb	r3, [r7, #23]
 80062f8:	e001      	b.n	80062fe <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 80062fa:	230f      	movs	r3, #15
 80062fc:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 80062fe:	7dfb      	ldrb	r3, [r7, #23]
}
 8006300:	4618      	mov	r0, r3
 8006302:	371c      	adds	r7, #28
 8006304:	46bd      	mov	sp, r7
 8006306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800630a:	4770      	bx	lr

0800630c <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800630c:	b480      	push	{r7}
 800630e:	b085      	sub	sp, #20
 8006310:	af00      	add	r7, sp, #0
 8006312:	6078      	str	r0, [r7, #4]
 8006314:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800631a:	683b      	ldr	r3, [r7, #0]
 800631c:	781b      	ldrb	r3, [r3, #0]
 800631e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006320:	683b      	ldr	r3, [r7, #0]
 8006322:	785b      	ldrb	r3, [r3, #1]
 8006324:	2b01      	cmp	r3, #1
 8006326:	d13a      	bne.n	800639e <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800632e:	69da      	ldr	r2, [r3, #28]
 8006330:	683b      	ldr	r3, [r7, #0]
 8006332:	781b      	ldrb	r3, [r3, #0]
 8006334:	f003 030f 	and.w	r3, r3, #15
 8006338:	2101      	movs	r1, #1
 800633a:	fa01 f303 	lsl.w	r3, r1, r3
 800633e:	b29b      	uxth	r3, r3
 8006340:	68f9      	ldr	r1, [r7, #12]
 8006342:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006346:	4313      	orrs	r3, r2
 8006348:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800634a:	68bb      	ldr	r3, [r7, #8]
 800634c:	015a      	lsls	r2, r3, #5
 800634e:	68fb      	ldr	r3, [r7, #12]
 8006350:	4413      	add	r3, r2
 8006352:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800635c:	2b00      	cmp	r3, #0
 800635e:	d155      	bne.n	800640c <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006360:	68bb      	ldr	r3, [r7, #8]
 8006362:	015a      	lsls	r2, r3, #5
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	4413      	add	r3, r2
 8006368:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800636c:	681a      	ldr	r2, [r3, #0]
 800636e:	683b      	ldr	r3, [r7, #0]
 8006370:	689b      	ldr	r3, [r3, #8]
 8006372:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8006376:	683b      	ldr	r3, [r7, #0]
 8006378:	78db      	ldrb	r3, [r3, #3]
 800637a:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800637c:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800637e:	68bb      	ldr	r3, [r7, #8]
 8006380:	059b      	lsls	r3, r3, #22
 8006382:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006384:	4313      	orrs	r3, r2
 8006386:	68ba      	ldr	r2, [r7, #8]
 8006388:	0151      	lsls	r1, r2, #5
 800638a:	68fa      	ldr	r2, [r7, #12]
 800638c:	440a      	add	r2, r1
 800638e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006392:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006396:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800639a:	6013      	str	r3, [r2, #0]
 800639c:	e036      	b.n	800640c <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80063a4:	69da      	ldr	r2, [r3, #28]
 80063a6:	683b      	ldr	r3, [r7, #0]
 80063a8:	781b      	ldrb	r3, [r3, #0]
 80063aa:	f003 030f 	and.w	r3, r3, #15
 80063ae:	2101      	movs	r1, #1
 80063b0:	fa01 f303 	lsl.w	r3, r1, r3
 80063b4:	041b      	lsls	r3, r3, #16
 80063b6:	68f9      	ldr	r1, [r7, #12]
 80063b8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80063bc:	4313      	orrs	r3, r2
 80063be:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80063c0:	68bb      	ldr	r3, [r7, #8]
 80063c2:	015a      	lsls	r2, r3, #5
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	4413      	add	r3, r2
 80063c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80063d2:	2b00      	cmp	r3, #0
 80063d4:	d11a      	bne.n	800640c <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80063d6:	68bb      	ldr	r3, [r7, #8]
 80063d8:	015a      	lsls	r2, r3, #5
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	4413      	add	r3, r2
 80063de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80063e2:	681a      	ldr	r2, [r3, #0]
 80063e4:	683b      	ldr	r3, [r7, #0]
 80063e6:	689b      	ldr	r3, [r3, #8]
 80063e8:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 80063ec:	683b      	ldr	r3, [r7, #0]
 80063ee:	78db      	ldrb	r3, [r3, #3]
 80063f0:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80063f2:	430b      	orrs	r3, r1
 80063f4:	4313      	orrs	r3, r2
 80063f6:	68ba      	ldr	r2, [r7, #8]
 80063f8:	0151      	lsls	r1, r2, #5
 80063fa:	68fa      	ldr	r2, [r7, #12]
 80063fc:	440a      	add	r2, r1
 80063fe:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006402:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006406:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800640a:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800640c:	2300      	movs	r3, #0
}
 800640e:	4618      	mov	r0, r3
 8006410:	3714      	adds	r7, #20
 8006412:	46bd      	mov	sp, r7
 8006414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006418:	4770      	bx	lr
	...

0800641c <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800641c:	b480      	push	{r7}
 800641e:	b085      	sub	sp, #20
 8006420:	af00      	add	r7, sp, #0
 8006422:	6078      	str	r0, [r7, #4]
 8006424:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800642a:	683b      	ldr	r3, [r7, #0]
 800642c:	781b      	ldrb	r3, [r3, #0]
 800642e:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8006430:	683b      	ldr	r3, [r7, #0]
 8006432:	785b      	ldrb	r3, [r3, #1]
 8006434:	2b01      	cmp	r3, #1
 8006436:	d161      	bne.n	80064fc <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006438:	68bb      	ldr	r3, [r7, #8]
 800643a:	015a      	lsls	r2, r3, #5
 800643c:	68fb      	ldr	r3, [r7, #12]
 800643e:	4413      	add	r3, r2
 8006440:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800644a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800644e:	d11f      	bne.n	8006490 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8006450:	68bb      	ldr	r3, [r7, #8]
 8006452:	015a      	lsls	r2, r3, #5
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	4413      	add	r3, r2
 8006458:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	68ba      	ldr	r2, [r7, #8]
 8006460:	0151      	lsls	r1, r2, #5
 8006462:	68fa      	ldr	r2, [r7, #12]
 8006464:	440a      	add	r2, r1
 8006466:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800646a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800646e:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8006470:	68bb      	ldr	r3, [r7, #8]
 8006472:	015a      	lsls	r2, r3, #5
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	4413      	add	r3, r2
 8006478:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	68ba      	ldr	r2, [r7, #8]
 8006480:	0151      	lsls	r1, r2, #5
 8006482:	68fa      	ldr	r2, [r7, #12]
 8006484:	440a      	add	r2, r1
 8006486:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800648a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800648e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006496:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006498:	683b      	ldr	r3, [r7, #0]
 800649a:	781b      	ldrb	r3, [r3, #0]
 800649c:	f003 030f 	and.w	r3, r3, #15
 80064a0:	2101      	movs	r1, #1
 80064a2:	fa01 f303 	lsl.w	r3, r1, r3
 80064a6:	b29b      	uxth	r3, r3
 80064a8:	43db      	mvns	r3, r3
 80064aa:	68f9      	ldr	r1, [r7, #12]
 80064ac:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80064b0:	4013      	ands	r3, r2
 80064b2:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80064ba:	69da      	ldr	r2, [r3, #28]
 80064bc:	683b      	ldr	r3, [r7, #0]
 80064be:	781b      	ldrb	r3, [r3, #0]
 80064c0:	f003 030f 	and.w	r3, r3, #15
 80064c4:	2101      	movs	r1, #1
 80064c6:	fa01 f303 	lsl.w	r3, r1, r3
 80064ca:	b29b      	uxth	r3, r3
 80064cc:	43db      	mvns	r3, r3
 80064ce:	68f9      	ldr	r1, [r7, #12]
 80064d0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80064d4:	4013      	ands	r3, r2
 80064d6:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 80064d8:	68bb      	ldr	r3, [r7, #8]
 80064da:	015a      	lsls	r2, r3, #5
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	4413      	add	r3, r2
 80064e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80064e4:	681a      	ldr	r2, [r3, #0]
 80064e6:	68bb      	ldr	r3, [r7, #8]
 80064e8:	0159      	lsls	r1, r3, #5
 80064ea:	68fb      	ldr	r3, [r7, #12]
 80064ec:	440b      	add	r3, r1
 80064ee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80064f2:	4619      	mov	r1, r3
 80064f4:	4b35      	ldr	r3, [pc, #212]	; (80065cc <USB_DeactivateEndpoint+0x1b0>)
 80064f6:	4013      	ands	r3, r2
 80064f8:	600b      	str	r3, [r1, #0]
 80064fa:	e060      	b.n	80065be <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80064fc:	68bb      	ldr	r3, [r7, #8]
 80064fe:	015a      	lsls	r2, r3, #5
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	4413      	add	r3, r2
 8006504:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800650e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006512:	d11f      	bne.n	8006554 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8006514:	68bb      	ldr	r3, [r7, #8]
 8006516:	015a      	lsls	r2, r3, #5
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	4413      	add	r3, r2
 800651c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	68ba      	ldr	r2, [r7, #8]
 8006524:	0151      	lsls	r1, r2, #5
 8006526:	68fa      	ldr	r2, [r7, #12]
 8006528:	440a      	add	r2, r1
 800652a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800652e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8006532:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8006534:	68bb      	ldr	r3, [r7, #8]
 8006536:	015a      	lsls	r2, r3, #5
 8006538:	68fb      	ldr	r3, [r7, #12]
 800653a:	4413      	add	r3, r2
 800653c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	68ba      	ldr	r2, [r7, #8]
 8006544:	0151      	lsls	r1, r2, #5
 8006546:	68fa      	ldr	r2, [r7, #12]
 8006548:	440a      	add	r2, r1
 800654a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800654e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006552:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8006554:	68fb      	ldr	r3, [r7, #12]
 8006556:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800655a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800655c:	683b      	ldr	r3, [r7, #0]
 800655e:	781b      	ldrb	r3, [r3, #0]
 8006560:	f003 030f 	and.w	r3, r3, #15
 8006564:	2101      	movs	r1, #1
 8006566:	fa01 f303 	lsl.w	r3, r1, r3
 800656a:	041b      	lsls	r3, r3, #16
 800656c:	43db      	mvns	r3, r3
 800656e:	68f9      	ldr	r1, [r7, #12]
 8006570:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006574:	4013      	ands	r3, r2
 8006576:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800657e:	69da      	ldr	r2, [r3, #28]
 8006580:	683b      	ldr	r3, [r7, #0]
 8006582:	781b      	ldrb	r3, [r3, #0]
 8006584:	f003 030f 	and.w	r3, r3, #15
 8006588:	2101      	movs	r1, #1
 800658a:	fa01 f303 	lsl.w	r3, r1, r3
 800658e:	041b      	lsls	r3, r3, #16
 8006590:	43db      	mvns	r3, r3
 8006592:	68f9      	ldr	r1, [r7, #12]
 8006594:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006598:	4013      	ands	r3, r2
 800659a:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800659c:	68bb      	ldr	r3, [r7, #8]
 800659e:	015a      	lsls	r2, r3, #5
 80065a0:	68fb      	ldr	r3, [r7, #12]
 80065a2:	4413      	add	r3, r2
 80065a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80065a8:	681a      	ldr	r2, [r3, #0]
 80065aa:	68bb      	ldr	r3, [r7, #8]
 80065ac:	0159      	lsls	r1, r3, #5
 80065ae:	68fb      	ldr	r3, [r7, #12]
 80065b0:	440b      	add	r3, r1
 80065b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80065b6:	4619      	mov	r1, r3
 80065b8:	4b05      	ldr	r3, [pc, #20]	; (80065d0 <USB_DeactivateEndpoint+0x1b4>)
 80065ba:	4013      	ands	r3, r2
 80065bc:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 80065be:	2300      	movs	r3, #0
}
 80065c0:	4618      	mov	r0, r3
 80065c2:	3714      	adds	r7, #20
 80065c4:	46bd      	mov	sp, r7
 80065c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ca:	4770      	bx	lr
 80065cc:	ec337800 	.word	0xec337800
 80065d0:	eff37800 	.word	0xeff37800

080065d4 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80065d4:	b580      	push	{r7, lr}
 80065d6:	b08a      	sub	sp, #40	; 0x28
 80065d8:	af02      	add	r7, sp, #8
 80065da:	60f8      	str	r0, [r7, #12]
 80065dc:	60b9      	str	r1, [r7, #8]
 80065de:	4613      	mov	r3, r2
 80065e0:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80065e2:	68fb      	ldr	r3, [r7, #12]
 80065e4:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 80065e6:	68bb      	ldr	r3, [r7, #8]
 80065e8:	781b      	ldrb	r3, [r3, #0]
 80065ea:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80065ec:	68bb      	ldr	r3, [r7, #8]
 80065ee:	785b      	ldrb	r3, [r3, #1]
 80065f0:	2b01      	cmp	r3, #1
 80065f2:	f040 815c 	bne.w	80068ae <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80065f6:	68bb      	ldr	r3, [r7, #8]
 80065f8:	695b      	ldr	r3, [r3, #20]
 80065fa:	2b00      	cmp	r3, #0
 80065fc:	d132      	bne.n	8006664 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80065fe:	69bb      	ldr	r3, [r7, #24]
 8006600:	015a      	lsls	r2, r3, #5
 8006602:	69fb      	ldr	r3, [r7, #28]
 8006604:	4413      	add	r3, r2
 8006606:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800660a:	691b      	ldr	r3, [r3, #16]
 800660c:	69ba      	ldr	r2, [r7, #24]
 800660e:	0151      	lsls	r1, r2, #5
 8006610:	69fa      	ldr	r2, [r7, #28]
 8006612:	440a      	add	r2, r1
 8006614:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006618:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800661c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006620:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006622:	69bb      	ldr	r3, [r7, #24]
 8006624:	015a      	lsls	r2, r3, #5
 8006626:	69fb      	ldr	r3, [r7, #28]
 8006628:	4413      	add	r3, r2
 800662a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800662e:	691b      	ldr	r3, [r3, #16]
 8006630:	69ba      	ldr	r2, [r7, #24]
 8006632:	0151      	lsls	r1, r2, #5
 8006634:	69fa      	ldr	r2, [r7, #28]
 8006636:	440a      	add	r2, r1
 8006638:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800663c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006640:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006642:	69bb      	ldr	r3, [r7, #24]
 8006644:	015a      	lsls	r2, r3, #5
 8006646:	69fb      	ldr	r3, [r7, #28]
 8006648:	4413      	add	r3, r2
 800664a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800664e:	691b      	ldr	r3, [r3, #16]
 8006650:	69ba      	ldr	r2, [r7, #24]
 8006652:	0151      	lsls	r1, r2, #5
 8006654:	69fa      	ldr	r2, [r7, #28]
 8006656:	440a      	add	r2, r1
 8006658:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800665c:	0cdb      	lsrs	r3, r3, #19
 800665e:	04db      	lsls	r3, r3, #19
 8006660:	6113      	str	r3, [r2, #16]
 8006662:	e074      	b.n	800674e <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006664:	69bb      	ldr	r3, [r7, #24]
 8006666:	015a      	lsls	r2, r3, #5
 8006668:	69fb      	ldr	r3, [r7, #28]
 800666a:	4413      	add	r3, r2
 800666c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006670:	691b      	ldr	r3, [r3, #16]
 8006672:	69ba      	ldr	r2, [r7, #24]
 8006674:	0151      	lsls	r1, r2, #5
 8006676:	69fa      	ldr	r2, [r7, #28]
 8006678:	440a      	add	r2, r1
 800667a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800667e:	0cdb      	lsrs	r3, r3, #19
 8006680:	04db      	lsls	r3, r3, #19
 8006682:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006684:	69bb      	ldr	r3, [r7, #24]
 8006686:	015a      	lsls	r2, r3, #5
 8006688:	69fb      	ldr	r3, [r7, #28]
 800668a:	4413      	add	r3, r2
 800668c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006690:	691b      	ldr	r3, [r3, #16]
 8006692:	69ba      	ldr	r2, [r7, #24]
 8006694:	0151      	lsls	r1, r2, #5
 8006696:	69fa      	ldr	r2, [r7, #28]
 8006698:	440a      	add	r2, r1
 800669a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800669e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80066a2:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80066a6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 80066a8:	69bb      	ldr	r3, [r7, #24]
 80066aa:	015a      	lsls	r2, r3, #5
 80066ac:	69fb      	ldr	r3, [r7, #28]
 80066ae:	4413      	add	r3, r2
 80066b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80066b4:	691a      	ldr	r2, [r3, #16]
 80066b6:	68bb      	ldr	r3, [r7, #8]
 80066b8:	6959      	ldr	r1, [r3, #20]
 80066ba:	68bb      	ldr	r3, [r7, #8]
 80066bc:	689b      	ldr	r3, [r3, #8]
 80066be:	440b      	add	r3, r1
 80066c0:	1e59      	subs	r1, r3, #1
 80066c2:	68bb      	ldr	r3, [r7, #8]
 80066c4:	689b      	ldr	r3, [r3, #8]
 80066c6:	fbb1 f3f3 	udiv	r3, r1, r3
 80066ca:	04d9      	lsls	r1, r3, #19
 80066cc:	4b9d      	ldr	r3, [pc, #628]	; (8006944 <USB_EPStartXfer+0x370>)
 80066ce:	400b      	ands	r3, r1
 80066d0:	69b9      	ldr	r1, [r7, #24]
 80066d2:	0148      	lsls	r0, r1, #5
 80066d4:	69f9      	ldr	r1, [r7, #28]
 80066d6:	4401      	add	r1, r0
 80066d8:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80066dc:	4313      	orrs	r3, r2
 80066de:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80066e0:	69bb      	ldr	r3, [r7, #24]
 80066e2:	015a      	lsls	r2, r3, #5
 80066e4:	69fb      	ldr	r3, [r7, #28]
 80066e6:	4413      	add	r3, r2
 80066e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80066ec:	691a      	ldr	r2, [r3, #16]
 80066ee:	68bb      	ldr	r3, [r7, #8]
 80066f0:	695b      	ldr	r3, [r3, #20]
 80066f2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80066f6:	69b9      	ldr	r1, [r7, #24]
 80066f8:	0148      	lsls	r0, r1, #5
 80066fa:	69f9      	ldr	r1, [r7, #28]
 80066fc:	4401      	add	r1, r0
 80066fe:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8006702:	4313      	orrs	r3, r2
 8006704:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8006706:	68bb      	ldr	r3, [r7, #8]
 8006708:	78db      	ldrb	r3, [r3, #3]
 800670a:	2b01      	cmp	r3, #1
 800670c:	d11f      	bne.n	800674e <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800670e:	69bb      	ldr	r3, [r7, #24]
 8006710:	015a      	lsls	r2, r3, #5
 8006712:	69fb      	ldr	r3, [r7, #28]
 8006714:	4413      	add	r3, r2
 8006716:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800671a:	691b      	ldr	r3, [r3, #16]
 800671c:	69ba      	ldr	r2, [r7, #24]
 800671e:	0151      	lsls	r1, r2, #5
 8006720:	69fa      	ldr	r2, [r7, #28]
 8006722:	440a      	add	r2, r1
 8006724:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006728:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800672c:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800672e:	69bb      	ldr	r3, [r7, #24]
 8006730:	015a      	lsls	r2, r3, #5
 8006732:	69fb      	ldr	r3, [r7, #28]
 8006734:	4413      	add	r3, r2
 8006736:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800673a:	691b      	ldr	r3, [r3, #16]
 800673c:	69ba      	ldr	r2, [r7, #24]
 800673e:	0151      	lsls	r1, r2, #5
 8006740:	69fa      	ldr	r2, [r7, #28]
 8006742:	440a      	add	r2, r1
 8006744:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006748:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800674c:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800674e:	79fb      	ldrb	r3, [r7, #7]
 8006750:	2b01      	cmp	r3, #1
 8006752:	d14b      	bne.n	80067ec <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8006754:	68bb      	ldr	r3, [r7, #8]
 8006756:	691b      	ldr	r3, [r3, #16]
 8006758:	2b00      	cmp	r3, #0
 800675a:	d009      	beq.n	8006770 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800675c:	69bb      	ldr	r3, [r7, #24]
 800675e:	015a      	lsls	r2, r3, #5
 8006760:	69fb      	ldr	r3, [r7, #28]
 8006762:	4413      	add	r3, r2
 8006764:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006768:	461a      	mov	r2, r3
 800676a:	68bb      	ldr	r3, [r7, #8]
 800676c:	691b      	ldr	r3, [r3, #16]
 800676e:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8006770:	68bb      	ldr	r3, [r7, #8]
 8006772:	78db      	ldrb	r3, [r3, #3]
 8006774:	2b01      	cmp	r3, #1
 8006776:	d128      	bne.n	80067ca <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006778:	69fb      	ldr	r3, [r7, #28]
 800677a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800677e:	689b      	ldr	r3, [r3, #8]
 8006780:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006784:	2b00      	cmp	r3, #0
 8006786:	d110      	bne.n	80067aa <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8006788:	69bb      	ldr	r3, [r7, #24]
 800678a:	015a      	lsls	r2, r3, #5
 800678c:	69fb      	ldr	r3, [r7, #28]
 800678e:	4413      	add	r3, r2
 8006790:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	69ba      	ldr	r2, [r7, #24]
 8006798:	0151      	lsls	r1, r2, #5
 800679a:	69fa      	ldr	r2, [r7, #28]
 800679c:	440a      	add	r2, r1
 800679e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80067a2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80067a6:	6013      	str	r3, [r2, #0]
 80067a8:	e00f      	b.n	80067ca <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80067aa:	69bb      	ldr	r3, [r7, #24]
 80067ac:	015a      	lsls	r2, r3, #5
 80067ae:	69fb      	ldr	r3, [r7, #28]
 80067b0:	4413      	add	r3, r2
 80067b2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	69ba      	ldr	r2, [r7, #24]
 80067ba:	0151      	lsls	r1, r2, #5
 80067bc:	69fa      	ldr	r2, [r7, #28]
 80067be:	440a      	add	r2, r1
 80067c0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80067c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80067c8:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80067ca:	69bb      	ldr	r3, [r7, #24]
 80067cc:	015a      	lsls	r2, r3, #5
 80067ce:	69fb      	ldr	r3, [r7, #28]
 80067d0:	4413      	add	r3, r2
 80067d2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	69ba      	ldr	r2, [r7, #24]
 80067da:	0151      	lsls	r1, r2, #5
 80067dc:	69fa      	ldr	r2, [r7, #28]
 80067de:	440a      	add	r2, r1
 80067e0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80067e4:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80067e8:	6013      	str	r3, [r2, #0]
 80067ea:	e12f      	b.n	8006a4c <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80067ec:	69bb      	ldr	r3, [r7, #24]
 80067ee:	015a      	lsls	r2, r3, #5
 80067f0:	69fb      	ldr	r3, [r7, #28]
 80067f2:	4413      	add	r3, r2
 80067f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	69ba      	ldr	r2, [r7, #24]
 80067fc:	0151      	lsls	r1, r2, #5
 80067fe:	69fa      	ldr	r2, [r7, #28]
 8006800:	440a      	add	r2, r1
 8006802:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006806:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800680a:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800680c:	68bb      	ldr	r3, [r7, #8]
 800680e:	78db      	ldrb	r3, [r3, #3]
 8006810:	2b01      	cmp	r3, #1
 8006812:	d015      	beq.n	8006840 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8006814:	68bb      	ldr	r3, [r7, #8]
 8006816:	695b      	ldr	r3, [r3, #20]
 8006818:	2b00      	cmp	r3, #0
 800681a:	f000 8117 	beq.w	8006a4c <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800681e:	69fb      	ldr	r3, [r7, #28]
 8006820:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006824:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006826:	68bb      	ldr	r3, [r7, #8]
 8006828:	781b      	ldrb	r3, [r3, #0]
 800682a:	f003 030f 	and.w	r3, r3, #15
 800682e:	2101      	movs	r1, #1
 8006830:	fa01 f303 	lsl.w	r3, r1, r3
 8006834:	69f9      	ldr	r1, [r7, #28]
 8006836:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800683a:	4313      	orrs	r3, r2
 800683c:	634b      	str	r3, [r1, #52]	; 0x34
 800683e:	e105      	b.n	8006a4c <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006840:	69fb      	ldr	r3, [r7, #28]
 8006842:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006846:	689b      	ldr	r3, [r3, #8]
 8006848:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800684c:	2b00      	cmp	r3, #0
 800684e:	d110      	bne.n	8006872 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8006850:	69bb      	ldr	r3, [r7, #24]
 8006852:	015a      	lsls	r2, r3, #5
 8006854:	69fb      	ldr	r3, [r7, #28]
 8006856:	4413      	add	r3, r2
 8006858:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	69ba      	ldr	r2, [r7, #24]
 8006860:	0151      	lsls	r1, r2, #5
 8006862:	69fa      	ldr	r2, [r7, #28]
 8006864:	440a      	add	r2, r1
 8006866:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800686a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800686e:	6013      	str	r3, [r2, #0]
 8006870:	e00f      	b.n	8006892 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8006872:	69bb      	ldr	r3, [r7, #24]
 8006874:	015a      	lsls	r2, r3, #5
 8006876:	69fb      	ldr	r3, [r7, #28]
 8006878:	4413      	add	r3, r2
 800687a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	69ba      	ldr	r2, [r7, #24]
 8006882:	0151      	lsls	r1, r2, #5
 8006884:	69fa      	ldr	r2, [r7, #28]
 8006886:	440a      	add	r2, r1
 8006888:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800688c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006890:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8006892:	68bb      	ldr	r3, [r7, #8]
 8006894:	68d9      	ldr	r1, [r3, #12]
 8006896:	68bb      	ldr	r3, [r7, #8]
 8006898:	781a      	ldrb	r2, [r3, #0]
 800689a:	68bb      	ldr	r3, [r7, #8]
 800689c:	695b      	ldr	r3, [r3, #20]
 800689e:	b298      	uxth	r0, r3
 80068a0:	79fb      	ldrb	r3, [r7, #7]
 80068a2:	9300      	str	r3, [sp, #0]
 80068a4:	4603      	mov	r3, r0
 80068a6:	68f8      	ldr	r0, [r7, #12]
 80068a8:	f000 fa2b 	bl	8006d02 <USB_WritePacket>
 80068ac:	e0ce      	b.n	8006a4c <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80068ae:	69bb      	ldr	r3, [r7, #24]
 80068b0:	015a      	lsls	r2, r3, #5
 80068b2:	69fb      	ldr	r3, [r7, #28]
 80068b4:	4413      	add	r3, r2
 80068b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80068ba:	691b      	ldr	r3, [r3, #16]
 80068bc:	69ba      	ldr	r2, [r7, #24]
 80068be:	0151      	lsls	r1, r2, #5
 80068c0:	69fa      	ldr	r2, [r7, #28]
 80068c2:	440a      	add	r2, r1
 80068c4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80068c8:	0cdb      	lsrs	r3, r3, #19
 80068ca:	04db      	lsls	r3, r3, #19
 80068cc:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80068ce:	69bb      	ldr	r3, [r7, #24]
 80068d0:	015a      	lsls	r2, r3, #5
 80068d2:	69fb      	ldr	r3, [r7, #28]
 80068d4:	4413      	add	r3, r2
 80068d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80068da:	691b      	ldr	r3, [r3, #16]
 80068dc:	69ba      	ldr	r2, [r7, #24]
 80068de:	0151      	lsls	r1, r2, #5
 80068e0:	69fa      	ldr	r2, [r7, #28]
 80068e2:	440a      	add	r2, r1
 80068e4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80068e8:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80068ec:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80068f0:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 80068f2:	68bb      	ldr	r3, [r7, #8]
 80068f4:	695b      	ldr	r3, [r3, #20]
 80068f6:	2b00      	cmp	r3, #0
 80068f8:	d126      	bne.n	8006948 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 80068fa:	69bb      	ldr	r3, [r7, #24]
 80068fc:	015a      	lsls	r2, r3, #5
 80068fe:	69fb      	ldr	r3, [r7, #28]
 8006900:	4413      	add	r3, r2
 8006902:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006906:	691a      	ldr	r2, [r3, #16]
 8006908:	68bb      	ldr	r3, [r7, #8]
 800690a:	689b      	ldr	r3, [r3, #8]
 800690c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006910:	69b9      	ldr	r1, [r7, #24]
 8006912:	0148      	lsls	r0, r1, #5
 8006914:	69f9      	ldr	r1, [r7, #28]
 8006916:	4401      	add	r1, r0
 8006918:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800691c:	4313      	orrs	r3, r2
 800691e:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006920:	69bb      	ldr	r3, [r7, #24]
 8006922:	015a      	lsls	r2, r3, #5
 8006924:	69fb      	ldr	r3, [r7, #28]
 8006926:	4413      	add	r3, r2
 8006928:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800692c:	691b      	ldr	r3, [r3, #16]
 800692e:	69ba      	ldr	r2, [r7, #24]
 8006930:	0151      	lsls	r1, r2, #5
 8006932:	69fa      	ldr	r2, [r7, #28]
 8006934:	440a      	add	r2, r1
 8006936:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800693a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800693e:	6113      	str	r3, [r2, #16]
 8006940:	e036      	b.n	80069b0 <USB_EPStartXfer+0x3dc>
 8006942:	bf00      	nop
 8006944:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8006948:	68bb      	ldr	r3, [r7, #8]
 800694a:	695a      	ldr	r2, [r3, #20]
 800694c:	68bb      	ldr	r3, [r7, #8]
 800694e:	689b      	ldr	r3, [r3, #8]
 8006950:	4413      	add	r3, r2
 8006952:	1e5a      	subs	r2, r3, #1
 8006954:	68bb      	ldr	r3, [r7, #8]
 8006956:	689b      	ldr	r3, [r3, #8]
 8006958:	fbb2 f3f3 	udiv	r3, r2, r3
 800695c:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800695e:	69bb      	ldr	r3, [r7, #24]
 8006960:	015a      	lsls	r2, r3, #5
 8006962:	69fb      	ldr	r3, [r7, #28]
 8006964:	4413      	add	r3, r2
 8006966:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800696a:	691a      	ldr	r2, [r3, #16]
 800696c:	8afb      	ldrh	r3, [r7, #22]
 800696e:	04d9      	lsls	r1, r3, #19
 8006970:	4b39      	ldr	r3, [pc, #228]	; (8006a58 <USB_EPStartXfer+0x484>)
 8006972:	400b      	ands	r3, r1
 8006974:	69b9      	ldr	r1, [r7, #24]
 8006976:	0148      	lsls	r0, r1, #5
 8006978:	69f9      	ldr	r1, [r7, #28]
 800697a:	4401      	add	r1, r0
 800697c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006980:	4313      	orrs	r3, r2
 8006982:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 8006984:	69bb      	ldr	r3, [r7, #24]
 8006986:	015a      	lsls	r2, r3, #5
 8006988:	69fb      	ldr	r3, [r7, #28]
 800698a:	4413      	add	r3, r2
 800698c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006990:	691a      	ldr	r2, [r3, #16]
 8006992:	68bb      	ldr	r3, [r7, #8]
 8006994:	689b      	ldr	r3, [r3, #8]
 8006996:	8af9      	ldrh	r1, [r7, #22]
 8006998:	fb01 f303 	mul.w	r3, r1, r3
 800699c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80069a0:	69b9      	ldr	r1, [r7, #24]
 80069a2:	0148      	lsls	r0, r1, #5
 80069a4:	69f9      	ldr	r1, [r7, #28]
 80069a6:	4401      	add	r1, r0
 80069a8:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80069ac:	4313      	orrs	r3, r2
 80069ae:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80069b0:	79fb      	ldrb	r3, [r7, #7]
 80069b2:	2b01      	cmp	r3, #1
 80069b4:	d10d      	bne.n	80069d2 <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80069b6:	68bb      	ldr	r3, [r7, #8]
 80069b8:	68db      	ldr	r3, [r3, #12]
 80069ba:	2b00      	cmp	r3, #0
 80069bc:	d009      	beq.n	80069d2 <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80069be:	68bb      	ldr	r3, [r7, #8]
 80069c0:	68d9      	ldr	r1, [r3, #12]
 80069c2:	69bb      	ldr	r3, [r7, #24]
 80069c4:	015a      	lsls	r2, r3, #5
 80069c6:	69fb      	ldr	r3, [r7, #28]
 80069c8:	4413      	add	r3, r2
 80069ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80069ce:	460a      	mov	r2, r1
 80069d0:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 80069d2:	68bb      	ldr	r3, [r7, #8]
 80069d4:	78db      	ldrb	r3, [r3, #3]
 80069d6:	2b01      	cmp	r3, #1
 80069d8:	d128      	bne.n	8006a2c <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80069da:	69fb      	ldr	r3, [r7, #28]
 80069dc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80069e0:	689b      	ldr	r3, [r3, #8]
 80069e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80069e6:	2b00      	cmp	r3, #0
 80069e8:	d110      	bne.n	8006a0c <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 80069ea:	69bb      	ldr	r3, [r7, #24]
 80069ec:	015a      	lsls	r2, r3, #5
 80069ee:	69fb      	ldr	r3, [r7, #28]
 80069f0:	4413      	add	r3, r2
 80069f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	69ba      	ldr	r2, [r7, #24]
 80069fa:	0151      	lsls	r1, r2, #5
 80069fc:	69fa      	ldr	r2, [r7, #28]
 80069fe:	440a      	add	r2, r1
 8006a00:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006a04:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006a08:	6013      	str	r3, [r2, #0]
 8006a0a:	e00f      	b.n	8006a2c <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8006a0c:	69bb      	ldr	r3, [r7, #24]
 8006a0e:	015a      	lsls	r2, r3, #5
 8006a10:	69fb      	ldr	r3, [r7, #28]
 8006a12:	4413      	add	r3, r2
 8006a14:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	69ba      	ldr	r2, [r7, #24]
 8006a1c:	0151      	lsls	r1, r2, #5
 8006a1e:	69fa      	ldr	r2, [r7, #28]
 8006a20:	440a      	add	r2, r1
 8006a22:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006a26:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006a2a:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8006a2c:	69bb      	ldr	r3, [r7, #24]
 8006a2e:	015a      	lsls	r2, r3, #5
 8006a30:	69fb      	ldr	r3, [r7, #28]
 8006a32:	4413      	add	r3, r2
 8006a34:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	69ba      	ldr	r2, [r7, #24]
 8006a3c:	0151      	lsls	r1, r2, #5
 8006a3e:	69fa      	ldr	r2, [r7, #28]
 8006a40:	440a      	add	r2, r1
 8006a42:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006a46:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006a4a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006a4c:	2300      	movs	r3, #0
}
 8006a4e:	4618      	mov	r0, r3
 8006a50:	3720      	adds	r7, #32
 8006a52:	46bd      	mov	sp, r7
 8006a54:	bd80      	pop	{r7, pc}
 8006a56:	bf00      	nop
 8006a58:	1ff80000 	.word	0x1ff80000

08006a5c <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8006a5c:	b480      	push	{r7}
 8006a5e:	b087      	sub	sp, #28
 8006a60:	af00      	add	r7, sp, #0
 8006a62:	60f8      	str	r0, [r7, #12]
 8006a64:	60b9      	str	r1, [r7, #8]
 8006a66:	4613      	mov	r3, r2
 8006a68:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006a6a:	68fb      	ldr	r3, [r7, #12]
 8006a6c:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8006a6e:	68bb      	ldr	r3, [r7, #8]
 8006a70:	781b      	ldrb	r3, [r3, #0]
 8006a72:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006a74:	68bb      	ldr	r3, [r7, #8]
 8006a76:	785b      	ldrb	r3, [r3, #1]
 8006a78:	2b01      	cmp	r3, #1
 8006a7a:	f040 80cd 	bne.w	8006c18 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8006a7e:	68bb      	ldr	r3, [r7, #8]
 8006a80:	695b      	ldr	r3, [r3, #20]
 8006a82:	2b00      	cmp	r3, #0
 8006a84:	d132      	bne.n	8006aec <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006a86:	693b      	ldr	r3, [r7, #16]
 8006a88:	015a      	lsls	r2, r3, #5
 8006a8a:	697b      	ldr	r3, [r7, #20]
 8006a8c:	4413      	add	r3, r2
 8006a8e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006a92:	691b      	ldr	r3, [r3, #16]
 8006a94:	693a      	ldr	r2, [r7, #16]
 8006a96:	0151      	lsls	r1, r2, #5
 8006a98:	697a      	ldr	r2, [r7, #20]
 8006a9a:	440a      	add	r2, r1
 8006a9c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006aa0:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006aa4:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006aa8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006aaa:	693b      	ldr	r3, [r7, #16]
 8006aac:	015a      	lsls	r2, r3, #5
 8006aae:	697b      	ldr	r3, [r7, #20]
 8006ab0:	4413      	add	r3, r2
 8006ab2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006ab6:	691b      	ldr	r3, [r3, #16]
 8006ab8:	693a      	ldr	r2, [r7, #16]
 8006aba:	0151      	lsls	r1, r2, #5
 8006abc:	697a      	ldr	r2, [r7, #20]
 8006abe:	440a      	add	r2, r1
 8006ac0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006ac4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006ac8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006aca:	693b      	ldr	r3, [r7, #16]
 8006acc:	015a      	lsls	r2, r3, #5
 8006ace:	697b      	ldr	r3, [r7, #20]
 8006ad0:	4413      	add	r3, r2
 8006ad2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006ad6:	691b      	ldr	r3, [r3, #16]
 8006ad8:	693a      	ldr	r2, [r7, #16]
 8006ada:	0151      	lsls	r1, r2, #5
 8006adc:	697a      	ldr	r2, [r7, #20]
 8006ade:	440a      	add	r2, r1
 8006ae0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006ae4:	0cdb      	lsrs	r3, r3, #19
 8006ae6:	04db      	lsls	r3, r3, #19
 8006ae8:	6113      	str	r3, [r2, #16]
 8006aea:	e04e      	b.n	8006b8a <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006aec:	693b      	ldr	r3, [r7, #16]
 8006aee:	015a      	lsls	r2, r3, #5
 8006af0:	697b      	ldr	r3, [r7, #20]
 8006af2:	4413      	add	r3, r2
 8006af4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006af8:	691b      	ldr	r3, [r3, #16]
 8006afa:	693a      	ldr	r2, [r7, #16]
 8006afc:	0151      	lsls	r1, r2, #5
 8006afe:	697a      	ldr	r2, [r7, #20]
 8006b00:	440a      	add	r2, r1
 8006b02:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006b06:	0cdb      	lsrs	r3, r3, #19
 8006b08:	04db      	lsls	r3, r3, #19
 8006b0a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006b0c:	693b      	ldr	r3, [r7, #16]
 8006b0e:	015a      	lsls	r2, r3, #5
 8006b10:	697b      	ldr	r3, [r7, #20]
 8006b12:	4413      	add	r3, r2
 8006b14:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006b18:	691b      	ldr	r3, [r3, #16]
 8006b1a:	693a      	ldr	r2, [r7, #16]
 8006b1c:	0151      	lsls	r1, r2, #5
 8006b1e:	697a      	ldr	r2, [r7, #20]
 8006b20:	440a      	add	r2, r1
 8006b22:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006b26:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006b2a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006b2e:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8006b30:	68bb      	ldr	r3, [r7, #8]
 8006b32:	695a      	ldr	r2, [r3, #20]
 8006b34:	68bb      	ldr	r3, [r7, #8]
 8006b36:	689b      	ldr	r3, [r3, #8]
 8006b38:	429a      	cmp	r2, r3
 8006b3a:	d903      	bls.n	8006b44 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8006b3c:	68bb      	ldr	r3, [r7, #8]
 8006b3e:	689a      	ldr	r2, [r3, #8]
 8006b40:	68bb      	ldr	r3, [r7, #8]
 8006b42:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006b44:	693b      	ldr	r3, [r7, #16]
 8006b46:	015a      	lsls	r2, r3, #5
 8006b48:	697b      	ldr	r3, [r7, #20]
 8006b4a:	4413      	add	r3, r2
 8006b4c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006b50:	691b      	ldr	r3, [r3, #16]
 8006b52:	693a      	ldr	r2, [r7, #16]
 8006b54:	0151      	lsls	r1, r2, #5
 8006b56:	697a      	ldr	r2, [r7, #20]
 8006b58:	440a      	add	r2, r1
 8006b5a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006b5e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006b62:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8006b64:	693b      	ldr	r3, [r7, #16]
 8006b66:	015a      	lsls	r2, r3, #5
 8006b68:	697b      	ldr	r3, [r7, #20]
 8006b6a:	4413      	add	r3, r2
 8006b6c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006b70:	691a      	ldr	r2, [r3, #16]
 8006b72:	68bb      	ldr	r3, [r7, #8]
 8006b74:	695b      	ldr	r3, [r3, #20]
 8006b76:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006b7a:	6939      	ldr	r1, [r7, #16]
 8006b7c:	0148      	lsls	r0, r1, #5
 8006b7e:	6979      	ldr	r1, [r7, #20]
 8006b80:	4401      	add	r1, r0
 8006b82:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8006b86:	4313      	orrs	r3, r2
 8006b88:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8006b8a:	79fb      	ldrb	r3, [r7, #7]
 8006b8c:	2b01      	cmp	r3, #1
 8006b8e:	d11e      	bne.n	8006bce <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8006b90:	68bb      	ldr	r3, [r7, #8]
 8006b92:	691b      	ldr	r3, [r3, #16]
 8006b94:	2b00      	cmp	r3, #0
 8006b96:	d009      	beq.n	8006bac <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8006b98:	693b      	ldr	r3, [r7, #16]
 8006b9a:	015a      	lsls	r2, r3, #5
 8006b9c:	697b      	ldr	r3, [r7, #20]
 8006b9e:	4413      	add	r3, r2
 8006ba0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006ba4:	461a      	mov	r2, r3
 8006ba6:	68bb      	ldr	r3, [r7, #8]
 8006ba8:	691b      	ldr	r3, [r3, #16]
 8006baa:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006bac:	693b      	ldr	r3, [r7, #16]
 8006bae:	015a      	lsls	r2, r3, #5
 8006bb0:	697b      	ldr	r3, [r7, #20]
 8006bb2:	4413      	add	r3, r2
 8006bb4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	693a      	ldr	r2, [r7, #16]
 8006bbc:	0151      	lsls	r1, r2, #5
 8006bbe:	697a      	ldr	r2, [r7, #20]
 8006bc0:	440a      	add	r2, r1
 8006bc2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006bc6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006bca:	6013      	str	r3, [r2, #0]
 8006bcc:	e092      	b.n	8006cf4 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006bce:	693b      	ldr	r3, [r7, #16]
 8006bd0:	015a      	lsls	r2, r3, #5
 8006bd2:	697b      	ldr	r3, [r7, #20]
 8006bd4:	4413      	add	r3, r2
 8006bd6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	693a      	ldr	r2, [r7, #16]
 8006bde:	0151      	lsls	r1, r2, #5
 8006be0:	697a      	ldr	r2, [r7, #20]
 8006be2:	440a      	add	r2, r1
 8006be4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006be8:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006bec:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8006bee:	68bb      	ldr	r3, [r7, #8]
 8006bf0:	695b      	ldr	r3, [r3, #20]
 8006bf2:	2b00      	cmp	r3, #0
 8006bf4:	d07e      	beq.n	8006cf4 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8006bf6:	697b      	ldr	r3, [r7, #20]
 8006bf8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006bfc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006bfe:	68bb      	ldr	r3, [r7, #8]
 8006c00:	781b      	ldrb	r3, [r3, #0]
 8006c02:	f003 030f 	and.w	r3, r3, #15
 8006c06:	2101      	movs	r1, #1
 8006c08:	fa01 f303 	lsl.w	r3, r1, r3
 8006c0c:	6979      	ldr	r1, [r7, #20]
 8006c0e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006c12:	4313      	orrs	r3, r2
 8006c14:	634b      	str	r3, [r1, #52]	; 0x34
 8006c16:	e06d      	b.n	8006cf4 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8006c18:	693b      	ldr	r3, [r7, #16]
 8006c1a:	015a      	lsls	r2, r3, #5
 8006c1c:	697b      	ldr	r3, [r7, #20]
 8006c1e:	4413      	add	r3, r2
 8006c20:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006c24:	691b      	ldr	r3, [r3, #16]
 8006c26:	693a      	ldr	r2, [r7, #16]
 8006c28:	0151      	lsls	r1, r2, #5
 8006c2a:	697a      	ldr	r2, [r7, #20]
 8006c2c:	440a      	add	r2, r1
 8006c2e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006c32:	0cdb      	lsrs	r3, r3, #19
 8006c34:	04db      	lsls	r3, r3, #19
 8006c36:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8006c38:	693b      	ldr	r3, [r7, #16]
 8006c3a:	015a      	lsls	r2, r3, #5
 8006c3c:	697b      	ldr	r3, [r7, #20]
 8006c3e:	4413      	add	r3, r2
 8006c40:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006c44:	691b      	ldr	r3, [r3, #16]
 8006c46:	693a      	ldr	r2, [r7, #16]
 8006c48:	0151      	lsls	r1, r2, #5
 8006c4a:	697a      	ldr	r2, [r7, #20]
 8006c4c:	440a      	add	r2, r1
 8006c4e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006c52:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006c56:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006c5a:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8006c5c:	68bb      	ldr	r3, [r7, #8]
 8006c5e:	695b      	ldr	r3, [r3, #20]
 8006c60:	2b00      	cmp	r3, #0
 8006c62:	d003      	beq.n	8006c6c <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 8006c64:	68bb      	ldr	r3, [r7, #8]
 8006c66:	689a      	ldr	r2, [r3, #8]
 8006c68:	68bb      	ldr	r3, [r7, #8]
 8006c6a:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006c6c:	693b      	ldr	r3, [r7, #16]
 8006c6e:	015a      	lsls	r2, r3, #5
 8006c70:	697b      	ldr	r3, [r7, #20]
 8006c72:	4413      	add	r3, r2
 8006c74:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006c78:	691b      	ldr	r3, [r3, #16]
 8006c7a:	693a      	ldr	r2, [r7, #16]
 8006c7c:	0151      	lsls	r1, r2, #5
 8006c7e:	697a      	ldr	r2, [r7, #20]
 8006c80:	440a      	add	r2, r1
 8006c82:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006c86:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006c8a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 8006c8c:	693b      	ldr	r3, [r7, #16]
 8006c8e:	015a      	lsls	r2, r3, #5
 8006c90:	697b      	ldr	r3, [r7, #20]
 8006c92:	4413      	add	r3, r2
 8006c94:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006c98:	691a      	ldr	r2, [r3, #16]
 8006c9a:	68bb      	ldr	r3, [r7, #8]
 8006c9c:	689b      	ldr	r3, [r3, #8]
 8006c9e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006ca2:	6939      	ldr	r1, [r7, #16]
 8006ca4:	0148      	lsls	r0, r1, #5
 8006ca6:	6979      	ldr	r1, [r7, #20]
 8006ca8:	4401      	add	r1, r0
 8006caa:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006cae:	4313      	orrs	r3, r2
 8006cb0:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8006cb2:	79fb      	ldrb	r3, [r7, #7]
 8006cb4:	2b01      	cmp	r3, #1
 8006cb6:	d10d      	bne.n	8006cd4 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8006cb8:	68bb      	ldr	r3, [r7, #8]
 8006cba:	68db      	ldr	r3, [r3, #12]
 8006cbc:	2b00      	cmp	r3, #0
 8006cbe:	d009      	beq.n	8006cd4 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8006cc0:	68bb      	ldr	r3, [r7, #8]
 8006cc2:	68d9      	ldr	r1, [r3, #12]
 8006cc4:	693b      	ldr	r3, [r7, #16]
 8006cc6:	015a      	lsls	r2, r3, #5
 8006cc8:	697b      	ldr	r3, [r7, #20]
 8006cca:	4413      	add	r3, r2
 8006ccc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006cd0:	460a      	mov	r2, r1
 8006cd2:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8006cd4:	693b      	ldr	r3, [r7, #16]
 8006cd6:	015a      	lsls	r2, r3, #5
 8006cd8:	697b      	ldr	r3, [r7, #20]
 8006cda:	4413      	add	r3, r2
 8006cdc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	693a      	ldr	r2, [r7, #16]
 8006ce4:	0151      	lsls	r1, r2, #5
 8006ce6:	697a      	ldr	r2, [r7, #20]
 8006ce8:	440a      	add	r2, r1
 8006cea:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006cee:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006cf2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006cf4:	2300      	movs	r3, #0
}
 8006cf6:	4618      	mov	r0, r3
 8006cf8:	371c      	adds	r7, #28
 8006cfa:	46bd      	mov	sp, r7
 8006cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d00:	4770      	bx	lr

08006d02 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8006d02:	b480      	push	{r7}
 8006d04:	b089      	sub	sp, #36	; 0x24
 8006d06:	af00      	add	r7, sp, #0
 8006d08:	60f8      	str	r0, [r7, #12]
 8006d0a:	60b9      	str	r1, [r7, #8]
 8006d0c:	4611      	mov	r1, r2
 8006d0e:	461a      	mov	r2, r3
 8006d10:	460b      	mov	r3, r1
 8006d12:	71fb      	strb	r3, [r7, #7]
 8006d14:	4613      	mov	r3, r2
 8006d16:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006d18:	68fb      	ldr	r3, [r7, #12]
 8006d1a:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 8006d1c:	68bb      	ldr	r3, [r7, #8]
 8006d1e:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 8006d20:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8006d24:	2b00      	cmp	r3, #0
 8006d26:	d11a      	bne.n	8006d5e <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8006d28:	88bb      	ldrh	r3, [r7, #4]
 8006d2a:	3303      	adds	r3, #3
 8006d2c:	089b      	lsrs	r3, r3, #2
 8006d2e:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8006d30:	2300      	movs	r3, #0
 8006d32:	61bb      	str	r3, [r7, #24]
 8006d34:	e00f      	b.n	8006d56 <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8006d36:	79fb      	ldrb	r3, [r7, #7]
 8006d38:	031a      	lsls	r2, r3, #12
 8006d3a:	697b      	ldr	r3, [r7, #20]
 8006d3c:	4413      	add	r3, r2
 8006d3e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006d42:	461a      	mov	r2, r3
 8006d44:	69fb      	ldr	r3, [r7, #28]
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	6013      	str	r3, [r2, #0]
      pSrc++;
 8006d4a:	69fb      	ldr	r3, [r7, #28]
 8006d4c:	3304      	adds	r3, #4
 8006d4e:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8006d50:	69bb      	ldr	r3, [r7, #24]
 8006d52:	3301      	adds	r3, #1
 8006d54:	61bb      	str	r3, [r7, #24]
 8006d56:	69ba      	ldr	r2, [r7, #24]
 8006d58:	693b      	ldr	r3, [r7, #16]
 8006d5a:	429a      	cmp	r2, r3
 8006d5c:	d3eb      	bcc.n	8006d36 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8006d5e:	2300      	movs	r3, #0
}
 8006d60:	4618      	mov	r0, r3
 8006d62:	3724      	adds	r7, #36	; 0x24
 8006d64:	46bd      	mov	sp, r7
 8006d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d6a:	4770      	bx	lr

08006d6c <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8006d6c:	b480      	push	{r7}
 8006d6e:	b089      	sub	sp, #36	; 0x24
 8006d70:	af00      	add	r7, sp, #0
 8006d72:	60f8      	str	r0, [r7, #12]
 8006d74:	60b9      	str	r1, [r7, #8]
 8006d76:	4613      	mov	r3, r2
 8006d78:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006d7a:	68fb      	ldr	r3, [r7, #12]
 8006d7c:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 8006d7e:	68bb      	ldr	r3, [r7, #8]
 8006d80:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 8006d82:	88fb      	ldrh	r3, [r7, #6]
 8006d84:	3303      	adds	r3, #3
 8006d86:	089b      	lsrs	r3, r3, #2
 8006d88:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 8006d8a:	2300      	movs	r3, #0
 8006d8c:	61bb      	str	r3, [r7, #24]
 8006d8e:	e00b      	b.n	8006da8 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8006d90:	697b      	ldr	r3, [r7, #20]
 8006d92:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006d96:	681a      	ldr	r2, [r3, #0]
 8006d98:	69fb      	ldr	r3, [r7, #28]
 8006d9a:	601a      	str	r2, [r3, #0]
    pDest++;
 8006d9c:	69fb      	ldr	r3, [r7, #28]
 8006d9e:	3304      	adds	r3, #4
 8006da0:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8006da2:	69bb      	ldr	r3, [r7, #24]
 8006da4:	3301      	adds	r3, #1
 8006da6:	61bb      	str	r3, [r7, #24]
 8006da8:	69ba      	ldr	r2, [r7, #24]
 8006daa:	693b      	ldr	r3, [r7, #16]
 8006dac:	429a      	cmp	r2, r3
 8006dae:	d3ef      	bcc.n	8006d90 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 8006db0:	69fb      	ldr	r3, [r7, #28]
}
 8006db2:	4618      	mov	r0, r3
 8006db4:	3724      	adds	r7, #36	; 0x24
 8006db6:	46bd      	mov	sp, r7
 8006db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dbc:	4770      	bx	lr

08006dbe <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006dbe:	b480      	push	{r7}
 8006dc0:	b085      	sub	sp, #20
 8006dc2:	af00      	add	r7, sp, #0
 8006dc4:	6078      	str	r0, [r7, #4]
 8006dc6:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006dcc:	683b      	ldr	r3, [r7, #0]
 8006dce:	781b      	ldrb	r3, [r3, #0]
 8006dd0:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006dd2:	683b      	ldr	r3, [r7, #0]
 8006dd4:	785b      	ldrb	r3, [r3, #1]
 8006dd6:	2b01      	cmp	r3, #1
 8006dd8:	d12c      	bne.n	8006e34 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8006dda:	68bb      	ldr	r3, [r7, #8]
 8006ddc:	015a      	lsls	r2, r3, #5
 8006dde:	68fb      	ldr	r3, [r7, #12]
 8006de0:	4413      	add	r3, r2
 8006de2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	2b00      	cmp	r3, #0
 8006dea:	db12      	blt.n	8006e12 <USB_EPSetStall+0x54>
 8006dec:	68bb      	ldr	r3, [r7, #8]
 8006dee:	2b00      	cmp	r3, #0
 8006df0:	d00f      	beq.n	8006e12 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8006df2:	68bb      	ldr	r3, [r7, #8]
 8006df4:	015a      	lsls	r2, r3, #5
 8006df6:	68fb      	ldr	r3, [r7, #12]
 8006df8:	4413      	add	r3, r2
 8006dfa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	68ba      	ldr	r2, [r7, #8]
 8006e02:	0151      	lsls	r1, r2, #5
 8006e04:	68fa      	ldr	r2, [r7, #12]
 8006e06:	440a      	add	r2, r1
 8006e08:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006e0c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006e10:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8006e12:	68bb      	ldr	r3, [r7, #8]
 8006e14:	015a      	lsls	r2, r3, #5
 8006e16:	68fb      	ldr	r3, [r7, #12]
 8006e18:	4413      	add	r3, r2
 8006e1a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	68ba      	ldr	r2, [r7, #8]
 8006e22:	0151      	lsls	r1, r2, #5
 8006e24:	68fa      	ldr	r2, [r7, #12]
 8006e26:	440a      	add	r2, r1
 8006e28:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006e2c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006e30:	6013      	str	r3, [r2, #0]
 8006e32:	e02b      	b.n	8006e8c <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8006e34:	68bb      	ldr	r3, [r7, #8]
 8006e36:	015a      	lsls	r2, r3, #5
 8006e38:	68fb      	ldr	r3, [r7, #12]
 8006e3a:	4413      	add	r3, r2
 8006e3c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	2b00      	cmp	r3, #0
 8006e44:	db12      	blt.n	8006e6c <USB_EPSetStall+0xae>
 8006e46:	68bb      	ldr	r3, [r7, #8]
 8006e48:	2b00      	cmp	r3, #0
 8006e4a:	d00f      	beq.n	8006e6c <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8006e4c:	68bb      	ldr	r3, [r7, #8]
 8006e4e:	015a      	lsls	r2, r3, #5
 8006e50:	68fb      	ldr	r3, [r7, #12]
 8006e52:	4413      	add	r3, r2
 8006e54:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	68ba      	ldr	r2, [r7, #8]
 8006e5c:	0151      	lsls	r1, r2, #5
 8006e5e:	68fa      	ldr	r2, [r7, #12]
 8006e60:	440a      	add	r2, r1
 8006e62:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006e66:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006e6a:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8006e6c:	68bb      	ldr	r3, [r7, #8]
 8006e6e:	015a      	lsls	r2, r3, #5
 8006e70:	68fb      	ldr	r3, [r7, #12]
 8006e72:	4413      	add	r3, r2
 8006e74:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	68ba      	ldr	r2, [r7, #8]
 8006e7c:	0151      	lsls	r1, r2, #5
 8006e7e:	68fa      	ldr	r2, [r7, #12]
 8006e80:	440a      	add	r2, r1
 8006e82:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006e86:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006e8a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006e8c:	2300      	movs	r3, #0
}
 8006e8e:	4618      	mov	r0, r3
 8006e90:	3714      	adds	r7, #20
 8006e92:	46bd      	mov	sp, r7
 8006e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e98:	4770      	bx	lr

08006e9a <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006e9a:	b480      	push	{r7}
 8006e9c:	b085      	sub	sp, #20
 8006e9e:	af00      	add	r7, sp, #0
 8006ea0:	6078      	str	r0, [r7, #4]
 8006ea2:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006ea8:	683b      	ldr	r3, [r7, #0]
 8006eaa:	781b      	ldrb	r3, [r3, #0]
 8006eac:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006eae:	683b      	ldr	r3, [r7, #0]
 8006eb0:	785b      	ldrb	r3, [r3, #1]
 8006eb2:	2b01      	cmp	r3, #1
 8006eb4:	d128      	bne.n	8006f08 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8006eb6:	68bb      	ldr	r3, [r7, #8]
 8006eb8:	015a      	lsls	r2, r3, #5
 8006eba:	68fb      	ldr	r3, [r7, #12]
 8006ebc:	4413      	add	r3, r2
 8006ebe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	68ba      	ldr	r2, [r7, #8]
 8006ec6:	0151      	lsls	r1, r2, #5
 8006ec8:	68fa      	ldr	r2, [r7, #12]
 8006eca:	440a      	add	r2, r1
 8006ecc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006ed0:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006ed4:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8006ed6:	683b      	ldr	r3, [r7, #0]
 8006ed8:	78db      	ldrb	r3, [r3, #3]
 8006eda:	2b03      	cmp	r3, #3
 8006edc:	d003      	beq.n	8006ee6 <USB_EPClearStall+0x4c>
 8006ede:	683b      	ldr	r3, [r7, #0]
 8006ee0:	78db      	ldrb	r3, [r3, #3]
 8006ee2:	2b02      	cmp	r3, #2
 8006ee4:	d138      	bne.n	8006f58 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8006ee6:	68bb      	ldr	r3, [r7, #8]
 8006ee8:	015a      	lsls	r2, r3, #5
 8006eea:	68fb      	ldr	r3, [r7, #12]
 8006eec:	4413      	add	r3, r2
 8006eee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	68ba      	ldr	r2, [r7, #8]
 8006ef6:	0151      	lsls	r1, r2, #5
 8006ef8:	68fa      	ldr	r2, [r7, #12]
 8006efa:	440a      	add	r2, r1
 8006efc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006f00:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006f04:	6013      	str	r3, [r2, #0]
 8006f06:	e027      	b.n	8006f58 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8006f08:	68bb      	ldr	r3, [r7, #8]
 8006f0a:	015a      	lsls	r2, r3, #5
 8006f0c:	68fb      	ldr	r3, [r7, #12]
 8006f0e:	4413      	add	r3, r2
 8006f10:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	68ba      	ldr	r2, [r7, #8]
 8006f18:	0151      	lsls	r1, r2, #5
 8006f1a:	68fa      	ldr	r2, [r7, #12]
 8006f1c:	440a      	add	r2, r1
 8006f1e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006f22:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006f26:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8006f28:	683b      	ldr	r3, [r7, #0]
 8006f2a:	78db      	ldrb	r3, [r3, #3]
 8006f2c:	2b03      	cmp	r3, #3
 8006f2e:	d003      	beq.n	8006f38 <USB_EPClearStall+0x9e>
 8006f30:	683b      	ldr	r3, [r7, #0]
 8006f32:	78db      	ldrb	r3, [r3, #3]
 8006f34:	2b02      	cmp	r3, #2
 8006f36:	d10f      	bne.n	8006f58 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8006f38:	68bb      	ldr	r3, [r7, #8]
 8006f3a:	015a      	lsls	r2, r3, #5
 8006f3c:	68fb      	ldr	r3, [r7, #12]
 8006f3e:	4413      	add	r3, r2
 8006f40:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	68ba      	ldr	r2, [r7, #8]
 8006f48:	0151      	lsls	r1, r2, #5
 8006f4a:	68fa      	ldr	r2, [r7, #12]
 8006f4c:	440a      	add	r2, r1
 8006f4e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006f52:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006f56:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8006f58:	2300      	movs	r3, #0
}
 8006f5a:	4618      	mov	r0, r3
 8006f5c:	3714      	adds	r7, #20
 8006f5e:	46bd      	mov	sp, r7
 8006f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f64:	4770      	bx	lr

08006f66 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8006f66:	b480      	push	{r7}
 8006f68:	b085      	sub	sp, #20
 8006f6a:	af00      	add	r7, sp, #0
 8006f6c:	6078      	str	r0, [r7, #4]
 8006f6e:	460b      	mov	r3, r1
 8006f70:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8006f76:	68fb      	ldr	r3, [r7, #12]
 8006f78:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	68fa      	ldr	r2, [r7, #12]
 8006f80:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006f84:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8006f88:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8006f8a:	68fb      	ldr	r3, [r7, #12]
 8006f8c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006f90:	681a      	ldr	r2, [r3, #0]
 8006f92:	78fb      	ldrb	r3, [r7, #3]
 8006f94:	011b      	lsls	r3, r3, #4
 8006f96:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8006f9a:	68f9      	ldr	r1, [r7, #12]
 8006f9c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006fa0:	4313      	orrs	r3, r2
 8006fa2:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8006fa4:	2300      	movs	r3, #0
}
 8006fa6:	4618      	mov	r0, r3
 8006fa8:	3714      	adds	r7, #20
 8006faa:	46bd      	mov	sp, r7
 8006fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fb0:	4770      	bx	lr

08006fb2 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8006fb2:	b480      	push	{r7}
 8006fb4:	b085      	sub	sp, #20
 8006fb6:	af00      	add	r7, sp, #0
 8006fb8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006fbe:	68fb      	ldr	r3, [r7, #12]
 8006fc0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	68fa      	ldr	r2, [r7, #12]
 8006fc8:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8006fcc:	f023 0303 	bic.w	r3, r3, #3
 8006fd0:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8006fd2:	68fb      	ldr	r3, [r7, #12]
 8006fd4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006fd8:	685b      	ldr	r3, [r3, #4]
 8006fda:	68fa      	ldr	r2, [r7, #12]
 8006fdc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006fe0:	f023 0302 	bic.w	r3, r3, #2
 8006fe4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006fe6:	2300      	movs	r3, #0
}
 8006fe8:	4618      	mov	r0, r3
 8006fea:	3714      	adds	r7, #20
 8006fec:	46bd      	mov	sp, r7
 8006fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ff2:	4770      	bx	lr

08006ff4 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8006ff4:	b480      	push	{r7}
 8006ff6:	b085      	sub	sp, #20
 8006ff8:	af00      	add	r7, sp, #0
 8006ffa:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8007000:	68fb      	ldr	r3, [r7, #12]
 8007002:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	68fa      	ldr	r2, [r7, #12]
 800700a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800700e:	f023 0303 	bic.w	r3, r3, #3
 8007012:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007014:	68fb      	ldr	r3, [r7, #12]
 8007016:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800701a:	685b      	ldr	r3, [r3, #4]
 800701c:	68fa      	ldr	r2, [r7, #12]
 800701e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007022:	f043 0302 	orr.w	r3, r3, #2
 8007026:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007028:	2300      	movs	r3, #0
}
 800702a:	4618      	mov	r0, r3
 800702c:	3714      	adds	r7, #20
 800702e:	46bd      	mov	sp, r7
 8007030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007034:	4770      	bx	lr

08007036 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8007036:	b480      	push	{r7}
 8007038:	b085      	sub	sp, #20
 800703a:	af00      	add	r7, sp, #0
 800703c:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	695b      	ldr	r3, [r3, #20]
 8007042:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	699b      	ldr	r3, [r3, #24]
 8007048:	68fa      	ldr	r2, [r7, #12]
 800704a:	4013      	ands	r3, r2
 800704c:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800704e:	68fb      	ldr	r3, [r7, #12]
}
 8007050:	4618      	mov	r0, r3
 8007052:	3714      	adds	r7, #20
 8007054:	46bd      	mov	sp, r7
 8007056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800705a:	4770      	bx	lr

0800705c <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800705c:	b480      	push	{r7}
 800705e:	b085      	sub	sp, #20
 8007060:	af00      	add	r7, sp, #0
 8007062:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8007068:	68fb      	ldr	r3, [r7, #12]
 800706a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800706e:	699b      	ldr	r3, [r3, #24]
 8007070:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8007072:	68fb      	ldr	r3, [r7, #12]
 8007074:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007078:	69db      	ldr	r3, [r3, #28]
 800707a:	68ba      	ldr	r2, [r7, #8]
 800707c:	4013      	ands	r3, r2
 800707e:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8007080:	68bb      	ldr	r3, [r7, #8]
 8007082:	0c1b      	lsrs	r3, r3, #16
}
 8007084:	4618      	mov	r0, r3
 8007086:	3714      	adds	r7, #20
 8007088:	46bd      	mov	sp, r7
 800708a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800708e:	4770      	bx	lr

08007090 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8007090:	b480      	push	{r7}
 8007092:	b085      	sub	sp, #20
 8007094:	af00      	add	r7, sp, #0
 8007096:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800709c:	68fb      	ldr	r3, [r7, #12]
 800709e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80070a2:	699b      	ldr	r3, [r3, #24]
 80070a4:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80070a6:	68fb      	ldr	r3, [r7, #12]
 80070a8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80070ac:	69db      	ldr	r3, [r3, #28]
 80070ae:	68ba      	ldr	r2, [r7, #8]
 80070b0:	4013      	ands	r3, r2
 80070b2:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 80070b4:	68bb      	ldr	r3, [r7, #8]
 80070b6:	b29b      	uxth	r3, r3
}
 80070b8:	4618      	mov	r0, r3
 80070ba:	3714      	adds	r7, #20
 80070bc:	46bd      	mov	sp, r7
 80070be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070c2:	4770      	bx	lr

080070c4 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80070c4:	b480      	push	{r7}
 80070c6:	b085      	sub	sp, #20
 80070c8:	af00      	add	r7, sp, #0
 80070ca:	6078      	str	r0, [r7, #4]
 80070cc:	460b      	mov	r3, r1
 80070ce:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 80070d4:	78fb      	ldrb	r3, [r7, #3]
 80070d6:	015a      	lsls	r2, r3, #5
 80070d8:	68fb      	ldr	r3, [r7, #12]
 80070da:	4413      	add	r3, r2
 80070dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80070e0:	689b      	ldr	r3, [r3, #8]
 80070e2:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 80070e4:	68fb      	ldr	r3, [r7, #12]
 80070e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80070ea:	695b      	ldr	r3, [r3, #20]
 80070ec:	68ba      	ldr	r2, [r7, #8]
 80070ee:	4013      	ands	r3, r2
 80070f0:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80070f2:	68bb      	ldr	r3, [r7, #8]
}
 80070f4:	4618      	mov	r0, r3
 80070f6:	3714      	adds	r7, #20
 80070f8:	46bd      	mov	sp, r7
 80070fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070fe:	4770      	bx	lr

08007100 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8007100:	b480      	push	{r7}
 8007102:	b087      	sub	sp, #28
 8007104:	af00      	add	r7, sp, #0
 8007106:	6078      	str	r0, [r7, #4]
 8007108:	460b      	mov	r3, r1
 800710a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 8007110:	697b      	ldr	r3, [r7, #20]
 8007112:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007116:	691b      	ldr	r3, [r3, #16]
 8007118:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800711a:	697b      	ldr	r3, [r7, #20]
 800711c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007120:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007122:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8007124:	78fb      	ldrb	r3, [r7, #3]
 8007126:	f003 030f 	and.w	r3, r3, #15
 800712a:	68fa      	ldr	r2, [r7, #12]
 800712c:	fa22 f303 	lsr.w	r3, r2, r3
 8007130:	01db      	lsls	r3, r3, #7
 8007132:	b2db      	uxtb	r3, r3
 8007134:	693a      	ldr	r2, [r7, #16]
 8007136:	4313      	orrs	r3, r2
 8007138:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800713a:	78fb      	ldrb	r3, [r7, #3]
 800713c:	015a      	lsls	r2, r3, #5
 800713e:	697b      	ldr	r3, [r7, #20]
 8007140:	4413      	add	r3, r2
 8007142:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007146:	689b      	ldr	r3, [r3, #8]
 8007148:	693a      	ldr	r2, [r7, #16]
 800714a:	4013      	ands	r3, r2
 800714c:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800714e:	68bb      	ldr	r3, [r7, #8]
}
 8007150:	4618      	mov	r0, r3
 8007152:	371c      	adds	r7, #28
 8007154:	46bd      	mov	sp, r7
 8007156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800715a:	4770      	bx	lr

0800715c <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800715c:	b480      	push	{r7}
 800715e:	b083      	sub	sp, #12
 8007160:	af00      	add	r7, sp, #0
 8007162:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	695b      	ldr	r3, [r3, #20]
 8007168:	f003 0301 	and.w	r3, r3, #1
}
 800716c:	4618      	mov	r0, r3
 800716e:	370c      	adds	r7, #12
 8007170:	46bd      	mov	sp, r7
 8007172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007176:	4770      	bx	lr

08007178 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8007178:	b480      	push	{r7}
 800717a:	b085      	sub	sp, #20
 800717c:	af00      	add	r7, sp, #0
 800717e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8007184:	68fb      	ldr	r3, [r7, #12]
 8007186:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	68fa      	ldr	r2, [r7, #12]
 800718e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007192:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8007196:	f023 0307 	bic.w	r3, r3, #7
 800719a:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800719c:	68fb      	ldr	r3, [r7, #12]
 800719e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80071a2:	685b      	ldr	r3, [r3, #4]
 80071a4:	68fa      	ldr	r2, [r7, #12]
 80071a6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80071aa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80071ae:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80071b0:	2300      	movs	r3, #0
}
 80071b2:	4618      	mov	r0, r3
 80071b4:	3714      	adds	r7, #20
 80071b6:	46bd      	mov	sp, r7
 80071b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071bc:	4770      	bx	lr
	...

080071c0 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 80071c0:	b480      	push	{r7}
 80071c2:	b087      	sub	sp, #28
 80071c4:	af00      	add	r7, sp, #0
 80071c6:	60f8      	str	r0, [r7, #12]
 80071c8:	460b      	mov	r3, r1
 80071ca:	607a      	str	r2, [r7, #4]
 80071cc:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80071ce:	68fb      	ldr	r3, [r7, #12]
 80071d0:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80071d2:	68fb      	ldr	r3, [r7, #12]
 80071d4:	333c      	adds	r3, #60	; 0x3c
 80071d6:	3304      	adds	r3, #4
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 80071dc:	693b      	ldr	r3, [r7, #16]
 80071de:	4a26      	ldr	r2, [pc, #152]	; (8007278 <USB_EP0_OutStart+0xb8>)
 80071e0:	4293      	cmp	r3, r2
 80071e2:	d90a      	bls.n	80071fa <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80071e4:	697b      	ldr	r3, [r7, #20]
 80071e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80071f0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80071f4:	d101      	bne.n	80071fa <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 80071f6:	2300      	movs	r3, #0
 80071f8:	e037      	b.n	800726a <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 80071fa:	697b      	ldr	r3, [r7, #20]
 80071fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007200:	461a      	mov	r2, r3
 8007202:	2300      	movs	r3, #0
 8007204:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8007206:	697b      	ldr	r3, [r7, #20]
 8007208:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800720c:	691b      	ldr	r3, [r3, #16]
 800720e:	697a      	ldr	r2, [r7, #20]
 8007210:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007214:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007218:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800721a:	697b      	ldr	r3, [r7, #20]
 800721c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007220:	691b      	ldr	r3, [r3, #16]
 8007222:	697a      	ldr	r2, [r7, #20]
 8007224:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007228:	f043 0318 	orr.w	r3, r3, #24
 800722c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800722e:	697b      	ldr	r3, [r7, #20]
 8007230:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007234:	691b      	ldr	r3, [r3, #16]
 8007236:	697a      	ldr	r2, [r7, #20]
 8007238:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800723c:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8007240:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8007242:	7afb      	ldrb	r3, [r7, #11]
 8007244:	2b01      	cmp	r3, #1
 8007246:	d10f      	bne.n	8007268 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8007248:	697b      	ldr	r3, [r7, #20]
 800724a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800724e:	461a      	mov	r2, r3
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8007254:	697b      	ldr	r3, [r7, #20]
 8007256:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	697a      	ldr	r2, [r7, #20]
 800725e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007262:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8007266:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007268:	2300      	movs	r3, #0
}
 800726a:	4618      	mov	r0, r3
 800726c:	371c      	adds	r7, #28
 800726e:	46bd      	mov	sp, r7
 8007270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007274:	4770      	bx	lr
 8007276:	bf00      	nop
 8007278:	4f54300a 	.word	0x4f54300a

0800727c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800727c:	b480      	push	{r7}
 800727e:	b085      	sub	sp, #20
 8007280:	af00      	add	r7, sp, #0
 8007282:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8007284:	2300      	movs	r3, #0
 8007286:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8007288:	68fb      	ldr	r3, [r7, #12]
 800728a:	3301      	adds	r3, #1
 800728c:	60fb      	str	r3, [r7, #12]
 800728e:	68fb      	ldr	r3, [r7, #12]
 8007290:	4a13      	ldr	r2, [pc, #76]	; (80072e0 <USB_CoreReset+0x64>)
 8007292:	4293      	cmp	r3, r2
 8007294:	d901      	bls.n	800729a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8007296:	2303      	movs	r3, #3
 8007298:	e01b      	b.n	80072d2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	691b      	ldr	r3, [r3, #16]
 800729e:	2b00      	cmp	r3, #0
 80072a0:	daf2      	bge.n	8007288 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80072a2:	2300      	movs	r3, #0
 80072a4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	691b      	ldr	r3, [r3, #16]
 80072aa:	f043 0201 	orr.w	r2, r3, #1
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80072b2:	68fb      	ldr	r3, [r7, #12]
 80072b4:	3301      	adds	r3, #1
 80072b6:	60fb      	str	r3, [r7, #12]
 80072b8:	68fb      	ldr	r3, [r7, #12]
 80072ba:	4a09      	ldr	r2, [pc, #36]	; (80072e0 <USB_CoreReset+0x64>)
 80072bc:	4293      	cmp	r3, r2
 80072be:	d901      	bls.n	80072c4 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80072c0:	2303      	movs	r3, #3
 80072c2:	e006      	b.n	80072d2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	691b      	ldr	r3, [r3, #16]
 80072c8:	f003 0301 	and.w	r3, r3, #1
 80072cc:	2b01      	cmp	r3, #1
 80072ce:	d0f0      	beq.n	80072b2 <USB_CoreReset+0x36>

  return HAL_OK;
 80072d0:	2300      	movs	r3, #0
}
 80072d2:	4618      	mov	r0, r3
 80072d4:	3714      	adds	r7, #20
 80072d6:	46bd      	mov	sp, r7
 80072d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072dc:	4770      	bx	lr
 80072de:	bf00      	nop
 80072e0:	00030d40 	.word	0x00030d40

080072e4 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80072e4:	b580      	push	{r7, lr}
 80072e6:	b084      	sub	sp, #16
 80072e8:	af00      	add	r7, sp, #0
 80072ea:	6078      	str	r0, [r7, #4]
 80072ec:	460b      	mov	r3, r1
 80072ee:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80072f0:	f44f 7007 	mov.w	r0, #540	; 0x21c
 80072f4:	f002 fa76 	bl	80097e4 <malloc>
 80072f8:	4603      	mov	r3, r0
 80072fa:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80072fc:	68fb      	ldr	r3, [r7, #12]
 80072fe:	2b00      	cmp	r3, #0
 8007300:	d105      	bne.n	800730e <USBD_CDC_Init+0x2a>
  {
    pdev->pClassData = NULL;
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	2200      	movs	r2, #0
 8007306:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 800730a:	2302      	movs	r3, #2
 800730c:	e066      	b.n	80073dc <USBD_CDC_Init+0xf8>
  }

  pdev->pClassData = (void *)hcdc;
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	68fa      	ldr	r2, [r7, #12]
 8007312:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	7c1b      	ldrb	r3, [r3, #16]
 800731a:	2b00      	cmp	r3, #0
 800731c:	d119      	bne.n	8007352 <USBD_CDC_Init+0x6e>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800731e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007322:	2202      	movs	r2, #2
 8007324:	2181      	movs	r1, #129	; 0x81
 8007326:	6878      	ldr	r0, [r7, #4]
 8007328:	f002 f8d7 	bl	80094da <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

     pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	2201      	movs	r2, #1
 8007330:	871a      	strh	r2, [r3, #56]	; 0x38

     /* Open EP OUT */
     (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8007332:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007336:	2202      	movs	r2, #2
 8007338:	2101      	movs	r1, #1
 800733a:	6878      	ldr	r0, [r7, #4]
 800733c:	f002 f8cd 	bl	80094da <USBD_LL_OpenEP>
                          CDC_DATA_HS_OUT_PACKET_SIZE);

      pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	2201      	movs	r2, #1
 8007344:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

      /* Set bInterval for CDC CMD Endpoint */
      pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	2210      	movs	r2, #16
 800734c:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 8007350:	e016      	b.n	8007380 <USBD_CDC_Init+0x9c>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8007352:	2340      	movs	r3, #64	; 0x40
 8007354:	2202      	movs	r2, #2
 8007356:	2181      	movs	r1, #129	; 0x81
 8007358:	6878      	ldr	r0, [r7, #4]
 800735a:	f002 f8be 	bl	80094da <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

     pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	2201      	movs	r2, #1
 8007362:	871a      	strh	r2, [r3, #56]	; 0x38

     /* Open EP OUT */
     (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8007364:	2340      	movs	r3, #64	; 0x40
 8007366:	2202      	movs	r2, #2
 8007368:	2101      	movs	r1, #1
 800736a:	6878      	ldr	r0, [r7, #4]
 800736c:	f002 f8b5 	bl	80094da <USBD_LL_OpenEP>
                          CDC_DATA_FS_OUT_PACKET_SIZE);

      pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	2201      	movs	r2, #1
 8007374:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

      /* Set bInterval for CMD Endpoint */
      pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	2210      	movs	r2, #16
 800737c:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8007380:	2308      	movs	r3, #8
 8007382:	2203      	movs	r2, #3
 8007384:	2182      	movs	r1, #130	; 0x82
 8007386:	6878      	ldr	r0, [r7, #4]
 8007388:	f002 f8a7 	bl	80094da <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	2201      	movs	r2, #1
 8007390:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800739e:	68fb      	ldr	r3, [r7, #12]
 80073a0:	2200      	movs	r2, #0
 80073a2:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 80073a6:	68fb      	ldr	r3, [r7, #12]
 80073a8:	2200      	movs	r2, #0
 80073aa:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	7c1b      	ldrb	r3, [r3, #16]
 80073b2:	2b00      	cmp	r3, #0
 80073b4:	d109      	bne.n	80073ca <USBD_CDC_Init+0xe6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80073b6:	68fb      	ldr	r3, [r7, #12]
 80073b8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80073bc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80073c0:	2101      	movs	r1, #1
 80073c2:	6878      	ldr	r0, [r7, #4]
 80073c4:	f002 f978 	bl	80096b8 <USBD_LL_PrepareReceive>
 80073c8:	e007      	b.n	80073da <USBD_CDC_Init+0xf6>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80073ca:	68fb      	ldr	r3, [r7, #12]
 80073cc:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80073d0:	2340      	movs	r3, #64	; 0x40
 80073d2:	2101      	movs	r1, #1
 80073d4:	6878      	ldr	r0, [r7, #4]
 80073d6:	f002 f96f 	bl	80096b8 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80073da:	2300      	movs	r3, #0
}
 80073dc:	4618      	mov	r0, r3
 80073de:	3710      	adds	r7, #16
 80073e0:	46bd      	mov	sp, r7
 80073e2:	bd80      	pop	{r7, pc}

080073e4 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80073e4:	b580      	push	{r7, lr}
 80073e6:	b084      	sub	sp, #16
 80073e8:	af00      	add	r7, sp, #0
 80073ea:	6078      	str	r0, [r7, #4]
 80073ec:	460b      	mov	r3, r1
 80073ee:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  uint8_t ret = 0U;
 80073f0:	2300      	movs	r3, #0
 80073f2:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 80073f4:	2181      	movs	r1, #129	; 0x81
 80073f6:	6878      	ldr	r0, [r7, #4]
 80073f8:	f002 f895 	bl	8009526 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	2200      	movs	r2, #0
 8007400:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8007402:	2101      	movs	r1, #1
 8007404:	6878      	ldr	r0, [r7, #4]
 8007406:	f002 f88e 	bl	8009526 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	2200      	movs	r2, #0
 800740e:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8007412:	2182      	movs	r1, #130	; 0x82
 8007414:	6878      	ldr	r0, [r7, #4]
 8007416:	f002 f886 	bl	8009526 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	2200      	movs	r2, #0
 800741e:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	2200      	movs	r2, #0
 8007426:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007430:	2b00      	cmp	r3, #0
 8007432:	d00e      	beq.n	8007452 <USBD_CDC_DeInit+0x6e>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800743a:	685b      	ldr	r3, [r3, #4]
 800743c:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007444:	4618      	mov	r0, r3
 8007446:	f002 f9d5 	bl	80097f4 <free>
    pdev->pClassData = NULL;
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	2200      	movs	r2, #0
 800744e:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return ret;
 8007452:	7bfb      	ldrb	r3, [r7, #15]
}
 8007454:	4618      	mov	r0, r3
 8007456:	3710      	adds	r7, #16
 8007458:	46bd      	mov	sp, r7
 800745a:	bd80      	pop	{r7, pc}

0800745c <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800745c:	b580      	push	{r7, lr}
 800745e:	b086      	sub	sp, #24
 8007460:	af00      	add	r7, sp, #0
 8007462:	6078      	str	r0, [r7, #4]
 8007464:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800746c:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 800746e:	2300      	movs	r3, #0
 8007470:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 8007472:	2300      	movs	r3, #0
 8007474:	81bb      	strh	r3, [r7, #12]
  USBD_StatusTypeDef ret = USBD_OK;
 8007476:	2300      	movs	r3, #0
 8007478:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800747a:	683b      	ldr	r3, [r7, #0]
 800747c:	781b      	ldrb	r3, [r3, #0]
 800747e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007482:	2b00      	cmp	r3, #0
 8007484:	d03a      	beq.n	80074fc <USBD_CDC_Setup+0xa0>
 8007486:	2b20      	cmp	r3, #32
 8007488:	f040 8097 	bne.w	80075ba <USBD_CDC_Setup+0x15e>
  {
  case USB_REQ_TYPE_CLASS:
    if (req->wLength != 0U)
 800748c:	683b      	ldr	r3, [r7, #0]
 800748e:	88db      	ldrh	r3, [r3, #6]
 8007490:	2b00      	cmp	r3, #0
 8007492:	d029      	beq.n	80074e8 <USBD_CDC_Setup+0x8c>
    {
      if ((req->bmRequest & 0x80U) != 0U)
 8007494:	683b      	ldr	r3, [r7, #0]
 8007496:	781b      	ldrb	r3, [r3, #0]
 8007498:	b25b      	sxtb	r3, r3
 800749a:	2b00      	cmp	r3, #0
 800749c:	da11      	bge.n	80074c2 <USBD_CDC_Setup+0x66>
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80074a4:	689b      	ldr	r3, [r3, #8]
 80074a6:	683a      	ldr	r2, [r7, #0]
 80074a8:	7850      	ldrb	r0, [r2, #1]
                                                          (uint8_t *)hcdc->data,
 80074aa:	6939      	ldr	r1, [r7, #16]
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80074ac:	683a      	ldr	r2, [r7, #0]
 80074ae:	88d2      	ldrh	r2, [r2, #6]
 80074b0:	4798      	blx	r3
                                                          req->wLength);

          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, req->wLength);
 80074b2:	6939      	ldr	r1, [r7, #16]
 80074b4:	683b      	ldr	r3, [r7, #0]
 80074b6:	88db      	ldrh	r3, [r3, #6]
 80074b8:	461a      	mov	r2, r3
 80074ba:	6878      	ldr	r0, [r7, #4]
 80074bc:	f001 fa9d 	bl	80089fa <USBD_CtlSendData>
    else
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                        (uint8_t *)req, 0U);
    }
    break;
 80074c0:	e082      	b.n	80075c8 <USBD_CDC_Setup+0x16c>
        hcdc->CmdOpCode = req->bRequest;
 80074c2:	683b      	ldr	r3, [r7, #0]
 80074c4:	785a      	ldrb	r2, [r3, #1]
 80074c6:	693b      	ldr	r3, [r7, #16]
 80074c8:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
        hcdc->CmdLength = (uint8_t)req->wLength;
 80074cc:	683b      	ldr	r3, [r7, #0]
 80074ce:	88db      	ldrh	r3, [r3, #6]
 80074d0:	b2da      	uxtb	r2, r3
 80074d2:	693b      	ldr	r3, [r7, #16]
 80074d4:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
        (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 80074d8:	6939      	ldr	r1, [r7, #16]
 80074da:	683b      	ldr	r3, [r7, #0]
 80074dc:	88db      	ldrh	r3, [r3, #6]
 80074de:	461a      	mov	r2, r3
 80074e0:	6878      	ldr	r0, [r7, #4]
 80074e2:	f001 fab6 	bl	8008a52 <USBD_CtlPrepareRx>
    break;
 80074e6:	e06f      	b.n	80075c8 <USBD_CDC_Setup+0x16c>
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80074ee:	689b      	ldr	r3, [r3, #8]
 80074f0:	683a      	ldr	r2, [r7, #0]
 80074f2:	7850      	ldrb	r0, [r2, #1]
 80074f4:	2200      	movs	r2, #0
 80074f6:	6839      	ldr	r1, [r7, #0]
 80074f8:	4798      	blx	r3
    break;
 80074fa:	e065      	b.n	80075c8 <USBD_CDC_Setup+0x16c>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 80074fc:	683b      	ldr	r3, [r7, #0]
 80074fe:	785b      	ldrb	r3, [r3, #1]
 8007500:	2b0b      	cmp	r3, #11
 8007502:	d84f      	bhi.n	80075a4 <USBD_CDC_Setup+0x148>
 8007504:	a201      	add	r2, pc, #4	; (adr r2, 800750c <USBD_CDC_Setup+0xb0>)
 8007506:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800750a:	bf00      	nop
 800750c:	0800753d 	.word	0x0800753d
 8007510:	080075b3 	.word	0x080075b3
 8007514:	080075a5 	.word	0x080075a5
 8007518:	080075a5 	.word	0x080075a5
 800751c:	080075a5 	.word	0x080075a5
 8007520:	080075a5 	.word	0x080075a5
 8007524:	080075a5 	.word	0x080075a5
 8007528:	080075a5 	.word	0x080075a5
 800752c:	080075a5 	.word	0x080075a5
 8007530:	080075a5 	.word	0x080075a5
 8007534:	08007565 	.word	0x08007565
 8007538:	0800758d 	.word	0x0800758d
    {
    case USB_REQ_GET_STATUS:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007542:	2b03      	cmp	r3, #3
 8007544:	d107      	bne.n	8007556 <USBD_CDC_Setup+0xfa>
      {
        (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8007546:	f107 030c 	add.w	r3, r7, #12
 800754a:	2202      	movs	r2, #2
 800754c:	4619      	mov	r1, r3
 800754e:	6878      	ldr	r0, [r7, #4]
 8007550:	f001 fa53 	bl	80089fa <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 8007554:	e030      	b.n	80075b8 <USBD_CDC_Setup+0x15c>
        USBD_CtlError(pdev, req);
 8007556:	6839      	ldr	r1, [r7, #0]
 8007558:	6878      	ldr	r0, [r7, #4]
 800755a:	f001 f9dd 	bl	8008918 <USBD_CtlError>
        ret = USBD_FAIL;
 800755e:	2303      	movs	r3, #3
 8007560:	75fb      	strb	r3, [r7, #23]
      break;
 8007562:	e029      	b.n	80075b8 <USBD_CDC_Setup+0x15c>

    case USB_REQ_GET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800756a:	2b03      	cmp	r3, #3
 800756c:	d107      	bne.n	800757e <USBD_CDC_Setup+0x122>
      {
        (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800756e:	f107 030f 	add.w	r3, r7, #15
 8007572:	2201      	movs	r2, #1
 8007574:	4619      	mov	r1, r3
 8007576:	6878      	ldr	r0, [r7, #4]
 8007578:	f001 fa3f 	bl	80089fa <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 800757c:	e01c      	b.n	80075b8 <USBD_CDC_Setup+0x15c>
        USBD_CtlError(pdev, req);
 800757e:	6839      	ldr	r1, [r7, #0]
 8007580:	6878      	ldr	r0, [r7, #4]
 8007582:	f001 f9c9 	bl	8008918 <USBD_CtlError>
        ret = USBD_FAIL;
 8007586:	2303      	movs	r3, #3
 8007588:	75fb      	strb	r3, [r7, #23]
      break;
 800758a:	e015      	b.n	80075b8 <USBD_CDC_Setup+0x15c>

    case USB_REQ_SET_INTERFACE:
      if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007592:	2b03      	cmp	r3, #3
 8007594:	d00f      	beq.n	80075b6 <USBD_CDC_Setup+0x15a>
      {
        USBD_CtlError(pdev, req);
 8007596:	6839      	ldr	r1, [r7, #0]
 8007598:	6878      	ldr	r0, [r7, #4]
 800759a:	f001 f9bd 	bl	8008918 <USBD_CtlError>
        ret = USBD_FAIL;
 800759e:	2303      	movs	r3, #3
 80075a0:	75fb      	strb	r3, [r7, #23]
      }
      break;
 80075a2:	e008      	b.n	80075b6 <USBD_CDC_Setup+0x15a>

    case USB_REQ_CLEAR_FEATURE:
      break;

    default:
      USBD_CtlError(pdev, req);
 80075a4:	6839      	ldr	r1, [r7, #0]
 80075a6:	6878      	ldr	r0, [r7, #4]
 80075a8:	f001 f9b6 	bl	8008918 <USBD_CtlError>
      ret = USBD_FAIL;
 80075ac:	2303      	movs	r3, #3
 80075ae:	75fb      	strb	r3, [r7, #23]
      break;
 80075b0:	e002      	b.n	80075b8 <USBD_CDC_Setup+0x15c>
      break;
 80075b2:	bf00      	nop
 80075b4:	e008      	b.n	80075c8 <USBD_CDC_Setup+0x16c>
      break;
 80075b6:	bf00      	nop
    }
    break;
 80075b8:	e006      	b.n	80075c8 <USBD_CDC_Setup+0x16c>

  default:
    USBD_CtlError(pdev, req);
 80075ba:	6839      	ldr	r1, [r7, #0]
 80075bc:	6878      	ldr	r0, [r7, #4]
 80075be:	f001 f9ab 	bl	8008918 <USBD_CtlError>
    ret = USBD_FAIL;
 80075c2:	2303      	movs	r3, #3
 80075c4:	75fb      	strb	r3, [r7, #23]
    break;
 80075c6:	bf00      	nop
  }

  return (uint8_t)ret;
 80075c8:	7dfb      	ldrb	r3, [r7, #23]
}
 80075ca:	4618      	mov	r0, r3
 80075cc:	3718      	adds	r7, #24
 80075ce:	46bd      	mov	sp, r7
 80075d0:	bd80      	pop	{r7, pc}
 80075d2:	bf00      	nop

080075d4 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80075d4:	b580      	push	{r7, lr}
 80075d6:	b084      	sub	sp, #16
 80075d8:	af00      	add	r7, sp, #0
 80075da:	6078      	str	r0, [r7, #4]
 80075dc:	460b      	mov	r3, r1
 80075de:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80075e6:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80075ee:	2b00      	cmp	r3, #0
 80075f0:	d101      	bne.n	80075f6 <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80075f2:	2303      	movs	r3, #3
 80075f4:	e049      	b.n	800768a <USBD_CDC_DataIn+0xb6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80075fc:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 80075fe:	78fa      	ldrb	r2, [r7, #3]
 8007600:	6879      	ldr	r1, [r7, #4]
 8007602:	4613      	mov	r3, r2
 8007604:	009b      	lsls	r3, r3, #2
 8007606:	4413      	add	r3, r2
 8007608:	009b      	lsls	r3, r3, #2
 800760a:	440b      	add	r3, r1
 800760c:	3318      	adds	r3, #24
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	2b00      	cmp	r3, #0
 8007612:	d029      	beq.n	8007668 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8007614:	78fa      	ldrb	r2, [r7, #3]
 8007616:	6879      	ldr	r1, [r7, #4]
 8007618:	4613      	mov	r3, r2
 800761a:	009b      	lsls	r3, r3, #2
 800761c:	4413      	add	r3, r2
 800761e:	009b      	lsls	r3, r3, #2
 8007620:	440b      	add	r3, r1
 8007622:	3318      	adds	r3, #24
 8007624:	681a      	ldr	r2, [r3, #0]
 8007626:	78f9      	ldrb	r1, [r7, #3]
 8007628:	68f8      	ldr	r0, [r7, #12]
 800762a:	460b      	mov	r3, r1
 800762c:	00db      	lsls	r3, r3, #3
 800762e:	1a5b      	subs	r3, r3, r1
 8007630:	009b      	lsls	r3, r3, #2
 8007632:	4403      	add	r3, r0
 8007634:	3344      	adds	r3, #68	; 0x44
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	fbb2 f1f3 	udiv	r1, r2, r3
 800763c:	fb03 f301 	mul.w	r3, r3, r1
 8007640:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8007642:	2b00      	cmp	r3, #0
 8007644:	d110      	bne.n	8007668 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 8007646:	78fa      	ldrb	r2, [r7, #3]
 8007648:	6879      	ldr	r1, [r7, #4]
 800764a:	4613      	mov	r3, r2
 800764c:	009b      	lsls	r3, r3, #2
 800764e:	4413      	add	r3, r2
 8007650:	009b      	lsls	r3, r3, #2
 8007652:	440b      	add	r3, r1
 8007654:	3318      	adds	r3, #24
 8007656:	2200      	movs	r2, #0
 8007658:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800765a:	78f9      	ldrb	r1, [r7, #3]
 800765c:	2300      	movs	r3, #0
 800765e:	2200      	movs	r2, #0
 8007660:	6878      	ldr	r0, [r7, #4]
 8007662:	f002 f808 	bl	8009676 <USBD_LL_Transmit>
 8007666:	e00f      	b.n	8007688 <USBD_CDC_DataIn+0xb4>
  }
  else
  {
    hcdc->TxState = 0U;
 8007668:	68bb      	ldr	r3, [r7, #8]
 800766a:	2200      	movs	r2, #0
 800766c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007676:	691b      	ldr	r3, [r3, #16]
 8007678:	68ba      	ldr	r2, [r7, #8]
 800767a:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800767e:	68ba      	ldr	r2, [r7, #8]
 8007680:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8007684:	78fa      	ldrb	r2, [r7, #3]
 8007686:	4798      	blx	r3
  }

  return (uint8_t)USBD_OK;
 8007688:	2300      	movs	r3, #0
}
 800768a:	4618      	mov	r0, r3
 800768c:	3710      	adds	r7, #16
 800768e:	46bd      	mov	sp, r7
 8007690:	bd80      	pop	{r7, pc}

08007692 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007692:	b580      	push	{r7, lr}
 8007694:	b084      	sub	sp, #16
 8007696:	af00      	add	r7, sp, #0
 8007698:	6078      	str	r0, [r7, #4]
 800769a:	460b      	mov	r3, r1
 800769c:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80076a4:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80076ac:	2b00      	cmp	r3, #0
 80076ae:	d101      	bne.n	80076b4 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80076b0:	2303      	movs	r3, #3
 80076b2:	e015      	b.n	80076e0 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80076b4:	78fb      	ldrb	r3, [r7, #3]
 80076b6:	4619      	mov	r1, r3
 80076b8:	6878      	ldr	r0, [r7, #4]
 80076ba:	f002 f81e 	bl	80096fa <USBD_LL_GetRxDataSize>
 80076be:	4602      	mov	r2, r0
 80076c0:	68fb      	ldr	r3, [r7, #12]
 80076c2:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80076cc:	68db      	ldr	r3, [r3, #12]
 80076ce:	68fa      	ldr	r2, [r7, #12]
 80076d0:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 80076d4:	68fa      	ldr	r2, [r7, #12]
 80076d6:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 80076da:	4611      	mov	r1, r2
 80076dc:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 80076de:	2300      	movs	r3, #0
}
 80076e0:	4618      	mov	r0, r3
 80076e2:	3710      	adds	r7, #16
 80076e4:	46bd      	mov	sp, r7
 80076e6:	bd80      	pop	{r7, pc}

080076e8 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80076e8:	b580      	push	{r7, lr}
 80076ea:	b084      	sub	sp, #16
 80076ec:	af00      	add	r7, sp, #0
 80076ee:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80076f6:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80076fe:	2b00      	cmp	r3, #0
 8007700:	d015      	beq.n	800772e <USBD_CDC_EP0_RxReady+0x46>
 8007702:	68fb      	ldr	r3, [r7, #12]
 8007704:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8007708:	2bff      	cmp	r3, #255	; 0xff
 800770a:	d010      	beq.n	800772e <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007712:	689b      	ldr	r3, [r3, #8]
 8007714:	68fa      	ldr	r2, [r7, #12]
 8007716:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 800771a:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800771c:	68fa      	ldr	r2, [r7, #12]
 800771e:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8007722:	b292      	uxth	r2, r2
 8007724:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8007726:	68fb      	ldr	r3, [r7, #12]
 8007728:	22ff      	movs	r2, #255	; 0xff
 800772a:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }

  return (uint8_t)USBD_OK;
 800772e:	2300      	movs	r3, #0
}
 8007730:	4618      	mov	r0, r3
 8007732:	3710      	adds	r7, #16
 8007734:	46bd      	mov	sp, r7
 8007736:	bd80      	pop	{r7, pc}

08007738 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8007738:	b480      	push	{r7}
 800773a:	b083      	sub	sp, #12
 800773c:	af00      	add	r7, sp, #0
 800773e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	2243      	movs	r2, #67	; 0x43
 8007744:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 8007746:	4b03      	ldr	r3, [pc, #12]	; (8007754 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8007748:	4618      	mov	r0, r3
 800774a:	370c      	adds	r7, #12
 800774c:	46bd      	mov	sp, r7
 800774e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007752:	4770      	bx	lr
 8007754:	200000ac 	.word	0x200000ac

08007758 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8007758:	b480      	push	{r7}
 800775a:	b083      	sub	sp, #12
 800775c:	af00      	add	r7, sp, #0
 800775e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	2243      	movs	r2, #67	; 0x43
 8007764:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 8007766:	4b03      	ldr	r3, [pc, #12]	; (8007774 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8007768:	4618      	mov	r0, r3
 800776a:	370c      	adds	r7, #12
 800776c:	46bd      	mov	sp, r7
 800776e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007772:	4770      	bx	lr
 8007774:	20000068 	.word	0x20000068

08007778 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8007778:	b480      	push	{r7}
 800777a:	b083      	sub	sp, #12
 800777c:	af00      	add	r7, sp, #0
 800777e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	2243      	movs	r2, #67	; 0x43
 8007784:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 8007786:	4b03      	ldr	r3, [pc, #12]	; (8007794 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8007788:	4618      	mov	r0, r3
 800778a:	370c      	adds	r7, #12
 800778c:	46bd      	mov	sp, r7
 800778e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007792:	4770      	bx	lr
 8007794:	200000f0 	.word	0x200000f0

08007798 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8007798:	b480      	push	{r7}
 800779a:	b083      	sub	sp, #12
 800779c:	af00      	add	r7, sp, #0
 800779e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	220a      	movs	r2, #10
 80077a4:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 80077a6:	4b03      	ldr	r3, [pc, #12]	; (80077b4 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 80077a8:	4618      	mov	r0, r3
 80077aa:	370c      	adds	r7, #12
 80077ac:	46bd      	mov	sp, r7
 80077ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077b2:	4770      	bx	lr
 80077b4:	20000024 	.word	0x20000024

080077b8 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 80077b8:	b480      	push	{r7}
 80077ba:	b083      	sub	sp, #12
 80077bc:	af00      	add	r7, sp, #0
 80077be:	6078      	str	r0, [r7, #4]
 80077c0:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 80077c2:	683b      	ldr	r3, [r7, #0]
 80077c4:	2b00      	cmp	r3, #0
 80077c6:	d101      	bne.n	80077cc <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 80077c8:	2303      	movs	r3, #3
 80077ca:	e004      	b.n	80077d6 <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	683a      	ldr	r2, [r7, #0]
 80077d0:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 80077d4:	2300      	movs	r3, #0
}
 80077d6:	4618      	mov	r0, r3
 80077d8:	370c      	adds	r7, #12
 80077da:	46bd      	mov	sp, r7
 80077dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077e0:	4770      	bx	lr

080077e2 <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 80077e2:	b480      	push	{r7}
 80077e4:	b087      	sub	sp, #28
 80077e6:	af00      	add	r7, sp, #0
 80077e8:	60f8      	str	r0, [r7, #12]
 80077ea:	60b9      	str	r1, [r7, #8]
 80077ec:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80077ee:	68fb      	ldr	r3, [r7, #12]
 80077f0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80077f4:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 80077f6:	697b      	ldr	r3, [r7, #20]
 80077f8:	68ba      	ldr	r2, [r7, #8]
 80077fa:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 80077fe:	697b      	ldr	r3, [r7, #20]
 8007800:	687a      	ldr	r2, [r7, #4]
 8007802:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8007806:	2300      	movs	r3, #0
}
 8007808:	4618      	mov	r0, r3
 800780a:	371c      	adds	r7, #28
 800780c:	46bd      	mov	sp, r7
 800780e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007812:	4770      	bx	lr

08007814 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8007814:	b480      	push	{r7}
 8007816:	b085      	sub	sp, #20
 8007818:	af00      	add	r7, sp, #0
 800781a:	6078      	str	r0, [r7, #4]
 800781c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007824:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8007826:	68fb      	ldr	r3, [r7, #12]
 8007828:	683a      	ldr	r2, [r7, #0]
 800782a:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800782e:	2300      	movs	r3, #0
}
 8007830:	4618      	mov	r0, r3
 8007832:	3714      	adds	r7, #20
 8007834:	46bd      	mov	sp, r7
 8007836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800783a:	4770      	bx	lr

0800783c <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800783c:	b580      	push	{r7, lr}
 800783e:	b084      	sub	sp, #16
 8007840:	af00      	add	r7, sp, #0
 8007842:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800784a:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 800784c:	2301      	movs	r3, #1
 800784e:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007856:	2b00      	cmp	r3, #0
 8007858:	d101      	bne.n	800785e <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800785a:	2303      	movs	r3, #3
 800785c:	e01a      	b.n	8007894 <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 800785e:	68bb      	ldr	r3, [r7, #8]
 8007860:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8007864:	2b00      	cmp	r3, #0
 8007866:	d114      	bne.n	8007892 <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8007868:	68bb      	ldr	r3, [r7, #8]
 800786a:	2201      	movs	r2, #1
 800786c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8007870:	68bb      	ldr	r3, [r7, #8]
 8007872:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 800787a:	68bb      	ldr	r3, [r7, #8]
 800787c:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8007880:	68bb      	ldr	r3, [r7, #8]
 8007882:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8007886:	2181      	movs	r1, #129	; 0x81
 8007888:	6878      	ldr	r0, [r7, #4]
 800788a:	f001 fef4 	bl	8009676 <USBD_LL_Transmit>

    ret = USBD_OK;
 800788e:	2300      	movs	r3, #0
 8007890:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8007892:	7bfb      	ldrb	r3, [r7, #15]
}
 8007894:	4618      	mov	r0, r3
 8007896:	3710      	adds	r7, #16
 8007898:	46bd      	mov	sp, r7
 800789a:	bd80      	pop	{r7, pc}

0800789c <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800789c:	b580      	push	{r7, lr}
 800789e:	b084      	sub	sp, #16
 80078a0:	af00      	add	r7, sp, #0
 80078a2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80078aa:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80078b2:	2b00      	cmp	r3, #0
 80078b4:	d101      	bne.n	80078ba <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 80078b6:	2303      	movs	r3, #3
 80078b8:	e016      	b.n	80078e8 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	7c1b      	ldrb	r3, [r3, #16]
 80078be:	2b00      	cmp	r3, #0
 80078c0:	d109      	bne.n	80078d6 <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80078c2:	68fb      	ldr	r3, [r7, #12]
 80078c4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80078c8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80078cc:	2101      	movs	r1, #1
 80078ce:	6878      	ldr	r0, [r7, #4]
 80078d0:	f001 fef2 	bl	80096b8 <USBD_LL_PrepareReceive>
 80078d4:	e007      	b.n	80078e6 <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80078d6:	68fb      	ldr	r3, [r7, #12]
 80078d8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80078dc:	2340      	movs	r3, #64	; 0x40
 80078de:	2101      	movs	r1, #1
 80078e0:	6878      	ldr	r0, [r7, #4]
 80078e2:	f001 fee9 	bl	80096b8 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80078e6:	2300      	movs	r3, #0
}
 80078e8:	4618      	mov	r0, r3
 80078ea:	3710      	adds	r7, #16
 80078ec:	46bd      	mov	sp, r7
 80078ee:	bd80      	pop	{r7, pc}

080078f0 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80078f0:	b580      	push	{r7, lr}
 80078f2:	b086      	sub	sp, #24
 80078f4:	af00      	add	r7, sp, #0
 80078f6:	60f8      	str	r0, [r7, #12]
 80078f8:	60b9      	str	r1, [r7, #8]
 80078fa:	4613      	mov	r3, r2
 80078fc:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80078fe:	68fb      	ldr	r3, [r7, #12]
 8007900:	2b00      	cmp	r3, #0
 8007902:	d101      	bne.n	8007908 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8007904:	2303      	movs	r3, #3
 8007906:	e025      	b.n	8007954 <USBD_Init+0x64>
  }

  /* Unlink previous class */
  if (pdev->pClass != NULL)
 8007908:	68fb      	ldr	r3, [r7, #12]
 800790a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800790e:	2b00      	cmp	r3, #0
 8007910:	d003      	beq.n	800791a <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8007912:	68fb      	ldr	r3, [r7, #12]
 8007914:	2200      	movs	r2, #0
 8007916:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  if (pdev->pConfDesc != NULL)
 800791a:	68fb      	ldr	r3, [r7, #12]
 800791c:	f8d3 32cc 	ldr.w	r3, [r3, #716]	; 0x2cc
 8007920:	2b00      	cmp	r3, #0
 8007922:	d003      	beq.n	800792c <USBD_Init+0x3c>
  {
    pdev->pConfDesc = NULL;
 8007924:	68fb      	ldr	r3, [r7, #12]
 8007926:	2200      	movs	r2, #0
 8007928:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800792c:	68bb      	ldr	r3, [r7, #8]
 800792e:	2b00      	cmp	r3, #0
 8007930:	d003      	beq.n	800793a <USBD_Init+0x4a>
  {
    pdev->pDesc = pdesc;
 8007932:	68fb      	ldr	r3, [r7, #12]
 8007934:	68ba      	ldr	r2, [r7, #8]
 8007936:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800793a:	68fb      	ldr	r3, [r7, #12]
 800793c:	2201      	movs	r2, #1
 800793e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8007942:	68fb      	ldr	r3, [r7, #12]
 8007944:	79fa      	ldrb	r2, [r7, #7]
 8007946:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8007948:	68f8      	ldr	r0, [r7, #12]
 800794a:	f001 fd5f 	bl	800940c <USBD_LL_Init>
 800794e:	4603      	mov	r3, r0
 8007950:	75fb      	strb	r3, [r7, #23]

  return ret;
 8007952:	7dfb      	ldrb	r3, [r7, #23]
}
 8007954:	4618      	mov	r0, r3
 8007956:	3718      	adds	r7, #24
 8007958:	46bd      	mov	sp, r7
 800795a:	bd80      	pop	{r7, pc}

0800795c <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800795c:	b580      	push	{r7, lr}
 800795e:	b084      	sub	sp, #16
 8007960:	af00      	add	r7, sp, #0
 8007962:	6078      	str	r0, [r7, #4]
 8007964:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8007966:	2300      	movs	r3, #0
 8007968:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800796a:	683b      	ldr	r3, [r7, #0]
 800796c:	2b00      	cmp	r3, #0
 800796e:	d101      	bne.n	8007974 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 8007970:	2303      	movs	r3, #3
 8007972:	e010      	b.n	8007996 <USBD_RegisterClass+0x3a>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	683a      	ldr	r2, [r7, #0]
 8007978:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  /* Get Device Configuration Descriptor */
#ifdef USE_USB_FS
  pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
#else /* USE_USB_HS */
  pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007982:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007984:	f107 020e 	add.w	r2, r7, #14
 8007988:	4610      	mov	r0, r2
 800798a:	4798      	blx	r3
 800798c:	4602      	mov	r2, r0
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
#endif /* USE_USB_FS */


  return USBD_OK;
 8007994:	2300      	movs	r3, #0
}
 8007996:	4618      	mov	r0, r3
 8007998:	3710      	adds	r7, #16
 800799a:	46bd      	mov	sp, r7
 800799c:	bd80      	pop	{r7, pc}

0800799e <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800799e:	b580      	push	{r7, lr}
 80079a0:	b082      	sub	sp, #8
 80079a2:	af00      	add	r7, sp, #0
 80079a4:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 80079a6:	6878      	ldr	r0, [r7, #4]
 80079a8:	f001 fd7c 	bl	80094a4 <USBD_LL_Start>
 80079ac:	4603      	mov	r3, r0
}
 80079ae:	4618      	mov	r0, r3
 80079b0:	3708      	adds	r7, #8
 80079b2:	46bd      	mov	sp, r7
 80079b4:	bd80      	pop	{r7, pc}

080079b6 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 80079b6:	b480      	push	{r7}
 80079b8:	b083      	sub	sp, #12
 80079ba:	af00      	add	r7, sp, #0
 80079bc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80079be:	2300      	movs	r3, #0
}
 80079c0:	4618      	mov	r0, r3
 80079c2:	370c      	adds	r7, #12
 80079c4:	46bd      	mov	sp, r7
 80079c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079ca:	4770      	bx	lr

080079cc <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80079cc:	b580      	push	{r7, lr}
 80079ce:	b084      	sub	sp, #16
 80079d0:	af00      	add	r7, sp, #0
 80079d2:	6078      	str	r0, [r7, #4]
 80079d4:	460b      	mov	r3, r1
 80079d6:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 80079d8:	2303      	movs	r3, #3
 80079da:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80079e2:	2b00      	cmp	r3, #0
 80079e4:	d009      	beq.n	80079fa <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80079ec:	681b      	ldr	r3, [r3, #0]
 80079ee:	78fa      	ldrb	r2, [r7, #3]
 80079f0:	4611      	mov	r1, r2
 80079f2:	6878      	ldr	r0, [r7, #4]
 80079f4:	4798      	blx	r3
 80079f6:	4603      	mov	r3, r0
 80079f8:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 80079fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80079fc:	4618      	mov	r0, r3
 80079fe:	3710      	adds	r7, #16
 8007a00:	46bd      	mov	sp, r7
 8007a02:	bd80      	pop	{r7, pc}

08007a04 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007a04:	b580      	push	{r7, lr}
 8007a06:	b082      	sub	sp, #8
 8007a08:	af00      	add	r7, sp, #0
 8007a0a:	6078      	str	r0, [r7, #4]
 8007a0c:	460b      	mov	r3, r1
 8007a0e:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007a16:	2b00      	cmp	r3, #0
 8007a18:	d007      	beq.n	8007a2a <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007a20:	685b      	ldr	r3, [r3, #4]
 8007a22:	78fa      	ldrb	r2, [r7, #3]
 8007a24:	4611      	mov	r1, r2
 8007a26:	6878      	ldr	r0, [r7, #4]
 8007a28:	4798      	blx	r3
  }

  return USBD_OK;
 8007a2a:	2300      	movs	r3, #0
}
 8007a2c:	4618      	mov	r0, r3
 8007a2e:	3708      	adds	r7, #8
 8007a30:	46bd      	mov	sp, r7
 8007a32:	bd80      	pop	{r7, pc}

08007a34 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8007a34:	b580      	push	{r7, lr}
 8007a36:	b084      	sub	sp, #16
 8007a38:	af00      	add	r7, sp, #0
 8007a3a:	6078      	str	r0, [r7, #4]
 8007a3c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007a44:	6839      	ldr	r1, [r7, #0]
 8007a46:	4618      	mov	r0, r3
 8007a48:	f000 ff2c 	bl	80088a4 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	2201      	movs	r2, #1
 8007a50:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8007a5a:	461a      	mov	r2, r3
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8007a68:	f003 031f 	and.w	r3, r3, #31
 8007a6c:	2b01      	cmp	r3, #1
 8007a6e:	d00e      	beq.n	8007a8e <USBD_LL_SetupStage+0x5a>
 8007a70:	2b01      	cmp	r3, #1
 8007a72:	d302      	bcc.n	8007a7a <USBD_LL_SetupStage+0x46>
 8007a74:	2b02      	cmp	r3, #2
 8007a76:	d014      	beq.n	8007aa2 <USBD_LL_SetupStage+0x6e>
 8007a78:	e01d      	b.n	8007ab6 <USBD_LL_SetupStage+0x82>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007a80:	4619      	mov	r1, r3
 8007a82:	6878      	ldr	r0, [r7, #4]
 8007a84:	f000 fa18 	bl	8007eb8 <USBD_StdDevReq>
 8007a88:	4603      	mov	r3, r0
 8007a8a:	73fb      	strb	r3, [r7, #15]
      break;
 8007a8c:	e020      	b.n	8007ad0 <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007a94:	4619      	mov	r1, r3
 8007a96:	6878      	ldr	r0, [r7, #4]
 8007a98:	f000 fa7c 	bl	8007f94 <USBD_StdItfReq>
 8007a9c:	4603      	mov	r3, r0
 8007a9e:	73fb      	strb	r3, [r7, #15]
      break;
 8007aa0:	e016      	b.n	8007ad0 <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007aa8:	4619      	mov	r1, r3
 8007aaa:	6878      	ldr	r0, [r7, #4]
 8007aac:	f000 fab8 	bl	8008020 <USBD_StdEPReq>
 8007ab0:	4603      	mov	r3, r0
 8007ab2:	73fb      	strb	r3, [r7, #15]
      break;
 8007ab4:	e00c      	b.n	8007ad0 <USBD_LL_SetupStage+0x9c>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8007abc:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8007ac0:	b2db      	uxtb	r3, r3
 8007ac2:	4619      	mov	r1, r3
 8007ac4:	6878      	ldr	r0, [r7, #4]
 8007ac6:	f001 fd4d 	bl	8009564 <USBD_LL_StallEP>
 8007aca:	4603      	mov	r3, r0
 8007acc:	73fb      	strb	r3, [r7, #15]
      break;
 8007ace:	bf00      	nop
  }

  return ret;
 8007ad0:	7bfb      	ldrb	r3, [r7, #15]
}
 8007ad2:	4618      	mov	r0, r3
 8007ad4:	3710      	adds	r7, #16
 8007ad6:	46bd      	mov	sp, r7
 8007ad8:	bd80      	pop	{r7, pc}

08007ada <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8007ada:	b580      	push	{r7, lr}
 8007adc:	b086      	sub	sp, #24
 8007ade:	af00      	add	r7, sp, #0
 8007ae0:	60f8      	str	r0, [r7, #12]
 8007ae2:	460b      	mov	r3, r1
 8007ae4:	607a      	str	r2, [r7, #4]
 8007ae6:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8007ae8:	7afb      	ldrb	r3, [r7, #11]
 8007aea:	2b00      	cmp	r3, #0
 8007aec:	d137      	bne.n	8007b5e <USBD_LL_DataOutStage+0x84>
  {
    pep = &pdev->ep_out[0];
 8007aee:	68fb      	ldr	r3, [r7, #12]
 8007af0:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8007af4:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8007af6:	68fb      	ldr	r3, [r7, #12]
 8007af8:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007afc:	2b03      	cmp	r3, #3
 8007afe:	d14a      	bne.n	8007b96 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 8007b00:	693b      	ldr	r3, [r7, #16]
 8007b02:	689a      	ldr	r2, [r3, #8]
 8007b04:	693b      	ldr	r3, [r7, #16]
 8007b06:	68db      	ldr	r3, [r3, #12]
 8007b08:	429a      	cmp	r2, r3
 8007b0a:	d913      	bls.n	8007b34 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8007b0c:	693b      	ldr	r3, [r7, #16]
 8007b0e:	689a      	ldr	r2, [r3, #8]
 8007b10:	693b      	ldr	r3, [r7, #16]
 8007b12:	68db      	ldr	r3, [r3, #12]
 8007b14:	1ad2      	subs	r2, r2, r3
 8007b16:	693b      	ldr	r3, [r7, #16]
 8007b18:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8007b1a:	693b      	ldr	r3, [r7, #16]
 8007b1c:	68da      	ldr	r2, [r3, #12]
 8007b1e:	693b      	ldr	r3, [r7, #16]
 8007b20:	689b      	ldr	r3, [r3, #8]
 8007b22:	4293      	cmp	r3, r2
 8007b24:	bf28      	it	cs
 8007b26:	4613      	movcs	r3, r2
 8007b28:	461a      	mov	r2, r3
 8007b2a:	6879      	ldr	r1, [r7, #4]
 8007b2c:	68f8      	ldr	r0, [r7, #12]
 8007b2e:	f000 ffad 	bl	8008a8c <USBD_CtlContinueRx>
 8007b32:	e030      	b.n	8007b96 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8007b34:	68fb      	ldr	r3, [r7, #12]
 8007b36:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007b3a:	691b      	ldr	r3, [r3, #16]
 8007b3c:	2b00      	cmp	r3, #0
 8007b3e:	d00a      	beq.n	8007b56 <USBD_LL_DataOutStage+0x7c>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007b40:	68fb      	ldr	r3, [r7, #12]
 8007b42:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8007b46:	2b03      	cmp	r3, #3
 8007b48:	d105      	bne.n	8007b56 <USBD_LL_DataOutStage+0x7c>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8007b4a:	68fb      	ldr	r3, [r7, #12]
 8007b4c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007b50:	691b      	ldr	r3, [r3, #16]
 8007b52:	68f8      	ldr	r0, [r7, #12]
 8007b54:	4798      	blx	r3
        }
        (void)USBD_CtlSendStatus(pdev);
 8007b56:	68f8      	ldr	r0, [r7, #12]
 8007b58:	f000 ffa9 	bl	8008aae <USBD_CtlSendStatus>
 8007b5c:	e01b      	b.n	8007b96 <USBD_LL_DataOutStage+0xbc>
        (void)USBD_LL_StallEP(pdev, 0U);
      }
#endif
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8007b5e:	68fb      	ldr	r3, [r7, #12]
 8007b60:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007b64:	699b      	ldr	r3, [r3, #24]
 8007b66:	2b00      	cmp	r3, #0
 8007b68:	d013      	beq.n	8007b92 <USBD_LL_DataOutStage+0xb8>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007b6a:	68fb      	ldr	r3, [r7, #12]
 8007b6c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8007b70:	2b03      	cmp	r3, #3
 8007b72:	d10e      	bne.n	8007b92 <USBD_LL_DataOutStage+0xb8>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8007b74:	68fb      	ldr	r3, [r7, #12]
 8007b76:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007b7a:	699b      	ldr	r3, [r3, #24]
 8007b7c:	7afa      	ldrb	r2, [r7, #11]
 8007b7e:	4611      	mov	r1, r2
 8007b80:	68f8      	ldr	r0, [r7, #12]
 8007b82:	4798      	blx	r3
 8007b84:	4603      	mov	r3, r0
 8007b86:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 8007b88:	7dfb      	ldrb	r3, [r7, #23]
 8007b8a:	2b00      	cmp	r3, #0
 8007b8c:	d003      	beq.n	8007b96 <USBD_LL_DataOutStage+0xbc>
    {
      return ret;
 8007b8e:	7dfb      	ldrb	r3, [r7, #23]
 8007b90:	e002      	b.n	8007b98 <USBD_LL_DataOutStage+0xbe>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8007b92:	2303      	movs	r3, #3
 8007b94:	e000      	b.n	8007b98 <USBD_LL_DataOutStage+0xbe>
  }

  return USBD_OK;
 8007b96:	2300      	movs	r3, #0
}
 8007b98:	4618      	mov	r0, r3
 8007b9a:	3718      	adds	r7, #24
 8007b9c:	46bd      	mov	sp, r7
 8007b9e:	bd80      	pop	{r7, pc}

08007ba0 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8007ba0:	b580      	push	{r7, lr}
 8007ba2:	b086      	sub	sp, #24
 8007ba4:	af00      	add	r7, sp, #0
 8007ba6:	60f8      	str	r0, [r7, #12]
 8007ba8:	460b      	mov	r3, r1
 8007baa:	607a      	str	r2, [r7, #4]
 8007bac:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8007bae:	7afb      	ldrb	r3, [r7, #11]
 8007bb0:	2b00      	cmp	r3, #0
 8007bb2:	d16a      	bne.n	8007c8a <USBD_LL_DataInStage+0xea>
  {
    pep = &pdev->ep_in[0];
 8007bb4:	68fb      	ldr	r3, [r7, #12]
 8007bb6:	3314      	adds	r3, #20
 8007bb8:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8007bba:	68fb      	ldr	r3, [r7, #12]
 8007bbc:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007bc0:	2b02      	cmp	r3, #2
 8007bc2:	d155      	bne.n	8007c70 <USBD_LL_DataInStage+0xd0>
    {
      if (pep->rem_length > pep->maxpacket)
 8007bc4:	693b      	ldr	r3, [r7, #16]
 8007bc6:	689a      	ldr	r2, [r3, #8]
 8007bc8:	693b      	ldr	r3, [r7, #16]
 8007bca:	68db      	ldr	r3, [r3, #12]
 8007bcc:	429a      	cmp	r2, r3
 8007bce:	d914      	bls.n	8007bfa <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8007bd0:	693b      	ldr	r3, [r7, #16]
 8007bd2:	689a      	ldr	r2, [r3, #8]
 8007bd4:	693b      	ldr	r3, [r7, #16]
 8007bd6:	68db      	ldr	r3, [r3, #12]
 8007bd8:	1ad2      	subs	r2, r2, r3
 8007bda:	693b      	ldr	r3, [r7, #16]
 8007bdc:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8007bde:	693b      	ldr	r3, [r7, #16]
 8007be0:	689b      	ldr	r3, [r3, #8]
 8007be2:	461a      	mov	r2, r3
 8007be4:	6879      	ldr	r1, [r7, #4]
 8007be6:	68f8      	ldr	r0, [r7, #12]
 8007be8:	f000 ff22 	bl	8008a30 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
       (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007bec:	2300      	movs	r3, #0
 8007bee:	2200      	movs	r2, #0
 8007bf0:	2100      	movs	r1, #0
 8007bf2:	68f8      	ldr	r0, [r7, #12]
 8007bf4:	f001 fd60 	bl	80096b8 <USBD_LL_PrepareReceive>
 8007bf8:	e03a      	b.n	8007c70 <USBD_LL_DataInStage+0xd0>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8007bfa:	693b      	ldr	r3, [r7, #16]
 8007bfc:	68da      	ldr	r2, [r3, #12]
 8007bfe:	693b      	ldr	r3, [r7, #16]
 8007c00:	689b      	ldr	r3, [r3, #8]
 8007c02:	429a      	cmp	r2, r3
 8007c04:	d11c      	bne.n	8007c40 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8007c06:	693b      	ldr	r3, [r7, #16]
 8007c08:	685a      	ldr	r2, [r3, #4]
 8007c0a:	693b      	ldr	r3, [r7, #16]
 8007c0c:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8007c0e:	429a      	cmp	r2, r3
 8007c10:	d316      	bcc.n	8007c40 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8007c12:	693b      	ldr	r3, [r7, #16]
 8007c14:	685a      	ldr	r2, [r3, #4]
 8007c16:	68fb      	ldr	r3, [r7, #12]
 8007c18:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8007c1c:	429a      	cmp	r2, r3
 8007c1e:	d20f      	bcs.n	8007c40 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8007c20:	2200      	movs	r2, #0
 8007c22:	2100      	movs	r1, #0
 8007c24:	68f8      	ldr	r0, [r7, #12]
 8007c26:	f000 ff03 	bl	8008a30 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8007c2a:	68fb      	ldr	r3, [r7, #12]
 8007c2c:	2200      	movs	r2, #0
 8007c2e:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007c32:	2300      	movs	r3, #0
 8007c34:	2200      	movs	r2, #0
 8007c36:	2100      	movs	r1, #0
 8007c38:	68f8      	ldr	r0, [r7, #12]
 8007c3a:	f001 fd3d 	bl	80096b8 <USBD_LL_PrepareReceive>
 8007c3e:	e017      	b.n	8007c70 <USBD_LL_DataInStage+0xd0>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8007c40:	68fb      	ldr	r3, [r7, #12]
 8007c42:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007c46:	68db      	ldr	r3, [r3, #12]
 8007c48:	2b00      	cmp	r3, #0
 8007c4a:	d00a      	beq.n	8007c62 <USBD_LL_DataInStage+0xc2>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007c4c:	68fb      	ldr	r3, [r7, #12]
 8007c4e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8007c52:	2b03      	cmp	r3, #3
 8007c54:	d105      	bne.n	8007c62 <USBD_LL_DataInStage+0xc2>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8007c56:	68fb      	ldr	r3, [r7, #12]
 8007c58:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007c5c:	68db      	ldr	r3, [r3, #12]
 8007c5e:	68f8      	ldr	r0, [r7, #12]
 8007c60:	4798      	blx	r3
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8007c62:	2180      	movs	r1, #128	; 0x80
 8007c64:	68f8      	ldr	r0, [r7, #12]
 8007c66:	f001 fc7d 	bl	8009564 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8007c6a:	68f8      	ldr	r0, [r7, #12]
 8007c6c:	f000 ff32 	bl	8008ad4 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 8007c70:	68fb      	ldr	r3, [r7, #12]
 8007c72:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8007c76:	2b01      	cmp	r3, #1
 8007c78:	d123      	bne.n	8007cc2 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 8007c7a:	68f8      	ldr	r0, [r7, #12]
 8007c7c:	f7ff fe9b 	bl	80079b6 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8007c80:	68fb      	ldr	r3, [r7, #12]
 8007c82:	2200      	movs	r2, #0
 8007c84:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8007c88:	e01b      	b.n	8007cc2 <USBD_LL_DataInStage+0x122>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8007c8a:	68fb      	ldr	r3, [r7, #12]
 8007c8c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007c90:	695b      	ldr	r3, [r3, #20]
 8007c92:	2b00      	cmp	r3, #0
 8007c94:	d013      	beq.n	8007cbe <USBD_LL_DataInStage+0x11e>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007c96:	68fb      	ldr	r3, [r7, #12]
 8007c98:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8007c9c:	2b03      	cmp	r3, #3
 8007c9e:	d10e      	bne.n	8007cbe <USBD_LL_DataInStage+0x11e>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8007ca0:	68fb      	ldr	r3, [r7, #12]
 8007ca2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007ca6:	695b      	ldr	r3, [r3, #20]
 8007ca8:	7afa      	ldrb	r2, [r7, #11]
 8007caa:	4611      	mov	r1, r2
 8007cac:	68f8      	ldr	r0, [r7, #12]
 8007cae:	4798      	blx	r3
 8007cb0:	4603      	mov	r3, r0
 8007cb2:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 8007cb4:	7dfb      	ldrb	r3, [r7, #23]
 8007cb6:	2b00      	cmp	r3, #0
 8007cb8:	d003      	beq.n	8007cc2 <USBD_LL_DataInStage+0x122>
    {
      return ret;
 8007cba:	7dfb      	ldrb	r3, [r7, #23]
 8007cbc:	e002      	b.n	8007cc4 <USBD_LL_DataInStage+0x124>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8007cbe:	2303      	movs	r3, #3
 8007cc0:	e000      	b.n	8007cc4 <USBD_LL_DataInStage+0x124>
  }

  return USBD_OK;
 8007cc2:	2300      	movs	r3, #0
}
 8007cc4:	4618      	mov	r0, r3
 8007cc6:	3718      	adds	r7, #24
 8007cc8:	46bd      	mov	sp, r7
 8007cca:	bd80      	pop	{r7, pc}

08007ccc <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8007ccc:	b580      	push	{r7, lr}
 8007cce:	b082      	sub	sp, #8
 8007cd0:	af00      	add	r7, sp, #0
 8007cd2:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	2201      	movs	r2, #1
 8007cd8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	2200      	movs	r2, #0
 8007ce0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	2200      	movs	r2, #0
 8007ce8:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	2200      	movs	r2, #0
 8007cee:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData != NULL)
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007cf8:	2b00      	cmp	r3, #0
 8007cfa:	d009      	beq.n	8007d10 <USBD_LL_Reset+0x44>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007d02:	685b      	ldr	r3, [r3, #4]
 8007d04:	687a      	ldr	r2, [r7, #4]
 8007d06:	6852      	ldr	r2, [r2, #4]
 8007d08:	b2d2      	uxtb	r2, r2
 8007d0a:	4611      	mov	r1, r2
 8007d0c:	6878      	ldr	r0, [r7, #4]
 8007d0e:	4798      	blx	r3
  }

    /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007d10:	2340      	movs	r3, #64	; 0x40
 8007d12:	2200      	movs	r2, #0
 8007d14:	2100      	movs	r1, #0
 8007d16:	6878      	ldr	r0, [r7, #4]
 8007d18:	f001 fbdf 	bl	80094da <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	2201      	movs	r2, #1
 8007d20:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	2240      	movs	r2, #64	; 0x40
 8007d28:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007d2c:	2340      	movs	r3, #64	; 0x40
 8007d2e:	2200      	movs	r2, #0
 8007d30:	2180      	movs	r1, #128	; 0x80
 8007d32:	6878      	ldr	r0, [r7, #4]
 8007d34:	f001 fbd1 	bl	80094da <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	2201      	movs	r2, #1
 8007d3c:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	2240      	movs	r2, #64	; 0x40
 8007d42:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 8007d44:	2300      	movs	r3, #0
}
 8007d46:	4618      	mov	r0, r3
 8007d48:	3708      	adds	r7, #8
 8007d4a:	46bd      	mov	sp, r7
 8007d4c:	bd80      	pop	{r7, pc}

08007d4e <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8007d4e:	b480      	push	{r7}
 8007d50:	b083      	sub	sp, #12
 8007d52:	af00      	add	r7, sp, #0
 8007d54:	6078      	str	r0, [r7, #4]
 8007d56:	460b      	mov	r3, r1
 8007d58:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	78fa      	ldrb	r2, [r7, #3]
 8007d5e:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8007d60:	2300      	movs	r3, #0
}
 8007d62:	4618      	mov	r0, r3
 8007d64:	370c      	adds	r7, #12
 8007d66:	46bd      	mov	sp, r7
 8007d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d6c:	4770      	bx	lr

08007d6e <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8007d6e:	b480      	push	{r7}
 8007d70:	b083      	sub	sp, #12
 8007d72:	af00      	add	r7, sp, #0
 8007d74:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	2204      	movs	r2, #4
 8007d86:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8007d8a:	2300      	movs	r3, #0
}
 8007d8c:	4618      	mov	r0, r3
 8007d8e:	370c      	adds	r7, #12
 8007d90:	46bd      	mov	sp, r7
 8007d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d96:	4770      	bx	lr

08007d98 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8007d98:	b480      	push	{r7}
 8007d9a:	b083      	sub	sp, #12
 8007d9c:	af00      	add	r7, sp, #0
 8007d9e:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007da6:	2b04      	cmp	r3, #4
 8007da8:	d105      	bne.n	8007db6 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8007db6:	2300      	movs	r3, #0
}
 8007db8:	4618      	mov	r0, r3
 8007dba:	370c      	adds	r7, #12
 8007dbc:	46bd      	mov	sp, r7
 8007dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dc2:	4770      	bx	lr

08007dc4 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8007dc4:	b580      	push	{r7, lr}
 8007dc6:	b082      	sub	sp, #8
 8007dc8:	af00      	add	r7, sp, #0
 8007dca:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007dd2:	2b03      	cmp	r3, #3
 8007dd4:	d10b      	bne.n	8007dee <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007ddc:	69db      	ldr	r3, [r3, #28]
 8007dde:	2b00      	cmp	r3, #0
 8007de0:	d005      	beq.n	8007dee <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007de8:	69db      	ldr	r3, [r3, #28]
 8007dea:	6878      	ldr	r0, [r7, #4]
 8007dec:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007dee:	2300      	movs	r3, #0
}
 8007df0:	4618      	mov	r0, r3
 8007df2:	3708      	adds	r7, #8
 8007df4:	46bd      	mov	sp, r7
 8007df6:	bd80      	pop	{r7, pc}

08007df8 <USBD_LL_IsoINIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8007df8:	b480      	push	{r7}
 8007dfa:	b083      	sub	sp, #12
 8007dfc:	af00      	add	r7, sp, #0
 8007dfe:	6078      	str	r0, [r7, #4]
 8007e00:	460b      	mov	r3, r1
 8007e02:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 8007e04:	2300      	movs	r3, #0
}
 8007e06:	4618      	mov	r0, r3
 8007e08:	370c      	adds	r7, #12
 8007e0a:	46bd      	mov	sp, r7
 8007e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e10:	4770      	bx	lr

08007e12 <USBD_LL_IsoOUTIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8007e12:	b480      	push	{r7}
 8007e14:	b083      	sub	sp, #12
 8007e16:	af00      	add	r7, sp, #0
 8007e18:	6078      	str	r0, [r7, #4]
 8007e1a:	460b      	mov	r3, r1
 8007e1c:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 8007e1e:	2300      	movs	r3, #0
}
 8007e20:	4618      	mov	r0, r3
 8007e22:	370c      	adds	r7, #12
 8007e24:	46bd      	mov	sp, r7
 8007e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e2a:	4770      	bx	lr

08007e2c <USBD_LL_DevConnected>:
*         Handle device connection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8007e2c:	b480      	push	{r7}
 8007e2e:	b083      	sub	sp, #12
 8007e30:	af00      	add	r7, sp, #0
 8007e32:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007e34:	2300      	movs	r3, #0
}
 8007e36:	4618      	mov	r0, r3
 8007e38:	370c      	adds	r7, #12
 8007e3a:	46bd      	mov	sp, r7
 8007e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e40:	4770      	bx	lr

08007e42 <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8007e42:	b580      	push	{r7, lr}
 8007e44:	b082      	sub	sp, #8
 8007e46:	af00      	add	r7, sp, #0
 8007e48:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	2201      	movs	r2, #1
 8007e4e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007e58:	2b00      	cmp	r3, #0
 8007e5a:	d009      	beq.n	8007e70 <USBD_LL_DevDisconnected+0x2e>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007e62:	685b      	ldr	r3, [r3, #4]
 8007e64:	687a      	ldr	r2, [r7, #4]
 8007e66:	6852      	ldr	r2, [r2, #4]
 8007e68:	b2d2      	uxtb	r2, r2
 8007e6a:	4611      	mov	r1, r2
 8007e6c:	6878      	ldr	r0, [r7, #4]
 8007e6e:	4798      	blx	r3
  }

  return USBD_OK;
 8007e70:	2300      	movs	r3, #0
}
 8007e72:	4618      	mov	r0, r3
 8007e74:	3708      	adds	r7, #8
 8007e76:	46bd      	mov	sp, r7
 8007e78:	bd80      	pop	{r7, pc}

08007e7a <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8007e7a:	b480      	push	{r7}
 8007e7c:	b087      	sub	sp, #28
 8007e7e:	af00      	add	r7, sp, #0
 8007e80:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8007e86:	697b      	ldr	r3, [r7, #20]
 8007e88:	781b      	ldrb	r3, [r3, #0]
 8007e8a:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8007e8c:	697b      	ldr	r3, [r7, #20]
 8007e8e:	3301      	adds	r3, #1
 8007e90:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8007e92:	697b      	ldr	r3, [r7, #20]
 8007e94:	781b      	ldrb	r3, [r3, #0]
 8007e96:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8007e98:	8a3b      	ldrh	r3, [r7, #16]
 8007e9a:	021b      	lsls	r3, r3, #8
 8007e9c:	b21a      	sxth	r2, r3
 8007e9e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8007ea2:	4313      	orrs	r3, r2
 8007ea4:	b21b      	sxth	r3, r3
 8007ea6:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8007ea8:	89fb      	ldrh	r3, [r7, #14]
}
 8007eaa:	4618      	mov	r0, r3
 8007eac:	371c      	adds	r7, #28
 8007eae:	46bd      	mov	sp, r7
 8007eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eb4:	4770      	bx	lr
	...

08007eb8 <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007eb8:	b580      	push	{r7, lr}
 8007eba:	b084      	sub	sp, #16
 8007ebc:	af00      	add	r7, sp, #0
 8007ebe:	6078      	str	r0, [r7, #4]
 8007ec0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007ec2:	2300      	movs	r3, #0
 8007ec4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007ec6:	683b      	ldr	r3, [r7, #0]
 8007ec8:	781b      	ldrb	r3, [r3, #0]
 8007eca:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007ece:	2b20      	cmp	r3, #32
 8007ed0:	d004      	beq.n	8007edc <USBD_StdDevReq+0x24>
 8007ed2:	2b40      	cmp	r3, #64	; 0x40
 8007ed4:	d002      	beq.n	8007edc <USBD_StdDevReq+0x24>
 8007ed6:	2b00      	cmp	r3, #0
 8007ed8:	d00a      	beq.n	8007ef0 <USBD_StdDevReq+0x38>
 8007eda:	e050      	b.n	8007f7e <USBD_StdDevReq+0xc6>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007ee2:	689b      	ldr	r3, [r3, #8]
 8007ee4:	6839      	ldr	r1, [r7, #0]
 8007ee6:	6878      	ldr	r0, [r7, #4]
 8007ee8:	4798      	blx	r3
 8007eea:	4603      	mov	r3, r0
 8007eec:	73fb      	strb	r3, [r7, #15]
    break;
 8007eee:	e04b      	b.n	8007f88 <USBD_StdDevReq+0xd0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8007ef0:	683b      	ldr	r3, [r7, #0]
 8007ef2:	785b      	ldrb	r3, [r3, #1]
 8007ef4:	2b09      	cmp	r3, #9
 8007ef6:	d83c      	bhi.n	8007f72 <USBD_StdDevReq+0xba>
 8007ef8:	a201      	add	r2, pc, #4	; (adr r2, 8007f00 <USBD_StdDevReq+0x48>)
 8007efa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007efe:	bf00      	nop
 8007f00:	08007f55 	.word	0x08007f55
 8007f04:	08007f69 	.word	0x08007f69
 8007f08:	08007f73 	.word	0x08007f73
 8007f0c:	08007f5f 	.word	0x08007f5f
 8007f10:	08007f73 	.word	0x08007f73
 8007f14:	08007f33 	.word	0x08007f33
 8007f18:	08007f29 	.word	0x08007f29
 8007f1c:	08007f73 	.word	0x08007f73
 8007f20:	08007f4b 	.word	0x08007f4b
 8007f24:	08007f3d 	.word	0x08007f3d
    {
    case USB_REQ_GET_DESCRIPTOR:
      USBD_GetDescriptor(pdev, req);
 8007f28:	6839      	ldr	r1, [r7, #0]
 8007f2a:	6878      	ldr	r0, [r7, #4]
 8007f2c:	f000 f9ce 	bl	80082cc <USBD_GetDescriptor>
      break;
 8007f30:	e024      	b.n	8007f7c <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_ADDRESS:
      USBD_SetAddress(pdev, req);
 8007f32:	6839      	ldr	r1, [r7, #0]
 8007f34:	6878      	ldr	r0, [r7, #4]
 8007f36:	f000 fb33 	bl	80085a0 <USBD_SetAddress>
      break;
 8007f3a:	e01f      	b.n	8007f7c <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_CONFIGURATION:
      ret = USBD_SetConfig(pdev, req);
 8007f3c:	6839      	ldr	r1, [r7, #0]
 8007f3e:	6878      	ldr	r0, [r7, #4]
 8007f40:	f000 fb70 	bl	8008624 <USBD_SetConfig>
 8007f44:	4603      	mov	r3, r0
 8007f46:	73fb      	strb	r3, [r7, #15]
      break;
 8007f48:	e018      	b.n	8007f7c <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_CONFIGURATION:
      USBD_GetConfig(pdev, req);
 8007f4a:	6839      	ldr	r1, [r7, #0]
 8007f4c:	6878      	ldr	r0, [r7, #4]
 8007f4e:	f000 fc0d 	bl	800876c <USBD_GetConfig>
      break;
 8007f52:	e013      	b.n	8007f7c <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_STATUS:
      USBD_GetStatus(pdev, req);
 8007f54:	6839      	ldr	r1, [r7, #0]
 8007f56:	6878      	ldr	r0, [r7, #4]
 8007f58:	f000 fc3c 	bl	80087d4 <USBD_GetStatus>
      break;
 8007f5c:	e00e      	b.n	8007f7c <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_FEATURE:
      USBD_SetFeature(pdev, req);
 8007f5e:	6839      	ldr	r1, [r7, #0]
 8007f60:	6878      	ldr	r0, [r7, #4]
 8007f62:	f000 fc6a 	bl	800883a <USBD_SetFeature>
      break;
 8007f66:	e009      	b.n	8007f7c <USBD_StdDevReq+0xc4>

    case USB_REQ_CLEAR_FEATURE:
      USBD_ClrFeature(pdev, req);
 8007f68:	6839      	ldr	r1, [r7, #0]
 8007f6a:	6878      	ldr	r0, [r7, #4]
 8007f6c:	f000 fc79 	bl	8008862 <USBD_ClrFeature>
      break;
 8007f70:	e004      	b.n	8007f7c <USBD_StdDevReq+0xc4>

    default:
      USBD_CtlError(pdev, req);
 8007f72:	6839      	ldr	r1, [r7, #0]
 8007f74:	6878      	ldr	r0, [r7, #4]
 8007f76:	f000 fccf 	bl	8008918 <USBD_CtlError>
      break;
 8007f7a:	bf00      	nop
    }
    break;
 8007f7c:	e004      	b.n	8007f88 <USBD_StdDevReq+0xd0>

  default:
    USBD_CtlError(pdev, req);
 8007f7e:	6839      	ldr	r1, [r7, #0]
 8007f80:	6878      	ldr	r0, [r7, #4]
 8007f82:	f000 fcc9 	bl	8008918 <USBD_CtlError>
    break;
 8007f86:	bf00      	nop
  }

  return ret;
 8007f88:	7bfb      	ldrb	r3, [r7, #15]
}
 8007f8a:	4618      	mov	r0, r3
 8007f8c:	3710      	adds	r7, #16
 8007f8e:	46bd      	mov	sp, r7
 8007f90:	bd80      	pop	{r7, pc}
 8007f92:	bf00      	nop

08007f94 <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007f94:	b580      	push	{r7, lr}
 8007f96:	b084      	sub	sp, #16
 8007f98:	af00      	add	r7, sp, #0
 8007f9a:	6078      	str	r0, [r7, #4]
 8007f9c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007f9e:	2300      	movs	r3, #0
 8007fa0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007fa2:	683b      	ldr	r3, [r7, #0]
 8007fa4:	781b      	ldrb	r3, [r3, #0]
 8007fa6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007faa:	2b20      	cmp	r3, #32
 8007fac:	d003      	beq.n	8007fb6 <USBD_StdItfReq+0x22>
 8007fae:	2b40      	cmp	r3, #64	; 0x40
 8007fb0:	d001      	beq.n	8007fb6 <USBD_StdItfReq+0x22>
 8007fb2:	2b00      	cmp	r3, #0
 8007fb4:	d12a      	bne.n	800800c <USBD_StdItfReq+0x78>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
  case USB_REQ_TYPE_STANDARD:
    switch (pdev->dev_state)
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007fbc:	3b01      	subs	r3, #1
 8007fbe:	2b02      	cmp	r3, #2
 8007fc0:	d81d      	bhi.n	8007ffe <USBD_StdItfReq+0x6a>
    {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:

      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8007fc2:	683b      	ldr	r3, [r7, #0]
 8007fc4:	889b      	ldrh	r3, [r3, #4]
 8007fc6:	b2db      	uxtb	r3, r3
 8007fc8:	2b01      	cmp	r3, #1
 8007fca:	d813      	bhi.n	8007ff4 <USBD_StdItfReq+0x60>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007fd2:	689b      	ldr	r3, [r3, #8]
 8007fd4:	6839      	ldr	r1, [r7, #0]
 8007fd6:	6878      	ldr	r0, [r7, #4]
 8007fd8:	4798      	blx	r3
 8007fda:	4603      	mov	r3, r0
 8007fdc:	73fb      	strb	r3, [r7, #15]

        if ((req->wLength == 0U) && (ret == USBD_OK))
 8007fde:	683b      	ldr	r3, [r7, #0]
 8007fe0:	88db      	ldrh	r3, [r3, #6]
 8007fe2:	2b00      	cmp	r3, #0
 8007fe4:	d110      	bne.n	8008008 <USBD_StdItfReq+0x74>
 8007fe6:	7bfb      	ldrb	r3, [r7, #15]
 8007fe8:	2b00      	cmp	r3, #0
 8007fea:	d10d      	bne.n	8008008 <USBD_StdItfReq+0x74>
        {
          (void)USBD_CtlSendStatus(pdev);
 8007fec:	6878      	ldr	r0, [r7, #4]
 8007fee:	f000 fd5e 	bl	8008aae <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlError(pdev, req);
      }
      break;
 8007ff2:	e009      	b.n	8008008 <USBD_StdItfReq+0x74>
        USBD_CtlError(pdev, req);
 8007ff4:	6839      	ldr	r1, [r7, #0]
 8007ff6:	6878      	ldr	r0, [r7, #4]
 8007ff8:	f000 fc8e 	bl	8008918 <USBD_CtlError>
      break;
 8007ffc:	e004      	b.n	8008008 <USBD_StdItfReq+0x74>

    default:
      USBD_CtlError(pdev, req);
 8007ffe:	6839      	ldr	r1, [r7, #0]
 8008000:	6878      	ldr	r0, [r7, #4]
 8008002:	f000 fc89 	bl	8008918 <USBD_CtlError>
      break;
 8008006:	e000      	b.n	800800a <USBD_StdItfReq+0x76>
      break;
 8008008:	bf00      	nop
    }
    break;
 800800a:	e004      	b.n	8008016 <USBD_StdItfReq+0x82>

  default:
    USBD_CtlError(pdev, req);
 800800c:	6839      	ldr	r1, [r7, #0]
 800800e:	6878      	ldr	r0, [r7, #4]
 8008010:	f000 fc82 	bl	8008918 <USBD_CtlError>
    break;
 8008014:	bf00      	nop
  }

  return ret;
 8008016:	7bfb      	ldrb	r3, [r7, #15]
}
 8008018:	4618      	mov	r0, r3
 800801a:	3710      	adds	r7, #16
 800801c:	46bd      	mov	sp, r7
 800801e:	bd80      	pop	{r7, pc}

08008020 <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008020:	b580      	push	{r7, lr}
 8008022:	b084      	sub	sp, #16
 8008024:	af00      	add	r7, sp, #0
 8008026:	6078      	str	r0, [r7, #4]
 8008028:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800802a:	2300      	movs	r3, #0
 800802c:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 800802e:	683b      	ldr	r3, [r7, #0]
 8008030:	889b      	ldrh	r3, [r3, #4]
 8008032:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008034:	683b      	ldr	r3, [r7, #0]
 8008036:	781b      	ldrb	r3, [r3, #0]
 8008038:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800803c:	2b20      	cmp	r3, #32
 800803e:	d004      	beq.n	800804a <USBD_StdEPReq+0x2a>
 8008040:	2b40      	cmp	r3, #64	; 0x40
 8008042:	d002      	beq.n	800804a <USBD_StdEPReq+0x2a>
 8008044:	2b00      	cmp	r3, #0
 8008046:	d00a      	beq.n	800805e <USBD_StdEPReq+0x3e>
 8008048:	e135      	b.n	80082b6 <USBD_StdEPReq+0x296>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008050:	689b      	ldr	r3, [r3, #8]
 8008052:	6839      	ldr	r1, [r7, #0]
 8008054:	6878      	ldr	r0, [r7, #4]
 8008056:	4798      	blx	r3
 8008058:	4603      	mov	r3, r0
 800805a:	73fb      	strb	r3, [r7, #15]
    break;
 800805c:	e130      	b.n	80082c0 <USBD_StdEPReq+0x2a0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 800805e:	683b      	ldr	r3, [r7, #0]
 8008060:	785b      	ldrb	r3, [r3, #1]
 8008062:	2b01      	cmp	r3, #1
 8008064:	d03e      	beq.n	80080e4 <USBD_StdEPReq+0xc4>
 8008066:	2b03      	cmp	r3, #3
 8008068:	d002      	beq.n	8008070 <USBD_StdEPReq+0x50>
 800806a:	2b00      	cmp	r3, #0
 800806c:	d077      	beq.n	800815e <USBD_StdEPReq+0x13e>
 800806e:	e11c      	b.n	80082aa <USBD_StdEPReq+0x28a>
    {
    case USB_REQ_SET_FEATURE:
      switch (pdev->dev_state)
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008076:	2b02      	cmp	r3, #2
 8008078:	d002      	beq.n	8008080 <USBD_StdEPReq+0x60>
 800807a:	2b03      	cmp	r3, #3
 800807c:	d015      	beq.n	80080aa <USBD_StdEPReq+0x8a>
 800807e:	e02b      	b.n	80080d8 <USBD_StdEPReq+0xb8>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008080:	7bbb      	ldrb	r3, [r7, #14]
 8008082:	2b00      	cmp	r3, #0
 8008084:	d00c      	beq.n	80080a0 <USBD_StdEPReq+0x80>
 8008086:	7bbb      	ldrb	r3, [r7, #14]
 8008088:	2b80      	cmp	r3, #128	; 0x80
 800808a:	d009      	beq.n	80080a0 <USBD_StdEPReq+0x80>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 800808c:	7bbb      	ldrb	r3, [r7, #14]
 800808e:	4619      	mov	r1, r3
 8008090:	6878      	ldr	r0, [r7, #4]
 8008092:	f001 fa67 	bl	8009564 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8008096:	2180      	movs	r1, #128	; 0x80
 8008098:	6878      	ldr	r0, [r7, #4]
 800809a:	f001 fa63 	bl	8009564 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 800809e:	e020      	b.n	80080e2 <USBD_StdEPReq+0xc2>
          USBD_CtlError(pdev, req);
 80080a0:	6839      	ldr	r1, [r7, #0]
 80080a2:	6878      	ldr	r0, [r7, #4]
 80080a4:	f000 fc38 	bl	8008918 <USBD_CtlError>
        break;
 80080a8:	e01b      	b.n	80080e2 <USBD_StdEPReq+0xc2>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 80080aa:	683b      	ldr	r3, [r7, #0]
 80080ac:	885b      	ldrh	r3, [r3, #2]
 80080ae:	2b00      	cmp	r3, #0
 80080b0:	d10e      	bne.n	80080d0 <USBD_StdEPReq+0xb0>
        {
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80080b2:	7bbb      	ldrb	r3, [r7, #14]
 80080b4:	2b00      	cmp	r3, #0
 80080b6:	d00b      	beq.n	80080d0 <USBD_StdEPReq+0xb0>
 80080b8:	7bbb      	ldrb	r3, [r7, #14]
 80080ba:	2b80      	cmp	r3, #128	; 0x80
 80080bc:	d008      	beq.n	80080d0 <USBD_StdEPReq+0xb0>
 80080be:	683b      	ldr	r3, [r7, #0]
 80080c0:	88db      	ldrh	r3, [r3, #6]
 80080c2:	2b00      	cmp	r3, #0
 80080c4:	d104      	bne.n	80080d0 <USBD_StdEPReq+0xb0>
          {
            (void)USBD_LL_StallEP(pdev, ep_addr);
 80080c6:	7bbb      	ldrb	r3, [r7, #14]
 80080c8:	4619      	mov	r1, r3
 80080ca:	6878      	ldr	r0, [r7, #4]
 80080cc:	f001 fa4a 	bl	8009564 <USBD_LL_StallEP>
          }
        }
        (void)USBD_CtlSendStatus(pdev);
 80080d0:	6878      	ldr	r0, [r7, #4]
 80080d2:	f000 fcec 	bl	8008aae <USBD_CtlSendStatus>

        break;
 80080d6:	e004      	b.n	80080e2 <USBD_StdEPReq+0xc2>

      default:
        USBD_CtlError(pdev, req);
 80080d8:	6839      	ldr	r1, [r7, #0]
 80080da:	6878      	ldr	r0, [r7, #4]
 80080dc:	f000 fc1c 	bl	8008918 <USBD_CtlError>
        break;
 80080e0:	bf00      	nop
      }
      break;
 80080e2:	e0e7      	b.n	80082b4 <USBD_StdEPReq+0x294>

    case USB_REQ_CLEAR_FEATURE:

      switch (pdev->dev_state)
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80080ea:	2b02      	cmp	r3, #2
 80080ec:	d002      	beq.n	80080f4 <USBD_StdEPReq+0xd4>
 80080ee:	2b03      	cmp	r3, #3
 80080f0:	d015      	beq.n	800811e <USBD_StdEPReq+0xfe>
 80080f2:	e02d      	b.n	8008150 <USBD_StdEPReq+0x130>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80080f4:	7bbb      	ldrb	r3, [r7, #14]
 80080f6:	2b00      	cmp	r3, #0
 80080f8:	d00c      	beq.n	8008114 <USBD_StdEPReq+0xf4>
 80080fa:	7bbb      	ldrb	r3, [r7, #14]
 80080fc:	2b80      	cmp	r3, #128	; 0x80
 80080fe:	d009      	beq.n	8008114 <USBD_StdEPReq+0xf4>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 8008100:	7bbb      	ldrb	r3, [r7, #14]
 8008102:	4619      	mov	r1, r3
 8008104:	6878      	ldr	r0, [r7, #4]
 8008106:	f001 fa2d 	bl	8009564 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800810a:	2180      	movs	r1, #128	; 0x80
 800810c:	6878      	ldr	r0, [r7, #4]
 800810e:	f001 fa29 	bl	8009564 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 8008112:	e023      	b.n	800815c <USBD_StdEPReq+0x13c>
          USBD_CtlError(pdev, req);
 8008114:	6839      	ldr	r1, [r7, #0]
 8008116:	6878      	ldr	r0, [r7, #4]
 8008118:	f000 fbfe 	bl	8008918 <USBD_CtlError>
        break;
 800811c:	e01e      	b.n	800815c <USBD_StdEPReq+0x13c>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 800811e:	683b      	ldr	r3, [r7, #0]
 8008120:	885b      	ldrh	r3, [r3, #2]
 8008122:	2b00      	cmp	r3, #0
 8008124:	d119      	bne.n	800815a <USBD_StdEPReq+0x13a>
        {
          if ((ep_addr & 0x7FU) != 0x00U)
 8008126:	7bbb      	ldrb	r3, [r7, #14]
 8008128:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800812c:	2b00      	cmp	r3, #0
 800812e:	d004      	beq.n	800813a <USBD_StdEPReq+0x11a>
          {
            (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8008130:	7bbb      	ldrb	r3, [r7, #14]
 8008132:	4619      	mov	r1, r3
 8008134:	6878      	ldr	r0, [r7, #4]
 8008136:	f001 fa34 	bl	80095a2 <USBD_LL_ClearStallEP>
          }
          (void)USBD_CtlSendStatus(pdev);
 800813a:	6878      	ldr	r0, [r7, #4]
 800813c:	f000 fcb7 	bl	8008aae <USBD_CtlSendStatus>
          (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008146:	689b      	ldr	r3, [r3, #8]
 8008148:	6839      	ldr	r1, [r7, #0]
 800814a:	6878      	ldr	r0, [r7, #4]
 800814c:	4798      	blx	r3
        }
        break;
 800814e:	e004      	b.n	800815a <USBD_StdEPReq+0x13a>

      default:
        USBD_CtlError(pdev, req);
 8008150:	6839      	ldr	r1, [r7, #0]
 8008152:	6878      	ldr	r0, [r7, #4]
 8008154:	f000 fbe0 	bl	8008918 <USBD_CtlError>
        break;
 8008158:	e000      	b.n	800815c <USBD_StdEPReq+0x13c>
        break;
 800815a:	bf00      	nop
      }
      break;
 800815c:	e0aa      	b.n	80082b4 <USBD_StdEPReq+0x294>

    case USB_REQ_GET_STATUS:
      switch (pdev->dev_state)
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008164:	2b02      	cmp	r3, #2
 8008166:	d002      	beq.n	800816e <USBD_StdEPReq+0x14e>
 8008168:	2b03      	cmp	r3, #3
 800816a:	d032      	beq.n	80081d2 <USBD_StdEPReq+0x1b2>
 800816c:	e097      	b.n	800829e <USBD_StdEPReq+0x27e>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800816e:	7bbb      	ldrb	r3, [r7, #14]
 8008170:	2b00      	cmp	r3, #0
 8008172:	d007      	beq.n	8008184 <USBD_StdEPReq+0x164>
 8008174:	7bbb      	ldrb	r3, [r7, #14]
 8008176:	2b80      	cmp	r3, #128	; 0x80
 8008178:	d004      	beq.n	8008184 <USBD_StdEPReq+0x164>
        {
          USBD_CtlError(pdev, req);
 800817a:	6839      	ldr	r1, [r7, #0]
 800817c:	6878      	ldr	r0, [r7, #4]
 800817e:	f000 fbcb 	bl	8008918 <USBD_CtlError>
          break;
 8008182:	e091      	b.n	80082a8 <USBD_StdEPReq+0x288>
        }
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008184:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008188:	2b00      	cmp	r3, #0
 800818a:	da0b      	bge.n	80081a4 <USBD_StdEPReq+0x184>
 800818c:	7bbb      	ldrb	r3, [r7, #14]
 800818e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008192:	4613      	mov	r3, r2
 8008194:	009b      	lsls	r3, r3, #2
 8008196:	4413      	add	r3, r2
 8008198:	009b      	lsls	r3, r3, #2
 800819a:	3310      	adds	r3, #16
 800819c:	687a      	ldr	r2, [r7, #4]
 800819e:	4413      	add	r3, r2
 80081a0:	3304      	adds	r3, #4
 80081a2:	e00b      	b.n	80081bc <USBD_StdEPReq+0x19c>
              &pdev->ep_out[ep_addr & 0x7FU];
 80081a4:	7bbb      	ldrb	r3, [r7, #14]
 80081a6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80081aa:	4613      	mov	r3, r2
 80081ac:	009b      	lsls	r3, r3, #2
 80081ae:	4413      	add	r3, r2
 80081b0:	009b      	lsls	r3, r3, #2
 80081b2:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80081b6:	687a      	ldr	r2, [r7, #4]
 80081b8:	4413      	add	r3, r2
 80081ba:	3304      	adds	r3, #4
 80081bc:	60bb      	str	r3, [r7, #8]

        pep->status = 0x0000U;
 80081be:	68bb      	ldr	r3, [r7, #8]
 80081c0:	2200      	movs	r2, #0
 80081c2:	601a      	str	r2, [r3, #0]

        (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80081c4:	68bb      	ldr	r3, [r7, #8]
 80081c6:	2202      	movs	r2, #2
 80081c8:	4619      	mov	r1, r3
 80081ca:	6878      	ldr	r0, [r7, #4]
 80081cc:	f000 fc15 	bl	80089fa <USBD_CtlSendData>
        break;
 80081d0:	e06a      	b.n	80082a8 <USBD_StdEPReq+0x288>

      case USBD_STATE_CONFIGURED:
        if ((ep_addr & 0x80U) == 0x80U)
 80081d2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80081d6:	2b00      	cmp	r3, #0
 80081d8:	da11      	bge.n	80081fe <USBD_StdEPReq+0x1de>
        {
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80081da:	7bbb      	ldrb	r3, [r7, #14]
 80081dc:	f003 020f 	and.w	r2, r3, #15
 80081e0:	6879      	ldr	r1, [r7, #4]
 80081e2:	4613      	mov	r3, r2
 80081e4:	009b      	lsls	r3, r3, #2
 80081e6:	4413      	add	r3, r2
 80081e8:	009b      	lsls	r3, r3, #2
 80081ea:	440b      	add	r3, r1
 80081ec:	3324      	adds	r3, #36	; 0x24
 80081ee:	881b      	ldrh	r3, [r3, #0]
 80081f0:	2b00      	cmp	r3, #0
 80081f2:	d117      	bne.n	8008224 <USBD_StdEPReq+0x204>
          {
            USBD_CtlError(pdev, req);
 80081f4:	6839      	ldr	r1, [r7, #0]
 80081f6:	6878      	ldr	r0, [r7, #4]
 80081f8:	f000 fb8e 	bl	8008918 <USBD_CtlError>
            break;
 80081fc:	e054      	b.n	80082a8 <USBD_StdEPReq+0x288>
          }
        }
        else
        {
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80081fe:	7bbb      	ldrb	r3, [r7, #14]
 8008200:	f003 020f 	and.w	r2, r3, #15
 8008204:	6879      	ldr	r1, [r7, #4]
 8008206:	4613      	mov	r3, r2
 8008208:	009b      	lsls	r3, r3, #2
 800820a:	4413      	add	r3, r2
 800820c:	009b      	lsls	r3, r3, #2
 800820e:	440b      	add	r3, r1
 8008210:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8008214:	881b      	ldrh	r3, [r3, #0]
 8008216:	2b00      	cmp	r3, #0
 8008218:	d104      	bne.n	8008224 <USBD_StdEPReq+0x204>
          {
            USBD_CtlError(pdev, req);
 800821a:	6839      	ldr	r1, [r7, #0]
 800821c:	6878      	ldr	r0, [r7, #4]
 800821e:	f000 fb7b 	bl	8008918 <USBD_CtlError>
            break;
 8008222:	e041      	b.n	80082a8 <USBD_StdEPReq+0x288>
          }
        }

        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008224:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008228:	2b00      	cmp	r3, #0
 800822a:	da0b      	bge.n	8008244 <USBD_StdEPReq+0x224>
 800822c:	7bbb      	ldrb	r3, [r7, #14]
 800822e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008232:	4613      	mov	r3, r2
 8008234:	009b      	lsls	r3, r3, #2
 8008236:	4413      	add	r3, r2
 8008238:	009b      	lsls	r3, r3, #2
 800823a:	3310      	adds	r3, #16
 800823c:	687a      	ldr	r2, [r7, #4]
 800823e:	4413      	add	r3, r2
 8008240:	3304      	adds	r3, #4
 8008242:	e00b      	b.n	800825c <USBD_StdEPReq+0x23c>
              &pdev->ep_out[ep_addr & 0x7FU];
 8008244:	7bbb      	ldrb	r3, [r7, #14]
 8008246:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800824a:	4613      	mov	r3, r2
 800824c:	009b      	lsls	r3, r3, #2
 800824e:	4413      	add	r3, r2
 8008250:	009b      	lsls	r3, r3, #2
 8008252:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8008256:	687a      	ldr	r2, [r7, #4]
 8008258:	4413      	add	r3, r2
 800825a:	3304      	adds	r3, #4
 800825c:	60bb      	str	r3, [r7, #8]

          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800825e:	7bbb      	ldrb	r3, [r7, #14]
 8008260:	2b00      	cmp	r3, #0
 8008262:	d002      	beq.n	800826a <USBD_StdEPReq+0x24a>
 8008264:	7bbb      	ldrb	r3, [r7, #14]
 8008266:	2b80      	cmp	r3, #128	; 0x80
 8008268:	d103      	bne.n	8008272 <USBD_StdEPReq+0x252>
          {
            pep->status = 0x0000U;
 800826a:	68bb      	ldr	r3, [r7, #8]
 800826c:	2200      	movs	r2, #0
 800826e:	601a      	str	r2, [r3, #0]
 8008270:	e00e      	b.n	8008290 <USBD_StdEPReq+0x270>
          }
          else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8008272:	7bbb      	ldrb	r3, [r7, #14]
 8008274:	4619      	mov	r1, r3
 8008276:	6878      	ldr	r0, [r7, #4]
 8008278:	f001 f9b2 	bl	80095e0 <USBD_LL_IsStallEP>
 800827c:	4603      	mov	r3, r0
 800827e:	2b00      	cmp	r3, #0
 8008280:	d003      	beq.n	800828a <USBD_StdEPReq+0x26a>
          {
            pep->status = 0x0001U;
 8008282:	68bb      	ldr	r3, [r7, #8]
 8008284:	2201      	movs	r2, #1
 8008286:	601a      	str	r2, [r3, #0]
 8008288:	e002      	b.n	8008290 <USBD_StdEPReq+0x270>
          }
          else
          {
            pep->status = 0x0000U;
 800828a:	68bb      	ldr	r3, [r7, #8]
 800828c:	2200      	movs	r2, #0
 800828e:	601a      	str	r2, [r3, #0]
          }

          (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8008290:	68bb      	ldr	r3, [r7, #8]
 8008292:	2202      	movs	r2, #2
 8008294:	4619      	mov	r1, r3
 8008296:	6878      	ldr	r0, [r7, #4]
 8008298:	f000 fbaf 	bl	80089fa <USBD_CtlSendData>
          break;
 800829c:	e004      	b.n	80082a8 <USBD_StdEPReq+0x288>

      default:
        USBD_CtlError(pdev, req);
 800829e:	6839      	ldr	r1, [r7, #0]
 80082a0:	6878      	ldr	r0, [r7, #4]
 80082a2:	f000 fb39 	bl	8008918 <USBD_CtlError>
        break;
 80082a6:	bf00      	nop
      }
      break;
 80082a8:	e004      	b.n	80082b4 <USBD_StdEPReq+0x294>

    default:
      USBD_CtlError(pdev, req);
 80082aa:	6839      	ldr	r1, [r7, #0]
 80082ac:	6878      	ldr	r0, [r7, #4]
 80082ae:	f000 fb33 	bl	8008918 <USBD_CtlError>
      break;
 80082b2:	bf00      	nop
    }
    break;
 80082b4:	e004      	b.n	80082c0 <USBD_StdEPReq+0x2a0>

  default:
    USBD_CtlError(pdev, req);
 80082b6:	6839      	ldr	r1, [r7, #0]
 80082b8:	6878      	ldr	r0, [r7, #4]
 80082ba:	f000 fb2d 	bl	8008918 <USBD_CtlError>
    break;
 80082be:	bf00      	nop
  }

  return ret;
 80082c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80082c2:	4618      	mov	r0, r3
 80082c4:	3710      	adds	r7, #16
 80082c6:	46bd      	mov	sp, r7
 80082c8:	bd80      	pop	{r7, pc}
	...

080082cc <USBD_GetDescriptor>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80082cc:	b580      	push	{r7, lr}
 80082ce:	b084      	sub	sp, #16
 80082d0:	af00      	add	r7, sp, #0
 80082d2:	6078      	str	r0, [r7, #4]
 80082d4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80082d6:	2300      	movs	r3, #0
 80082d8:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80082da:	2300      	movs	r3, #0
 80082dc:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80082de:	2300      	movs	r3, #0
 80082e0:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80082e2:	683b      	ldr	r3, [r7, #0]
 80082e4:	885b      	ldrh	r3, [r3, #2]
 80082e6:	0a1b      	lsrs	r3, r3, #8
 80082e8:	b29b      	uxth	r3, r3
 80082ea:	3b01      	subs	r3, #1
 80082ec:	2b06      	cmp	r3, #6
 80082ee:	f200 8128 	bhi.w	8008542 <USBD_GetDescriptor+0x276>
 80082f2:	a201      	add	r2, pc, #4	; (adr r2, 80082f8 <USBD_GetDescriptor+0x2c>)
 80082f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80082f8:	08008315 	.word	0x08008315
 80082fc:	0800832d 	.word	0x0800832d
 8008300:	0800836d 	.word	0x0800836d
 8008304:	08008543 	.word	0x08008543
 8008308:	08008543 	.word	0x08008543
 800830c:	080084e3 	.word	0x080084e3
 8008310:	0800850f 	.word	0x0800850f
      err++;
    }
    break;
#endif
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800831a:	681b      	ldr	r3, [r3, #0]
 800831c:	687a      	ldr	r2, [r7, #4]
 800831e:	7c12      	ldrb	r2, [r2, #16]
 8008320:	f107 0108 	add.w	r1, r7, #8
 8008324:	4610      	mov	r0, r2
 8008326:	4798      	blx	r3
 8008328:	60f8      	str	r0, [r7, #12]
    break;
 800832a:	e112      	b.n	8008552 <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	7c1b      	ldrb	r3, [r3, #16]
 8008330:	2b00      	cmp	r3, #0
 8008332:	d10d      	bne.n	8008350 <USBD_GetDescriptor+0x84>
    {
      pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800833a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800833c:	f107 0208 	add.w	r2, r7, #8
 8008340:	4610      	mov	r0, r2
 8008342:	4798      	blx	r3
 8008344:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008346:	68fb      	ldr	r3, [r7, #12]
 8008348:	3301      	adds	r3, #1
 800834a:	2202      	movs	r2, #2
 800834c:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 800834e:	e100      	b.n	8008552 <USBD_GetDescriptor+0x286>
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008356:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008358:	f107 0208 	add.w	r2, r7, #8
 800835c:	4610      	mov	r0, r2
 800835e:	4798      	blx	r3
 8008360:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008362:	68fb      	ldr	r3, [r7, #12]
 8008364:	3301      	adds	r3, #1
 8008366:	2202      	movs	r2, #2
 8008368:	701a      	strb	r2, [r3, #0]
    break;
 800836a:	e0f2      	b.n	8008552 <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 800836c:	683b      	ldr	r3, [r7, #0]
 800836e:	885b      	ldrh	r3, [r3, #2]
 8008370:	b2db      	uxtb	r3, r3
 8008372:	2b05      	cmp	r3, #5
 8008374:	f200 80ac 	bhi.w	80084d0 <USBD_GetDescriptor+0x204>
 8008378:	a201      	add	r2, pc, #4	; (adr r2, 8008380 <USBD_GetDescriptor+0xb4>)
 800837a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800837e:	bf00      	nop
 8008380:	08008399 	.word	0x08008399
 8008384:	080083cd 	.word	0x080083cd
 8008388:	08008401 	.word	0x08008401
 800838c:	08008435 	.word	0x08008435
 8008390:	08008469 	.word	0x08008469
 8008394:	0800849d 	.word	0x0800849d
    {
    case USBD_IDX_LANGID_STR:
      if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800839e:	685b      	ldr	r3, [r3, #4]
 80083a0:	2b00      	cmp	r3, #0
 80083a2:	d00b      	beq.n	80083bc <USBD_GetDescriptor+0xf0>
      {
        pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80083aa:	685b      	ldr	r3, [r3, #4]
 80083ac:	687a      	ldr	r2, [r7, #4]
 80083ae:	7c12      	ldrb	r2, [r2, #16]
 80083b0:	f107 0108 	add.w	r1, r7, #8
 80083b4:	4610      	mov	r0, r2
 80083b6:	4798      	blx	r3
 80083b8:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80083ba:	e091      	b.n	80084e0 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 80083bc:	6839      	ldr	r1, [r7, #0]
 80083be:	6878      	ldr	r0, [r7, #4]
 80083c0:	f000 faaa 	bl	8008918 <USBD_CtlError>
        err++;
 80083c4:	7afb      	ldrb	r3, [r7, #11]
 80083c6:	3301      	adds	r3, #1
 80083c8:	72fb      	strb	r3, [r7, #11]
      break;
 80083ca:	e089      	b.n	80084e0 <USBD_GetDescriptor+0x214>

    case USBD_IDX_MFC_STR:
      if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80083d2:	689b      	ldr	r3, [r3, #8]
 80083d4:	2b00      	cmp	r3, #0
 80083d6:	d00b      	beq.n	80083f0 <USBD_GetDescriptor+0x124>
      {
        pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80083de:	689b      	ldr	r3, [r3, #8]
 80083e0:	687a      	ldr	r2, [r7, #4]
 80083e2:	7c12      	ldrb	r2, [r2, #16]
 80083e4:	f107 0108 	add.w	r1, r7, #8
 80083e8:	4610      	mov	r0, r2
 80083ea:	4798      	blx	r3
 80083ec:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80083ee:	e077      	b.n	80084e0 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 80083f0:	6839      	ldr	r1, [r7, #0]
 80083f2:	6878      	ldr	r0, [r7, #4]
 80083f4:	f000 fa90 	bl	8008918 <USBD_CtlError>
        err++;
 80083f8:	7afb      	ldrb	r3, [r7, #11]
 80083fa:	3301      	adds	r3, #1
 80083fc:	72fb      	strb	r3, [r7, #11]
      break;
 80083fe:	e06f      	b.n	80084e0 <USBD_GetDescriptor+0x214>

    case USBD_IDX_PRODUCT_STR:
      if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008406:	68db      	ldr	r3, [r3, #12]
 8008408:	2b00      	cmp	r3, #0
 800840a:	d00b      	beq.n	8008424 <USBD_GetDescriptor+0x158>
      {
        pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008412:	68db      	ldr	r3, [r3, #12]
 8008414:	687a      	ldr	r2, [r7, #4]
 8008416:	7c12      	ldrb	r2, [r2, #16]
 8008418:	f107 0108 	add.w	r1, r7, #8
 800841c:	4610      	mov	r0, r2
 800841e:	4798      	blx	r3
 8008420:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008422:	e05d      	b.n	80084e0 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8008424:	6839      	ldr	r1, [r7, #0]
 8008426:	6878      	ldr	r0, [r7, #4]
 8008428:	f000 fa76 	bl	8008918 <USBD_CtlError>
        err++;
 800842c:	7afb      	ldrb	r3, [r7, #11]
 800842e:	3301      	adds	r3, #1
 8008430:	72fb      	strb	r3, [r7, #11]
      break;
 8008432:	e055      	b.n	80084e0 <USBD_GetDescriptor+0x214>

    case USBD_IDX_SERIAL_STR:
      if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800843a:	691b      	ldr	r3, [r3, #16]
 800843c:	2b00      	cmp	r3, #0
 800843e:	d00b      	beq.n	8008458 <USBD_GetDescriptor+0x18c>
      {
        pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008446:	691b      	ldr	r3, [r3, #16]
 8008448:	687a      	ldr	r2, [r7, #4]
 800844a:	7c12      	ldrb	r2, [r2, #16]
 800844c:	f107 0108 	add.w	r1, r7, #8
 8008450:	4610      	mov	r0, r2
 8008452:	4798      	blx	r3
 8008454:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008456:	e043      	b.n	80084e0 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8008458:	6839      	ldr	r1, [r7, #0]
 800845a:	6878      	ldr	r0, [r7, #4]
 800845c:	f000 fa5c 	bl	8008918 <USBD_CtlError>
        err++;
 8008460:	7afb      	ldrb	r3, [r7, #11]
 8008462:	3301      	adds	r3, #1
 8008464:	72fb      	strb	r3, [r7, #11]
      break;
 8008466:	e03b      	b.n	80084e0 <USBD_GetDescriptor+0x214>

    case USBD_IDX_CONFIG_STR:
      if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800846e:	695b      	ldr	r3, [r3, #20]
 8008470:	2b00      	cmp	r3, #0
 8008472:	d00b      	beq.n	800848c <USBD_GetDescriptor+0x1c0>
      {
        pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800847a:	695b      	ldr	r3, [r3, #20]
 800847c:	687a      	ldr	r2, [r7, #4]
 800847e:	7c12      	ldrb	r2, [r2, #16]
 8008480:	f107 0108 	add.w	r1, r7, #8
 8008484:	4610      	mov	r0, r2
 8008486:	4798      	blx	r3
 8008488:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800848a:	e029      	b.n	80084e0 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 800848c:	6839      	ldr	r1, [r7, #0]
 800848e:	6878      	ldr	r0, [r7, #4]
 8008490:	f000 fa42 	bl	8008918 <USBD_CtlError>
        err++;
 8008494:	7afb      	ldrb	r3, [r7, #11]
 8008496:	3301      	adds	r3, #1
 8008498:	72fb      	strb	r3, [r7, #11]
      break;
 800849a:	e021      	b.n	80084e0 <USBD_GetDescriptor+0x214>

    case USBD_IDX_INTERFACE_STR:
      if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80084a2:	699b      	ldr	r3, [r3, #24]
 80084a4:	2b00      	cmp	r3, #0
 80084a6:	d00b      	beq.n	80084c0 <USBD_GetDescriptor+0x1f4>
      {
        pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80084ae:	699b      	ldr	r3, [r3, #24]
 80084b0:	687a      	ldr	r2, [r7, #4]
 80084b2:	7c12      	ldrb	r2, [r2, #16]
 80084b4:	f107 0108 	add.w	r1, r7, #8
 80084b8:	4610      	mov	r0, r2
 80084ba:	4798      	blx	r3
 80084bc:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80084be:	e00f      	b.n	80084e0 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 80084c0:	6839      	ldr	r1, [r7, #0]
 80084c2:	6878      	ldr	r0, [r7, #4]
 80084c4:	f000 fa28 	bl	8008918 <USBD_CtlError>
        err++;
 80084c8:	7afb      	ldrb	r3, [r7, #11]
 80084ca:	3301      	adds	r3, #1
 80084cc:	72fb      	strb	r3, [r7, #11]
      break;
 80084ce:	e007      	b.n	80084e0 <USBD_GetDescriptor+0x214>
      {
        USBD_CtlError(pdev, req);
        err++;
      }
#else
      USBD_CtlError(pdev, req);
 80084d0:	6839      	ldr	r1, [r7, #0]
 80084d2:	6878      	ldr	r0, [r7, #4]
 80084d4:	f000 fa20 	bl	8008918 <USBD_CtlError>
      err++;
 80084d8:	7afb      	ldrb	r3, [r7, #11]
 80084da:	3301      	adds	r3, #1
 80084dc:	72fb      	strb	r3, [r7, #11]
#endif
      break;
 80084de:	bf00      	nop
    }
    break;
 80084e0:	e037      	b.n	8008552 <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_DEVICE_QUALIFIER:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	7c1b      	ldrb	r3, [r3, #16]
 80084e6:	2b00      	cmp	r3, #0
 80084e8:	d109      	bne.n	80084fe <USBD_GetDescriptor+0x232>
    {
      pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80084f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80084f2:	f107 0208 	add.w	r2, r7, #8
 80084f6:	4610      	mov	r0, r2
 80084f8:	4798      	blx	r3
 80084fa:	60f8      	str	r0, [r7, #12]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 80084fc:	e029      	b.n	8008552 <USBD_GetDescriptor+0x286>
      USBD_CtlError(pdev, req);
 80084fe:	6839      	ldr	r1, [r7, #0]
 8008500:	6878      	ldr	r0, [r7, #4]
 8008502:	f000 fa09 	bl	8008918 <USBD_CtlError>
      err++;
 8008506:	7afb      	ldrb	r3, [r7, #11]
 8008508:	3301      	adds	r3, #1
 800850a:	72fb      	strb	r3, [r7, #11]
    break;
 800850c:	e021      	b.n	8008552 <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	7c1b      	ldrb	r3, [r3, #16]
 8008512:	2b00      	cmp	r3, #0
 8008514:	d10d      	bne.n	8008532 <USBD_GetDescriptor+0x266>
    {
      pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800851c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800851e:	f107 0208 	add.w	r2, r7, #8
 8008522:	4610      	mov	r0, r2
 8008524:	4798      	blx	r3
 8008526:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8008528:	68fb      	ldr	r3, [r7, #12]
 800852a:	3301      	adds	r3, #1
 800852c:	2207      	movs	r2, #7
 800852e:	701a      	strb	r2, [r3, #0]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 8008530:	e00f      	b.n	8008552 <USBD_GetDescriptor+0x286>
      USBD_CtlError(pdev, req);
 8008532:	6839      	ldr	r1, [r7, #0]
 8008534:	6878      	ldr	r0, [r7, #4]
 8008536:	f000 f9ef 	bl	8008918 <USBD_CtlError>
      err++;
 800853a:	7afb      	ldrb	r3, [r7, #11]
 800853c:	3301      	adds	r3, #1
 800853e:	72fb      	strb	r3, [r7, #11]
    break;
 8008540:	e007      	b.n	8008552 <USBD_GetDescriptor+0x286>

  default:
    USBD_CtlError(pdev, req);
 8008542:	6839      	ldr	r1, [r7, #0]
 8008544:	6878      	ldr	r0, [r7, #4]
 8008546:	f000 f9e7 	bl	8008918 <USBD_CtlError>
    err++;
 800854a:	7afb      	ldrb	r3, [r7, #11]
 800854c:	3301      	adds	r3, #1
 800854e:	72fb      	strb	r3, [r7, #11]
    break;
 8008550:	bf00      	nop
  }

  if (err != 0U)
 8008552:	7afb      	ldrb	r3, [r7, #11]
 8008554:	2b00      	cmp	r3, #0
 8008556:	d11e      	bne.n	8008596 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }
  else
  {
    if (req->wLength != 0U)
 8008558:	683b      	ldr	r3, [r7, #0]
 800855a:	88db      	ldrh	r3, [r3, #6]
 800855c:	2b00      	cmp	r3, #0
 800855e:	d016      	beq.n	800858e <USBD_GetDescriptor+0x2c2>
    {
      if (len != 0U)
 8008560:	893b      	ldrh	r3, [r7, #8]
 8008562:	2b00      	cmp	r3, #0
 8008564:	d00e      	beq.n	8008584 <USBD_GetDescriptor+0x2b8>
      {
        len = MIN(len, req->wLength);
 8008566:	683b      	ldr	r3, [r7, #0]
 8008568:	88da      	ldrh	r2, [r3, #6]
 800856a:	893b      	ldrh	r3, [r7, #8]
 800856c:	4293      	cmp	r3, r2
 800856e:	bf28      	it	cs
 8008570:	4613      	movcs	r3, r2
 8008572:	b29b      	uxth	r3, r3
 8008574:	813b      	strh	r3, [r7, #8]
        (void)USBD_CtlSendData(pdev, pbuf, len);
 8008576:	893b      	ldrh	r3, [r7, #8]
 8008578:	461a      	mov	r2, r3
 800857a:	68f9      	ldr	r1, [r7, #12]
 800857c:	6878      	ldr	r0, [r7, #4]
 800857e:	f000 fa3c 	bl	80089fa <USBD_CtlSendData>
 8008582:	e009      	b.n	8008598 <USBD_GetDescriptor+0x2cc>
      }
      else
      {
        USBD_CtlError(pdev, req);
 8008584:	6839      	ldr	r1, [r7, #0]
 8008586:	6878      	ldr	r0, [r7, #4]
 8008588:	f000 f9c6 	bl	8008918 <USBD_CtlError>
 800858c:	e004      	b.n	8008598 <USBD_GetDescriptor+0x2cc>
      }
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
 800858e:	6878      	ldr	r0, [r7, #4]
 8008590:	f000 fa8d 	bl	8008aae <USBD_CtlSendStatus>
 8008594:	e000      	b.n	8008598 <USBD_GetDescriptor+0x2cc>
    return;
 8008596:	bf00      	nop
    }
  }
}
 8008598:	3710      	adds	r7, #16
 800859a:	46bd      	mov	sp, r7
 800859c:	bd80      	pop	{r7, pc}
 800859e:	bf00      	nop

080085a0 <USBD_SetAddress>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80085a0:	b580      	push	{r7, lr}
 80085a2:	b084      	sub	sp, #16
 80085a4:	af00      	add	r7, sp, #0
 80085a6:	6078      	str	r0, [r7, #4]
 80085a8:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80085aa:	683b      	ldr	r3, [r7, #0]
 80085ac:	889b      	ldrh	r3, [r3, #4]
 80085ae:	2b00      	cmp	r3, #0
 80085b0:	d130      	bne.n	8008614 <USBD_SetAddress+0x74>
 80085b2:	683b      	ldr	r3, [r7, #0]
 80085b4:	88db      	ldrh	r3, [r3, #6]
 80085b6:	2b00      	cmp	r3, #0
 80085b8:	d12c      	bne.n	8008614 <USBD_SetAddress+0x74>
 80085ba:	683b      	ldr	r3, [r7, #0]
 80085bc:	885b      	ldrh	r3, [r3, #2]
 80085be:	2b7f      	cmp	r3, #127	; 0x7f
 80085c0:	d828      	bhi.n	8008614 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80085c2:	683b      	ldr	r3, [r7, #0]
 80085c4:	885b      	ldrh	r3, [r3, #2]
 80085c6:	b2db      	uxtb	r3, r3
 80085c8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80085cc:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80085d4:	2b03      	cmp	r3, #3
 80085d6:	d104      	bne.n	80085e2 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 80085d8:	6839      	ldr	r1, [r7, #0]
 80085da:	6878      	ldr	r0, [r7, #4]
 80085dc:	f000 f99c 	bl	8008918 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80085e0:	e01c      	b.n	800861c <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	7bfa      	ldrb	r2, [r7, #15]
 80085e6:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 80085ea:	7bfb      	ldrb	r3, [r7, #15]
 80085ec:	4619      	mov	r1, r3
 80085ee:	6878      	ldr	r0, [r7, #4]
 80085f0:	f001 f822 	bl	8009638 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 80085f4:	6878      	ldr	r0, [r7, #4]
 80085f6:	f000 fa5a 	bl	8008aae <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80085fa:	7bfb      	ldrb	r3, [r7, #15]
 80085fc:	2b00      	cmp	r3, #0
 80085fe:	d004      	beq.n	800860a <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	2202      	movs	r2, #2
 8008604:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008608:	e008      	b.n	800861c <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	2201      	movs	r2, #1
 800860e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008612:	e003      	b.n	800861c <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8008614:	6839      	ldr	r1, [r7, #0]
 8008616:	6878      	ldr	r0, [r7, #4]
 8008618:	f000 f97e 	bl	8008918 <USBD_CtlError>
  }
}
 800861c:	bf00      	nop
 800861e:	3710      	adds	r7, #16
 8008620:	46bd      	mov	sp, r7
 8008622:	bd80      	pop	{r7, pc}

08008624 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008624:	b580      	push	{r7, lr}
 8008626:	b084      	sub	sp, #16
 8008628:	af00      	add	r7, sp, #0
 800862a:	6078      	str	r0, [r7, #4]
 800862c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800862e:	2300      	movs	r3, #0
 8008630:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8008632:	683b      	ldr	r3, [r7, #0]
 8008634:	885b      	ldrh	r3, [r3, #2]
 8008636:	b2da      	uxtb	r2, r3
 8008638:	4b4b      	ldr	r3, [pc, #300]	; (8008768 <USBD_SetConfig+0x144>)
 800863a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800863c:	4b4a      	ldr	r3, [pc, #296]	; (8008768 <USBD_SetConfig+0x144>)
 800863e:	781b      	ldrb	r3, [r3, #0]
 8008640:	2b01      	cmp	r3, #1
 8008642:	d905      	bls.n	8008650 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8008644:	6839      	ldr	r1, [r7, #0]
 8008646:	6878      	ldr	r0, [r7, #4]
 8008648:	f000 f966 	bl	8008918 <USBD_CtlError>
    return USBD_FAIL;
 800864c:	2303      	movs	r3, #3
 800864e:	e087      	b.n	8008760 <USBD_SetConfig+0x13c>
  }

  switch (pdev->dev_state)
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008656:	2b02      	cmp	r3, #2
 8008658:	d002      	beq.n	8008660 <USBD_SetConfig+0x3c>
 800865a:	2b03      	cmp	r3, #3
 800865c:	d025      	beq.n	80086aa <USBD_SetConfig+0x86>
 800865e:	e071      	b.n	8008744 <USBD_SetConfig+0x120>
  {
  case USBD_STATE_ADDRESSED:
    if (cfgidx != 0U)
 8008660:	4b41      	ldr	r3, [pc, #260]	; (8008768 <USBD_SetConfig+0x144>)
 8008662:	781b      	ldrb	r3, [r3, #0]
 8008664:	2b00      	cmp	r3, #0
 8008666:	d01c      	beq.n	80086a2 <USBD_SetConfig+0x7e>
    {
      pdev->dev_config = cfgidx;
 8008668:	4b3f      	ldr	r3, [pc, #252]	; (8008768 <USBD_SetConfig+0x144>)
 800866a:	781b      	ldrb	r3, [r3, #0]
 800866c:	461a      	mov	r2, r3
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	605a      	str	r2, [r3, #4]

      ret = USBD_SetClassConfig(pdev, cfgidx);
 8008672:	4b3d      	ldr	r3, [pc, #244]	; (8008768 <USBD_SetConfig+0x144>)
 8008674:	781b      	ldrb	r3, [r3, #0]
 8008676:	4619      	mov	r1, r3
 8008678:	6878      	ldr	r0, [r7, #4]
 800867a:	f7ff f9a7 	bl	80079cc <USBD_SetClassConfig>
 800867e:	4603      	mov	r3, r0
 8008680:	73fb      	strb	r3, [r7, #15]

      if (ret != USBD_OK)
 8008682:	7bfb      	ldrb	r3, [r7, #15]
 8008684:	2b00      	cmp	r3, #0
 8008686:	d004      	beq.n	8008692 <USBD_SetConfig+0x6e>
      {
        USBD_CtlError(pdev, req);
 8008688:	6839      	ldr	r1, [r7, #0]
 800868a:	6878      	ldr	r0, [r7, #4]
 800868c:	f000 f944 	bl	8008918 <USBD_CtlError>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 8008690:	e065      	b.n	800875e <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 8008692:	6878      	ldr	r0, [r7, #4]
 8008694:	f000 fa0b 	bl	8008aae <USBD_CtlSendStatus>
        pdev->dev_state = USBD_STATE_CONFIGURED;
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	2203      	movs	r2, #3
 800869c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 80086a0:	e05d      	b.n	800875e <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 80086a2:	6878      	ldr	r0, [r7, #4]
 80086a4:	f000 fa03 	bl	8008aae <USBD_CtlSendStatus>
    break;
 80086a8:	e059      	b.n	800875e <USBD_SetConfig+0x13a>

  case USBD_STATE_CONFIGURED:
    if (cfgidx == 0U)
 80086aa:	4b2f      	ldr	r3, [pc, #188]	; (8008768 <USBD_SetConfig+0x144>)
 80086ac:	781b      	ldrb	r3, [r3, #0]
 80086ae:	2b00      	cmp	r3, #0
 80086b0:	d112      	bne.n	80086d8 <USBD_SetConfig+0xb4>
    {
      pdev->dev_state = USBD_STATE_ADDRESSED;
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	2202      	movs	r2, #2
 80086b6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      pdev->dev_config = cfgidx;
 80086ba:	4b2b      	ldr	r3, [pc, #172]	; (8008768 <USBD_SetConfig+0x144>)
 80086bc:	781b      	ldrb	r3, [r3, #0]
 80086be:	461a      	mov	r2, r3
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	605a      	str	r2, [r3, #4]
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 80086c4:	4b28      	ldr	r3, [pc, #160]	; (8008768 <USBD_SetConfig+0x144>)
 80086c6:	781b      	ldrb	r3, [r3, #0]
 80086c8:	4619      	mov	r1, r3
 80086ca:	6878      	ldr	r0, [r7, #4]
 80086cc:	f7ff f99a 	bl	8007a04 <USBD_ClrClassConfig>
      (void)USBD_CtlSendStatus(pdev);
 80086d0:	6878      	ldr	r0, [r7, #4]
 80086d2:	f000 f9ec 	bl	8008aae <USBD_CtlSendStatus>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 80086d6:	e042      	b.n	800875e <USBD_SetConfig+0x13a>
    else if (cfgidx != pdev->dev_config)
 80086d8:	4b23      	ldr	r3, [pc, #140]	; (8008768 <USBD_SetConfig+0x144>)
 80086da:	781b      	ldrb	r3, [r3, #0]
 80086dc:	461a      	mov	r2, r3
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	685b      	ldr	r3, [r3, #4]
 80086e2:	429a      	cmp	r2, r3
 80086e4:	d02a      	beq.n	800873c <USBD_SetConfig+0x118>
      (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	685b      	ldr	r3, [r3, #4]
 80086ea:	b2db      	uxtb	r3, r3
 80086ec:	4619      	mov	r1, r3
 80086ee:	6878      	ldr	r0, [r7, #4]
 80086f0:	f7ff f988 	bl	8007a04 <USBD_ClrClassConfig>
      pdev->dev_config = cfgidx;
 80086f4:	4b1c      	ldr	r3, [pc, #112]	; (8008768 <USBD_SetConfig+0x144>)
 80086f6:	781b      	ldrb	r3, [r3, #0]
 80086f8:	461a      	mov	r2, r3
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	605a      	str	r2, [r3, #4]
      ret = USBD_SetClassConfig(pdev, cfgidx);
 80086fe:	4b1a      	ldr	r3, [pc, #104]	; (8008768 <USBD_SetConfig+0x144>)
 8008700:	781b      	ldrb	r3, [r3, #0]
 8008702:	4619      	mov	r1, r3
 8008704:	6878      	ldr	r0, [r7, #4]
 8008706:	f7ff f961 	bl	80079cc <USBD_SetClassConfig>
 800870a:	4603      	mov	r3, r0
 800870c:	73fb      	strb	r3, [r7, #15]
      if (ret != USBD_OK)
 800870e:	7bfb      	ldrb	r3, [r7, #15]
 8008710:	2b00      	cmp	r3, #0
 8008712:	d00f      	beq.n	8008734 <USBD_SetConfig+0x110>
        USBD_CtlError(pdev, req);
 8008714:	6839      	ldr	r1, [r7, #0]
 8008716:	6878      	ldr	r0, [r7, #4]
 8008718:	f000 f8fe 	bl	8008918 <USBD_CtlError>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	685b      	ldr	r3, [r3, #4]
 8008720:	b2db      	uxtb	r3, r3
 8008722:	4619      	mov	r1, r3
 8008724:	6878      	ldr	r0, [r7, #4]
 8008726:	f7ff f96d 	bl	8007a04 <USBD_ClrClassConfig>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	2202      	movs	r2, #2
 800872e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 8008732:	e014      	b.n	800875e <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 8008734:	6878      	ldr	r0, [r7, #4]
 8008736:	f000 f9ba 	bl	8008aae <USBD_CtlSendStatus>
    break;
 800873a:	e010      	b.n	800875e <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 800873c:	6878      	ldr	r0, [r7, #4]
 800873e:	f000 f9b6 	bl	8008aae <USBD_CtlSendStatus>
    break;
 8008742:	e00c      	b.n	800875e <USBD_SetConfig+0x13a>

  default:
    USBD_CtlError(pdev, req);
 8008744:	6839      	ldr	r1, [r7, #0]
 8008746:	6878      	ldr	r0, [r7, #4]
 8008748:	f000 f8e6 	bl	8008918 <USBD_CtlError>
    (void)USBD_ClrClassConfig(pdev, cfgidx);
 800874c:	4b06      	ldr	r3, [pc, #24]	; (8008768 <USBD_SetConfig+0x144>)
 800874e:	781b      	ldrb	r3, [r3, #0]
 8008750:	4619      	mov	r1, r3
 8008752:	6878      	ldr	r0, [r7, #4]
 8008754:	f7ff f956 	bl	8007a04 <USBD_ClrClassConfig>
    ret = USBD_FAIL;
 8008758:	2303      	movs	r3, #3
 800875a:	73fb      	strb	r3, [r7, #15]
    break;
 800875c:	bf00      	nop
  }

  return ret;
 800875e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008760:	4618      	mov	r0, r3
 8008762:	3710      	adds	r7, #16
 8008764:	46bd      	mov	sp, r7
 8008766:	bd80      	pop	{r7, pc}
 8008768:	20000370 	.word	0x20000370

0800876c <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800876c:	b580      	push	{r7, lr}
 800876e:	b082      	sub	sp, #8
 8008770:	af00      	add	r7, sp, #0
 8008772:	6078      	str	r0, [r7, #4]
 8008774:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8008776:	683b      	ldr	r3, [r7, #0]
 8008778:	88db      	ldrh	r3, [r3, #6]
 800877a:	2b01      	cmp	r3, #1
 800877c:	d004      	beq.n	8008788 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800877e:	6839      	ldr	r1, [r7, #0]
 8008780:	6878      	ldr	r0, [r7, #4]
 8008782:	f000 f8c9 	bl	8008918 <USBD_CtlError>
    default:
      USBD_CtlError(pdev, req);
      break;
    }
  }
}
 8008786:	e021      	b.n	80087cc <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800878e:	2b01      	cmp	r3, #1
 8008790:	db17      	blt.n	80087c2 <USBD_GetConfig+0x56>
 8008792:	2b02      	cmp	r3, #2
 8008794:	dd02      	ble.n	800879c <USBD_GetConfig+0x30>
 8008796:	2b03      	cmp	r3, #3
 8008798:	d00b      	beq.n	80087b2 <USBD_GetConfig+0x46>
 800879a:	e012      	b.n	80087c2 <USBD_GetConfig+0x56>
      pdev->dev_default_config = 0U;
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	2200      	movs	r2, #0
 80087a0:	609a      	str	r2, [r3, #8]
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	3308      	adds	r3, #8
 80087a6:	2201      	movs	r2, #1
 80087a8:	4619      	mov	r1, r3
 80087aa:	6878      	ldr	r0, [r7, #4]
 80087ac:	f000 f925 	bl	80089fa <USBD_CtlSendData>
      break;
 80087b0:	e00c      	b.n	80087cc <USBD_GetConfig+0x60>
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	3304      	adds	r3, #4
 80087b6:	2201      	movs	r2, #1
 80087b8:	4619      	mov	r1, r3
 80087ba:	6878      	ldr	r0, [r7, #4]
 80087bc:	f000 f91d 	bl	80089fa <USBD_CtlSendData>
      break;
 80087c0:	e004      	b.n	80087cc <USBD_GetConfig+0x60>
      USBD_CtlError(pdev, req);
 80087c2:	6839      	ldr	r1, [r7, #0]
 80087c4:	6878      	ldr	r0, [r7, #4]
 80087c6:	f000 f8a7 	bl	8008918 <USBD_CtlError>
      break;
 80087ca:	bf00      	nop
}
 80087cc:	bf00      	nop
 80087ce:	3708      	adds	r7, #8
 80087d0:	46bd      	mov	sp, r7
 80087d2:	bd80      	pop	{r7, pc}

080087d4 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80087d4:	b580      	push	{r7, lr}
 80087d6:	b082      	sub	sp, #8
 80087d8:	af00      	add	r7, sp, #0
 80087da:	6078      	str	r0, [r7, #4]
 80087dc:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80087e4:	3b01      	subs	r3, #1
 80087e6:	2b02      	cmp	r3, #2
 80087e8:	d81e      	bhi.n	8008828 <USBD_GetStatus+0x54>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wLength != 0x2U)
 80087ea:	683b      	ldr	r3, [r7, #0]
 80087ec:	88db      	ldrh	r3, [r3, #6]
 80087ee:	2b02      	cmp	r3, #2
 80087f0:	d004      	beq.n	80087fc <USBD_GetStatus+0x28>
    {
      USBD_CtlError(pdev, req);
 80087f2:	6839      	ldr	r1, [r7, #0]
 80087f4:	6878      	ldr	r0, [r7, #4]
 80087f6:	f000 f88f 	bl	8008918 <USBD_CtlError>
      break;
 80087fa:	e01a      	b.n	8008832 <USBD_GetStatus+0x5e>
    }

#if (USBD_SELF_POWERED == 1U)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	2201      	movs	r2, #1
 8008800:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0U;
#endif

    if (pdev->dev_remote_wakeup != 0U)
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8008808:	2b00      	cmp	r3, #0
 800880a:	d005      	beq.n	8008818 <USBD_GetStatus+0x44>
    {
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	68db      	ldr	r3, [r3, #12]
 8008810:	f043 0202 	orr.w	r2, r3, #2
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	60da      	str	r2, [r3, #12]
    }

    (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	330c      	adds	r3, #12
 800881c:	2202      	movs	r2, #2
 800881e:	4619      	mov	r1, r3
 8008820:	6878      	ldr	r0, [r7, #4]
 8008822:	f000 f8ea 	bl	80089fa <USBD_CtlSendData>
    break;
 8008826:	e004      	b.n	8008832 <USBD_GetStatus+0x5e>

  default:
    USBD_CtlError(pdev, req);
 8008828:	6839      	ldr	r1, [r7, #0]
 800882a:	6878      	ldr	r0, [r7, #4]
 800882c:	f000 f874 	bl	8008918 <USBD_CtlError>
    break;
 8008830:	bf00      	nop
  }
}
 8008832:	bf00      	nop
 8008834:	3708      	adds	r7, #8
 8008836:	46bd      	mov	sp, r7
 8008838:	bd80      	pop	{r7, pc}

0800883a <USBD_SetFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800883a:	b580      	push	{r7, lr}
 800883c:	b082      	sub	sp, #8
 800883e:	af00      	add	r7, sp, #0
 8008840:	6078      	str	r0, [r7, #4]
 8008842:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008844:	683b      	ldr	r3, [r7, #0]
 8008846:	885b      	ldrh	r3, [r3, #2]
 8008848:	2b01      	cmp	r3, #1
 800884a:	d106      	bne.n	800885a <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	2201      	movs	r2, #1
 8008850:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8008854:	6878      	ldr	r0, [r7, #4]
 8008856:	f000 f92a 	bl	8008aae <USBD_CtlSendStatus>
  }
}
 800885a:	bf00      	nop
 800885c:	3708      	adds	r7, #8
 800885e:	46bd      	mov	sp, r7
 8008860:	bd80      	pop	{r7, pc}

08008862 <USBD_ClrFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008862:	b580      	push	{r7, lr}
 8008864:	b082      	sub	sp, #8
 8008866:	af00      	add	r7, sp, #0
 8008868:	6078      	str	r0, [r7, #4]
 800886a:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008872:	3b01      	subs	r3, #1
 8008874:	2b02      	cmp	r3, #2
 8008876:	d80b      	bhi.n	8008890 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008878:	683b      	ldr	r3, [r7, #0]
 800887a:	885b      	ldrh	r3, [r3, #2]
 800887c:	2b01      	cmp	r3, #1
 800887e:	d10c      	bne.n	800889a <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	2200      	movs	r2, #0
 8008884:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8008888:	6878      	ldr	r0, [r7, #4]
 800888a:	f000 f910 	bl	8008aae <USBD_CtlSendStatus>
      }
      break;
 800888e:	e004      	b.n	800889a <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8008890:	6839      	ldr	r1, [r7, #0]
 8008892:	6878      	ldr	r0, [r7, #4]
 8008894:	f000 f840 	bl	8008918 <USBD_CtlError>
      break;
 8008898:	e000      	b.n	800889c <USBD_ClrFeature+0x3a>
      break;
 800889a:	bf00      	nop
  }
}
 800889c:	bf00      	nop
 800889e:	3708      	adds	r7, #8
 80088a0:	46bd      	mov	sp, r7
 80088a2:	bd80      	pop	{r7, pc}

080088a4 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80088a4:	b580      	push	{r7, lr}
 80088a6:	b084      	sub	sp, #16
 80088a8:	af00      	add	r7, sp, #0
 80088aa:	6078      	str	r0, [r7, #4]
 80088ac:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 80088ae:	683b      	ldr	r3, [r7, #0]
 80088b0:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 80088b2:	68fb      	ldr	r3, [r7, #12]
 80088b4:	781a      	ldrb	r2, [r3, #0]
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	701a      	strb	r2, [r3, #0]

  pbuff++;
 80088ba:	68fb      	ldr	r3, [r7, #12]
 80088bc:	3301      	adds	r3, #1
 80088be:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 80088c0:	68fb      	ldr	r3, [r7, #12]
 80088c2:	781a      	ldrb	r2, [r3, #0]
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	705a      	strb	r2, [r3, #1]

  pbuff++;
 80088c8:	68fb      	ldr	r3, [r7, #12]
 80088ca:	3301      	adds	r3, #1
 80088cc:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 80088ce:	68f8      	ldr	r0, [r7, #12]
 80088d0:	f7ff fad3 	bl	8007e7a <SWAPBYTE>
 80088d4:	4603      	mov	r3, r0
 80088d6:	461a      	mov	r2, r3
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	805a      	strh	r2, [r3, #2]

  pbuff++;
 80088dc:	68fb      	ldr	r3, [r7, #12]
 80088de:	3301      	adds	r3, #1
 80088e0:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80088e2:	68fb      	ldr	r3, [r7, #12]
 80088e4:	3301      	adds	r3, #1
 80088e6:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 80088e8:	68f8      	ldr	r0, [r7, #12]
 80088ea:	f7ff fac6 	bl	8007e7a <SWAPBYTE>
 80088ee:	4603      	mov	r3, r0
 80088f0:	461a      	mov	r2, r3
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	809a      	strh	r2, [r3, #4]

  pbuff++;
 80088f6:	68fb      	ldr	r3, [r7, #12]
 80088f8:	3301      	adds	r3, #1
 80088fa:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80088fc:	68fb      	ldr	r3, [r7, #12]
 80088fe:	3301      	adds	r3, #1
 8008900:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8008902:	68f8      	ldr	r0, [r7, #12]
 8008904:	f7ff fab9 	bl	8007e7a <SWAPBYTE>
 8008908:	4603      	mov	r3, r0
 800890a:	461a      	mov	r2, r3
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	80da      	strh	r2, [r3, #6]
}
 8008910:	bf00      	nop
 8008912:	3710      	adds	r7, #16
 8008914:	46bd      	mov	sp, r7
 8008916:	bd80      	pop	{r7, pc}

08008918 <USBD_CtlError>:
* @param  req: usb request
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008918:	b580      	push	{r7, lr}
 800891a:	b082      	sub	sp, #8
 800891c:	af00      	add	r7, sp, #0
 800891e:	6078      	str	r0, [r7, #4]
 8008920:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8008922:	2180      	movs	r1, #128	; 0x80
 8008924:	6878      	ldr	r0, [r7, #4]
 8008926:	f000 fe1d 	bl	8009564 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800892a:	2100      	movs	r1, #0
 800892c:	6878      	ldr	r0, [r7, #4]
 800892e:	f000 fe19 	bl	8009564 <USBD_LL_StallEP>
}
 8008932:	bf00      	nop
 8008934:	3708      	adds	r7, #8
 8008936:	46bd      	mov	sp, r7
 8008938:	bd80      	pop	{r7, pc}

0800893a <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800893a:	b580      	push	{r7, lr}
 800893c:	b086      	sub	sp, #24
 800893e:	af00      	add	r7, sp, #0
 8008940:	60f8      	str	r0, [r7, #12]
 8008942:	60b9      	str	r1, [r7, #8]
 8008944:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8008946:	2300      	movs	r3, #0
 8008948:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800894a:	68fb      	ldr	r3, [r7, #12]
 800894c:	2b00      	cmp	r3, #0
 800894e:	d036      	beq.n	80089be <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8008950:	68fb      	ldr	r3, [r7, #12]
 8008952:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8008954:	6938      	ldr	r0, [r7, #16]
 8008956:	f000 f836 	bl	80089c6 <USBD_GetLen>
 800895a:	4603      	mov	r3, r0
 800895c:	3301      	adds	r3, #1
 800895e:	b29b      	uxth	r3, r3
 8008960:	005b      	lsls	r3, r3, #1
 8008962:	b29a      	uxth	r2, r3
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8008968:	7dfb      	ldrb	r3, [r7, #23]
 800896a:	68ba      	ldr	r2, [r7, #8]
 800896c:	4413      	add	r3, r2
 800896e:	687a      	ldr	r2, [r7, #4]
 8008970:	7812      	ldrb	r2, [r2, #0]
 8008972:	701a      	strb	r2, [r3, #0]
  idx++;
 8008974:	7dfb      	ldrb	r3, [r7, #23]
 8008976:	3301      	adds	r3, #1
 8008978:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800897a:	7dfb      	ldrb	r3, [r7, #23]
 800897c:	68ba      	ldr	r2, [r7, #8]
 800897e:	4413      	add	r3, r2
 8008980:	2203      	movs	r2, #3
 8008982:	701a      	strb	r2, [r3, #0]
  idx++;
 8008984:	7dfb      	ldrb	r3, [r7, #23]
 8008986:	3301      	adds	r3, #1
 8008988:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800898a:	e013      	b.n	80089b4 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800898c:	7dfb      	ldrb	r3, [r7, #23]
 800898e:	68ba      	ldr	r2, [r7, #8]
 8008990:	4413      	add	r3, r2
 8008992:	693a      	ldr	r2, [r7, #16]
 8008994:	7812      	ldrb	r2, [r2, #0]
 8008996:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8008998:	693b      	ldr	r3, [r7, #16]
 800899a:	3301      	adds	r3, #1
 800899c:	613b      	str	r3, [r7, #16]
    idx++;
 800899e:	7dfb      	ldrb	r3, [r7, #23]
 80089a0:	3301      	adds	r3, #1
 80089a2:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 80089a4:	7dfb      	ldrb	r3, [r7, #23]
 80089a6:	68ba      	ldr	r2, [r7, #8]
 80089a8:	4413      	add	r3, r2
 80089aa:	2200      	movs	r2, #0
 80089ac:	701a      	strb	r2, [r3, #0]
    idx++;
 80089ae:	7dfb      	ldrb	r3, [r7, #23]
 80089b0:	3301      	adds	r3, #1
 80089b2:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 80089b4:	693b      	ldr	r3, [r7, #16]
 80089b6:	781b      	ldrb	r3, [r3, #0]
 80089b8:	2b00      	cmp	r3, #0
 80089ba:	d1e7      	bne.n	800898c <USBD_GetString+0x52>
 80089bc:	e000      	b.n	80089c0 <USBD_GetString+0x86>
    return;
 80089be:	bf00      	nop
  }
}
 80089c0:	3718      	adds	r7, #24
 80089c2:	46bd      	mov	sp, r7
 80089c4:	bd80      	pop	{r7, pc}

080089c6 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80089c6:	b480      	push	{r7}
 80089c8:	b085      	sub	sp, #20
 80089ca:	af00      	add	r7, sp, #0
 80089cc:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80089ce:	2300      	movs	r3, #0
 80089d0:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 80089d6:	e005      	b.n	80089e4 <USBD_GetLen+0x1e>
  {
    len++;
 80089d8:	7bfb      	ldrb	r3, [r7, #15]
 80089da:	3301      	adds	r3, #1
 80089dc:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 80089de:	68bb      	ldr	r3, [r7, #8]
 80089e0:	3301      	adds	r3, #1
 80089e2:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 80089e4:	68bb      	ldr	r3, [r7, #8]
 80089e6:	781b      	ldrb	r3, [r3, #0]
 80089e8:	2b00      	cmp	r3, #0
 80089ea:	d1f5      	bne.n	80089d8 <USBD_GetLen+0x12>
  }

  return len;
 80089ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80089ee:	4618      	mov	r0, r3
 80089f0:	3714      	adds	r7, #20
 80089f2:	46bd      	mov	sp, r7
 80089f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089f8:	4770      	bx	lr

080089fa <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 80089fa:	b580      	push	{r7, lr}
 80089fc:	b084      	sub	sp, #16
 80089fe:	af00      	add	r7, sp, #0
 8008a00:	60f8      	str	r0, [r7, #12]
 8008a02:	60b9      	str	r1, [r7, #8]
 8008a04:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8008a06:	68fb      	ldr	r3, [r7, #12]
 8008a08:	2202      	movs	r2, #2
 8008a0a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8008a0e:	68fb      	ldr	r3, [r7, #12]
 8008a10:	687a      	ldr	r2, [r7, #4]
 8008a12:	619a      	str	r2, [r3, #24]
  pdev->ep_in[0].rem_length = len;
 8008a14:	68fb      	ldr	r3, [r7, #12]
 8008a16:	687a      	ldr	r2, [r7, #4]
 8008a18:	61da      	str	r2, [r3, #28]

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	68ba      	ldr	r2, [r7, #8]
 8008a1e:	2100      	movs	r1, #0
 8008a20:	68f8      	ldr	r0, [r7, #12]
 8008a22:	f000 fe28 	bl	8009676 <USBD_LL_Transmit>

  return USBD_OK;
 8008a26:	2300      	movs	r3, #0
}
 8008a28:	4618      	mov	r0, r3
 8008a2a:	3710      	adds	r7, #16
 8008a2c:	46bd      	mov	sp, r7
 8008a2e:	bd80      	pop	{r7, pc}

08008a30 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8008a30:	b580      	push	{r7, lr}
 8008a32:	b084      	sub	sp, #16
 8008a34:	af00      	add	r7, sp, #0
 8008a36:	60f8      	str	r0, [r7, #12]
 8008a38:	60b9      	str	r1, [r7, #8]
 8008a3a:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	68ba      	ldr	r2, [r7, #8]
 8008a40:	2100      	movs	r1, #0
 8008a42:	68f8      	ldr	r0, [r7, #12]
 8008a44:	f000 fe17 	bl	8009676 <USBD_LL_Transmit>

  return USBD_OK;
 8008a48:	2300      	movs	r3, #0
}
 8008a4a:	4618      	mov	r0, r3
 8008a4c:	3710      	adds	r7, #16
 8008a4e:	46bd      	mov	sp, r7
 8008a50:	bd80      	pop	{r7, pc}

08008a52 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8008a52:	b580      	push	{r7, lr}
 8008a54:	b084      	sub	sp, #16
 8008a56:	af00      	add	r7, sp, #0
 8008a58:	60f8      	str	r0, [r7, #12]
 8008a5a:	60b9      	str	r1, [r7, #8]
 8008a5c:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8008a5e:	68fb      	ldr	r3, [r7, #12]
 8008a60:	2203      	movs	r2, #3
 8008a62:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8008a66:	68fb      	ldr	r3, [r7, #12]
 8008a68:	687a      	ldr	r2, [r7, #4]
 8008a6a:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
  pdev->ep_out[0].rem_length = len;
 8008a6e:	68fb      	ldr	r3, [r7, #12]
 8008a70:	687a      	ldr	r2, [r7, #4]
 8008a72:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	68ba      	ldr	r2, [r7, #8]
 8008a7a:	2100      	movs	r1, #0
 8008a7c:	68f8      	ldr	r0, [r7, #12]
 8008a7e:	f000 fe1b 	bl	80096b8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008a82:	2300      	movs	r3, #0
}
 8008a84:	4618      	mov	r0, r3
 8008a86:	3710      	adds	r7, #16
 8008a88:	46bd      	mov	sp, r7
 8008a8a:	bd80      	pop	{r7, pc}

08008a8c <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8008a8c:	b580      	push	{r7, lr}
 8008a8e:	b084      	sub	sp, #16
 8008a90:	af00      	add	r7, sp, #0
 8008a92:	60f8      	str	r0, [r7, #12]
 8008a94:	60b9      	str	r1, [r7, #8]
 8008a96:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	68ba      	ldr	r2, [r7, #8]
 8008a9c:	2100      	movs	r1, #0
 8008a9e:	68f8      	ldr	r0, [r7, #12]
 8008aa0:	f000 fe0a 	bl	80096b8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008aa4:	2300      	movs	r3, #0
}
 8008aa6:	4618      	mov	r0, r3
 8008aa8:	3710      	adds	r7, #16
 8008aaa:	46bd      	mov	sp, r7
 8008aac:	bd80      	pop	{r7, pc}

08008aae <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8008aae:	b580      	push	{r7, lr}
 8008ab0:	b082      	sub	sp, #8
 8008ab2:	af00      	add	r7, sp, #0
 8008ab4:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	2204      	movs	r2, #4
 8008aba:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8008abe:	2300      	movs	r3, #0
 8008ac0:	2200      	movs	r2, #0
 8008ac2:	2100      	movs	r1, #0
 8008ac4:	6878      	ldr	r0, [r7, #4]
 8008ac6:	f000 fdd6 	bl	8009676 <USBD_LL_Transmit>

  return USBD_OK;
 8008aca:	2300      	movs	r3, #0
}
 8008acc:	4618      	mov	r0, r3
 8008ace:	3708      	adds	r7, #8
 8008ad0:	46bd      	mov	sp, r7
 8008ad2:	bd80      	pop	{r7, pc}

08008ad4 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8008ad4:	b580      	push	{r7, lr}
 8008ad6:	b082      	sub	sp, #8
 8008ad8:	af00      	add	r7, sp, #0
 8008ada:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	2205      	movs	r2, #5
 8008ae0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008ae4:	2300      	movs	r3, #0
 8008ae6:	2200      	movs	r2, #0
 8008ae8:	2100      	movs	r1, #0
 8008aea:	6878      	ldr	r0, [r7, #4]
 8008aec:	f000 fde4 	bl	80096b8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008af0:	2300      	movs	r3, #0
}
 8008af2:	4618      	mov	r0, r3
 8008af4:	3708      	adds	r7, #8
 8008af6:	46bd      	mov	sp, r7
 8008af8:	bd80      	pop	{r7, pc}
	...

08008afc <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8008afc:	b580      	push	{r7, lr}
 8008afe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8008b00:	2200      	movs	r2, #0
 8008b02:	4912      	ldr	r1, [pc, #72]	; (8008b4c <MX_USB_DEVICE_Init+0x50>)
 8008b04:	4812      	ldr	r0, [pc, #72]	; (8008b50 <MX_USB_DEVICE_Init+0x54>)
 8008b06:	f7fe fef3 	bl	80078f0 <USBD_Init>
 8008b0a:	4603      	mov	r3, r0
 8008b0c:	2b00      	cmp	r3, #0
 8008b0e:	d001      	beq.n	8008b14 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8008b10:	f7f7 fe92 	bl	8000838 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8008b14:	490f      	ldr	r1, [pc, #60]	; (8008b54 <MX_USB_DEVICE_Init+0x58>)
 8008b16:	480e      	ldr	r0, [pc, #56]	; (8008b50 <MX_USB_DEVICE_Init+0x54>)
 8008b18:	f7fe ff20 	bl	800795c <USBD_RegisterClass>
 8008b1c:	4603      	mov	r3, r0
 8008b1e:	2b00      	cmp	r3, #0
 8008b20:	d001      	beq.n	8008b26 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8008b22:	f7f7 fe89 	bl	8000838 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8008b26:	490c      	ldr	r1, [pc, #48]	; (8008b58 <MX_USB_DEVICE_Init+0x5c>)
 8008b28:	4809      	ldr	r0, [pc, #36]	; (8008b50 <MX_USB_DEVICE_Init+0x54>)
 8008b2a:	f7fe fe45 	bl	80077b8 <USBD_CDC_RegisterInterface>
 8008b2e:	4603      	mov	r3, r0
 8008b30:	2b00      	cmp	r3, #0
 8008b32:	d001      	beq.n	8008b38 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8008b34:	f7f7 fe80 	bl	8000838 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8008b38:	4805      	ldr	r0, [pc, #20]	; (8008b50 <MX_USB_DEVICE_Init+0x54>)
 8008b3a:	f7fe ff30 	bl	800799e <USBD_Start>
 8008b3e:	4603      	mov	r3, r0
 8008b40:	2b00      	cmp	r3, #0
 8008b42:	d001      	beq.n	8008b48 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8008b44:	f7f7 fe78 	bl	8000838 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8008b48:	bf00      	nop
 8008b4a:	bd80      	pop	{r7, pc}
 8008b4c:	20000154 	.word	0x20000154
 8008b50:	200004ac 	.word	0x200004ac
 8008b54:	20000030 	.word	0x20000030
 8008b58:	20000140 	.word	0x20000140

08008b5c <cdcAvailable>:
uint8_t rx_buf[512];
bool rx_full = false;

// Data count
uint32_t cdcAvailable(void)
{
 8008b5c:	b480      	push	{r7}
 8008b5e:	b083      	sub	sp, #12
 8008b60:	af00      	add	r7, sp, #0
  uint32_t ret;

  ret = (rx_in - rx_out) % rx_len;
 8008b62:	4b0a      	ldr	r3, [pc, #40]	; (8008b8c <cdcAvailable+0x30>)
 8008b64:	681a      	ldr	r2, [r3, #0]
 8008b66:	4b0a      	ldr	r3, [pc, #40]	; (8008b90 <cdcAvailable+0x34>)
 8008b68:	681b      	ldr	r3, [r3, #0]
 8008b6a:	1ad3      	subs	r3, r2, r3
 8008b6c:	4a09      	ldr	r2, [pc, #36]	; (8008b94 <cdcAvailable+0x38>)
 8008b6e:	6812      	ldr	r2, [r2, #0]
 8008b70:	fbb3 f1f2 	udiv	r1, r3, r2
 8008b74:	fb02 f201 	mul.w	r2, r2, r1
 8008b78:	1a9b      	subs	r3, r3, r2
 8008b7a:	607b      	str	r3, [r7, #4]

  return ret;
 8008b7c:	687b      	ldr	r3, [r7, #4]
}
 8008b7e:	4618      	mov	r0, r3
 8008b80:	370c      	adds	r7, #12
 8008b82:	46bd      	mov	sp, r7
 8008b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b88:	4770      	bx	lr
 8008b8a:	bf00      	nop
 8008b8c:	20000374 	.word	0x20000374
 8008b90:	20000378 	.word	0x20000378
 8008b94:	2000013c 	.word	0x2000013c

08008b98 <cdcRead>:

uint8_t cdcRead(void)
{
 8008b98:	b480      	push	{r7}
 8008b9a:	b083      	sub	sp, #12
 8008b9c:	af00      	add	r7, sp, #0
  uint8_t ret;

  ret = rx_buf[rx_out];
 8008b9e:	4b0f      	ldr	r3, [pc, #60]	; (8008bdc <cdcRead+0x44>)
 8008ba0:	681b      	ldr	r3, [r3, #0]
 8008ba2:	4a0f      	ldr	r2, [pc, #60]	; (8008be0 <cdcRead+0x48>)
 8008ba4:	5cd3      	ldrb	r3, [r2, r3]
 8008ba6:	71fb      	strb	r3, [r7, #7]

  if(rx_out != rx_in)
 8008ba8:	4b0c      	ldr	r3, [pc, #48]	; (8008bdc <cdcRead+0x44>)
 8008baa:	681a      	ldr	r2, [r3, #0]
 8008bac:	4b0d      	ldr	r3, [pc, #52]	; (8008be4 <cdcRead+0x4c>)
 8008bae:	681b      	ldr	r3, [r3, #0]
 8008bb0:	429a      	cmp	r2, r3
 8008bb2:	d00b      	beq.n	8008bcc <cdcRead+0x34>
  {
    rx_out = (rx_out + 1) % rx_len;
 8008bb4:	4b09      	ldr	r3, [pc, #36]	; (8008bdc <cdcRead+0x44>)
 8008bb6:	681b      	ldr	r3, [r3, #0]
 8008bb8:	3301      	adds	r3, #1
 8008bba:	4a0b      	ldr	r2, [pc, #44]	; (8008be8 <cdcRead+0x50>)
 8008bbc:	6812      	ldr	r2, [r2, #0]
 8008bbe:	fbb3 f1f2 	udiv	r1, r3, r2
 8008bc2:	fb02 f201 	mul.w	r2, r2, r1
 8008bc6:	1a9b      	subs	r3, r3, r2
 8008bc8:	4a04      	ldr	r2, [pc, #16]	; (8008bdc <cdcRead+0x44>)
 8008bca:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8008bcc:	79fb      	ldrb	r3, [r7, #7]
}
 8008bce:	4618      	mov	r0, r3
 8008bd0:	370c      	adds	r7, #12
 8008bd2:	46bd      	mov	sp, r7
 8008bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bd8:	4770      	bx	lr
 8008bda:	bf00      	nop
 8008bdc:	20000378 	.word	0x20000378
 8008be0:	20000b7c 	.word	0x20000b7c
 8008be4:	20000374 	.word	0x20000374
 8008be8:	2000013c 	.word	0x2000013c

08008bec <cdcDataIn>:

void cdcDataIn(uint8_t rx_data)
{
 8008bec:	b480      	push	{r7}
 8008bee:	b085      	sub	sp, #20
 8008bf0:	af00      	add	r7, sp, #0
 8008bf2:	4603      	mov	r3, r0
 8008bf4:	71fb      	strb	r3, [r7, #7]
  uint32_t next_rx_in;

  rx_buf[rx_in] = rx_data;
 8008bf6:	4b0f      	ldr	r3, [pc, #60]	; (8008c34 <cdcDataIn+0x48>)
 8008bf8:	681b      	ldr	r3, [r3, #0]
 8008bfa:	490f      	ldr	r1, [pc, #60]	; (8008c38 <cdcDataIn+0x4c>)
 8008bfc:	79fa      	ldrb	r2, [r7, #7]
 8008bfe:	54ca      	strb	r2, [r1, r3]

  next_rx_in = (rx_in + 1) % rx_len;
 8008c00:	4b0c      	ldr	r3, [pc, #48]	; (8008c34 <cdcDataIn+0x48>)
 8008c02:	681b      	ldr	r3, [r3, #0]
 8008c04:	3301      	adds	r3, #1
 8008c06:	4a0d      	ldr	r2, [pc, #52]	; (8008c3c <cdcDataIn+0x50>)
 8008c08:	6812      	ldr	r2, [r2, #0]
 8008c0a:	fbb3 f1f2 	udiv	r1, r3, r2
 8008c0e:	fb02 f201 	mul.w	r2, r2, r1
 8008c12:	1a9b      	subs	r3, r3, r2
 8008c14:	60fb      	str	r3, [r7, #12]

  if(next_rx_in != rx_out)
 8008c16:	4b0a      	ldr	r3, [pc, #40]	; (8008c40 <cdcDataIn+0x54>)
 8008c18:	681b      	ldr	r3, [r3, #0]
 8008c1a:	68fa      	ldr	r2, [r7, #12]
 8008c1c:	429a      	cmp	r2, r3
 8008c1e:	d002      	beq.n	8008c26 <cdcDataIn+0x3a>
  {
    rx_in = next_rx_in;
 8008c20:	4a04      	ldr	r2, [pc, #16]	; (8008c34 <cdcDataIn+0x48>)
 8008c22:	68fb      	ldr	r3, [r7, #12]
 8008c24:	6013      	str	r3, [r2, #0]
  }

}
 8008c26:	bf00      	nop
 8008c28:	3714      	adds	r7, #20
 8008c2a:	46bd      	mov	sp, r7
 8008c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c30:	4770      	bx	lr
 8008c32:	bf00      	nop
 8008c34:	20000374 	.word	0x20000374
 8008c38:	20000b7c 	.word	0x20000b7c
 8008c3c:	2000013c 	.word	0x2000013c
 8008c40:	20000378 	.word	0x20000378

08008c44 <cdcWrite>:

uint32_t cdcWrite(uint8_t *p_data, uint32_t length)
{
 8008c44:	b580      	push	{r7, lr}
 8008c46:	b084      	sub	sp, #16
 8008c48:	af00      	add	r7, sp, #0
 8008c4a:	6078      	str	r0, [r7, #4]
 8008c4c:	6039      	str	r1, [r7, #0]
  uint32_t pre_time;
  uint8_t ret;

  pre_time = millis();
 8008c4e:	f7f7 fd5c 	bl	800070a <millis>
 8008c52:	60f8      	str	r0, [r7, #12]
  while(1)
  {
    ret = CDC_Transmit_FS(p_data, length);
 8008c54:	683b      	ldr	r3, [r7, #0]
 8008c56:	b29b      	uxth	r3, r3
 8008c58:	4619      	mov	r1, r3
 8008c5a:	6878      	ldr	r0, [r7, #4]
 8008c5c:	f000 f94a 	bl	8008ef4 <CDC_Transmit_FS>
 8008c60:	4603      	mov	r3, r0
 8008c62:	72fb      	strb	r3, [r7, #11]

    if(ret == USBD_OK)
 8008c64:	7afb      	ldrb	r3, [r7, #11]
 8008c66:	2b00      	cmp	r3, #0
 8008c68:	d101      	bne.n	8008c6e <cdcWrite+0x2a>
    {
      return length;
 8008c6a:	683b      	ldr	r3, [r7, #0]
 8008c6c:	e00e      	b.n	8008c8c <cdcWrite+0x48>
    }
    else if(ret == USBD_FAIL)
 8008c6e:	7afb      	ldrb	r3, [r7, #11]
 8008c70:	2b03      	cmp	r3, #3
 8008c72:	d101      	bne.n	8008c78 <cdcWrite+0x34>
    {
      return 0;
 8008c74:	2300      	movs	r3, #0
 8008c76:	e009      	b.n	8008c8c <cdcWrite+0x48>
    }

    if(millis()-pre_time >= 100)
 8008c78:	f7f7 fd47 	bl	800070a <millis>
 8008c7c:	4602      	mov	r2, r0
 8008c7e:	68fb      	ldr	r3, [r7, #12]
 8008c80:	1ad3      	subs	r3, r2, r3
 8008c82:	2b63      	cmp	r3, #99	; 0x63
 8008c84:	d800      	bhi.n	8008c88 <cdcWrite+0x44>
    ret = CDC_Transmit_FS(p_data, length);
 8008c86:	e7e5      	b.n	8008c54 <cdcWrite+0x10>
    {
      break;
 8008c88:	bf00      	nop
    }
  }

  return 0;
 8008c8a:	2300      	movs	r3, #0
}
 8008c8c:	4618      	mov	r0, r3
 8008c8e:	3710      	adds	r7, #16
 8008c90:	46bd      	mov	sp, r7
 8008c92:	bd80      	pop	{r7, pc}

08008c94 <USBD_CDC_SOF>:
  return LineCoding.bitrate;

}

uint8_t USBD_CDC_SOF(struct _USBD_HandleTypeDef *pdev)
{
 8008c94:	b590      	push	{r4, r7, lr}
 8008c96:	b085      	sub	sp, #20
 8008c98:	af00      	add	r7, sp, #0
 8008c9a:	6078      	str	r0, [r7, #4]
  if(rx_full == true)
 8008c9c:	4b0c      	ldr	r3, [pc, #48]	; (8008cd0 <USBD_CDC_SOF+0x3c>)
 8008c9e:	781b      	ldrb	r3, [r3, #0]
 8008ca0:	2b00      	cmp	r3, #0
 8008ca2:	d010      	beq.n	8008cc6 <USBD_CDC_SOF+0x32>
  {
    uint32_t buf_len;

    // 수신 버퍼에서 비어있는 데이터 양
    buf_len = (rx_len - cdcAvailable()) - 1;
 8008ca4:	4b0b      	ldr	r3, [pc, #44]	; (8008cd4 <USBD_CDC_SOF+0x40>)
 8008ca6:	681c      	ldr	r4, [r3, #0]
 8008ca8:	f7ff ff58 	bl	8008b5c <cdcAvailable>
 8008cac:	4603      	mov	r3, r0
 8008cae:	1ae3      	subs	r3, r4, r3
 8008cb0:	3b01      	subs	r3, #1
 8008cb2:	60fb      	str	r3, [r7, #12]

    if(buf_len >= USB_FS_MAX_PACKET_SIZE)
 8008cb4:	68fb      	ldr	r3, [r7, #12]
 8008cb6:	2b3f      	cmp	r3, #63	; 0x3f
 8008cb8:	d905      	bls.n	8008cc6 <USBD_CDC_SOF+0x32>
    {
      // 다음 데이터도 보내줘
      USBD_CDC_ReceivePacket(pdev);          // alarm to PC whether data is vacant
 8008cba:	6878      	ldr	r0, [r7, #4]
 8008cbc:	f7fe fdee 	bl	800789c <USBD_CDC_ReceivePacket>
      rx_full = false;
 8008cc0:	4b03      	ldr	r3, [pc, #12]	; (8008cd0 <USBD_CDC_SOF+0x3c>)
 8008cc2:	2200      	movs	r2, #0
 8008cc4:	701a      	strb	r2, [r3, #0]
    }
  }

  return 0;
 8008cc6:	2300      	movs	r3, #0
}
 8008cc8:	4618      	mov	r0, r3
 8008cca:	3714      	adds	r7, #20
 8008ccc:	46bd      	mov	sp, r7
 8008cce:	bd90      	pop	{r4, r7, pc}
 8008cd0:	2000037c 	.word	0x2000037c
 8008cd4:	2000013c 	.word	0x2000013c

08008cd8 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8008cd8:	b580      	push	{r7, lr}
 8008cda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8008cdc:	2200      	movs	r2, #0
 8008cde:	4905      	ldr	r1, [pc, #20]	; (8008cf4 <CDC_Init_FS+0x1c>)
 8008ce0:	4805      	ldr	r0, [pc, #20]	; (8008cf8 <CDC_Init_FS+0x20>)
 8008ce2:	f7fe fd7e 	bl	80077e2 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8008ce6:	4905      	ldr	r1, [pc, #20]	; (8008cfc <CDC_Init_FS+0x24>)
 8008ce8:	4803      	ldr	r0, [pc, #12]	; (8008cf8 <CDC_Init_FS+0x20>)
 8008cea:	f7fe fd93 	bl	8007814 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8008cee:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8008cf0:	4618      	mov	r0, r3
 8008cf2:	bd80      	pop	{r7, pc}
 8008cf4:	2000097c 	.word	0x2000097c
 8008cf8:	200004ac 	.word	0x200004ac
 8008cfc:	2000077c 	.word	0x2000077c

08008d00 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8008d00:	b480      	push	{r7}
 8008d02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8008d04:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8008d06:	4618      	mov	r0, r3
 8008d08:	46bd      	mov	sp, r7
 8008d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d0e:	4770      	bx	lr

08008d10 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8008d10:	b480      	push	{r7}
 8008d12:	b083      	sub	sp, #12
 8008d14:	af00      	add	r7, sp, #0
 8008d16:	4603      	mov	r3, r0
 8008d18:	6039      	str	r1, [r7, #0]
 8008d1a:	71fb      	strb	r3, [r7, #7]
 8008d1c:	4613      	mov	r3, r2
 8008d1e:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8008d20:	79fb      	ldrb	r3, [r7, #7]
 8008d22:	2b23      	cmp	r3, #35	; 0x23
 8008d24:	f200 80a3 	bhi.w	8008e6e <CDC_Control_FS+0x15e>
 8008d28:	a201      	add	r2, pc, #4	; (adr r2, 8008d30 <CDC_Control_FS+0x20>)
 8008d2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d2e:	bf00      	nop
 8008d30:	08008e6f 	.word	0x08008e6f
 8008d34:	08008e6f 	.word	0x08008e6f
 8008d38:	08008e6f 	.word	0x08008e6f
 8008d3c:	08008e6f 	.word	0x08008e6f
 8008d40:	08008e6f 	.word	0x08008e6f
 8008d44:	08008e6f 	.word	0x08008e6f
 8008d48:	08008e6f 	.word	0x08008e6f
 8008d4c:	08008e6f 	.word	0x08008e6f
 8008d50:	08008e6f 	.word	0x08008e6f
 8008d54:	08008e6f 	.word	0x08008e6f
 8008d58:	08008e6f 	.word	0x08008e6f
 8008d5c:	08008e6f 	.word	0x08008e6f
 8008d60:	08008e6f 	.word	0x08008e6f
 8008d64:	08008e6f 	.word	0x08008e6f
 8008d68:	08008e6f 	.word	0x08008e6f
 8008d6c:	08008e6f 	.word	0x08008e6f
 8008d70:	08008e6f 	.word	0x08008e6f
 8008d74:	08008e6f 	.word	0x08008e6f
 8008d78:	08008e6f 	.word	0x08008e6f
 8008d7c:	08008e6f 	.word	0x08008e6f
 8008d80:	08008e6f 	.word	0x08008e6f
 8008d84:	08008e6f 	.word	0x08008e6f
 8008d88:	08008e6f 	.word	0x08008e6f
 8008d8c:	08008e6f 	.word	0x08008e6f
 8008d90:	08008e6f 	.word	0x08008e6f
 8008d94:	08008e6f 	.word	0x08008e6f
 8008d98:	08008e6f 	.word	0x08008e6f
 8008d9c:	08008e6f 	.word	0x08008e6f
 8008da0:	08008e6f 	.word	0x08008e6f
 8008da4:	08008e6f 	.word	0x08008e6f
 8008da8:	08008e6f 	.word	0x08008e6f
 8008dac:	08008e6f 	.word	0x08008e6f
 8008db0:	08008dc1 	.word	0x08008dc1
 8008db4:	08008e1b 	.word	0x08008e1b
 8008db8:	08008e6f 	.word	0x08008e6f
 8008dbc:	08008e6f 	.word	0x08008e6f
  /*                                        4 - Space                            */
  /* 6      | bDataBits  |   1   | Number Data bits (5, 6, 7, 8 or 16).          */
  /*******************************************************************************/
    case CDC_SET_LINE_CODING:

      LineCoding.bitrate  = (uint32_t)(pbuf[0]);
 8008dc0:	683b      	ldr	r3, [r7, #0]
 8008dc2:	781b      	ldrb	r3, [r3, #0]
 8008dc4:	461a      	mov	r2, r3
 8008dc6:	4b2e      	ldr	r3, [pc, #184]	; (8008e80 <CDC_Control_FS+0x170>)
 8008dc8:	601a      	str	r2, [r3, #0]
      LineCoding.bitrate |= (uint32_t)(pbuf[1]<<8);
 8008dca:	4b2d      	ldr	r3, [pc, #180]	; (8008e80 <CDC_Control_FS+0x170>)
 8008dcc:	681b      	ldr	r3, [r3, #0]
 8008dce:	683a      	ldr	r2, [r7, #0]
 8008dd0:	3201      	adds	r2, #1
 8008dd2:	7812      	ldrb	r2, [r2, #0]
 8008dd4:	0212      	lsls	r2, r2, #8
 8008dd6:	4313      	orrs	r3, r2
 8008dd8:	4a29      	ldr	r2, [pc, #164]	; (8008e80 <CDC_Control_FS+0x170>)
 8008dda:	6013      	str	r3, [r2, #0]
      LineCoding.bitrate |= (uint32_t)(pbuf[2]<<16);
 8008ddc:	4b28      	ldr	r3, [pc, #160]	; (8008e80 <CDC_Control_FS+0x170>)
 8008dde:	681b      	ldr	r3, [r3, #0]
 8008de0:	683a      	ldr	r2, [r7, #0]
 8008de2:	3202      	adds	r2, #2
 8008de4:	7812      	ldrb	r2, [r2, #0]
 8008de6:	0412      	lsls	r2, r2, #16
 8008de8:	4313      	orrs	r3, r2
 8008dea:	4a25      	ldr	r2, [pc, #148]	; (8008e80 <CDC_Control_FS+0x170>)
 8008dec:	6013      	str	r3, [r2, #0]
      LineCoding.bitrate |= (uint32_t)(pbuf[3]<<24);
 8008dee:	4b24      	ldr	r3, [pc, #144]	; (8008e80 <CDC_Control_FS+0x170>)
 8008df0:	681b      	ldr	r3, [r3, #0]
 8008df2:	683a      	ldr	r2, [r7, #0]
 8008df4:	3203      	adds	r2, #3
 8008df6:	7812      	ldrb	r2, [r2, #0]
 8008df8:	0612      	lsls	r2, r2, #24
 8008dfa:	4313      	orrs	r3, r2
 8008dfc:	4a20      	ldr	r2, [pc, #128]	; (8008e80 <CDC_Control_FS+0x170>)
 8008dfe:	6013      	str	r3, [r2, #0]
      LineCoding.format   = pbuf[4];
 8008e00:	683b      	ldr	r3, [r7, #0]
 8008e02:	791a      	ldrb	r2, [r3, #4]
 8008e04:	4b1e      	ldr	r3, [pc, #120]	; (8008e80 <CDC_Control_FS+0x170>)
 8008e06:	711a      	strb	r2, [r3, #4]
      LineCoding.paritytype = pbuf[5];
 8008e08:	683b      	ldr	r3, [r7, #0]
 8008e0a:	795a      	ldrb	r2, [r3, #5]
 8008e0c:	4b1c      	ldr	r3, [pc, #112]	; (8008e80 <CDC_Control_FS+0x170>)
 8008e0e:	715a      	strb	r2, [r3, #5]
      LineCoding.datatype = pbuf[6];
 8008e10:	683b      	ldr	r3, [r7, #0]
 8008e12:	799a      	ldrb	r2, [r3, #6]
 8008e14:	4b1a      	ldr	r3, [pc, #104]	; (8008e80 <CDC_Control_FS+0x170>)
 8008e16:	719a      	strb	r2, [r3, #6]

    break;
 8008e18:	e02a      	b.n	8008e70 <CDC_Control_FS+0x160>

    case CDC_GET_LINE_CODING:
      pbuf[0] = (uint8_t)(LineCoding.bitrate);
 8008e1a:	4b19      	ldr	r3, [pc, #100]	; (8008e80 <CDC_Control_FS+0x170>)
 8008e1c:	681b      	ldr	r3, [r3, #0]
 8008e1e:	b2da      	uxtb	r2, r3
 8008e20:	683b      	ldr	r3, [r7, #0]
 8008e22:	701a      	strb	r2, [r3, #0]
      pbuf[1] = (uint8_t)(LineCoding.bitrate>>8);
 8008e24:	4b16      	ldr	r3, [pc, #88]	; (8008e80 <CDC_Control_FS+0x170>)
 8008e26:	681b      	ldr	r3, [r3, #0]
 8008e28:	0a1a      	lsrs	r2, r3, #8
 8008e2a:	683b      	ldr	r3, [r7, #0]
 8008e2c:	3301      	adds	r3, #1
 8008e2e:	b2d2      	uxtb	r2, r2
 8008e30:	701a      	strb	r2, [r3, #0]
      pbuf[2] = (uint8_t)(LineCoding.bitrate>>16);
 8008e32:	4b13      	ldr	r3, [pc, #76]	; (8008e80 <CDC_Control_FS+0x170>)
 8008e34:	681b      	ldr	r3, [r3, #0]
 8008e36:	0c1a      	lsrs	r2, r3, #16
 8008e38:	683b      	ldr	r3, [r7, #0]
 8008e3a:	3302      	adds	r3, #2
 8008e3c:	b2d2      	uxtb	r2, r2
 8008e3e:	701a      	strb	r2, [r3, #0]
      pbuf[3] = (uint8_t)(LineCoding.bitrate>>24);
 8008e40:	4b0f      	ldr	r3, [pc, #60]	; (8008e80 <CDC_Control_FS+0x170>)
 8008e42:	681b      	ldr	r3, [r3, #0]
 8008e44:	0e1a      	lsrs	r2, r3, #24
 8008e46:	683b      	ldr	r3, [r7, #0]
 8008e48:	3303      	adds	r3, #3
 8008e4a:	b2d2      	uxtb	r2, r2
 8008e4c:	701a      	strb	r2, [r3, #0]
      pbuf[4] = LineCoding.format;
 8008e4e:	683b      	ldr	r3, [r7, #0]
 8008e50:	3304      	adds	r3, #4
 8008e52:	4a0b      	ldr	r2, [pc, #44]	; (8008e80 <CDC_Control_FS+0x170>)
 8008e54:	7912      	ldrb	r2, [r2, #4]
 8008e56:	701a      	strb	r2, [r3, #0]
      pbuf[5] = LineCoding.paritytype;
 8008e58:	683b      	ldr	r3, [r7, #0]
 8008e5a:	3305      	adds	r3, #5
 8008e5c:	4a08      	ldr	r2, [pc, #32]	; (8008e80 <CDC_Control_FS+0x170>)
 8008e5e:	7952      	ldrb	r2, [r2, #5]
 8008e60:	701a      	strb	r2, [r3, #0]
      pbuf[6] = LineCoding.datatype;
 8008e62:	683b      	ldr	r3, [r7, #0]
 8008e64:	3306      	adds	r3, #6
 8008e66:	4a06      	ldr	r2, [pc, #24]	; (8008e80 <CDC_Control_FS+0x170>)
 8008e68:	7992      	ldrb	r2, [r2, #6]
 8008e6a:	701a      	strb	r2, [r3, #0]
    break;
 8008e6c:	e000      	b.n	8008e70 <CDC_Control_FS+0x160>
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8008e6e:	bf00      	nop
  }

  return (USBD_OK);
 8008e70:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8008e72:	4618      	mov	r0, r3
 8008e74:	370c      	adds	r7, #12
 8008e76:	46bd      	mov	sp, r7
 8008e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e7c:	4770      	bx	lr
 8008e7e:	bf00      	nop
 8008e80:	20000134 	.word	0x20000134

08008e84 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8008e84:	b590      	push	{r4, r7, lr}
 8008e86:	b085      	sub	sp, #20
 8008e88:	af00      	add	r7, sp, #0
 8008e8a:	6078      	str	r0, [r7, #4]
 8008e8c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */

  for(int i =0; i<*Len; i++)
 8008e8e:	2300      	movs	r3, #0
 8008e90:	60fb      	str	r3, [r7, #12]
 8008e92:	e009      	b.n	8008ea8 <CDC_Receive_FS+0x24>
  {
    cdcDataIn(Buf[i]);
 8008e94:	68fb      	ldr	r3, [r7, #12]
 8008e96:	687a      	ldr	r2, [r7, #4]
 8008e98:	4413      	add	r3, r2
 8008e9a:	781b      	ldrb	r3, [r3, #0]
 8008e9c:	4618      	mov	r0, r3
 8008e9e:	f7ff fea5 	bl	8008bec <cdcDataIn>
  for(int i =0; i<*Len; i++)
 8008ea2:	68fb      	ldr	r3, [r7, #12]
 8008ea4:	3301      	adds	r3, #1
 8008ea6:	60fb      	str	r3, [r7, #12]
 8008ea8:	683b      	ldr	r3, [r7, #0]
 8008eaa:	681a      	ldr	r2, [r3, #0]
 8008eac:	68fb      	ldr	r3, [r7, #12]
 8008eae:	429a      	cmp	r2, r3
 8008eb0:	d8f0      	bhi.n	8008e94 <CDC_Receive_FS+0x10>
  }

  uint32_t buf_len;

  // 수신 버퍼에서 비어있는 데이터 양
  buf_len = (rx_len - cdcAvailable()) - 1;
 8008eb2:	4b0d      	ldr	r3, [pc, #52]	; (8008ee8 <CDC_Receive_FS+0x64>)
 8008eb4:	681c      	ldr	r4, [r3, #0]
 8008eb6:	f7ff fe51 	bl	8008b5c <cdcAvailable>
 8008eba:	4603      	mov	r3, r0
 8008ebc:	1ae3      	subs	r3, r4, r3
 8008ebe:	3b01      	subs	r3, #1
 8008ec0:	60bb      	str	r3, [r7, #8]

  if(buf_len >= USB_FS_MAX_PACKET_SIZE)
 8008ec2:	68bb      	ldr	r3, [r7, #8]
 8008ec4:	2b3f      	cmp	r3, #63	; 0x3f
 8008ec6:	d907      	bls.n	8008ed8 <CDC_Receive_FS+0x54>
  {
    // 다음 데이터도 보내줘
    USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8008ec8:	6879      	ldr	r1, [r7, #4]
 8008eca:	4808      	ldr	r0, [pc, #32]	; (8008eec <CDC_Receive_FS+0x68>)
 8008ecc:	f7fe fca2 	bl	8007814 <USBD_CDC_SetRxBuffer>
    USBD_CDC_ReceivePacket(&hUsbDeviceFS);          // alarm to PC whether data is vacant
 8008ed0:	4806      	ldr	r0, [pc, #24]	; (8008eec <CDC_Receive_FS+0x68>)
 8008ed2:	f7fe fce3 	bl	800789c <USBD_CDC_ReceivePacket>
 8008ed6:	e002      	b.n	8008ede <CDC_Receive_FS+0x5a>
  }
  else
  {
    // 버퍼가 용량 부족
    // USBD_CDC_ReceivePacket(&hUsbDeviceFS); 을 안보내면 PC는 기다림
    rx_full = true;
 8008ed8:	4b05      	ldr	r3, [pc, #20]	; (8008ef0 <CDC_Receive_FS+0x6c>)
 8008eda:	2201      	movs	r2, #1
 8008edc:	701a      	strb	r2, [r3, #0]
  }



  return (USBD_OK);
 8008ede:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8008ee0:	4618      	mov	r0, r3
 8008ee2:	3714      	adds	r7, #20
 8008ee4:	46bd      	mov	sp, r7
 8008ee6:	bd90      	pop	{r4, r7, pc}
 8008ee8:	2000013c 	.word	0x2000013c
 8008eec:	200004ac 	.word	0x200004ac
 8008ef0:	2000037c 	.word	0x2000037c

08008ef4 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8008ef4:	b580      	push	{r7, lr}
 8008ef6:	b084      	sub	sp, #16
 8008ef8:	af00      	add	r7, sp, #0
 8008efa:	6078      	str	r0, [r7, #4]
 8008efc:	460b      	mov	r3, r1
 8008efe:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8008f00:	2300      	movs	r3, #0
 8008f02:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8008f04:	4b0d      	ldr	r3, [pc, #52]	; (8008f3c <CDC_Transmit_FS+0x48>)
 8008f06:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008f0a:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8008f0c:	68bb      	ldr	r3, [r7, #8]
 8008f0e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8008f12:	2b00      	cmp	r3, #0
 8008f14:	d001      	beq.n	8008f1a <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8008f16:	2301      	movs	r3, #1
 8008f18:	e00b      	b.n	8008f32 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8008f1a:	887b      	ldrh	r3, [r7, #2]
 8008f1c:	461a      	mov	r2, r3
 8008f1e:	6879      	ldr	r1, [r7, #4]
 8008f20:	4806      	ldr	r0, [pc, #24]	; (8008f3c <CDC_Transmit_FS+0x48>)
 8008f22:	f7fe fc5e 	bl	80077e2 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8008f26:	4805      	ldr	r0, [pc, #20]	; (8008f3c <CDC_Transmit_FS+0x48>)
 8008f28:	f7fe fc88 	bl	800783c <USBD_CDC_TransmitPacket>
 8008f2c:	4603      	mov	r3, r0
 8008f2e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8008f30:	7bfb      	ldrb	r3, [r7, #15]
}
 8008f32:	4618      	mov	r0, r3
 8008f34:	3710      	adds	r7, #16
 8008f36:	46bd      	mov	sp, r7
 8008f38:	bd80      	pop	{r7, pc}
 8008f3a:	bf00      	nop
 8008f3c:	200004ac 	.word	0x200004ac

08008f40 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8008f40:	b480      	push	{r7}
 8008f42:	b087      	sub	sp, #28
 8008f44:	af00      	add	r7, sp, #0
 8008f46:	60f8      	str	r0, [r7, #12]
 8008f48:	60b9      	str	r1, [r7, #8]
 8008f4a:	4613      	mov	r3, r2
 8008f4c:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8008f4e:	2300      	movs	r3, #0
 8008f50:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8008f52:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8008f56:	4618      	mov	r0, r3
 8008f58:	371c      	adds	r7, #28
 8008f5a:	46bd      	mov	sp, r7
 8008f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f60:	4770      	bx	lr
	...

08008f64 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008f64:	b480      	push	{r7}
 8008f66:	b083      	sub	sp, #12
 8008f68:	af00      	add	r7, sp, #0
 8008f6a:	4603      	mov	r3, r0
 8008f6c:	6039      	str	r1, [r7, #0]
 8008f6e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8008f70:	683b      	ldr	r3, [r7, #0]
 8008f72:	2212      	movs	r2, #18
 8008f74:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8008f76:	4b03      	ldr	r3, [pc, #12]	; (8008f84 <USBD_FS_DeviceDescriptor+0x20>)
}
 8008f78:	4618      	mov	r0, r3
 8008f7a:	370c      	adds	r7, #12
 8008f7c:	46bd      	mov	sp, r7
 8008f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f82:	4770      	bx	lr
 8008f84:	20000170 	.word	0x20000170

08008f88 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008f88:	b480      	push	{r7}
 8008f8a:	b083      	sub	sp, #12
 8008f8c:	af00      	add	r7, sp, #0
 8008f8e:	4603      	mov	r3, r0
 8008f90:	6039      	str	r1, [r7, #0]
 8008f92:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8008f94:	683b      	ldr	r3, [r7, #0]
 8008f96:	2204      	movs	r2, #4
 8008f98:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8008f9a:	4b03      	ldr	r3, [pc, #12]	; (8008fa8 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8008f9c:	4618      	mov	r0, r3
 8008f9e:	370c      	adds	r7, #12
 8008fa0:	46bd      	mov	sp, r7
 8008fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fa6:	4770      	bx	lr
 8008fa8:	20000184 	.word	0x20000184

08008fac <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008fac:	b580      	push	{r7, lr}
 8008fae:	b082      	sub	sp, #8
 8008fb0:	af00      	add	r7, sp, #0
 8008fb2:	4603      	mov	r3, r0
 8008fb4:	6039      	str	r1, [r7, #0]
 8008fb6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008fb8:	79fb      	ldrb	r3, [r7, #7]
 8008fba:	2b00      	cmp	r3, #0
 8008fbc:	d105      	bne.n	8008fca <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008fbe:	683a      	ldr	r2, [r7, #0]
 8008fc0:	4907      	ldr	r1, [pc, #28]	; (8008fe0 <USBD_FS_ProductStrDescriptor+0x34>)
 8008fc2:	4808      	ldr	r0, [pc, #32]	; (8008fe4 <USBD_FS_ProductStrDescriptor+0x38>)
 8008fc4:	f7ff fcb9 	bl	800893a <USBD_GetString>
 8008fc8:	e004      	b.n	8008fd4 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008fca:	683a      	ldr	r2, [r7, #0]
 8008fcc:	4904      	ldr	r1, [pc, #16]	; (8008fe0 <USBD_FS_ProductStrDescriptor+0x34>)
 8008fce:	4805      	ldr	r0, [pc, #20]	; (8008fe4 <USBD_FS_ProductStrDescriptor+0x38>)
 8008fd0:	f7ff fcb3 	bl	800893a <USBD_GetString>
  }
  return USBD_StrDesc;
 8008fd4:	4b02      	ldr	r3, [pc, #8]	; (8008fe0 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8008fd6:	4618      	mov	r0, r3
 8008fd8:	3708      	adds	r7, #8
 8008fda:	46bd      	mov	sp, r7
 8008fdc:	bd80      	pop	{r7, pc}
 8008fde:	bf00      	nop
 8008fe0:	20000d7c 	.word	0x20000d7c
 8008fe4:	0800a71c 	.word	0x0800a71c

08008fe8 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008fe8:	b580      	push	{r7, lr}
 8008fea:	b082      	sub	sp, #8
 8008fec:	af00      	add	r7, sp, #0
 8008fee:	4603      	mov	r3, r0
 8008ff0:	6039      	str	r1, [r7, #0]
 8008ff2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8008ff4:	683a      	ldr	r2, [r7, #0]
 8008ff6:	4904      	ldr	r1, [pc, #16]	; (8009008 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8008ff8:	4804      	ldr	r0, [pc, #16]	; (800900c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8008ffa:	f7ff fc9e 	bl	800893a <USBD_GetString>
  return USBD_StrDesc;
 8008ffe:	4b02      	ldr	r3, [pc, #8]	; (8009008 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8009000:	4618      	mov	r0, r3
 8009002:	3708      	adds	r7, #8
 8009004:	46bd      	mov	sp, r7
 8009006:	bd80      	pop	{r7, pc}
 8009008:	20000d7c 	.word	0x20000d7c
 800900c:	0800a734 	.word	0x0800a734

08009010 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009010:	b580      	push	{r7, lr}
 8009012:	b082      	sub	sp, #8
 8009014:	af00      	add	r7, sp, #0
 8009016:	4603      	mov	r3, r0
 8009018:	6039      	str	r1, [r7, #0]
 800901a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800901c:	683b      	ldr	r3, [r7, #0]
 800901e:	221a      	movs	r2, #26
 8009020:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8009022:	f000 f843 	bl	80090ac <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8009026:	4b02      	ldr	r3, [pc, #8]	; (8009030 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8009028:	4618      	mov	r0, r3
 800902a:	3708      	adds	r7, #8
 800902c:	46bd      	mov	sp, r7
 800902e:	bd80      	pop	{r7, pc}
 8009030:	20000188 	.word	0x20000188

08009034 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009034:	b580      	push	{r7, lr}
 8009036:	b082      	sub	sp, #8
 8009038:	af00      	add	r7, sp, #0
 800903a:	4603      	mov	r3, r0
 800903c:	6039      	str	r1, [r7, #0]
 800903e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8009040:	79fb      	ldrb	r3, [r7, #7]
 8009042:	2b00      	cmp	r3, #0
 8009044:	d105      	bne.n	8009052 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8009046:	683a      	ldr	r2, [r7, #0]
 8009048:	4907      	ldr	r1, [pc, #28]	; (8009068 <USBD_FS_ConfigStrDescriptor+0x34>)
 800904a:	4808      	ldr	r0, [pc, #32]	; (800906c <USBD_FS_ConfigStrDescriptor+0x38>)
 800904c:	f7ff fc75 	bl	800893a <USBD_GetString>
 8009050:	e004      	b.n	800905c <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8009052:	683a      	ldr	r2, [r7, #0]
 8009054:	4904      	ldr	r1, [pc, #16]	; (8009068 <USBD_FS_ConfigStrDescriptor+0x34>)
 8009056:	4805      	ldr	r0, [pc, #20]	; (800906c <USBD_FS_ConfigStrDescriptor+0x38>)
 8009058:	f7ff fc6f 	bl	800893a <USBD_GetString>
  }
  return USBD_StrDesc;
 800905c:	4b02      	ldr	r3, [pc, #8]	; (8009068 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800905e:	4618      	mov	r0, r3
 8009060:	3708      	adds	r7, #8
 8009062:	46bd      	mov	sp, r7
 8009064:	bd80      	pop	{r7, pc}
 8009066:	bf00      	nop
 8009068:	20000d7c 	.word	0x20000d7c
 800906c:	0800a748 	.word	0x0800a748

08009070 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009070:	b580      	push	{r7, lr}
 8009072:	b082      	sub	sp, #8
 8009074:	af00      	add	r7, sp, #0
 8009076:	4603      	mov	r3, r0
 8009078:	6039      	str	r1, [r7, #0]
 800907a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800907c:	79fb      	ldrb	r3, [r7, #7]
 800907e:	2b00      	cmp	r3, #0
 8009080:	d105      	bne.n	800908e <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8009082:	683a      	ldr	r2, [r7, #0]
 8009084:	4907      	ldr	r1, [pc, #28]	; (80090a4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8009086:	4808      	ldr	r0, [pc, #32]	; (80090a8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8009088:	f7ff fc57 	bl	800893a <USBD_GetString>
 800908c:	e004      	b.n	8009098 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800908e:	683a      	ldr	r2, [r7, #0]
 8009090:	4904      	ldr	r1, [pc, #16]	; (80090a4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8009092:	4805      	ldr	r0, [pc, #20]	; (80090a8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8009094:	f7ff fc51 	bl	800893a <USBD_GetString>
  }
  return USBD_StrDesc;
 8009098:	4b02      	ldr	r3, [pc, #8]	; (80090a4 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800909a:	4618      	mov	r0, r3
 800909c:	3708      	adds	r7, #8
 800909e:	46bd      	mov	sp, r7
 80090a0:	bd80      	pop	{r7, pc}
 80090a2:	bf00      	nop
 80090a4:	20000d7c 	.word	0x20000d7c
 80090a8:	0800a754 	.word	0x0800a754

080090ac <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80090ac:	b580      	push	{r7, lr}
 80090ae:	b084      	sub	sp, #16
 80090b0:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80090b2:	4b0f      	ldr	r3, [pc, #60]	; (80090f0 <Get_SerialNum+0x44>)
 80090b4:	681b      	ldr	r3, [r3, #0]
 80090b6:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80090b8:	4b0e      	ldr	r3, [pc, #56]	; (80090f4 <Get_SerialNum+0x48>)
 80090ba:	681b      	ldr	r3, [r3, #0]
 80090bc:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80090be:	4b0e      	ldr	r3, [pc, #56]	; (80090f8 <Get_SerialNum+0x4c>)
 80090c0:	681b      	ldr	r3, [r3, #0]
 80090c2:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80090c4:	68fa      	ldr	r2, [r7, #12]
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	4413      	add	r3, r2
 80090ca:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80090cc:	68fb      	ldr	r3, [r7, #12]
 80090ce:	2b00      	cmp	r3, #0
 80090d0:	d009      	beq.n	80090e6 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80090d2:	2208      	movs	r2, #8
 80090d4:	4909      	ldr	r1, [pc, #36]	; (80090fc <Get_SerialNum+0x50>)
 80090d6:	68f8      	ldr	r0, [r7, #12]
 80090d8:	f000 f814 	bl	8009104 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80090dc:	2204      	movs	r2, #4
 80090de:	4908      	ldr	r1, [pc, #32]	; (8009100 <Get_SerialNum+0x54>)
 80090e0:	68b8      	ldr	r0, [r7, #8]
 80090e2:	f000 f80f 	bl	8009104 <IntToUnicode>
  }
}
 80090e6:	bf00      	nop
 80090e8:	3710      	adds	r7, #16
 80090ea:	46bd      	mov	sp, r7
 80090ec:	bd80      	pop	{r7, pc}
 80090ee:	bf00      	nop
 80090f0:	1fff7a10 	.word	0x1fff7a10
 80090f4:	1fff7a14 	.word	0x1fff7a14
 80090f8:	1fff7a18 	.word	0x1fff7a18
 80090fc:	2000018a 	.word	0x2000018a
 8009100:	2000019a 	.word	0x2000019a

08009104 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8009104:	b480      	push	{r7}
 8009106:	b087      	sub	sp, #28
 8009108:	af00      	add	r7, sp, #0
 800910a:	60f8      	str	r0, [r7, #12]
 800910c:	60b9      	str	r1, [r7, #8]
 800910e:	4613      	mov	r3, r2
 8009110:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8009112:	2300      	movs	r3, #0
 8009114:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8009116:	2300      	movs	r3, #0
 8009118:	75fb      	strb	r3, [r7, #23]
 800911a:	e027      	b.n	800916c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800911c:	68fb      	ldr	r3, [r7, #12]
 800911e:	0f1b      	lsrs	r3, r3, #28
 8009120:	2b09      	cmp	r3, #9
 8009122:	d80b      	bhi.n	800913c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8009124:	68fb      	ldr	r3, [r7, #12]
 8009126:	0f1b      	lsrs	r3, r3, #28
 8009128:	b2da      	uxtb	r2, r3
 800912a:	7dfb      	ldrb	r3, [r7, #23]
 800912c:	005b      	lsls	r3, r3, #1
 800912e:	4619      	mov	r1, r3
 8009130:	68bb      	ldr	r3, [r7, #8]
 8009132:	440b      	add	r3, r1
 8009134:	3230      	adds	r2, #48	; 0x30
 8009136:	b2d2      	uxtb	r2, r2
 8009138:	701a      	strb	r2, [r3, #0]
 800913a:	e00a      	b.n	8009152 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800913c:	68fb      	ldr	r3, [r7, #12]
 800913e:	0f1b      	lsrs	r3, r3, #28
 8009140:	b2da      	uxtb	r2, r3
 8009142:	7dfb      	ldrb	r3, [r7, #23]
 8009144:	005b      	lsls	r3, r3, #1
 8009146:	4619      	mov	r1, r3
 8009148:	68bb      	ldr	r3, [r7, #8]
 800914a:	440b      	add	r3, r1
 800914c:	3237      	adds	r2, #55	; 0x37
 800914e:	b2d2      	uxtb	r2, r2
 8009150:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8009152:	68fb      	ldr	r3, [r7, #12]
 8009154:	011b      	lsls	r3, r3, #4
 8009156:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8009158:	7dfb      	ldrb	r3, [r7, #23]
 800915a:	005b      	lsls	r3, r3, #1
 800915c:	3301      	adds	r3, #1
 800915e:	68ba      	ldr	r2, [r7, #8]
 8009160:	4413      	add	r3, r2
 8009162:	2200      	movs	r2, #0
 8009164:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8009166:	7dfb      	ldrb	r3, [r7, #23]
 8009168:	3301      	adds	r3, #1
 800916a:	75fb      	strb	r3, [r7, #23]
 800916c:	7dfa      	ldrb	r2, [r7, #23]
 800916e:	79fb      	ldrb	r3, [r7, #7]
 8009170:	429a      	cmp	r2, r3
 8009172:	d3d3      	bcc.n	800911c <IntToUnicode+0x18>
  }
}
 8009174:	bf00      	nop
 8009176:	371c      	adds	r7, #28
 8009178:	46bd      	mov	sp, r7
 800917a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800917e:	4770      	bx	lr

08009180 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8009180:	b580      	push	{r7, lr}
 8009182:	b08a      	sub	sp, #40	; 0x28
 8009184:	af00      	add	r7, sp, #0
 8009186:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009188:	f107 0314 	add.w	r3, r7, #20
 800918c:	2200      	movs	r2, #0
 800918e:	601a      	str	r2, [r3, #0]
 8009190:	605a      	str	r2, [r3, #4]
 8009192:	609a      	str	r2, [r3, #8]
 8009194:	60da      	str	r2, [r3, #12]
 8009196:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	681b      	ldr	r3, [r3, #0]
 800919c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80091a0:	d13a      	bne.n	8009218 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80091a2:	2300      	movs	r3, #0
 80091a4:	613b      	str	r3, [r7, #16]
 80091a6:	4b1e      	ldr	r3, [pc, #120]	; (8009220 <HAL_PCD_MspInit+0xa0>)
 80091a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80091aa:	4a1d      	ldr	r2, [pc, #116]	; (8009220 <HAL_PCD_MspInit+0xa0>)
 80091ac:	f043 0301 	orr.w	r3, r3, #1
 80091b0:	6313      	str	r3, [r2, #48]	; 0x30
 80091b2:	4b1b      	ldr	r3, [pc, #108]	; (8009220 <HAL_PCD_MspInit+0xa0>)
 80091b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80091b6:	f003 0301 	and.w	r3, r3, #1
 80091ba:	613b      	str	r3, [r7, #16]
 80091bc:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80091be:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80091c2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80091c4:	2302      	movs	r3, #2
 80091c6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80091c8:	2300      	movs	r3, #0
 80091ca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80091cc:	2303      	movs	r3, #3
 80091ce:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80091d0:	230a      	movs	r3, #10
 80091d2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80091d4:	f107 0314 	add.w	r3, r7, #20
 80091d8:	4619      	mov	r1, r3
 80091da:	4812      	ldr	r0, [pc, #72]	; (8009224 <HAL_PCD_MspInit+0xa4>)
 80091dc:	f7f9 fa84 	bl	80026e8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80091e0:	4b0f      	ldr	r3, [pc, #60]	; (8009220 <HAL_PCD_MspInit+0xa0>)
 80091e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80091e4:	4a0e      	ldr	r2, [pc, #56]	; (8009220 <HAL_PCD_MspInit+0xa0>)
 80091e6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80091ea:	6353      	str	r3, [r2, #52]	; 0x34
 80091ec:	2300      	movs	r3, #0
 80091ee:	60fb      	str	r3, [r7, #12]
 80091f0:	4b0b      	ldr	r3, [pc, #44]	; (8009220 <HAL_PCD_MspInit+0xa0>)
 80091f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80091f4:	4a0a      	ldr	r2, [pc, #40]	; (8009220 <HAL_PCD_MspInit+0xa0>)
 80091f6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80091fa:	6453      	str	r3, [r2, #68]	; 0x44
 80091fc:	4b08      	ldr	r3, [pc, #32]	; (8009220 <HAL_PCD_MspInit+0xa0>)
 80091fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009200:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009204:	60fb      	str	r3, [r7, #12]
 8009206:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8009208:	2200      	movs	r2, #0
 800920a:	2100      	movs	r1, #0
 800920c:	2043      	movs	r0, #67	; 0x43
 800920e:	f7f8 fb62 	bl	80018d6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8009212:	2043      	movs	r0, #67	; 0x43
 8009214:	f7f8 fb7b 	bl	800190e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8009218:	bf00      	nop
 800921a:	3728      	adds	r7, #40	; 0x28
 800921c:	46bd      	mov	sp, r7
 800921e:	bd80      	pop	{r7, pc}
 8009220:	40023800 	.word	0x40023800
 8009224:	40020000 	.word	0x40020000

08009228 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009228:	b580      	push	{r7, lr}
 800922a:	b082      	sub	sp, #8
 800922c:	af00      	add	r7, sp, #0
 800922e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800923c:	4619      	mov	r1, r3
 800923e:	4610      	mov	r0, r2
 8009240:	f7fe fbf8 	bl	8007a34 <USBD_LL_SetupStage>
}
 8009244:	bf00      	nop
 8009246:	3708      	adds	r7, #8
 8009248:	46bd      	mov	sp, r7
 800924a:	bd80      	pop	{r7, pc}

0800924c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800924c:	b580      	push	{r7, lr}
 800924e:	b082      	sub	sp, #8
 8009250:	af00      	add	r7, sp, #0
 8009252:	6078      	str	r0, [r7, #4]
 8009254:	460b      	mov	r3, r1
 8009256:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 800925e:	78fa      	ldrb	r2, [r7, #3]
 8009260:	6879      	ldr	r1, [r7, #4]
 8009262:	4613      	mov	r3, r2
 8009264:	00db      	lsls	r3, r3, #3
 8009266:	1a9b      	subs	r3, r3, r2
 8009268:	009b      	lsls	r3, r3, #2
 800926a:	440b      	add	r3, r1
 800926c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8009270:	681a      	ldr	r2, [r3, #0]
 8009272:	78fb      	ldrb	r3, [r7, #3]
 8009274:	4619      	mov	r1, r3
 8009276:	f7fe fc30 	bl	8007ada <USBD_LL_DataOutStage>
}
 800927a:	bf00      	nop
 800927c:	3708      	adds	r7, #8
 800927e:	46bd      	mov	sp, r7
 8009280:	bd80      	pop	{r7, pc}

08009282 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009282:	b580      	push	{r7, lr}
 8009284:	b082      	sub	sp, #8
 8009286:	af00      	add	r7, sp, #0
 8009288:	6078      	str	r0, [r7, #4]
 800928a:	460b      	mov	r3, r1
 800928c:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800928e:	687b      	ldr	r3, [r7, #4]
 8009290:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8009294:	78fa      	ldrb	r2, [r7, #3]
 8009296:	6879      	ldr	r1, [r7, #4]
 8009298:	4613      	mov	r3, r2
 800929a:	00db      	lsls	r3, r3, #3
 800929c:	1a9b      	subs	r3, r3, r2
 800929e:	009b      	lsls	r3, r3, #2
 80092a0:	440b      	add	r3, r1
 80092a2:	3348      	adds	r3, #72	; 0x48
 80092a4:	681a      	ldr	r2, [r3, #0]
 80092a6:	78fb      	ldrb	r3, [r7, #3]
 80092a8:	4619      	mov	r1, r3
 80092aa:	f7fe fc79 	bl	8007ba0 <USBD_LL_DataInStage>
}
 80092ae:	bf00      	nop
 80092b0:	3708      	adds	r7, #8
 80092b2:	46bd      	mov	sp, r7
 80092b4:	bd80      	pop	{r7, pc}

080092b6 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80092b6:	b580      	push	{r7, lr}
 80092b8:	b082      	sub	sp, #8
 80092ba:	af00      	add	r7, sp, #0
 80092bc:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80092c4:	4618      	mov	r0, r3
 80092c6:	f7fe fd7d 	bl	8007dc4 <USBD_LL_SOF>
}
 80092ca:	bf00      	nop
 80092cc:	3708      	adds	r7, #8
 80092ce:	46bd      	mov	sp, r7
 80092d0:	bd80      	pop	{r7, pc}

080092d2 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80092d2:	b580      	push	{r7, lr}
 80092d4:	b084      	sub	sp, #16
 80092d6:	af00      	add	r7, sp, #0
 80092d8:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80092da:	2301      	movs	r3, #1
 80092dc:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 80092de:	687b      	ldr	r3, [r7, #4]
 80092e0:	68db      	ldr	r3, [r3, #12]
 80092e2:	2b00      	cmp	r3, #0
 80092e4:	d102      	bne.n	80092ec <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 80092e6:	2300      	movs	r3, #0
 80092e8:	73fb      	strb	r3, [r7, #15]
 80092ea:	e008      	b.n	80092fe <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	68db      	ldr	r3, [r3, #12]
 80092f0:	2b02      	cmp	r3, #2
 80092f2:	d102      	bne.n	80092fa <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 80092f4:	2301      	movs	r3, #1
 80092f6:	73fb      	strb	r3, [r7, #15]
 80092f8:	e001      	b.n	80092fe <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 80092fa:	f7f7 fa9d 	bl	8000838 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80092fe:	687b      	ldr	r3, [r7, #4]
 8009300:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8009304:	7bfa      	ldrb	r2, [r7, #15]
 8009306:	4611      	mov	r1, r2
 8009308:	4618      	mov	r0, r3
 800930a:	f7fe fd20 	bl	8007d4e <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8009314:	4618      	mov	r0, r3
 8009316:	f7fe fcd9 	bl	8007ccc <USBD_LL_Reset>
}
 800931a:	bf00      	nop
 800931c:	3710      	adds	r7, #16
 800931e:	46bd      	mov	sp, r7
 8009320:	bd80      	pop	{r7, pc}
	...

08009324 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009324:	b580      	push	{r7, lr}
 8009326:	b082      	sub	sp, #8
 8009328:	af00      	add	r7, sp, #0
 800932a:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8009332:	4618      	mov	r0, r3
 8009334:	f7fe fd1b 	bl	8007d6e <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	681b      	ldr	r3, [r3, #0]
 800933c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8009340:	681b      	ldr	r3, [r3, #0]
 8009342:	687a      	ldr	r2, [r7, #4]
 8009344:	6812      	ldr	r2, [r2, #0]
 8009346:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800934a:	f043 0301 	orr.w	r3, r3, #1
 800934e:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	6a1b      	ldr	r3, [r3, #32]
 8009354:	2b00      	cmp	r3, #0
 8009356:	d005      	beq.n	8009364 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009358:	4b04      	ldr	r3, [pc, #16]	; (800936c <HAL_PCD_SuspendCallback+0x48>)
 800935a:	691b      	ldr	r3, [r3, #16]
 800935c:	4a03      	ldr	r2, [pc, #12]	; (800936c <HAL_PCD_SuspendCallback+0x48>)
 800935e:	f043 0306 	orr.w	r3, r3, #6
 8009362:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8009364:	bf00      	nop
 8009366:	3708      	adds	r7, #8
 8009368:	46bd      	mov	sp, r7
 800936a:	bd80      	pop	{r7, pc}
 800936c:	e000ed00 	.word	0xe000ed00

08009370 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009370:	b580      	push	{r7, lr}
 8009372:	b082      	sub	sp, #8
 8009374:	af00      	add	r7, sp, #0
 8009376:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800937e:	4618      	mov	r0, r3
 8009380:	f7fe fd0a 	bl	8007d98 <USBD_LL_Resume>
}
 8009384:	bf00      	nop
 8009386:	3708      	adds	r7, #8
 8009388:	46bd      	mov	sp, r7
 800938a:	bd80      	pop	{r7, pc}

0800938c <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800938c:	b580      	push	{r7, lr}
 800938e:	b082      	sub	sp, #8
 8009390:	af00      	add	r7, sp, #0
 8009392:	6078      	str	r0, [r7, #4]
 8009394:	460b      	mov	r3, r1
 8009396:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800939e:	78fa      	ldrb	r2, [r7, #3]
 80093a0:	4611      	mov	r1, r2
 80093a2:	4618      	mov	r0, r3
 80093a4:	f7fe fd35 	bl	8007e12 <USBD_LL_IsoOUTIncomplete>
}
 80093a8:	bf00      	nop
 80093aa:	3708      	adds	r7, #8
 80093ac:	46bd      	mov	sp, r7
 80093ae:	bd80      	pop	{r7, pc}

080093b0 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80093b0:	b580      	push	{r7, lr}
 80093b2:	b082      	sub	sp, #8
 80093b4:	af00      	add	r7, sp, #0
 80093b6:	6078      	str	r0, [r7, #4]
 80093b8:	460b      	mov	r3, r1
 80093ba:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80093c2:	78fa      	ldrb	r2, [r7, #3]
 80093c4:	4611      	mov	r1, r2
 80093c6:	4618      	mov	r0, r3
 80093c8:	f7fe fd16 	bl	8007df8 <USBD_LL_IsoINIncomplete>
}
 80093cc:	bf00      	nop
 80093ce:	3708      	adds	r7, #8
 80093d0:	46bd      	mov	sp, r7
 80093d2:	bd80      	pop	{r7, pc}

080093d4 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80093d4:	b580      	push	{r7, lr}
 80093d6:	b082      	sub	sp, #8
 80093d8:	af00      	add	r7, sp, #0
 80093da:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80093e2:	4618      	mov	r0, r3
 80093e4:	f7fe fd22 	bl	8007e2c <USBD_LL_DevConnected>
}
 80093e8:	bf00      	nop
 80093ea:	3708      	adds	r7, #8
 80093ec:	46bd      	mov	sp, r7
 80093ee:	bd80      	pop	{r7, pc}

080093f0 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80093f0:	b580      	push	{r7, lr}
 80093f2:	b082      	sub	sp, #8
 80093f4:	af00      	add	r7, sp, #0
 80093f6:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80093fe:	4618      	mov	r0, r3
 8009400:	f7fe fd1f 	bl	8007e42 <USBD_LL_DevDisconnected>
}
 8009404:	bf00      	nop
 8009406:	3708      	adds	r7, #8
 8009408:	46bd      	mov	sp, r7
 800940a:	bd80      	pop	{r7, pc}

0800940c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800940c:	b580      	push	{r7, lr}
 800940e:	b082      	sub	sp, #8
 8009410:	af00      	add	r7, sp, #0
 8009412:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	781b      	ldrb	r3, [r3, #0]
 8009418:	2b00      	cmp	r3, #0
 800941a:	d13c      	bne.n	8009496 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800941c:	4a20      	ldr	r2, [pc, #128]	; (80094a0 <USBD_LL_Init+0x94>)
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 8009424:	687b      	ldr	r3, [r7, #4]
 8009426:	4a1e      	ldr	r2, [pc, #120]	; (80094a0 <USBD_LL_Init+0x94>)
 8009428:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800942c:	4b1c      	ldr	r3, [pc, #112]	; (80094a0 <USBD_LL_Init+0x94>)
 800942e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8009432:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8009434:	4b1a      	ldr	r3, [pc, #104]	; (80094a0 <USBD_LL_Init+0x94>)
 8009436:	2204      	movs	r2, #4
 8009438:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800943a:	4b19      	ldr	r3, [pc, #100]	; (80094a0 <USBD_LL_Init+0x94>)
 800943c:	2202      	movs	r2, #2
 800943e:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8009440:	4b17      	ldr	r3, [pc, #92]	; (80094a0 <USBD_LL_Init+0x94>)
 8009442:	2200      	movs	r2, #0
 8009444:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8009446:	4b16      	ldr	r3, [pc, #88]	; (80094a0 <USBD_LL_Init+0x94>)
 8009448:	2202      	movs	r2, #2
 800944a:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800944c:	4b14      	ldr	r3, [pc, #80]	; (80094a0 <USBD_LL_Init+0x94>)
 800944e:	2200      	movs	r2, #0
 8009450:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8009452:	4b13      	ldr	r3, [pc, #76]	; (80094a0 <USBD_LL_Init+0x94>)
 8009454:	2200      	movs	r2, #0
 8009456:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8009458:	4b11      	ldr	r3, [pc, #68]	; (80094a0 <USBD_LL_Init+0x94>)
 800945a:	2200      	movs	r2, #0
 800945c:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800945e:	4b10      	ldr	r3, [pc, #64]	; (80094a0 <USBD_LL_Init+0x94>)
 8009460:	2200      	movs	r2, #0
 8009462:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8009464:	4b0e      	ldr	r3, [pc, #56]	; (80094a0 <USBD_LL_Init+0x94>)
 8009466:	2200      	movs	r2, #0
 8009468:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800946a:	480d      	ldr	r0, [pc, #52]	; (80094a0 <USBD_LL_Init+0x94>)
 800946c:	f7f9 fc04 	bl	8002c78 <HAL_PCD_Init>
 8009470:	4603      	mov	r3, r0
 8009472:	2b00      	cmp	r3, #0
 8009474:	d001      	beq.n	800947a <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8009476:	f7f7 f9df 	bl	8000838 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800947a:	2180      	movs	r1, #128	; 0x80
 800947c:	4808      	ldr	r0, [pc, #32]	; (80094a0 <USBD_LL_Init+0x94>)
 800947e:	f7fa fd62 	bl	8003f46 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8009482:	2240      	movs	r2, #64	; 0x40
 8009484:	2100      	movs	r1, #0
 8009486:	4806      	ldr	r0, [pc, #24]	; (80094a0 <USBD_LL_Init+0x94>)
 8009488:	f7fa fd16 	bl	8003eb8 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800948c:	2280      	movs	r2, #128	; 0x80
 800948e:	2101      	movs	r1, #1
 8009490:	4803      	ldr	r0, [pc, #12]	; (80094a0 <USBD_LL_Init+0x94>)
 8009492:	f7fa fd11 	bl	8003eb8 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8009496:	2300      	movs	r3, #0
}
 8009498:	4618      	mov	r0, r3
 800949a:	3708      	adds	r7, #8
 800949c:	46bd      	mov	sp, r7
 800949e:	bd80      	pop	{r7, pc}
 80094a0:	20000f7c 	.word	0x20000f7c

080094a4 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80094a4:	b580      	push	{r7, lr}
 80094a6:	b084      	sub	sp, #16
 80094a8:	af00      	add	r7, sp, #0
 80094aa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80094ac:	2300      	movs	r3, #0
 80094ae:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80094b0:	2300      	movs	r3, #0
 80094b2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80094ba:	4618      	mov	r0, r3
 80094bc:	f7f9 fcf9 	bl	8002eb2 <HAL_PCD_Start>
 80094c0:	4603      	mov	r3, r0
 80094c2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80094c4:	7bfb      	ldrb	r3, [r7, #15]
 80094c6:	4618      	mov	r0, r3
 80094c8:	f000 f92a 	bl	8009720 <USBD_Get_USB_Status>
 80094cc:	4603      	mov	r3, r0
 80094ce:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80094d0:	7bbb      	ldrb	r3, [r7, #14]
}
 80094d2:	4618      	mov	r0, r3
 80094d4:	3710      	adds	r7, #16
 80094d6:	46bd      	mov	sp, r7
 80094d8:	bd80      	pop	{r7, pc}

080094da <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80094da:	b580      	push	{r7, lr}
 80094dc:	b084      	sub	sp, #16
 80094de:	af00      	add	r7, sp, #0
 80094e0:	6078      	str	r0, [r7, #4]
 80094e2:	4608      	mov	r0, r1
 80094e4:	4611      	mov	r1, r2
 80094e6:	461a      	mov	r2, r3
 80094e8:	4603      	mov	r3, r0
 80094ea:	70fb      	strb	r3, [r7, #3]
 80094ec:	460b      	mov	r3, r1
 80094ee:	70bb      	strb	r3, [r7, #2]
 80094f0:	4613      	mov	r3, r2
 80094f2:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80094f4:	2300      	movs	r3, #0
 80094f6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80094f8:	2300      	movs	r3, #0
 80094fa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8009502:	78bb      	ldrb	r3, [r7, #2]
 8009504:	883a      	ldrh	r2, [r7, #0]
 8009506:	78f9      	ldrb	r1, [r7, #3]
 8009508:	f7fa f8dd 	bl	80036c6 <HAL_PCD_EP_Open>
 800950c:	4603      	mov	r3, r0
 800950e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009510:	7bfb      	ldrb	r3, [r7, #15]
 8009512:	4618      	mov	r0, r3
 8009514:	f000 f904 	bl	8009720 <USBD_Get_USB_Status>
 8009518:	4603      	mov	r3, r0
 800951a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800951c:	7bbb      	ldrb	r3, [r7, #14]
}
 800951e:	4618      	mov	r0, r3
 8009520:	3710      	adds	r7, #16
 8009522:	46bd      	mov	sp, r7
 8009524:	bd80      	pop	{r7, pc}

08009526 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009526:	b580      	push	{r7, lr}
 8009528:	b084      	sub	sp, #16
 800952a:	af00      	add	r7, sp, #0
 800952c:	6078      	str	r0, [r7, #4]
 800952e:	460b      	mov	r3, r1
 8009530:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009532:	2300      	movs	r3, #0
 8009534:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009536:	2300      	movs	r3, #0
 8009538:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009540:	78fa      	ldrb	r2, [r7, #3]
 8009542:	4611      	mov	r1, r2
 8009544:	4618      	mov	r0, r3
 8009546:	f7fa f926 	bl	8003796 <HAL_PCD_EP_Close>
 800954a:	4603      	mov	r3, r0
 800954c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800954e:	7bfb      	ldrb	r3, [r7, #15]
 8009550:	4618      	mov	r0, r3
 8009552:	f000 f8e5 	bl	8009720 <USBD_Get_USB_Status>
 8009556:	4603      	mov	r3, r0
 8009558:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800955a:	7bbb      	ldrb	r3, [r7, #14]
}
 800955c:	4618      	mov	r0, r3
 800955e:	3710      	adds	r7, #16
 8009560:	46bd      	mov	sp, r7
 8009562:	bd80      	pop	{r7, pc}

08009564 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009564:	b580      	push	{r7, lr}
 8009566:	b084      	sub	sp, #16
 8009568:	af00      	add	r7, sp, #0
 800956a:	6078      	str	r0, [r7, #4]
 800956c:	460b      	mov	r3, r1
 800956e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009570:	2300      	movs	r3, #0
 8009572:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009574:	2300      	movs	r3, #0
 8009576:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800957e:	78fa      	ldrb	r2, [r7, #3]
 8009580:	4611      	mov	r1, r2
 8009582:	4618      	mov	r0, r3
 8009584:	f7fa f9fe 	bl	8003984 <HAL_PCD_EP_SetStall>
 8009588:	4603      	mov	r3, r0
 800958a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800958c:	7bfb      	ldrb	r3, [r7, #15]
 800958e:	4618      	mov	r0, r3
 8009590:	f000 f8c6 	bl	8009720 <USBD_Get_USB_Status>
 8009594:	4603      	mov	r3, r0
 8009596:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009598:	7bbb      	ldrb	r3, [r7, #14]
}
 800959a:	4618      	mov	r0, r3
 800959c:	3710      	adds	r7, #16
 800959e:	46bd      	mov	sp, r7
 80095a0:	bd80      	pop	{r7, pc}

080095a2 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80095a2:	b580      	push	{r7, lr}
 80095a4:	b084      	sub	sp, #16
 80095a6:	af00      	add	r7, sp, #0
 80095a8:	6078      	str	r0, [r7, #4]
 80095aa:	460b      	mov	r3, r1
 80095ac:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80095ae:	2300      	movs	r3, #0
 80095b0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80095b2:	2300      	movs	r3, #0
 80095b4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80095bc:	78fa      	ldrb	r2, [r7, #3]
 80095be:	4611      	mov	r1, r2
 80095c0:	4618      	mov	r0, r3
 80095c2:	f7fa fa43 	bl	8003a4c <HAL_PCD_EP_ClrStall>
 80095c6:	4603      	mov	r3, r0
 80095c8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80095ca:	7bfb      	ldrb	r3, [r7, #15]
 80095cc:	4618      	mov	r0, r3
 80095ce:	f000 f8a7 	bl	8009720 <USBD_Get_USB_Status>
 80095d2:	4603      	mov	r3, r0
 80095d4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80095d6:	7bbb      	ldrb	r3, [r7, #14]
}
 80095d8:	4618      	mov	r0, r3
 80095da:	3710      	adds	r7, #16
 80095dc:	46bd      	mov	sp, r7
 80095de:	bd80      	pop	{r7, pc}

080095e0 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80095e0:	b480      	push	{r7}
 80095e2:	b085      	sub	sp, #20
 80095e4:	af00      	add	r7, sp, #0
 80095e6:	6078      	str	r0, [r7, #4]
 80095e8:	460b      	mov	r3, r1
 80095ea:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80095f2:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 80095f4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80095f8:	2b00      	cmp	r3, #0
 80095fa:	da0b      	bge.n	8009614 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80095fc:	78fb      	ldrb	r3, [r7, #3]
 80095fe:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009602:	68f9      	ldr	r1, [r7, #12]
 8009604:	4613      	mov	r3, r2
 8009606:	00db      	lsls	r3, r3, #3
 8009608:	1a9b      	subs	r3, r3, r2
 800960a:	009b      	lsls	r3, r3, #2
 800960c:	440b      	add	r3, r1
 800960e:	333e      	adds	r3, #62	; 0x3e
 8009610:	781b      	ldrb	r3, [r3, #0]
 8009612:	e00b      	b.n	800962c <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8009614:	78fb      	ldrb	r3, [r7, #3]
 8009616:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800961a:	68f9      	ldr	r1, [r7, #12]
 800961c:	4613      	mov	r3, r2
 800961e:	00db      	lsls	r3, r3, #3
 8009620:	1a9b      	subs	r3, r3, r2
 8009622:	009b      	lsls	r3, r3, #2
 8009624:	440b      	add	r3, r1
 8009626:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800962a:	781b      	ldrb	r3, [r3, #0]
  }
}
 800962c:	4618      	mov	r0, r3
 800962e:	3714      	adds	r7, #20
 8009630:	46bd      	mov	sp, r7
 8009632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009636:	4770      	bx	lr

08009638 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8009638:	b580      	push	{r7, lr}
 800963a:	b084      	sub	sp, #16
 800963c:	af00      	add	r7, sp, #0
 800963e:	6078      	str	r0, [r7, #4]
 8009640:	460b      	mov	r3, r1
 8009642:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009644:	2300      	movs	r3, #0
 8009646:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009648:	2300      	movs	r3, #0
 800964a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800964c:	687b      	ldr	r3, [r7, #4]
 800964e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009652:	78fa      	ldrb	r2, [r7, #3]
 8009654:	4611      	mov	r1, r2
 8009656:	4618      	mov	r0, r3
 8009658:	f7fa f810 	bl	800367c <HAL_PCD_SetAddress>
 800965c:	4603      	mov	r3, r0
 800965e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009660:	7bfb      	ldrb	r3, [r7, #15]
 8009662:	4618      	mov	r0, r3
 8009664:	f000 f85c 	bl	8009720 <USBD_Get_USB_Status>
 8009668:	4603      	mov	r3, r0
 800966a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800966c:	7bbb      	ldrb	r3, [r7, #14]
}
 800966e:	4618      	mov	r0, r3
 8009670:	3710      	adds	r7, #16
 8009672:	46bd      	mov	sp, r7
 8009674:	bd80      	pop	{r7, pc}

08009676 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8009676:	b580      	push	{r7, lr}
 8009678:	b086      	sub	sp, #24
 800967a:	af00      	add	r7, sp, #0
 800967c:	60f8      	str	r0, [r7, #12]
 800967e:	607a      	str	r2, [r7, #4]
 8009680:	603b      	str	r3, [r7, #0]
 8009682:	460b      	mov	r3, r1
 8009684:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009686:	2300      	movs	r3, #0
 8009688:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800968a:	2300      	movs	r3, #0
 800968c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800968e:	68fb      	ldr	r3, [r7, #12]
 8009690:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8009694:	7af9      	ldrb	r1, [r7, #11]
 8009696:	683b      	ldr	r3, [r7, #0]
 8009698:	687a      	ldr	r2, [r7, #4]
 800969a:	f7fa f929 	bl	80038f0 <HAL_PCD_EP_Transmit>
 800969e:	4603      	mov	r3, r0
 80096a0:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80096a2:	7dfb      	ldrb	r3, [r7, #23]
 80096a4:	4618      	mov	r0, r3
 80096a6:	f000 f83b 	bl	8009720 <USBD_Get_USB_Status>
 80096aa:	4603      	mov	r3, r0
 80096ac:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80096ae:	7dbb      	ldrb	r3, [r7, #22]
}
 80096b0:	4618      	mov	r0, r3
 80096b2:	3718      	adds	r7, #24
 80096b4:	46bd      	mov	sp, r7
 80096b6:	bd80      	pop	{r7, pc}

080096b8 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80096b8:	b580      	push	{r7, lr}
 80096ba:	b086      	sub	sp, #24
 80096bc:	af00      	add	r7, sp, #0
 80096be:	60f8      	str	r0, [r7, #12]
 80096c0:	607a      	str	r2, [r7, #4]
 80096c2:	603b      	str	r3, [r7, #0]
 80096c4:	460b      	mov	r3, r1
 80096c6:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80096c8:	2300      	movs	r3, #0
 80096ca:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80096cc:	2300      	movs	r3, #0
 80096ce:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80096d0:	68fb      	ldr	r3, [r7, #12]
 80096d2:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80096d6:	7af9      	ldrb	r1, [r7, #11]
 80096d8:	683b      	ldr	r3, [r7, #0]
 80096da:	687a      	ldr	r2, [r7, #4]
 80096dc:	f7fa f8a5 	bl	800382a <HAL_PCD_EP_Receive>
 80096e0:	4603      	mov	r3, r0
 80096e2:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80096e4:	7dfb      	ldrb	r3, [r7, #23]
 80096e6:	4618      	mov	r0, r3
 80096e8:	f000 f81a 	bl	8009720 <USBD_Get_USB_Status>
 80096ec:	4603      	mov	r3, r0
 80096ee:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80096f0:	7dbb      	ldrb	r3, [r7, #22]
}
 80096f2:	4618      	mov	r0, r3
 80096f4:	3718      	adds	r7, #24
 80096f6:	46bd      	mov	sp, r7
 80096f8:	bd80      	pop	{r7, pc}

080096fa <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80096fa:	b580      	push	{r7, lr}
 80096fc:	b082      	sub	sp, #8
 80096fe:	af00      	add	r7, sp, #0
 8009700:	6078      	str	r0, [r7, #4]
 8009702:	460b      	mov	r3, r1
 8009704:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8009706:	687b      	ldr	r3, [r7, #4]
 8009708:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800970c:	78fa      	ldrb	r2, [r7, #3]
 800970e:	4611      	mov	r1, r2
 8009710:	4618      	mov	r0, r3
 8009712:	f7fa f8d5 	bl	80038c0 <HAL_PCD_EP_GetRxCount>
 8009716:	4603      	mov	r3, r0
}
 8009718:	4618      	mov	r0, r3
 800971a:	3708      	adds	r7, #8
 800971c:	46bd      	mov	sp, r7
 800971e:	bd80      	pop	{r7, pc}

08009720 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8009720:	b480      	push	{r7}
 8009722:	b085      	sub	sp, #20
 8009724:	af00      	add	r7, sp, #0
 8009726:	4603      	mov	r3, r0
 8009728:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800972a:	2300      	movs	r3, #0
 800972c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800972e:	79fb      	ldrb	r3, [r7, #7]
 8009730:	2b03      	cmp	r3, #3
 8009732:	d817      	bhi.n	8009764 <USBD_Get_USB_Status+0x44>
 8009734:	a201      	add	r2, pc, #4	; (adr r2, 800973c <USBD_Get_USB_Status+0x1c>)
 8009736:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800973a:	bf00      	nop
 800973c:	0800974d 	.word	0x0800974d
 8009740:	08009753 	.word	0x08009753
 8009744:	08009759 	.word	0x08009759
 8009748:	0800975f 	.word	0x0800975f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800974c:	2300      	movs	r3, #0
 800974e:	73fb      	strb	r3, [r7, #15]
    break;
 8009750:	e00b      	b.n	800976a <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8009752:	2303      	movs	r3, #3
 8009754:	73fb      	strb	r3, [r7, #15]
    break;
 8009756:	e008      	b.n	800976a <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8009758:	2301      	movs	r3, #1
 800975a:	73fb      	strb	r3, [r7, #15]
    break;
 800975c:	e005      	b.n	800976a <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800975e:	2303      	movs	r3, #3
 8009760:	73fb      	strb	r3, [r7, #15]
    break;
 8009762:	e002      	b.n	800976a <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8009764:	2303      	movs	r3, #3
 8009766:	73fb      	strb	r3, [r7, #15]
    break;
 8009768:	bf00      	nop
  }
  return usb_status;
 800976a:	7bfb      	ldrb	r3, [r7, #15]
}
 800976c:	4618      	mov	r0, r3
 800976e:	3714      	adds	r7, #20
 8009770:	46bd      	mov	sp, r7
 8009772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009776:	4770      	bx	lr

08009778 <main>:


#include "main.h"

int main(void)
{
 8009778:	b580      	push	{r7, lr}
 800977a:	af00      	add	r7, sp, #0
  hwInit();
 800977c:	f7f7 ff08 	bl	8001590 <hwInit>
  apInit();
 8009780:	f7f6 fef6 	bl	8000570 <apInit>

  apMain();
 8009784:	f7f6 ff02 	bl	800058c <apMain>

  return 0;
 8009788:	2300      	movs	r3, #0
}
 800978a:	4618      	mov	r0, r3
 800978c:	bd80      	pop	{r7, pc}
	...

08009790 <__errno>:
 8009790:	4b01      	ldr	r3, [pc, #4]	; (8009798 <__errno+0x8>)
 8009792:	6818      	ldr	r0, [r3, #0]
 8009794:	4770      	bx	lr
 8009796:	bf00      	nop
 8009798:	200001a4 	.word	0x200001a4

0800979c <__libc_init_array>:
 800979c:	b570      	push	{r4, r5, r6, lr}
 800979e:	4e0d      	ldr	r6, [pc, #52]	; (80097d4 <__libc_init_array+0x38>)
 80097a0:	4c0d      	ldr	r4, [pc, #52]	; (80097d8 <__libc_init_array+0x3c>)
 80097a2:	1ba4      	subs	r4, r4, r6
 80097a4:	10a4      	asrs	r4, r4, #2
 80097a6:	2500      	movs	r5, #0
 80097a8:	42a5      	cmp	r5, r4
 80097aa:	d109      	bne.n	80097c0 <__libc_init_array+0x24>
 80097ac:	4e0b      	ldr	r6, [pc, #44]	; (80097dc <__libc_init_array+0x40>)
 80097ae:	4c0c      	ldr	r4, [pc, #48]	; (80097e0 <__libc_init_array+0x44>)
 80097b0:	f000 ff78 	bl	800a6a4 <_init>
 80097b4:	1ba4      	subs	r4, r4, r6
 80097b6:	10a4      	asrs	r4, r4, #2
 80097b8:	2500      	movs	r5, #0
 80097ba:	42a5      	cmp	r5, r4
 80097bc:	d105      	bne.n	80097ca <__libc_init_array+0x2e>
 80097be:	bd70      	pop	{r4, r5, r6, pc}
 80097c0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80097c4:	4798      	blx	r3
 80097c6:	3501      	adds	r5, #1
 80097c8:	e7ee      	b.n	80097a8 <__libc_init_array+0xc>
 80097ca:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80097ce:	4798      	blx	r3
 80097d0:	3501      	adds	r5, #1
 80097d2:	e7f2      	b.n	80097ba <__libc_init_array+0x1e>
 80097d4:	0800a824 	.word	0x0800a824
 80097d8:	0800a824 	.word	0x0800a824
 80097dc:	0800a824 	.word	0x0800a824
 80097e0:	0800a828 	.word	0x0800a828

080097e4 <malloc>:
 80097e4:	4b02      	ldr	r3, [pc, #8]	; (80097f0 <malloc+0xc>)
 80097e6:	4601      	mov	r1, r0
 80097e8:	6818      	ldr	r0, [r3, #0]
 80097ea:	f000 b861 	b.w	80098b0 <_malloc_r>
 80097ee:	bf00      	nop
 80097f0:	200001a4 	.word	0x200001a4

080097f4 <free>:
 80097f4:	4b02      	ldr	r3, [pc, #8]	; (8009800 <free+0xc>)
 80097f6:	4601      	mov	r1, r0
 80097f8:	6818      	ldr	r0, [r3, #0]
 80097fa:	f000 b80b 	b.w	8009814 <_free_r>
 80097fe:	bf00      	nop
 8009800:	200001a4 	.word	0x200001a4

08009804 <memset>:
 8009804:	4402      	add	r2, r0
 8009806:	4603      	mov	r3, r0
 8009808:	4293      	cmp	r3, r2
 800980a:	d100      	bne.n	800980e <memset+0xa>
 800980c:	4770      	bx	lr
 800980e:	f803 1b01 	strb.w	r1, [r3], #1
 8009812:	e7f9      	b.n	8009808 <memset+0x4>

08009814 <_free_r>:
 8009814:	b538      	push	{r3, r4, r5, lr}
 8009816:	4605      	mov	r5, r0
 8009818:	2900      	cmp	r1, #0
 800981a:	d045      	beq.n	80098a8 <_free_r+0x94>
 800981c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009820:	1f0c      	subs	r4, r1, #4
 8009822:	2b00      	cmp	r3, #0
 8009824:	bfb8      	it	lt
 8009826:	18e4      	addlt	r4, r4, r3
 8009828:	f000 fbc6 	bl	8009fb8 <__malloc_lock>
 800982c:	4a1f      	ldr	r2, [pc, #124]	; (80098ac <_free_r+0x98>)
 800982e:	6813      	ldr	r3, [r2, #0]
 8009830:	4610      	mov	r0, r2
 8009832:	b933      	cbnz	r3, 8009842 <_free_r+0x2e>
 8009834:	6063      	str	r3, [r4, #4]
 8009836:	6014      	str	r4, [r2, #0]
 8009838:	4628      	mov	r0, r5
 800983a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800983e:	f000 bbbc 	b.w	8009fba <__malloc_unlock>
 8009842:	42a3      	cmp	r3, r4
 8009844:	d90c      	bls.n	8009860 <_free_r+0x4c>
 8009846:	6821      	ldr	r1, [r4, #0]
 8009848:	1862      	adds	r2, r4, r1
 800984a:	4293      	cmp	r3, r2
 800984c:	bf04      	itt	eq
 800984e:	681a      	ldreq	r2, [r3, #0]
 8009850:	685b      	ldreq	r3, [r3, #4]
 8009852:	6063      	str	r3, [r4, #4]
 8009854:	bf04      	itt	eq
 8009856:	1852      	addeq	r2, r2, r1
 8009858:	6022      	streq	r2, [r4, #0]
 800985a:	6004      	str	r4, [r0, #0]
 800985c:	e7ec      	b.n	8009838 <_free_r+0x24>
 800985e:	4613      	mov	r3, r2
 8009860:	685a      	ldr	r2, [r3, #4]
 8009862:	b10a      	cbz	r2, 8009868 <_free_r+0x54>
 8009864:	42a2      	cmp	r2, r4
 8009866:	d9fa      	bls.n	800985e <_free_r+0x4a>
 8009868:	6819      	ldr	r1, [r3, #0]
 800986a:	1858      	adds	r0, r3, r1
 800986c:	42a0      	cmp	r0, r4
 800986e:	d10b      	bne.n	8009888 <_free_r+0x74>
 8009870:	6820      	ldr	r0, [r4, #0]
 8009872:	4401      	add	r1, r0
 8009874:	1858      	adds	r0, r3, r1
 8009876:	4282      	cmp	r2, r0
 8009878:	6019      	str	r1, [r3, #0]
 800987a:	d1dd      	bne.n	8009838 <_free_r+0x24>
 800987c:	6810      	ldr	r0, [r2, #0]
 800987e:	6852      	ldr	r2, [r2, #4]
 8009880:	605a      	str	r2, [r3, #4]
 8009882:	4401      	add	r1, r0
 8009884:	6019      	str	r1, [r3, #0]
 8009886:	e7d7      	b.n	8009838 <_free_r+0x24>
 8009888:	d902      	bls.n	8009890 <_free_r+0x7c>
 800988a:	230c      	movs	r3, #12
 800988c:	602b      	str	r3, [r5, #0]
 800988e:	e7d3      	b.n	8009838 <_free_r+0x24>
 8009890:	6820      	ldr	r0, [r4, #0]
 8009892:	1821      	adds	r1, r4, r0
 8009894:	428a      	cmp	r2, r1
 8009896:	bf04      	itt	eq
 8009898:	6811      	ldreq	r1, [r2, #0]
 800989a:	6852      	ldreq	r2, [r2, #4]
 800989c:	6062      	str	r2, [r4, #4]
 800989e:	bf04      	itt	eq
 80098a0:	1809      	addeq	r1, r1, r0
 80098a2:	6021      	streq	r1, [r4, #0]
 80098a4:	605c      	str	r4, [r3, #4]
 80098a6:	e7c7      	b.n	8009838 <_free_r+0x24>
 80098a8:	bd38      	pop	{r3, r4, r5, pc}
 80098aa:	bf00      	nop
 80098ac:	20000380 	.word	0x20000380

080098b0 <_malloc_r>:
 80098b0:	b570      	push	{r4, r5, r6, lr}
 80098b2:	1ccd      	adds	r5, r1, #3
 80098b4:	f025 0503 	bic.w	r5, r5, #3
 80098b8:	3508      	adds	r5, #8
 80098ba:	2d0c      	cmp	r5, #12
 80098bc:	bf38      	it	cc
 80098be:	250c      	movcc	r5, #12
 80098c0:	2d00      	cmp	r5, #0
 80098c2:	4606      	mov	r6, r0
 80098c4:	db01      	blt.n	80098ca <_malloc_r+0x1a>
 80098c6:	42a9      	cmp	r1, r5
 80098c8:	d903      	bls.n	80098d2 <_malloc_r+0x22>
 80098ca:	230c      	movs	r3, #12
 80098cc:	6033      	str	r3, [r6, #0]
 80098ce:	2000      	movs	r0, #0
 80098d0:	bd70      	pop	{r4, r5, r6, pc}
 80098d2:	f000 fb71 	bl	8009fb8 <__malloc_lock>
 80098d6:	4a21      	ldr	r2, [pc, #132]	; (800995c <_malloc_r+0xac>)
 80098d8:	6814      	ldr	r4, [r2, #0]
 80098da:	4621      	mov	r1, r4
 80098dc:	b991      	cbnz	r1, 8009904 <_malloc_r+0x54>
 80098de:	4c20      	ldr	r4, [pc, #128]	; (8009960 <_malloc_r+0xb0>)
 80098e0:	6823      	ldr	r3, [r4, #0]
 80098e2:	b91b      	cbnz	r3, 80098ec <_malloc_r+0x3c>
 80098e4:	4630      	mov	r0, r6
 80098e6:	f000 f8b9 	bl	8009a5c <_sbrk_r>
 80098ea:	6020      	str	r0, [r4, #0]
 80098ec:	4629      	mov	r1, r5
 80098ee:	4630      	mov	r0, r6
 80098f0:	f000 f8b4 	bl	8009a5c <_sbrk_r>
 80098f4:	1c43      	adds	r3, r0, #1
 80098f6:	d124      	bne.n	8009942 <_malloc_r+0x92>
 80098f8:	230c      	movs	r3, #12
 80098fa:	6033      	str	r3, [r6, #0]
 80098fc:	4630      	mov	r0, r6
 80098fe:	f000 fb5c 	bl	8009fba <__malloc_unlock>
 8009902:	e7e4      	b.n	80098ce <_malloc_r+0x1e>
 8009904:	680b      	ldr	r3, [r1, #0]
 8009906:	1b5b      	subs	r3, r3, r5
 8009908:	d418      	bmi.n	800993c <_malloc_r+0x8c>
 800990a:	2b0b      	cmp	r3, #11
 800990c:	d90f      	bls.n	800992e <_malloc_r+0x7e>
 800990e:	600b      	str	r3, [r1, #0]
 8009910:	50cd      	str	r5, [r1, r3]
 8009912:	18cc      	adds	r4, r1, r3
 8009914:	4630      	mov	r0, r6
 8009916:	f000 fb50 	bl	8009fba <__malloc_unlock>
 800991a:	f104 000b 	add.w	r0, r4, #11
 800991e:	1d23      	adds	r3, r4, #4
 8009920:	f020 0007 	bic.w	r0, r0, #7
 8009924:	1ac3      	subs	r3, r0, r3
 8009926:	d0d3      	beq.n	80098d0 <_malloc_r+0x20>
 8009928:	425a      	negs	r2, r3
 800992a:	50e2      	str	r2, [r4, r3]
 800992c:	e7d0      	b.n	80098d0 <_malloc_r+0x20>
 800992e:	428c      	cmp	r4, r1
 8009930:	684b      	ldr	r3, [r1, #4]
 8009932:	bf16      	itet	ne
 8009934:	6063      	strne	r3, [r4, #4]
 8009936:	6013      	streq	r3, [r2, #0]
 8009938:	460c      	movne	r4, r1
 800993a:	e7eb      	b.n	8009914 <_malloc_r+0x64>
 800993c:	460c      	mov	r4, r1
 800993e:	6849      	ldr	r1, [r1, #4]
 8009940:	e7cc      	b.n	80098dc <_malloc_r+0x2c>
 8009942:	1cc4      	adds	r4, r0, #3
 8009944:	f024 0403 	bic.w	r4, r4, #3
 8009948:	42a0      	cmp	r0, r4
 800994a:	d005      	beq.n	8009958 <_malloc_r+0xa8>
 800994c:	1a21      	subs	r1, r4, r0
 800994e:	4630      	mov	r0, r6
 8009950:	f000 f884 	bl	8009a5c <_sbrk_r>
 8009954:	3001      	adds	r0, #1
 8009956:	d0cf      	beq.n	80098f8 <_malloc_r+0x48>
 8009958:	6025      	str	r5, [r4, #0]
 800995a:	e7db      	b.n	8009914 <_malloc_r+0x64>
 800995c:	20000380 	.word	0x20000380
 8009960:	20000384 	.word	0x20000384

08009964 <iprintf>:
 8009964:	b40f      	push	{r0, r1, r2, r3}
 8009966:	4b0a      	ldr	r3, [pc, #40]	; (8009990 <iprintf+0x2c>)
 8009968:	b513      	push	{r0, r1, r4, lr}
 800996a:	681c      	ldr	r4, [r3, #0]
 800996c:	b124      	cbz	r4, 8009978 <iprintf+0x14>
 800996e:	69a3      	ldr	r3, [r4, #24]
 8009970:	b913      	cbnz	r3, 8009978 <iprintf+0x14>
 8009972:	4620      	mov	r0, r4
 8009974:	f000 fa32 	bl	8009ddc <__sinit>
 8009978:	ab05      	add	r3, sp, #20
 800997a:	9a04      	ldr	r2, [sp, #16]
 800997c:	68a1      	ldr	r1, [r4, #8]
 800997e:	9301      	str	r3, [sp, #4]
 8009980:	4620      	mov	r0, r4
 8009982:	f000 fb45 	bl	800a010 <_vfiprintf_r>
 8009986:	b002      	add	sp, #8
 8009988:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800998c:	b004      	add	sp, #16
 800998e:	4770      	bx	lr
 8009990:	200001a4 	.word	0x200001a4

08009994 <_puts_r>:
 8009994:	b570      	push	{r4, r5, r6, lr}
 8009996:	460e      	mov	r6, r1
 8009998:	4605      	mov	r5, r0
 800999a:	b118      	cbz	r0, 80099a4 <_puts_r+0x10>
 800999c:	6983      	ldr	r3, [r0, #24]
 800999e:	b90b      	cbnz	r3, 80099a4 <_puts_r+0x10>
 80099a0:	f000 fa1c 	bl	8009ddc <__sinit>
 80099a4:	69ab      	ldr	r3, [r5, #24]
 80099a6:	68ac      	ldr	r4, [r5, #8]
 80099a8:	b913      	cbnz	r3, 80099b0 <_puts_r+0x1c>
 80099aa:	4628      	mov	r0, r5
 80099ac:	f000 fa16 	bl	8009ddc <__sinit>
 80099b0:	4b23      	ldr	r3, [pc, #140]	; (8009a40 <_puts_r+0xac>)
 80099b2:	429c      	cmp	r4, r3
 80099b4:	d117      	bne.n	80099e6 <_puts_r+0x52>
 80099b6:	686c      	ldr	r4, [r5, #4]
 80099b8:	89a3      	ldrh	r3, [r4, #12]
 80099ba:	071b      	lsls	r3, r3, #28
 80099bc:	d51d      	bpl.n	80099fa <_puts_r+0x66>
 80099be:	6923      	ldr	r3, [r4, #16]
 80099c0:	b1db      	cbz	r3, 80099fa <_puts_r+0x66>
 80099c2:	3e01      	subs	r6, #1
 80099c4:	68a3      	ldr	r3, [r4, #8]
 80099c6:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80099ca:	3b01      	subs	r3, #1
 80099cc:	60a3      	str	r3, [r4, #8]
 80099ce:	b9e9      	cbnz	r1, 8009a0c <_puts_r+0x78>
 80099d0:	2b00      	cmp	r3, #0
 80099d2:	da2e      	bge.n	8009a32 <_puts_r+0x9e>
 80099d4:	4622      	mov	r2, r4
 80099d6:	210a      	movs	r1, #10
 80099d8:	4628      	mov	r0, r5
 80099da:	f000 f84f 	bl	8009a7c <__swbuf_r>
 80099de:	3001      	adds	r0, #1
 80099e0:	d011      	beq.n	8009a06 <_puts_r+0x72>
 80099e2:	200a      	movs	r0, #10
 80099e4:	e011      	b.n	8009a0a <_puts_r+0x76>
 80099e6:	4b17      	ldr	r3, [pc, #92]	; (8009a44 <_puts_r+0xb0>)
 80099e8:	429c      	cmp	r4, r3
 80099ea:	d101      	bne.n	80099f0 <_puts_r+0x5c>
 80099ec:	68ac      	ldr	r4, [r5, #8]
 80099ee:	e7e3      	b.n	80099b8 <_puts_r+0x24>
 80099f0:	4b15      	ldr	r3, [pc, #84]	; (8009a48 <_puts_r+0xb4>)
 80099f2:	429c      	cmp	r4, r3
 80099f4:	bf08      	it	eq
 80099f6:	68ec      	ldreq	r4, [r5, #12]
 80099f8:	e7de      	b.n	80099b8 <_puts_r+0x24>
 80099fa:	4621      	mov	r1, r4
 80099fc:	4628      	mov	r0, r5
 80099fe:	f000 f88f 	bl	8009b20 <__swsetup_r>
 8009a02:	2800      	cmp	r0, #0
 8009a04:	d0dd      	beq.n	80099c2 <_puts_r+0x2e>
 8009a06:	f04f 30ff 	mov.w	r0, #4294967295
 8009a0a:	bd70      	pop	{r4, r5, r6, pc}
 8009a0c:	2b00      	cmp	r3, #0
 8009a0e:	da04      	bge.n	8009a1a <_puts_r+0x86>
 8009a10:	69a2      	ldr	r2, [r4, #24]
 8009a12:	429a      	cmp	r2, r3
 8009a14:	dc06      	bgt.n	8009a24 <_puts_r+0x90>
 8009a16:	290a      	cmp	r1, #10
 8009a18:	d004      	beq.n	8009a24 <_puts_r+0x90>
 8009a1a:	6823      	ldr	r3, [r4, #0]
 8009a1c:	1c5a      	adds	r2, r3, #1
 8009a1e:	6022      	str	r2, [r4, #0]
 8009a20:	7019      	strb	r1, [r3, #0]
 8009a22:	e7cf      	b.n	80099c4 <_puts_r+0x30>
 8009a24:	4622      	mov	r2, r4
 8009a26:	4628      	mov	r0, r5
 8009a28:	f000 f828 	bl	8009a7c <__swbuf_r>
 8009a2c:	3001      	adds	r0, #1
 8009a2e:	d1c9      	bne.n	80099c4 <_puts_r+0x30>
 8009a30:	e7e9      	b.n	8009a06 <_puts_r+0x72>
 8009a32:	6823      	ldr	r3, [r4, #0]
 8009a34:	200a      	movs	r0, #10
 8009a36:	1c5a      	adds	r2, r3, #1
 8009a38:	6022      	str	r2, [r4, #0]
 8009a3a:	7018      	strb	r0, [r3, #0]
 8009a3c:	e7e5      	b.n	8009a0a <_puts_r+0x76>
 8009a3e:	bf00      	nop
 8009a40:	0800a7a8 	.word	0x0800a7a8
 8009a44:	0800a7c8 	.word	0x0800a7c8
 8009a48:	0800a788 	.word	0x0800a788

08009a4c <puts>:
 8009a4c:	4b02      	ldr	r3, [pc, #8]	; (8009a58 <puts+0xc>)
 8009a4e:	4601      	mov	r1, r0
 8009a50:	6818      	ldr	r0, [r3, #0]
 8009a52:	f7ff bf9f 	b.w	8009994 <_puts_r>
 8009a56:	bf00      	nop
 8009a58:	200001a4 	.word	0x200001a4

08009a5c <_sbrk_r>:
 8009a5c:	b538      	push	{r3, r4, r5, lr}
 8009a5e:	4c06      	ldr	r4, [pc, #24]	; (8009a78 <_sbrk_r+0x1c>)
 8009a60:	2300      	movs	r3, #0
 8009a62:	4605      	mov	r5, r0
 8009a64:	4608      	mov	r0, r1
 8009a66:	6023      	str	r3, [r4, #0]
 8009a68:	f7f6 ffc8 	bl	80009fc <_sbrk>
 8009a6c:	1c43      	adds	r3, r0, #1
 8009a6e:	d102      	bne.n	8009a76 <_sbrk_r+0x1a>
 8009a70:	6823      	ldr	r3, [r4, #0]
 8009a72:	b103      	cbz	r3, 8009a76 <_sbrk_r+0x1a>
 8009a74:	602b      	str	r3, [r5, #0]
 8009a76:	bd38      	pop	{r3, r4, r5, pc}
 8009a78:	20001384 	.word	0x20001384

08009a7c <__swbuf_r>:
 8009a7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009a7e:	460e      	mov	r6, r1
 8009a80:	4614      	mov	r4, r2
 8009a82:	4605      	mov	r5, r0
 8009a84:	b118      	cbz	r0, 8009a8e <__swbuf_r+0x12>
 8009a86:	6983      	ldr	r3, [r0, #24]
 8009a88:	b90b      	cbnz	r3, 8009a8e <__swbuf_r+0x12>
 8009a8a:	f000 f9a7 	bl	8009ddc <__sinit>
 8009a8e:	4b21      	ldr	r3, [pc, #132]	; (8009b14 <__swbuf_r+0x98>)
 8009a90:	429c      	cmp	r4, r3
 8009a92:	d12a      	bne.n	8009aea <__swbuf_r+0x6e>
 8009a94:	686c      	ldr	r4, [r5, #4]
 8009a96:	69a3      	ldr	r3, [r4, #24]
 8009a98:	60a3      	str	r3, [r4, #8]
 8009a9a:	89a3      	ldrh	r3, [r4, #12]
 8009a9c:	071a      	lsls	r2, r3, #28
 8009a9e:	d52e      	bpl.n	8009afe <__swbuf_r+0x82>
 8009aa0:	6923      	ldr	r3, [r4, #16]
 8009aa2:	b363      	cbz	r3, 8009afe <__swbuf_r+0x82>
 8009aa4:	6923      	ldr	r3, [r4, #16]
 8009aa6:	6820      	ldr	r0, [r4, #0]
 8009aa8:	1ac0      	subs	r0, r0, r3
 8009aaa:	6963      	ldr	r3, [r4, #20]
 8009aac:	b2f6      	uxtb	r6, r6
 8009aae:	4283      	cmp	r3, r0
 8009ab0:	4637      	mov	r7, r6
 8009ab2:	dc04      	bgt.n	8009abe <__swbuf_r+0x42>
 8009ab4:	4621      	mov	r1, r4
 8009ab6:	4628      	mov	r0, r5
 8009ab8:	f000 f926 	bl	8009d08 <_fflush_r>
 8009abc:	bb28      	cbnz	r0, 8009b0a <__swbuf_r+0x8e>
 8009abe:	68a3      	ldr	r3, [r4, #8]
 8009ac0:	3b01      	subs	r3, #1
 8009ac2:	60a3      	str	r3, [r4, #8]
 8009ac4:	6823      	ldr	r3, [r4, #0]
 8009ac6:	1c5a      	adds	r2, r3, #1
 8009ac8:	6022      	str	r2, [r4, #0]
 8009aca:	701e      	strb	r6, [r3, #0]
 8009acc:	6963      	ldr	r3, [r4, #20]
 8009ace:	3001      	adds	r0, #1
 8009ad0:	4283      	cmp	r3, r0
 8009ad2:	d004      	beq.n	8009ade <__swbuf_r+0x62>
 8009ad4:	89a3      	ldrh	r3, [r4, #12]
 8009ad6:	07db      	lsls	r3, r3, #31
 8009ad8:	d519      	bpl.n	8009b0e <__swbuf_r+0x92>
 8009ada:	2e0a      	cmp	r6, #10
 8009adc:	d117      	bne.n	8009b0e <__swbuf_r+0x92>
 8009ade:	4621      	mov	r1, r4
 8009ae0:	4628      	mov	r0, r5
 8009ae2:	f000 f911 	bl	8009d08 <_fflush_r>
 8009ae6:	b190      	cbz	r0, 8009b0e <__swbuf_r+0x92>
 8009ae8:	e00f      	b.n	8009b0a <__swbuf_r+0x8e>
 8009aea:	4b0b      	ldr	r3, [pc, #44]	; (8009b18 <__swbuf_r+0x9c>)
 8009aec:	429c      	cmp	r4, r3
 8009aee:	d101      	bne.n	8009af4 <__swbuf_r+0x78>
 8009af0:	68ac      	ldr	r4, [r5, #8]
 8009af2:	e7d0      	b.n	8009a96 <__swbuf_r+0x1a>
 8009af4:	4b09      	ldr	r3, [pc, #36]	; (8009b1c <__swbuf_r+0xa0>)
 8009af6:	429c      	cmp	r4, r3
 8009af8:	bf08      	it	eq
 8009afa:	68ec      	ldreq	r4, [r5, #12]
 8009afc:	e7cb      	b.n	8009a96 <__swbuf_r+0x1a>
 8009afe:	4621      	mov	r1, r4
 8009b00:	4628      	mov	r0, r5
 8009b02:	f000 f80d 	bl	8009b20 <__swsetup_r>
 8009b06:	2800      	cmp	r0, #0
 8009b08:	d0cc      	beq.n	8009aa4 <__swbuf_r+0x28>
 8009b0a:	f04f 37ff 	mov.w	r7, #4294967295
 8009b0e:	4638      	mov	r0, r7
 8009b10:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009b12:	bf00      	nop
 8009b14:	0800a7a8 	.word	0x0800a7a8
 8009b18:	0800a7c8 	.word	0x0800a7c8
 8009b1c:	0800a788 	.word	0x0800a788

08009b20 <__swsetup_r>:
 8009b20:	4b32      	ldr	r3, [pc, #200]	; (8009bec <__swsetup_r+0xcc>)
 8009b22:	b570      	push	{r4, r5, r6, lr}
 8009b24:	681d      	ldr	r5, [r3, #0]
 8009b26:	4606      	mov	r6, r0
 8009b28:	460c      	mov	r4, r1
 8009b2a:	b125      	cbz	r5, 8009b36 <__swsetup_r+0x16>
 8009b2c:	69ab      	ldr	r3, [r5, #24]
 8009b2e:	b913      	cbnz	r3, 8009b36 <__swsetup_r+0x16>
 8009b30:	4628      	mov	r0, r5
 8009b32:	f000 f953 	bl	8009ddc <__sinit>
 8009b36:	4b2e      	ldr	r3, [pc, #184]	; (8009bf0 <__swsetup_r+0xd0>)
 8009b38:	429c      	cmp	r4, r3
 8009b3a:	d10f      	bne.n	8009b5c <__swsetup_r+0x3c>
 8009b3c:	686c      	ldr	r4, [r5, #4]
 8009b3e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009b42:	b29a      	uxth	r2, r3
 8009b44:	0715      	lsls	r5, r2, #28
 8009b46:	d42c      	bmi.n	8009ba2 <__swsetup_r+0x82>
 8009b48:	06d0      	lsls	r0, r2, #27
 8009b4a:	d411      	bmi.n	8009b70 <__swsetup_r+0x50>
 8009b4c:	2209      	movs	r2, #9
 8009b4e:	6032      	str	r2, [r6, #0]
 8009b50:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009b54:	81a3      	strh	r3, [r4, #12]
 8009b56:	f04f 30ff 	mov.w	r0, #4294967295
 8009b5a:	e03e      	b.n	8009bda <__swsetup_r+0xba>
 8009b5c:	4b25      	ldr	r3, [pc, #148]	; (8009bf4 <__swsetup_r+0xd4>)
 8009b5e:	429c      	cmp	r4, r3
 8009b60:	d101      	bne.n	8009b66 <__swsetup_r+0x46>
 8009b62:	68ac      	ldr	r4, [r5, #8]
 8009b64:	e7eb      	b.n	8009b3e <__swsetup_r+0x1e>
 8009b66:	4b24      	ldr	r3, [pc, #144]	; (8009bf8 <__swsetup_r+0xd8>)
 8009b68:	429c      	cmp	r4, r3
 8009b6a:	bf08      	it	eq
 8009b6c:	68ec      	ldreq	r4, [r5, #12]
 8009b6e:	e7e6      	b.n	8009b3e <__swsetup_r+0x1e>
 8009b70:	0751      	lsls	r1, r2, #29
 8009b72:	d512      	bpl.n	8009b9a <__swsetup_r+0x7a>
 8009b74:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009b76:	b141      	cbz	r1, 8009b8a <__swsetup_r+0x6a>
 8009b78:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009b7c:	4299      	cmp	r1, r3
 8009b7e:	d002      	beq.n	8009b86 <__swsetup_r+0x66>
 8009b80:	4630      	mov	r0, r6
 8009b82:	f7ff fe47 	bl	8009814 <_free_r>
 8009b86:	2300      	movs	r3, #0
 8009b88:	6363      	str	r3, [r4, #52]	; 0x34
 8009b8a:	89a3      	ldrh	r3, [r4, #12]
 8009b8c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8009b90:	81a3      	strh	r3, [r4, #12]
 8009b92:	2300      	movs	r3, #0
 8009b94:	6063      	str	r3, [r4, #4]
 8009b96:	6923      	ldr	r3, [r4, #16]
 8009b98:	6023      	str	r3, [r4, #0]
 8009b9a:	89a3      	ldrh	r3, [r4, #12]
 8009b9c:	f043 0308 	orr.w	r3, r3, #8
 8009ba0:	81a3      	strh	r3, [r4, #12]
 8009ba2:	6923      	ldr	r3, [r4, #16]
 8009ba4:	b94b      	cbnz	r3, 8009bba <__swsetup_r+0x9a>
 8009ba6:	89a3      	ldrh	r3, [r4, #12]
 8009ba8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009bac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009bb0:	d003      	beq.n	8009bba <__swsetup_r+0x9a>
 8009bb2:	4621      	mov	r1, r4
 8009bb4:	4630      	mov	r0, r6
 8009bb6:	f000 f9bf 	bl	8009f38 <__smakebuf_r>
 8009bba:	89a2      	ldrh	r2, [r4, #12]
 8009bbc:	f012 0301 	ands.w	r3, r2, #1
 8009bc0:	d00c      	beq.n	8009bdc <__swsetup_r+0xbc>
 8009bc2:	2300      	movs	r3, #0
 8009bc4:	60a3      	str	r3, [r4, #8]
 8009bc6:	6963      	ldr	r3, [r4, #20]
 8009bc8:	425b      	negs	r3, r3
 8009bca:	61a3      	str	r3, [r4, #24]
 8009bcc:	6923      	ldr	r3, [r4, #16]
 8009bce:	b953      	cbnz	r3, 8009be6 <__swsetup_r+0xc6>
 8009bd0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009bd4:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8009bd8:	d1ba      	bne.n	8009b50 <__swsetup_r+0x30>
 8009bda:	bd70      	pop	{r4, r5, r6, pc}
 8009bdc:	0792      	lsls	r2, r2, #30
 8009bde:	bf58      	it	pl
 8009be0:	6963      	ldrpl	r3, [r4, #20]
 8009be2:	60a3      	str	r3, [r4, #8]
 8009be4:	e7f2      	b.n	8009bcc <__swsetup_r+0xac>
 8009be6:	2000      	movs	r0, #0
 8009be8:	e7f7      	b.n	8009bda <__swsetup_r+0xba>
 8009bea:	bf00      	nop
 8009bec:	200001a4 	.word	0x200001a4
 8009bf0:	0800a7a8 	.word	0x0800a7a8
 8009bf4:	0800a7c8 	.word	0x0800a7c8
 8009bf8:	0800a788 	.word	0x0800a788

08009bfc <__sflush_r>:
 8009bfc:	898a      	ldrh	r2, [r1, #12]
 8009bfe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009c02:	4605      	mov	r5, r0
 8009c04:	0710      	lsls	r0, r2, #28
 8009c06:	460c      	mov	r4, r1
 8009c08:	d458      	bmi.n	8009cbc <__sflush_r+0xc0>
 8009c0a:	684b      	ldr	r3, [r1, #4]
 8009c0c:	2b00      	cmp	r3, #0
 8009c0e:	dc05      	bgt.n	8009c1c <__sflush_r+0x20>
 8009c10:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8009c12:	2b00      	cmp	r3, #0
 8009c14:	dc02      	bgt.n	8009c1c <__sflush_r+0x20>
 8009c16:	2000      	movs	r0, #0
 8009c18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009c1c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009c1e:	2e00      	cmp	r6, #0
 8009c20:	d0f9      	beq.n	8009c16 <__sflush_r+0x1a>
 8009c22:	2300      	movs	r3, #0
 8009c24:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8009c28:	682f      	ldr	r7, [r5, #0]
 8009c2a:	6a21      	ldr	r1, [r4, #32]
 8009c2c:	602b      	str	r3, [r5, #0]
 8009c2e:	d032      	beq.n	8009c96 <__sflush_r+0x9a>
 8009c30:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8009c32:	89a3      	ldrh	r3, [r4, #12]
 8009c34:	075a      	lsls	r2, r3, #29
 8009c36:	d505      	bpl.n	8009c44 <__sflush_r+0x48>
 8009c38:	6863      	ldr	r3, [r4, #4]
 8009c3a:	1ac0      	subs	r0, r0, r3
 8009c3c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009c3e:	b10b      	cbz	r3, 8009c44 <__sflush_r+0x48>
 8009c40:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009c42:	1ac0      	subs	r0, r0, r3
 8009c44:	2300      	movs	r3, #0
 8009c46:	4602      	mov	r2, r0
 8009c48:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009c4a:	6a21      	ldr	r1, [r4, #32]
 8009c4c:	4628      	mov	r0, r5
 8009c4e:	47b0      	blx	r6
 8009c50:	1c43      	adds	r3, r0, #1
 8009c52:	89a3      	ldrh	r3, [r4, #12]
 8009c54:	d106      	bne.n	8009c64 <__sflush_r+0x68>
 8009c56:	6829      	ldr	r1, [r5, #0]
 8009c58:	291d      	cmp	r1, #29
 8009c5a:	d848      	bhi.n	8009cee <__sflush_r+0xf2>
 8009c5c:	4a29      	ldr	r2, [pc, #164]	; (8009d04 <__sflush_r+0x108>)
 8009c5e:	40ca      	lsrs	r2, r1
 8009c60:	07d6      	lsls	r6, r2, #31
 8009c62:	d544      	bpl.n	8009cee <__sflush_r+0xf2>
 8009c64:	2200      	movs	r2, #0
 8009c66:	6062      	str	r2, [r4, #4]
 8009c68:	04d9      	lsls	r1, r3, #19
 8009c6a:	6922      	ldr	r2, [r4, #16]
 8009c6c:	6022      	str	r2, [r4, #0]
 8009c6e:	d504      	bpl.n	8009c7a <__sflush_r+0x7e>
 8009c70:	1c42      	adds	r2, r0, #1
 8009c72:	d101      	bne.n	8009c78 <__sflush_r+0x7c>
 8009c74:	682b      	ldr	r3, [r5, #0]
 8009c76:	b903      	cbnz	r3, 8009c7a <__sflush_r+0x7e>
 8009c78:	6560      	str	r0, [r4, #84]	; 0x54
 8009c7a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009c7c:	602f      	str	r7, [r5, #0]
 8009c7e:	2900      	cmp	r1, #0
 8009c80:	d0c9      	beq.n	8009c16 <__sflush_r+0x1a>
 8009c82:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009c86:	4299      	cmp	r1, r3
 8009c88:	d002      	beq.n	8009c90 <__sflush_r+0x94>
 8009c8a:	4628      	mov	r0, r5
 8009c8c:	f7ff fdc2 	bl	8009814 <_free_r>
 8009c90:	2000      	movs	r0, #0
 8009c92:	6360      	str	r0, [r4, #52]	; 0x34
 8009c94:	e7c0      	b.n	8009c18 <__sflush_r+0x1c>
 8009c96:	2301      	movs	r3, #1
 8009c98:	4628      	mov	r0, r5
 8009c9a:	47b0      	blx	r6
 8009c9c:	1c41      	adds	r1, r0, #1
 8009c9e:	d1c8      	bne.n	8009c32 <__sflush_r+0x36>
 8009ca0:	682b      	ldr	r3, [r5, #0]
 8009ca2:	2b00      	cmp	r3, #0
 8009ca4:	d0c5      	beq.n	8009c32 <__sflush_r+0x36>
 8009ca6:	2b1d      	cmp	r3, #29
 8009ca8:	d001      	beq.n	8009cae <__sflush_r+0xb2>
 8009caa:	2b16      	cmp	r3, #22
 8009cac:	d101      	bne.n	8009cb2 <__sflush_r+0xb6>
 8009cae:	602f      	str	r7, [r5, #0]
 8009cb0:	e7b1      	b.n	8009c16 <__sflush_r+0x1a>
 8009cb2:	89a3      	ldrh	r3, [r4, #12]
 8009cb4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009cb8:	81a3      	strh	r3, [r4, #12]
 8009cba:	e7ad      	b.n	8009c18 <__sflush_r+0x1c>
 8009cbc:	690f      	ldr	r7, [r1, #16]
 8009cbe:	2f00      	cmp	r7, #0
 8009cc0:	d0a9      	beq.n	8009c16 <__sflush_r+0x1a>
 8009cc2:	0793      	lsls	r3, r2, #30
 8009cc4:	680e      	ldr	r6, [r1, #0]
 8009cc6:	bf08      	it	eq
 8009cc8:	694b      	ldreq	r3, [r1, #20]
 8009cca:	600f      	str	r7, [r1, #0]
 8009ccc:	bf18      	it	ne
 8009cce:	2300      	movne	r3, #0
 8009cd0:	eba6 0807 	sub.w	r8, r6, r7
 8009cd4:	608b      	str	r3, [r1, #8]
 8009cd6:	f1b8 0f00 	cmp.w	r8, #0
 8009cda:	dd9c      	ble.n	8009c16 <__sflush_r+0x1a>
 8009cdc:	4643      	mov	r3, r8
 8009cde:	463a      	mov	r2, r7
 8009ce0:	6a21      	ldr	r1, [r4, #32]
 8009ce2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8009ce4:	4628      	mov	r0, r5
 8009ce6:	47b0      	blx	r6
 8009ce8:	2800      	cmp	r0, #0
 8009cea:	dc06      	bgt.n	8009cfa <__sflush_r+0xfe>
 8009cec:	89a3      	ldrh	r3, [r4, #12]
 8009cee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009cf2:	81a3      	strh	r3, [r4, #12]
 8009cf4:	f04f 30ff 	mov.w	r0, #4294967295
 8009cf8:	e78e      	b.n	8009c18 <__sflush_r+0x1c>
 8009cfa:	4407      	add	r7, r0
 8009cfc:	eba8 0800 	sub.w	r8, r8, r0
 8009d00:	e7e9      	b.n	8009cd6 <__sflush_r+0xda>
 8009d02:	bf00      	nop
 8009d04:	20400001 	.word	0x20400001

08009d08 <_fflush_r>:
 8009d08:	b538      	push	{r3, r4, r5, lr}
 8009d0a:	690b      	ldr	r3, [r1, #16]
 8009d0c:	4605      	mov	r5, r0
 8009d0e:	460c      	mov	r4, r1
 8009d10:	b1db      	cbz	r3, 8009d4a <_fflush_r+0x42>
 8009d12:	b118      	cbz	r0, 8009d1c <_fflush_r+0x14>
 8009d14:	6983      	ldr	r3, [r0, #24]
 8009d16:	b90b      	cbnz	r3, 8009d1c <_fflush_r+0x14>
 8009d18:	f000 f860 	bl	8009ddc <__sinit>
 8009d1c:	4b0c      	ldr	r3, [pc, #48]	; (8009d50 <_fflush_r+0x48>)
 8009d1e:	429c      	cmp	r4, r3
 8009d20:	d109      	bne.n	8009d36 <_fflush_r+0x2e>
 8009d22:	686c      	ldr	r4, [r5, #4]
 8009d24:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009d28:	b17b      	cbz	r3, 8009d4a <_fflush_r+0x42>
 8009d2a:	4621      	mov	r1, r4
 8009d2c:	4628      	mov	r0, r5
 8009d2e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009d32:	f7ff bf63 	b.w	8009bfc <__sflush_r>
 8009d36:	4b07      	ldr	r3, [pc, #28]	; (8009d54 <_fflush_r+0x4c>)
 8009d38:	429c      	cmp	r4, r3
 8009d3a:	d101      	bne.n	8009d40 <_fflush_r+0x38>
 8009d3c:	68ac      	ldr	r4, [r5, #8]
 8009d3e:	e7f1      	b.n	8009d24 <_fflush_r+0x1c>
 8009d40:	4b05      	ldr	r3, [pc, #20]	; (8009d58 <_fflush_r+0x50>)
 8009d42:	429c      	cmp	r4, r3
 8009d44:	bf08      	it	eq
 8009d46:	68ec      	ldreq	r4, [r5, #12]
 8009d48:	e7ec      	b.n	8009d24 <_fflush_r+0x1c>
 8009d4a:	2000      	movs	r0, #0
 8009d4c:	bd38      	pop	{r3, r4, r5, pc}
 8009d4e:	bf00      	nop
 8009d50:	0800a7a8 	.word	0x0800a7a8
 8009d54:	0800a7c8 	.word	0x0800a7c8
 8009d58:	0800a788 	.word	0x0800a788

08009d5c <std>:
 8009d5c:	2300      	movs	r3, #0
 8009d5e:	b510      	push	{r4, lr}
 8009d60:	4604      	mov	r4, r0
 8009d62:	e9c0 3300 	strd	r3, r3, [r0]
 8009d66:	6083      	str	r3, [r0, #8]
 8009d68:	8181      	strh	r1, [r0, #12]
 8009d6a:	6643      	str	r3, [r0, #100]	; 0x64
 8009d6c:	81c2      	strh	r2, [r0, #14]
 8009d6e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009d72:	6183      	str	r3, [r0, #24]
 8009d74:	4619      	mov	r1, r3
 8009d76:	2208      	movs	r2, #8
 8009d78:	305c      	adds	r0, #92	; 0x5c
 8009d7a:	f7ff fd43 	bl	8009804 <memset>
 8009d7e:	4b05      	ldr	r3, [pc, #20]	; (8009d94 <std+0x38>)
 8009d80:	6263      	str	r3, [r4, #36]	; 0x24
 8009d82:	4b05      	ldr	r3, [pc, #20]	; (8009d98 <std+0x3c>)
 8009d84:	62a3      	str	r3, [r4, #40]	; 0x28
 8009d86:	4b05      	ldr	r3, [pc, #20]	; (8009d9c <std+0x40>)
 8009d88:	62e3      	str	r3, [r4, #44]	; 0x2c
 8009d8a:	4b05      	ldr	r3, [pc, #20]	; (8009da0 <std+0x44>)
 8009d8c:	6224      	str	r4, [r4, #32]
 8009d8e:	6323      	str	r3, [r4, #48]	; 0x30
 8009d90:	bd10      	pop	{r4, pc}
 8009d92:	bf00      	nop
 8009d94:	0800a54d 	.word	0x0800a54d
 8009d98:	0800a56f 	.word	0x0800a56f
 8009d9c:	0800a5a7 	.word	0x0800a5a7
 8009da0:	0800a5cb 	.word	0x0800a5cb

08009da4 <_cleanup_r>:
 8009da4:	4901      	ldr	r1, [pc, #4]	; (8009dac <_cleanup_r+0x8>)
 8009da6:	f000 b885 	b.w	8009eb4 <_fwalk_reent>
 8009daa:	bf00      	nop
 8009dac:	08009d09 	.word	0x08009d09

08009db0 <__sfmoreglue>:
 8009db0:	b570      	push	{r4, r5, r6, lr}
 8009db2:	1e4a      	subs	r2, r1, #1
 8009db4:	2568      	movs	r5, #104	; 0x68
 8009db6:	4355      	muls	r5, r2
 8009db8:	460e      	mov	r6, r1
 8009dba:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8009dbe:	f7ff fd77 	bl	80098b0 <_malloc_r>
 8009dc2:	4604      	mov	r4, r0
 8009dc4:	b140      	cbz	r0, 8009dd8 <__sfmoreglue+0x28>
 8009dc6:	2100      	movs	r1, #0
 8009dc8:	e9c0 1600 	strd	r1, r6, [r0]
 8009dcc:	300c      	adds	r0, #12
 8009dce:	60a0      	str	r0, [r4, #8]
 8009dd0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8009dd4:	f7ff fd16 	bl	8009804 <memset>
 8009dd8:	4620      	mov	r0, r4
 8009dda:	bd70      	pop	{r4, r5, r6, pc}

08009ddc <__sinit>:
 8009ddc:	6983      	ldr	r3, [r0, #24]
 8009dde:	b510      	push	{r4, lr}
 8009de0:	4604      	mov	r4, r0
 8009de2:	bb33      	cbnz	r3, 8009e32 <__sinit+0x56>
 8009de4:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8009de8:	6503      	str	r3, [r0, #80]	; 0x50
 8009dea:	4b12      	ldr	r3, [pc, #72]	; (8009e34 <__sinit+0x58>)
 8009dec:	4a12      	ldr	r2, [pc, #72]	; (8009e38 <__sinit+0x5c>)
 8009dee:	681b      	ldr	r3, [r3, #0]
 8009df0:	6282      	str	r2, [r0, #40]	; 0x28
 8009df2:	4298      	cmp	r0, r3
 8009df4:	bf04      	itt	eq
 8009df6:	2301      	moveq	r3, #1
 8009df8:	6183      	streq	r3, [r0, #24]
 8009dfa:	f000 f81f 	bl	8009e3c <__sfp>
 8009dfe:	6060      	str	r0, [r4, #4]
 8009e00:	4620      	mov	r0, r4
 8009e02:	f000 f81b 	bl	8009e3c <__sfp>
 8009e06:	60a0      	str	r0, [r4, #8]
 8009e08:	4620      	mov	r0, r4
 8009e0a:	f000 f817 	bl	8009e3c <__sfp>
 8009e0e:	2200      	movs	r2, #0
 8009e10:	60e0      	str	r0, [r4, #12]
 8009e12:	2104      	movs	r1, #4
 8009e14:	6860      	ldr	r0, [r4, #4]
 8009e16:	f7ff ffa1 	bl	8009d5c <std>
 8009e1a:	2201      	movs	r2, #1
 8009e1c:	2109      	movs	r1, #9
 8009e1e:	68a0      	ldr	r0, [r4, #8]
 8009e20:	f7ff ff9c 	bl	8009d5c <std>
 8009e24:	2202      	movs	r2, #2
 8009e26:	2112      	movs	r1, #18
 8009e28:	68e0      	ldr	r0, [r4, #12]
 8009e2a:	f7ff ff97 	bl	8009d5c <std>
 8009e2e:	2301      	movs	r3, #1
 8009e30:	61a3      	str	r3, [r4, #24]
 8009e32:	bd10      	pop	{r4, pc}
 8009e34:	0800a784 	.word	0x0800a784
 8009e38:	08009da5 	.word	0x08009da5

08009e3c <__sfp>:
 8009e3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009e3e:	4b1b      	ldr	r3, [pc, #108]	; (8009eac <__sfp+0x70>)
 8009e40:	681e      	ldr	r6, [r3, #0]
 8009e42:	69b3      	ldr	r3, [r6, #24]
 8009e44:	4607      	mov	r7, r0
 8009e46:	b913      	cbnz	r3, 8009e4e <__sfp+0x12>
 8009e48:	4630      	mov	r0, r6
 8009e4a:	f7ff ffc7 	bl	8009ddc <__sinit>
 8009e4e:	3648      	adds	r6, #72	; 0x48
 8009e50:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8009e54:	3b01      	subs	r3, #1
 8009e56:	d503      	bpl.n	8009e60 <__sfp+0x24>
 8009e58:	6833      	ldr	r3, [r6, #0]
 8009e5a:	b133      	cbz	r3, 8009e6a <__sfp+0x2e>
 8009e5c:	6836      	ldr	r6, [r6, #0]
 8009e5e:	e7f7      	b.n	8009e50 <__sfp+0x14>
 8009e60:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8009e64:	b16d      	cbz	r5, 8009e82 <__sfp+0x46>
 8009e66:	3468      	adds	r4, #104	; 0x68
 8009e68:	e7f4      	b.n	8009e54 <__sfp+0x18>
 8009e6a:	2104      	movs	r1, #4
 8009e6c:	4638      	mov	r0, r7
 8009e6e:	f7ff ff9f 	bl	8009db0 <__sfmoreglue>
 8009e72:	6030      	str	r0, [r6, #0]
 8009e74:	2800      	cmp	r0, #0
 8009e76:	d1f1      	bne.n	8009e5c <__sfp+0x20>
 8009e78:	230c      	movs	r3, #12
 8009e7a:	603b      	str	r3, [r7, #0]
 8009e7c:	4604      	mov	r4, r0
 8009e7e:	4620      	mov	r0, r4
 8009e80:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009e82:	4b0b      	ldr	r3, [pc, #44]	; (8009eb0 <__sfp+0x74>)
 8009e84:	6665      	str	r5, [r4, #100]	; 0x64
 8009e86:	e9c4 5500 	strd	r5, r5, [r4]
 8009e8a:	60a5      	str	r5, [r4, #8]
 8009e8c:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8009e90:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8009e94:	2208      	movs	r2, #8
 8009e96:	4629      	mov	r1, r5
 8009e98:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8009e9c:	f7ff fcb2 	bl	8009804 <memset>
 8009ea0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8009ea4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8009ea8:	e7e9      	b.n	8009e7e <__sfp+0x42>
 8009eaa:	bf00      	nop
 8009eac:	0800a784 	.word	0x0800a784
 8009eb0:	ffff0001 	.word	0xffff0001

08009eb4 <_fwalk_reent>:
 8009eb4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009eb8:	4680      	mov	r8, r0
 8009eba:	4689      	mov	r9, r1
 8009ebc:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8009ec0:	2600      	movs	r6, #0
 8009ec2:	b914      	cbnz	r4, 8009eca <_fwalk_reent+0x16>
 8009ec4:	4630      	mov	r0, r6
 8009ec6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009eca:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8009ece:	3f01      	subs	r7, #1
 8009ed0:	d501      	bpl.n	8009ed6 <_fwalk_reent+0x22>
 8009ed2:	6824      	ldr	r4, [r4, #0]
 8009ed4:	e7f5      	b.n	8009ec2 <_fwalk_reent+0xe>
 8009ed6:	89ab      	ldrh	r3, [r5, #12]
 8009ed8:	2b01      	cmp	r3, #1
 8009eda:	d907      	bls.n	8009eec <_fwalk_reent+0x38>
 8009edc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009ee0:	3301      	adds	r3, #1
 8009ee2:	d003      	beq.n	8009eec <_fwalk_reent+0x38>
 8009ee4:	4629      	mov	r1, r5
 8009ee6:	4640      	mov	r0, r8
 8009ee8:	47c8      	blx	r9
 8009eea:	4306      	orrs	r6, r0
 8009eec:	3568      	adds	r5, #104	; 0x68
 8009eee:	e7ee      	b.n	8009ece <_fwalk_reent+0x1a>

08009ef0 <__swhatbuf_r>:
 8009ef0:	b570      	push	{r4, r5, r6, lr}
 8009ef2:	460e      	mov	r6, r1
 8009ef4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009ef8:	2900      	cmp	r1, #0
 8009efa:	b096      	sub	sp, #88	; 0x58
 8009efc:	4614      	mov	r4, r2
 8009efe:	461d      	mov	r5, r3
 8009f00:	da07      	bge.n	8009f12 <__swhatbuf_r+0x22>
 8009f02:	2300      	movs	r3, #0
 8009f04:	602b      	str	r3, [r5, #0]
 8009f06:	89b3      	ldrh	r3, [r6, #12]
 8009f08:	061a      	lsls	r2, r3, #24
 8009f0a:	d410      	bmi.n	8009f2e <__swhatbuf_r+0x3e>
 8009f0c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009f10:	e00e      	b.n	8009f30 <__swhatbuf_r+0x40>
 8009f12:	466a      	mov	r2, sp
 8009f14:	f000 fb80 	bl	800a618 <_fstat_r>
 8009f18:	2800      	cmp	r0, #0
 8009f1a:	dbf2      	blt.n	8009f02 <__swhatbuf_r+0x12>
 8009f1c:	9a01      	ldr	r2, [sp, #4]
 8009f1e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8009f22:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8009f26:	425a      	negs	r2, r3
 8009f28:	415a      	adcs	r2, r3
 8009f2a:	602a      	str	r2, [r5, #0]
 8009f2c:	e7ee      	b.n	8009f0c <__swhatbuf_r+0x1c>
 8009f2e:	2340      	movs	r3, #64	; 0x40
 8009f30:	2000      	movs	r0, #0
 8009f32:	6023      	str	r3, [r4, #0]
 8009f34:	b016      	add	sp, #88	; 0x58
 8009f36:	bd70      	pop	{r4, r5, r6, pc}

08009f38 <__smakebuf_r>:
 8009f38:	898b      	ldrh	r3, [r1, #12]
 8009f3a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009f3c:	079d      	lsls	r5, r3, #30
 8009f3e:	4606      	mov	r6, r0
 8009f40:	460c      	mov	r4, r1
 8009f42:	d507      	bpl.n	8009f54 <__smakebuf_r+0x1c>
 8009f44:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009f48:	6023      	str	r3, [r4, #0]
 8009f4a:	6123      	str	r3, [r4, #16]
 8009f4c:	2301      	movs	r3, #1
 8009f4e:	6163      	str	r3, [r4, #20]
 8009f50:	b002      	add	sp, #8
 8009f52:	bd70      	pop	{r4, r5, r6, pc}
 8009f54:	ab01      	add	r3, sp, #4
 8009f56:	466a      	mov	r2, sp
 8009f58:	f7ff ffca 	bl	8009ef0 <__swhatbuf_r>
 8009f5c:	9900      	ldr	r1, [sp, #0]
 8009f5e:	4605      	mov	r5, r0
 8009f60:	4630      	mov	r0, r6
 8009f62:	f7ff fca5 	bl	80098b0 <_malloc_r>
 8009f66:	b948      	cbnz	r0, 8009f7c <__smakebuf_r+0x44>
 8009f68:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009f6c:	059a      	lsls	r2, r3, #22
 8009f6e:	d4ef      	bmi.n	8009f50 <__smakebuf_r+0x18>
 8009f70:	f023 0303 	bic.w	r3, r3, #3
 8009f74:	f043 0302 	orr.w	r3, r3, #2
 8009f78:	81a3      	strh	r3, [r4, #12]
 8009f7a:	e7e3      	b.n	8009f44 <__smakebuf_r+0xc>
 8009f7c:	4b0d      	ldr	r3, [pc, #52]	; (8009fb4 <__smakebuf_r+0x7c>)
 8009f7e:	62b3      	str	r3, [r6, #40]	; 0x28
 8009f80:	89a3      	ldrh	r3, [r4, #12]
 8009f82:	6020      	str	r0, [r4, #0]
 8009f84:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009f88:	81a3      	strh	r3, [r4, #12]
 8009f8a:	9b00      	ldr	r3, [sp, #0]
 8009f8c:	6163      	str	r3, [r4, #20]
 8009f8e:	9b01      	ldr	r3, [sp, #4]
 8009f90:	6120      	str	r0, [r4, #16]
 8009f92:	b15b      	cbz	r3, 8009fac <__smakebuf_r+0x74>
 8009f94:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009f98:	4630      	mov	r0, r6
 8009f9a:	f000 fb4f 	bl	800a63c <_isatty_r>
 8009f9e:	b128      	cbz	r0, 8009fac <__smakebuf_r+0x74>
 8009fa0:	89a3      	ldrh	r3, [r4, #12]
 8009fa2:	f023 0303 	bic.w	r3, r3, #3
 8009fa6:	f043 0301 	orr.w	r3, r3, #1
 8009faa:	81a3      	strh	r3, [r4, #12]
 8009fac:	89a3      	ldrh	r3, [r4, #12]
 8009fae:	431d      	orrs	r5, r3
 8009fb0:	81a5      	strh	r5, [r4, #12]
 8009fb2:	e7cd      	b.n	8009f50 <__smakebuf_r+0x18>
 8009fb4:	08009da5 	.word	0x08009da5

08009fb8 <__malloc_lock>:
 8009fb8:	4770      	bx	lr

08009fba <__malloc_unlock>:
 8009fba:	4770      	bx	lr

08009fbc <__sfputc_r>:
 8009fbc:	6893      	ldr	r3, [r2, #8]
 8009fbe:	3b01      	subs	r3, #1
 8009fc0:	2b00      	cmp	r3, #0
 8009fc2:	b410      	push	{r4}
 8009fc4:	6093      	str	r3, [r2, #8]
 8009fc6:	da08      	bge.n	8009fda <__sfputc_r+0x1e>
 8009fc8:	6994      	ldr	r4, [r2, #24]
 8009fca:	42a3      	cmp	r3, r4
 8009fcc:	db01      	blt.n	8009fd2 <__sfputc_r+0x16>
 8009fce:	290a      	cmp	r1, #10
 8009fd0:	d103      	bne.n	8009fda <__sfputc_r+0x1e>
 8009fd2:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009fd6:	f7ff bd51 	b.w	8009a7c <__swbuf_r>
 8009fda:	6813      	ldr	r3, [r2, #0]
 8009fdc:	1c58      	adds	r0, r3, #1
 8009fde:	6010      	str	r0, [r2, #0]
 8009fe0:	7019      	strb	r1, [r3, #0]
 8009fe2:	4608      	mov	r0, r1
 8009fe4:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009fe8:	4770      	bx	lr

08009fea <__sfputs_r>:
 8009fea:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009fec:	4606      	mov	r6, r0
 8009fee:	460f      	mov	r7, r1
 8009ff0:	4614      	mov	r4, r2
 8009ff2:	18d5      	adds	r5, r2, r3
 8009ff4:	42ac      	cmp	r4, r5
 8009ff6:	d101      	bne.n	8009ffc <__sfputs_r+0x12>
 8009ff8:	2000      	movs	r0, #0
 8009ffa:	e007      	b.n	800a00c <__sfputs_r+0x22>
 8009ffc:	463a      	mov	r2, r7
 8009ffe:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a002:	4630      	mov	r0, r6
 800a004:	f7ff ffda 	bl	8009fbc <__sfputc_r>
 800a008:	1c43      	adds	r3, r0, #1
 800a00a:	d1f3      	bne.n	8009ff4 <__sfputs_r+0xa>
 800a00c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800a010 <_vfiprintf_r>:
 800a010:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a014:	460c      	mov	r4, r1
 800a016:	b09d      	sub	sp, #116	; 0x74
 800a018:	4617      	mov	r7, r2
 800a01a:	461d      	mov	r5, r3
 800a01c:	4606      	mov	r6, r0
 800a01e:	b118      	cbz	r0, 800a028 <_vfiprintf_r+0x18>
 800a020:	6983      	ldr	r3, [r0, #24]
 800a022:	b90b      	cbnz	r3, 800a028 <_vfiprintf_r+0x18>
 800a024:	f7ff feda 	bl	8009ddc <__sinit>
 800a028:	4b7c      	ldr	r3, [pc, #496]	; (800a21c <_vfiprintf_r+0x20c>)
 800a02a:	429c      	cmp	r4, r3
 800a02c:	d158      	bne.n	800a0e0 <_vfiprintf_r+0xd0>
 800a02e:	6874      	ldr	r4, [r6, #4]
 800a030:	89a3      	ldrh	r3, [r4, #12]
 800a032:	0718      	lsls	r0, r3, #28
 800a034:	d55e      	bpl.n	800a0f4 <_vfiprintf_r+0xe4>
 800a036:	6923      	ldr	r3, [r4, #16]
 800a038:	2b00      	cmp	r3, #0
 800a03a:	d05b      	beq.n	800a0f4 <_vfiprintf_r+0xe4>
 800a03c:	2300      	movs	r3, #0
 800a03e:	9309      	str	r3, [sp, #36]	; 0x24
 800a040:	2320      	movs	r3, #32
 800a042:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a046:	2330      	movs	r3, #48	; 0x30
 800a048:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a04c:	9503      	str	r5, [sp, #12]
 800a04e:	f04f 0b01 	mov.w	fp, #1
 800a052:	46b8      	mov	r8, r7
 800a054:	4645      	mov	r5, r8
 800a056:	f815 3b01 	ldrb.w	r3, [r5], #1
 800a05a:	b10b      	cbz	r3, 800a060 <_vfiprintf_r+0x50>
 800a05c:	2b25      	cmp	r3, #37	; 0x25
 800a05e:	d154      	bne.n	800a10a <_vfiprintf_r+0xfa>
 800a060:	ebb8 0a07 	subs.w	sl, r8, r7
 800a064:	d00b      	beq.n	800a07e <_vfiprintf_r+0x6e>
 800a066:	4653      	mov	r3, sl
 800a068:	463a      	mov	r2, r7
 800a06a:	4621      	mov	r1, r4
 800a06c:	4630      	mov	r0, r6
 800a06e:	f7ff ffbc 	bl	8009fea <__sfputs_r>
 800a072:	3001      	adds	r0, #1
 800a074:	f000 80c2 	beq.w	800a1fc <_vfiprintf_r+0x1ec>
 800a078:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a07a:	4453      	add	r3, sl
 800a07c:	9309      	str	r3, [sp, #36]	; 0x24
 800a07e:	f898 3000 	ldrb.w	r3, [r8]
 800a082:	2b00      	cmp	r3, #0
 800a084:	f000 80ba 	beq.w	800a1fc <_vfiprintf_r+0x1ec>
 800a088:	2300      	movs	r3, #0
 800a08a:	f04f 32ff 	mov.w	r2, #4294967295
 800a08e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a092:	9304      	str	r3, [sp, #16]
 800a094:	9307      	str	r3, [sp, #28]
 800a096:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a09a:	931a      	str	r3, [sp, #104]	; 0x68
 800a09c:	46a8      	mov	r8, r5
 800a09e:	2205      	movs	r2, #5
 800a0a0:	f818 1b01 	ldrb.w	r1, [r8], #1
 800a0a4:	485e      	ldr	r0, [pc, #376]	; (800a220 <_vfiprintf_r+0x210>)
 800a0a6:	f7f6 f893 	bl	80001d0 <memchr>
 800a0aa:	9b04      	ldr	r3, [sp, #16]
 800a0ac:	bb78      	cbnz	r0, 800a10e <_vfiprintf_r+0xfe>
 800a0ae:	06d9      	lsls	r1, r3, #27
 800a0b0:	bf44      	itt	mi
 800a0b2:	2220      	movmi	r2, #32
 800a0b4:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800a0b8:	071a      	lsls	r2, r3, #28
 800a0ba:	bf44      	itt	mi
 800a0bc:	222b      	movmi	r2, #43	; 0x2b
 800a0be:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800a0c2:	782a      	ldrb	r2, [r5, #0]
 800a0c4:	2a2a      	cmp	r2, #42	; 0x2a
 800a0c6:	d02a      	beq.n	800a11e <_vfiprintf_r+0x10e>
 800a0c8:	9a07      	ldr	r2, [sp, #28]
 800a0ca:	46a8      	mov	r8, r5
 800a0cc:	2000      	movs	r0, #0
 800a0ce:	250a      	movs	r5, #10
 800a0d0:	4641      	mov	r1, r8
 800a0d2:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a0d6:	3b30      	subs	r3, #48	; 0x30
 800a0d8:	2b09      	cmp	r3, #9
 800a0da:	d969      	bls.n	800a1b0 <_vfiprintf_r+0x1a0>
 800a0dc:	b360      	cbz	r0, 800a138 <_vfiprintf_r+0x128>
 800a0de:	e024      	b.n	800a12a <_vfiprintf_r+0x11a>
 800a0e0:	4b50      	ldr	r3, [pc, #320]	; (800a224 <_vfiprintf_r+0x214>)
 800a0e2:	429c      	cmp	r4, r3
 800a0e4:	d101      	bne.n	800a0ea <_vfiprintf_r+0xda>
 800a0e6:	68b4      	ldr	r4, [r6, #8]
 800a0e8:	e7a2      	b.n	800a030 <_vfiprintf_r+0x20>
 800a0ea:	4b4f      	ldr	r3, [pc, #316]	; (800a228 <_vfiprintf_r+0x218>)
 800a0ec:	429c      	cmp	r4, r3
 800a0ee:	bf08      	it	eq
 800a0f0:	68f4      	ldreq	r4, [r6, #12]
 800a0f2:	e79d      	b.n	800a030 <_vfiprintf_r+0x20>
 800a0f4:	4621      	mov	r1, r4
 800a0f6:	4630      	mov	r0, r6
 800a0f8:	f7ff fd12 	bl	8009b20 <__swsetup_r>
 800a0fc:	2800      	cmp	r0, #0
 800a0fe:	d09d      	beq.n	800a03c <_vfiprintf_r+0x2c>
 800a100:	f04f 30ff 	mov.w	r0, #4294967295
 800a104:	b01d      	add	sp, #116	; 0x74
 800a106:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a10a:	46a8      	mov	r8, r5
 800a10c:	e7a2      	b.n	800a054 <_vfiprintf_r+0x44>
 800a10e:	4a44      	ldr	r2, [pc, #272]	; (800a220 <_vfiprintf_r+0x210>)
 800a110:	1a80      	subs	r0, r0, r2
 800a112:	fa0b f000 	lsl.w	r0, fp, r0
 800a116:	4318      	orrs	r0, r3
 800a118:	9004      	str	r0, [sp, #16]
 800a11a:	4645      	mov	r5, r8
 800a11c:	e7be      	b.n	800a09c <_vfiprintf_r+0x8c>
 800a11e:	9a03      	ldr	r2, [sp, #12]
 800a120:	1d11      	adds	r1, r2, #4
 800a122:	6812      	ldr	r2, [r2, #0]
 800a124:	9103      	str	r1, [sp, #12]
 800a126:	2a00      	cmp	r2, #0
 800a128:	db01      	blt.n	800a12e <_vfiprintf_r+0x11e>
 800a12a:	9207      	str	r2, [sp, #28]
 800a12c:	e004      	b.n	800a138 <_vfiprintf_r+0x128>
 800a12e:	4252      	negs	r2, r2
 800a130:	f043 0302 	orr.w	r3, r3, #2
 800a134:	9207      	str	r2, [sp, #28]
 800a136:	9304      	str	r3, [sp, #16]
 800a138:	f898 3000 	ldrb.w	r3, [r8]
 800a13c:	2b2e      	cmp	r3, #46	; 0x2e
 800a13e:	d10e      	bne.n	800a15e <_vfiprintf_r+0x14e>
 800a140:	f898 3001 	ldrb.w	r3, [r8, #1]
 800a144:	2b2a      	cmp	r3, #42	; 0x2a
 800a146:	d138      	bne.n	800a1ba <_vfiprintf_r+0x1aa>
 800a148:	9b03      	ldr	r3, [sp, #12]
 800a14a:	1d1a      	adds	r2, r3, #4
 800a14c:	681b      	ldr	r3, [r3, #0]
 800a14e:	9203      	str	r2, [sp, #12]
 800a150:	2b00      	cmp	r3, #0
 800a152:	bfb8      	it	lt
 800a154:	f04f 33ff 	movlt.w	r3, #4294967295
 800a158:	f108 0802 	add.w	r8, r8, #2
 800a15c:	9305      	str	r3, [sp, #20]
 800a15e:	4d33      	ldr	r5, [pc, #204]	; (800a22c <_vfiprintf_r+0x21c>)
 800a160:	f898 1000 	ldrb.w	r1, [r8]
 800a164:	2203      	movs	r2, #3
 800a166:	4628      	mov	r0, r5
 800a168:	f7f6 f832 	bl	80001d0 <memchr>
 800a16c:	b140      	cbz	r0, 800a180 <_vfiprintf_r+0x170>
 800a16e:	2340      	movs	r3, #64	; 0x40
 800a170:	1b40      	subs	r0, r0, r5
 800a172:	fa03 f000 	lsl.w	r0, r3, r0
 800a176:	9b04      	ldr	r3, [sp, #16]
 800a178:	4303      	orrs	r3, r0
 800a17a:	f108 0801 	add.w	r8, r8, #1
 800a17e:	9304      	str	r3, [sp, #16]
 800a180:	f898 1000 	ldrb.w	r1, [r8]
 800a184:	482a      	ldr	r0, [pc, #168]	; (800a230 <_vfiprintf_r+0x220>)
 800a186:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a18a:	2206      	movs	r2, #6
 800a18c:	f108 0701 	add.w	r7, r8, #1
 800a190:	f7f6 f81e 	bl	80001d0 <memchr>
 800a194:	2800      	cmp	r0, #0
 800a196:	d037      	beq.n	800a208 <_vfiprintf_r+0x1f8>
 800a198:	4b26      	ldr	r3, [pc, #152]	; (800a234 <_vfiprintf_r+0x224>)
 800a19a:	bb1b      	cbnz	r3, 800a1e4 <_vfiprintf_r+0x1d4>
 800a19c:	9b03      	ldr	r3, [sp, #12]
 800a19e:	3307      	adds	r3, #7
 800a1a0:	f023 0307 	bic.w	r3, r3, #7
 800a1a4:	3308      	adds	r3, #8
 800a1a6:	9303      	str	r3, [sp, #12]
 800a1a8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a1aa:	444b      	add	r3, r9
 800a1ac:	9309      	str	r3, [sp, #36]	; 0x24
 800a1ae:	e750      	b.n	800a052 <_vfiprintf_r+0x42>
 800a1b0:	fb05 3202 	mla	r2, r5, r2, r3
 800a1b4:	2001      	movs	r0, #1
 800a1b6:	4688      	mov	r8, r1
 800a1b8:	e78a      	b.n	800a0d0 <_vfiprintf_r+0xc0>
 800a1ba:	2300      	movs	r3, #0
 800a1bc:	f108 0801 	add.w	r8, r8, #1
 800a1c0:	9305      	str	r3, [sp, #20]
 800a1c2:	4619      	mov	r1, r3
 800a1c4:	250a      	movs	r5, #10
 800a1c6:	4640      	mov	r0, r8
 800a1c8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a1cc:	3a30      	subs	r2, #48	; 0x30
 800a1ce:	2a09      	cmp	r2, #9
 800a1d0:	d903      	bls.n	800a1da <_vfiprintf_r+0x1ca>
 800a1d2:	2b00      	cmp	r3, #0
 800a1d4:	d0c3      	beq.n	800a15e <_vfiprintf_r+0x14e>
 800a1d6:	9105      	str	r1, [sp, #20]
 800a1d8:	e7c1      	b.n	800a15e <_vfiprintf_r+0x14e>
 800a1da:	fb05 2101 	mla	r1, r5, r1, r2
 800a1de:	2301      	movs	r3, #1
 800a1e0:	4680      	mov	r8, r0
 800a1e2:	e7f0      	b.n	800a1c6 <_vfiprintf_r+0x1b6>
 800a1e4:	ab03      	add	r3, sp, #12
 800a1e6:	9300      	str	r3, [sp, #0]
 800a1e8:	4622      	mov	r2, r4
 800a1ea:	4b13      	ldr	r3, [pc, #76]	; (800a238 <_vfiprintf_r+0x228>)
 800a1ec:	a904      	add	r1, sp, #16
 800a1ee:	4630      	mov	r0, r6
 800a1f0:	f3af 8000 	nop.w
 800a1f4:	f1b0 3fff 	cmp.w	r0, #4294967295
 800a1f8:	4681      	mov	r9, r0
 800a1fa:	d1d5      	bne.n	800a1a8 <_vfiprintf_r+0x198>
 800a1fc:	89a3      	ldrh	r3, [r4, #12]
 800a1fe:	065b      	lsls	r3, r3, #25
 800a200:	f53f af7e 	bmi.w	800a100 <_vfiprintf_r+0xf0>
 800a204:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a206:	e77d      	b.n	800a104 <_vfiprintf_r+0xf4>
 800a208:	ab03      	add	r3, sp, #12
 800a20a:	9300      	str	r3, [sp, #0]
 800a20c:	4622      	mov	r2, r4
 800a20e:	4b0a      	ldr	r3, [pc, #40]	; (800a238 <_vfiprintf_r+0x228>)
 800a210:	a904      	add	r1, sp, #16
 800a212:	4630      	mov	r0, r6
 800a214:	f000 f888 	bl	800a328 <_printf_i>
 800a218:	e7ec      	b.n	800a1f4 <_vfiprintf_r+0x1e4>
 800a21a:	bf00      	nop
 800a21c:	0800a7a8 	.word	0x0800a7a8
 800a220:	0800a7e8 	.word	0x0800a7e8
 800a224:	0800a7c8 	.word	0x0800a7c8
 800a228:	0800a788 	.word	0x0800a788
 800a22c:	0800a7ee 	.word	0x0800a7ee
 800a230:	0800a7f2 	.word	0x0800a7f2
 800a234:	00000000 	.word	0x00000000
 800a238:	08009feb 	.word	0x08009feb

0800a23c <_printf_common>:
 800a23c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a240:	4691      	mov	r9, r2
 800a242:	461f      	mov	r7, r3
 800a244:	688a      	ldr	r2, [r1, #8]
 800a246:	690b      	ldr	r3, [r1, #16]
 800a248:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a24c:	4293      	cmp	r3, r2
 800a24e:	bfb8      	it	lt
 800a250:	4613      	movlt	r3, r2
 800a252:	f8c9 3000 	str.w	r3, [r9]
 800a256:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800a25a:	4606      	mov	r6, r0
 800a25c:	460c      	mov	r4, r1
 800a25e:	b112      	cbz	r2, 800a266 <_printf_common+0x2a>
 800a260:	3301      	adds	r3, #1
 800a262:	f8c9 3000 	str.w	r3, [r9]
 800a266:	6823      	ldr	r3, [r4, #0]
 800a268:	0699      	lsls	r1, r3, #26
 800a26a:	bf42      	ittt	mi
 800a26c:	f8d9 3000 	ldrmi.w	r3, [r9]
 800a270:	3302      	addmi	r3, #2
 800a272:	f8c9 3000 	strmi.w	r3, [r9]
 800a276:	6825      	ldr	r5, [r4, #0]
 800a278:	f015 0506 	ands.w	r5, r5, #6
 800a27c:	d107      	bne.n	800a28e <_printf_common+0x52>
 800a27e:	f104 0a19 	add.w	sl, r4, #25
 800a282:	68e3      	ldr	r3, [r4, #12]
 800a284:	f8d9 2000 	ldr.w	r2, [r9]
 800a288:	1a9b      	subs	r3, r3, r2
 800a28a:	42ab      	cmp	r3, r5
 800a28c:	dc28      	bgt.n	800a2e0 <_printf_common+0xa4>
 800a28e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800a292:	6822      	ldr	r2, [r4, #0]
 800a294:	3300      	adds	r3, #0
 800a296:	bf18      	it	ne
 800a298:	2301      	movne	r3, #1
 800a29a:	0692      	lsls	r2, r2, #26
 800a29c:	d42d      	bmi.n	800a2fa <_printf_common+0xbe>
 800a29e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a2a2:	4639      	mov	r1, r7
 800a2a4:	4630      	mov	r0, r6
 800a2a6:	47c0      	blx	r8
 800a2a8:	3001      	adds	r0, #1
 800a2aa:	d020      	beq.n	800a2ee <_printf_common+0xb2>
 800a2ac:	6823      	ldr	r3, [r4, #0]
 800a2ae:	68e5      	ldr	r5, [r4, #12]
 800a2b0:	f8d9 2000 	ldr.w	r2, [r9]
 800a2b4:	f003 0306 	and.w	r3, r3, #6
 800a2b8:	2b04      	cmp	r3, #4
 800a2ba:	bf08      	it	eq
 800a2bc:	1aad      	subeq	r5, r5, r2
 800a2be:	68a3      	ldr	r3, [r4, #8]
 800a2c0:	6922      	ldr	r2, [r4, #16]
 800a2c2:	bf0c      	ite	eq
 800a2c4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a2c8:	2500      	movne	r5, #0
 800a2ca:	4293      	cmp	r3, r2
 800a2cc:	bfc4      	itt	gt
 800a2ce:	1a9b      	subgt	r3, r3, r2
 800a2d0:	18ed      	addgt	r5, r5, r3
 800a2d2:	f04f 0900 	mov.w	r9, #0
 800a2d6:	341a      	adds	r4, #26
 800a2d8:	454d      	cmp	r5, r9
 800a2da:	d11a      	bne.n	800a312 <_printf_common+0xd6>
 800a2dc:	2000      	movs	r0, #0
 800a2de:	e008      	b.n	800a2f2 <_printf_common+0xb6>
 800a2e0:	2301      	movs	r3, #1
 800a2e2:	4652      	mov	r2, sl
 800a2e4:	4639      	mov	r1, r7
 800a2e6:	4630      	mov	r0, r6
 800a2e8:	47c0      	blx	r8
 800a2ea:	3001      	adds	r0, #1
 800a2ec:	d103      	bne.n	800a2f6 <_printf_common+0xba>
 800a2ee:	f04f 30ff 	mov.w	r0, #4294967295
 800a2f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a2f6:	3501      	adds	r5, #1
 800a2f8:	e7c3      	b.n	800a282 <_printf_common+0x46>
 800a2fa:	18e1      	adds	r1, r4, r3
 800a2fc:	1c5a      	adds	r2, r3, #1
 800a2fe:	2030      	movs	r0, #48	; 0x30
 800a300:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a304:	4422      	add	r2, r4
 800a306:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a30a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a30e:	3302      	adds	r3, #2
 800a310:	e7c5      	b.n	800a29e <_printf_common+0x62>
 800a312:	2301      	movs	r3, #1
 800a314:	4622      	mov	r2, r4
 800a316:	4639      	mov	r1, r7
 800a318:	4630      	mov	r0, r6
 800a31a:	47c0      	blx	r8
 800a31c:	3001      	adds	r0, #1
 800a31e:	d0e6      	beq.n	800a2ee <_printf_common+0xb2>
 800a320:	f109 0901 	add.w	r9, r9, #1
 800a324:	e7d8      	b.n	800a2d8 <_printf_common+0x9c>
	...

0800a328 <_printf_i>:
 800a328:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a32c:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800a330:	460c      	mov	r4, r1
 800a332:	7e09      	ldrb	r1, [r1, #24]
 800a334:	b085      	sub	sp, #20
 800a336:	296e      	cmp	r1, #110	; 0x6e
 800a338:	4617      	mov	r7, r2
 800a33a:	4606      	mov	r6, r0
 800a33c:	4698      	mov	r8, r3
 800a33e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a340:	f000 80b3 	beq.w	800a4aa <_printf_i+0x182>
 800a344:	d822      	bhi.n	800a38c <_printf_i+0x64>
 800a346:	2963      	cmp	r1, #99	; 0x63
 800a348:	d036      	beq.n	800a3b8 <_printf_i+0x90>
 800a34a:	d80a      	bhi.n	800a362 <_printf_i+0x3a>
 800a34c:	2900      	cmp	r1, #0
 800a34e:	f000 80b9 	beq.w	800a4c4 <_printf_i+0x19c>
 800a352:	2958      	cmp	r1, #88	; 0x58
 800a354:	f000 8083 	beq.w	800a45e <_printf_i+0x136>
 800a358:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a35c:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800a360:	e032      	b.n	800a3c8 <_printf_i+0xa0>
 800a362:	2964      	cmp	r1, #100	; 0x64
 800a364:	d001      	beq.n	800a36a <_printf_i+0x42>
 800a366:	2969      	cmp	r1, #105	; 0x69
 800a368:	d1f6      	bne.n	800a358 <_printf_i+0x30>
 800a36a:	6820      	ldr	r0, [r4, #0]
 800a36c:	6813      	ldr	r3, [r2, #0]
 800a36e:	0605      	lsls	r5, r0, #24
 800a370:	f103 0104 	add.w	r1, r3, #4
 800a374:	d52a      	bpl.n	800a3cc <_printf_i+0xa4>
 800a376:	681b      	ldr	r3, [r3, #0]
 800a378:	6011      	str	r1, [r2, #0]
 800a37a:	2b00      	cmp	r3, #0
 800a37c:	da03      	bge.n	800a386 <_printf_i+0x5e>
 800a37e:	222d      	movs	r2, #45	; 0x2d
 800a380:	425b      	negs	r3, r3
 800a382:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800a386:	486f      	ldr	r0, [pc, #444]	; (800a544 <_printf_i+0x21c>)
 800a388:	220a      	movs	r2, #10
 800a38a:	e039      	b.n	800a400 <_printf_i+0xd8>
 800a38c:	2973      	cmp	r1, #115	; 0x73
 800a38e:	f000 809d 	beq.w	800a4cc <_printf_i+0x1a4>
 800a392:	d808      	bhi.n	800a3a6 <_printf_i+0x7e>
 800a394:	296f      	cmp	r1, #111	; 0x6f
 800a396:	d020      	beq.n	800a3da <_printf_i+0xb2>
 800a398:	2970      	cmp	r1, #112	; 0x70
 800a39a:	d1dd      	bne.n	800a358 <_printf_i+0x30>
 800a39c:	6823      	ldr	r3, [r4, #0]
 800a39e:	f043 0320 	orr.w	r3, r3, #32
 800a3a2:	6023      	str	r3, [r4, #0]
 800a3a4:	e003      	b.n	800a3ae <_printf_i+0x86>
 800a3a6:	2975      	cmp	r1, #117	; 0x75
 800a3a8:	d017      	beq.n	800a3da <_printf_i+0xb2>
 800a3aa:	2978      	cmp	r1, #120	; 0x78
 800a3ac:	d1d4      	bne.n	800a358 <_printf_i+0x30>
 800a3ae:	2378      	movs	r3, #120	; 0x78
 800a3b0:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800a3b4:	4864      	ldr	r0, [pc, #400]	; (800a548 <_printf_i+0x220>)
 800a3b6:	e055      	b.n	800a464 <_printf_i+0x13c>
 800a3b8:	6813      	ldr	r3, [r2, #0]
 800a3ba:	1d19      	adds	r1, r3, #4
 800a3bc:	681b      	ldr	r3, [r3, #0]
 800a3be:	6011      	str	r1, [r2, #0]
 800a3c0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a3c4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a3c8:	2301      	movs	r3, #1
 800a3ca:	e08c      	b.n	800a4e6 <_printf_i+0x1be>
 800a3cc:	681b      	ldr	r3, [r3, #0]
 800a3ce:	6011      	str	r1, [r2, #0]
 800a3d0:	f010 0f40 	tst.w	r0, #64	; 0x40
 800a3d4:	bf18      	it	ne
 800a3d6:	b21b      	sxthne	r3, r3
 800a3d8:	e7cf      	b.n	800a37a <_printf_i+0x52>
 800a3da:	6813      	ldr	r3, [r2, #0]
 800a3dc:	6825      	ldr	r5, [r4, #0]
 800a3de:	1d18      	adds	r0, r3, #4
 800a3e0:	6010      	str	r0, [r2, #0]
 800a3e2:	0628      	lsls	r0, r5, #24
 800a3e4:	d501      	bpl.n	800a3ea <_printf_i+0xc2>
 800a3e6:	681b      	ldr	r3, [r3, #0]
 800a3e8:	e002      	b.n	800a3f0 <_printf_i+0xc8>
 800a3ea:	0668      	lsls	r0, r5, #25
 800a3ec:	d5fb      	bpl.n	800a3e6 <_printf_i+0xbe>
 800a3ee:	881b      	ldrh	r3, [r3, #0]
 800a3f0:	4854      	ldr	r0, [pc, #336]	; (800a544 <_printf_i+0x21c>)
 800a3f2:	296f      	cmp	r1, #111	; 0x6f
 800a3f4:	bf14      	ite	ne
 800a3f6:	220a      	movne	r2, #10
 800a3f8:	2208      	moveq	r2, #8
 800a3fa:	2100      	movs	r1, #0
 800a3fc:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a400:	6865      	ldr	r5, [r4, #4]
 800a402:	60a5      	str	r5, [r4, #8]
 800a404:	2d00      	cmp	r5, #0
 800a406:	f2c0 8095 	blt.w	800a534 <_printf_i+0x20c>
 800a40a:	6821      	ldr	r1, [r4, #0]
 800a40c:	f021 0104 	bic.w	r1, r1, #4
 800a410:	6021      	str	r1, [r4, #0]
 800a412:	2b00      	cmp	r3, #0
 800a414:	d13d      	bne.n	800a492 <_printf_i+0x16a>
 800a416:	2d00      	cmp	r5, #0
 800a418:	f040 808e 	bne.w	800a538 <_printf_i+0x210>
 800a41c:	4665      	mov	r5, ip
 800a41e:	2a08      	cmp	r2, #8
 800a420:	d10b      	bne.n	800a43a <_printf_i+0x112>
 800a422:	6823      	ldr	r3, [r4, #0]
 800a424:	07db      	lsls	r3, r3, #31
 800a426:	d508      	bpl.n	800a43a <_printf_i+0x112>
 800a428:	6923      	ldr	r3, [r4, #16]
 800a42a:	6862      	ldr	r2, [r4, #4]
 800a42c:	429a      	cmp	r2, r3
 800a42e:	bfde      	ittt	le
 800a430:	2330      	movle	r3, #48	; 0x30
 800a432:	f805 3c01 	strble.w	r3, [r5, #-1]
 800a436:	f105 35ff 	addle.w	r5, r5, #4294967295
 800a43a:	ebac 0305 	sub.w	r3, ip, r5
 800a43e:	6123      	str	r3, [r4, #16]
 800a440:	f8cd 8000 	str.w	r8, [sp]
 800a444:	463b      	mov	r3, r7
 800a446:	aa03      	add	r2, sp, #12
 800a448:	4621      	mov	r1, r4
 800a44a:	4630      	mov	r0, r6
 800a44c:	f7ff fef6 	bl	800a23c <_printf_common>
 800a450:	3001      	adds	r0, #1
 800a452:	d14d      	bne.n	800a4f0 <_printf_i+0x1c8>
 800a454:	f04f 30ff 	mov.w	r0, #4294967295
 800a458:	b005      	add	sp, #20
 800a45a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a45e:	4839      	ldr	r0, [pc, #228]	; (800a544 <_printf_i+0x21c>)
 800a460:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800a464:	6813      	ldr	r3, [r2, #0]
 800a466:	6821      	ldr	r1, [r4, #0]
 800a468:	1d1d      	adds	r5, r3, #4
 800a46a:	681b      	ldr	r3, [r3, #0]
 800a46c:	6015      	str	r5, [r2, #0]
 800a46e:	060a      	lsls	r2, r1, #24
 800a470:	d50b      	bpl.n	800a48a <_printf_i+0x162>
 800a472:	07ca      	lsls	r2, r1, #31
 800a474:	bf44      	itt	mi
 800a476:	f041 0120 	orrmi.w	r1, r1, #32
 800a47a:	6021      	strmi	r1, [r4, #0]
 800a47c:	b91b      	cbnz	r3, 800a486 <_printf_i+0x15e>
 800a47e:	6822      	ldr	r2, [r4, #0]
 800a480:	f022 0220 	bic.w	r2, r2, #32
 800a484:	6022      	str	r2, [r4, #0]
 800a486:	2210      	movs	r2, #16
 800a488:	e7b7      	b.n	800a3fa <_printf_i+0xd2>
 800a48a:	064d      	lsls	r5, r1, #25
 800a48c:	bf48      	it	mi
 800a48e:	b29b      	uxthmi	r3, r3
 800a490:	e7ef      	b.n	800a472 <_printf_i+0x14a>
 800a492:	4665      	mov	r5, ip
 800a494:	fbb3 f1f2 	udiv	r1, r3, r2
 800a498:	fb02 3311 	mls	r3, r2, r1, r3
 800a49c:	5cc3      	ldrb	r3, [r0, r3]
 800a49e:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800a4a2:	460b      	mov	r3, r1
 800a4a4:	2900      	cmp	r1, #0
 800a4a6:	d1f5      	bne.n	800a494 <_printf_i+0x16c>
 800a4a8:	e7b9      	b.n	800a41e <_printf_i+0xf6>
 800a4aa:	6813      	ldr	r3, [r2, #0]
 800a4ac:	6825      	ldr	r5, [r4, #0]
 800a4ae:	6961      	ldr	r1, [r4, #20]
 800a4b0:	1d18      	adds	r0, r3, #4
 800a4b2:	6010      	str	r0, [r2, #0]
 800a4b4:	0628      	lsls	r0, r5, #24
 800a4b6:	681b      	ldr	r3, [r3, #0]
 800a4b8:	d501      	bpl.n	800a4be <_printf_i+0x196>
 800a4ba:	6019      	str	r1, [r3, #0]
 800a4bc:	e002      	b.n	800a4c4 <_printf_i+0x19c>
 800a4be:	066a      	lsls	r2, r5, #25
 800a4c0:	d5fb      	bpl.n	800a4ba <_printf_i+0x192>
 800a4c2:	8019      	strh	r1, [r3, #0]
 800a4c4:	2300      	movs	r3, #0
 800a4c6:	6123      	str	r3, [r4, #16]
 800a4c8:	4665      	mov	r5, ip
 800a4ca:	e7b9      	b.n	800a440 <_printf_i+0x118>
 800a4cc:	6813      	ldr	r3, [r2, #0]
 800a4ce:	1d19      	adds	r1, r3, #4
 800a4d0:	6011      	str	r1, [r2, #0]
 800a4d2:	681d      	ldr	r5, [r3, #0]
 800a4d4:	6862      	ldr	r2, [r4, #4]
 800a4d6:	2100      	movs	r1, #0
 800a4d8:	4628      	mov	r0, r5
 800a4da:	f7f5 fe79 	bl	80001d0 <memchr>
 800a4de:	b108      	cbz	r0, 800a4e4 <_printf_i+0x1bc>
 800a4e0:	1b40      	subs	r0, r0, r5
 800a4e2:	6060      	str	r0, [r4, #4]
 800a4e4:	6863      	ldr	r3, [r4, #4]
 800a4e6:	6123      	str	r3, [r4, #16]
 800a4e8:	2300      	movs	r3, #0
 800a4ea:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a4ee:	e7a7      	b.n	800a440 <_printf_i+0x118>
 800a4f0:	6923      	ldr	r3, [r4, #16]
 800a4f2:	462a      	mov	r2, r5
 800a4f4:	4639      	mov	r1, r7
 800a4f6:	4630      	mov	r0, r6
 800a4f8:	47c0      	blx	r8
 800a4fa:	3001      	adds	r0, #1
 800a4fc:	d0aa      	beq.n	800a454 <_printf_i+0x12c>
 800a4fe:	6823      	ldr	r3, [r4, #0]
 800a500:	079b      	lsls	r3, r3, #30
 800a502:	d413      	bmi.n	800a52c <_printf_i+0x204>
 800a504:	68e0      	ldr	r0, [r4, #12]
 800a506:	9b03      	ldr	r3, [sp, #12]
 800a508:	4298      	cmp	r0, r3
 800a50a:	bfb8      	it	lt
 800a50c:	4618      	movlt	r0, r3
 800a50e:	e7a3      	b.n	800a458 <_printf_i+0x130>
 800a510:	2301      	movs	r3, #1
 800a512:	464a      	mov	r2, r9
 800a514:	4639      	mov	r1, r7
 800a516:	4630      	mov	r0, r6
 800a518:	47c0      	blx	r8
 800a51a:	3001      	adds	r0, #1
 800a51c:	d09a      	beq.n	800a454 <_printf_i+0x12c>
 800a51e:	3501      	adds	r5, #1
 800a520:	68e3      	ldr	r3, [r4, #12]
 800a522:	9a03      	ldr	r2, [sp, #12]
 800a524:	1a9b      	subs	r3, r3, r2
 800a526:	42ab      	cmp	r3, r5
 800a528:	dcf2      	bgt.n	800a510 <_printf_i+0x1e8>
 800a52a:	e7eb      	b.n	800a504 <_printf_i+0x1dc>
 800a52c:	2500      	movs	r5, #0
 800a52e:	f104 0919 	add.w	r9, r4, #25
 800a532:	e7f5      	b.n	800a520 <_printf_i+0x1f8>
 800a534:	2b00      	cmp	r3, #0
 800a536:	d1ac      	bne.n	800a492 <_printf_i+0x16a>
 800a538:	7803      	ldrb	r3, [r0, #0]
 800a53a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a53e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a542:	e76c      	b.n	800a41e <_printf_i+0xf6>
 800a544:	0800a7f9 	.word	0x0800a7f9
 800a548:	0800a80a 	.word	0x0800a80a

0800a54c <__sread>:
 800a54c:	b510      	push	{r4, lr}
 800a54e:	460c      	mov	r4, r1
 800a550:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a554:	f000 f894 	bl	800a680 <_read_r>
 800a558:	2800      	cmp	r0, #0
 800a55a:	bfab      	itete	ge
 800a55c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800a55e:	89a3      	ldrhlt	r3, [r4, #12]
 800a560:	181b      	addge	r3, r3, r0
 800a562:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800a566:	bfac      	ite	ge
 800a568:	6563      	strge	r3, [r4, #84]	; 0x54
 800a56a:	81a3      	strhlt	r3, [r4, #12]
 800a56c:	bd10      	pop	{r4, pc}

0800a56e <__swrite>:
 800a56e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a572:	461f      	mov	r7, r3
 800a574:	898b      	ldrh	r3, [r1, #12]
 800a576:	05db      	lsls	r3, r3, #23
 800a578:	4605      	mov	r5, r0
 800a57a:	460c      	mov	r4, r1
 800a57c:	4616      	mov	r6, r2
 800a57e:	d505      	bpl.n	800a58c <__swrite+0x1e>
 800a580:	2302      	movs	r3, #2
 800a582:	2200      	movs	r2, #0
 800a584:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a588:	f000 f868 	bl	800a65c <_lseek_r>
 800a58c:	89a3      	ldrh	r3, [r4, #12]
 800a58e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a592:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a596:	81a3      	strh	r3, [r4, #12]
 800a598:	4632      	mov	r2, r6
 800a59a:	463b      	mov	r3, r7
 800a59c:	4628      	mov	r0, r5
 800a59e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a5a2:	f000 b817 	b.w	800a5d4 <_write_r>

0800a5a6 <__sseek>:
 800a5a6:	b510      	push	{r4, lr}
 800a5a8:	460c      	mov	r4, r1
 800a5aa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a5ae:	f000 f855 	bl	800a65c <_lseek_r>
 800a5b2:	1c43      	adds	r3, r0, #1
 800a5b4:	89a3      	ldrh	r3, [r4, #12]
 800a5b6:	bf15      	itete	ne
 800a5b8:	6560      	strne	r0, [r4, #84]	; 0x54
 800a5ba:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800a5be:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800a5c2:	81a3      	strheq	r3, [r4, #12]
 800a5c4:	bf18      	it	ne
 800a5c6:	81a3      	strhne	r3, [r4, #12]
 800a5c8:	bd10      	pop	{r4, pc}

0800a5ca <__sclose>:
 800a5ca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a5ce:	f000 b813 	b.w	800a5f8 <_close_r>
	...

0800a5d4 <_write_r>:
 800a5d4:	b538      	push	{r3, r4, r5, lr}
 800a5d6:	4c07      	ldr	r4, [pc, #28]	; (800a5f4 <_write_r+0x20>)
 800a5d8:	4605      	mov	r5, r0
 800a5da:	4608      	mov	r0, r1
 800a5dc:	4611      	mov	r1, r2
 800a5de:	2200      	movs	r2, #0
 800a5e0:	6022      	str	r2, [r4, #0]
 800a5e2:	461a      	mov	r2, r3
 800a5e4:	f7f6 f9b9 	bl	800095a <_write>
 800a5e8:	1c43      	adds	r3, r0, #1
 800a5ea:	d102      	bne.n	800a5f2 <_write_r+0x1e>
 800a5ec:	6823      	ldr	r3, [r4, #0]
 800a5ee:	b103      	cbz	r3, 800a5f2 <_write_r+0x1e>
 800a5f0:	602b      	str	r3, [r5, #0]
 800a5f2:	bd38      	pop	{r3, r4, r5, pc}
 800a5f4:	20001384 	.word	0x20001384

0800a5f8 <_close_r>:
 800a5f8:	b538      	push	{r3, r4, r5, lr}
 800a5fa:	4c06      	ldr	r4, [pc, #24]	; (800a614 <_close_r+0x1c>)
 800a5fc:	2300      	movs	r3, #0
 800a5fe:	4605      	mov	r5, r0
 800a600:	4608      	mov	r0, r1
 800a602:	6023      	str	r3, [r4, #0]
 800a604:	f7f6 f9c5 	bl	8000992 <_close>
 800a608:	1c43      	adds	r3, r0, #1
 800a60a:	d102      	bne.n	800a612 <_close_r+0x1a>
 800a60c:	6823      	ldr	r3, [r4, #0]
 800a60e:	b103      	cbz	r3, 800a612 <_close_r+0x1a>
 800a610:	602b      	str	r3, [r5, #0]
 800a612:	bd38      	pop	{r3, r4, r5, pc}
 800a614:	20001384 	.word	0x20001384

0800a618 <_fstat_r>:
 800a618:	b538      	push	{r3, r4, r5, lr}
 800a61a:	4c07      	ldr	r4, [pc, #28]	; (800a638 <_fstat_r+0x20>)
 800a61c:	2300      	movs	r3, #0
 800a61e:	4605      	mov	r5, r0
 800a620:	4608      	mov	r0, r1
 800a622:	4611      	mov	r1, r2
 800a624:	6023      	str	r3, [r4, #0]
 800a626:	f7f6 f9c0 	bl	80009aa <_fstat>
 800a62a:	1c43      	adds	r3, r0, #1
 800a62c:	d102      	bne.n	800a634 <_fstat_r+0x1c>
 800a62e:	6823      	ldr	r3, [r4, #0]
 800a630:	b103      	cbz	r3, 800a634 <_fstat_r+0x1c>
 800a632:	602b      	str	r3, [r5, #0]
 800a634:	bd38      	pop	{r3, r4, r5, pc}
 800a636:	bf00      	nop
 800a638:	20001384 	.word	0x20001384

0800a63c <_isatty_r>:
 800a63c:	b538      	push	{r3, r4, r5, lr}
 800a63e:	4c06      	ldr	r4, [pc, #24]	; (800a658 <_isatty_r+0x1c>)
 800a640:	2300      	movs	r3, #0
 800a642:	4605      	mov	r5, r0
 800a644:	4608      	mov	r0, r1
 800a646:	6023      	str	r3, [r4, #0]
 800a648:	f7f6 f9bf 	bl	80009ca <_isatty>
 800a64c:	1c43      	adds	r3, r0, #1
 800a64e:	d102      	bne.n	800a656 <_isatty_r+0x1a>
 800a650:	6823      	ldr	r3, [r4, #0]
 800a652:	b103      	cbz	r3, 800a656 <_isatty_r+0x1a>
 800a654:	602b      	str	r3, [r5, #0]
 800a656:	bd38      	pop	{r3, r4, r5, pc}
 800a658:	20001384 	.word	0x20001384

0800a65c <_lseek_r>:
 800a65c:	b538      	push	{r3, r4, r5, lr}
 800a65e:	4c07      	ldr	r4, [pc, #28]	; (800a67c <_lseek_r+0x20>)
 800a660:	4605      	mov	r5, r0
 800a662:	4608      	mov	r0, r1
 800a664:	4611      	mov	r1, r2
 800a666:	2200      	movs	r2, #0
 800a668:	6022      	str	r2, [r4, #0]
 800a66a:	461a      	mov	r2, r3
 800a66c:	f7f6 f9b8 	bl	80009e0 <_lseek>
 800a670:	1c43      	adds	r3, r0, #1
 800a672:	d102      	bne.n	800a67a <_lseek_r+0x1e>
 800a674:	6823      	ldr	r3, [r4, #0]
 800a676:	b103      	cbz	r3, 800a67a <_lseek_r+0x1e>
 800a678:	602b      	str	r3, [r5, #0]
 800a67a:	bd38      	pop	{r3, r4, r5, pc}
 800a67c:	20001384 	.word	0x20001384

0800a680 <_read_r>:
 800a680:	b538      	push	{r3, r4, r5, lr}
 800a682:	4c07      	ldr	r4, [pc, #28]	; (800a6a0 <_read_r+0x20>)
 800a684:	4605      	mov	r5, r0
 800a686:	4608      	mov	r0, r1
 800a688:	4611      	mov	r1, r2
 800a68a:	2200      	movs	r2, #0
 800a68c:	6022      	str	r2, [r4, #0]
 800a68e:	461a      	mov	r2, r3
 800a690:	f7f6 f946 	bl	8000920 <_read>
 800a694:	1c43      	adds	r3, r0, #1
 800a696:	d102      	bne.n	800a69e <_read_r+0x1e>
 800a698:	6823      	ldr	r3, [r4, #0]
 800a69a:	b103      	cbz	r3, 800a69e <_read_r+0x1e>
 800a69c:	602b      	str	r3, [r5, #0]
 800a69e:	bd38      	pop	{r3, r4, r5, pc}
 800a6a0:	20001384 	.word	0x20001384

0800a6a4 <_init>:
 800a6a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a6a6:	bf00      	nop
 800a6a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a6aa:	bc08      	pop	{r3}
 800a6ac:	469e      	mov	lr, r3
 800a6ae:	4770      	bx	lr

0800a6b0 <_fini>:
 800a6b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a6b2:	bf00      	nop
 800a6b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a6b6:	bc08      	pop	{r3}
 800a6b8:	469e      	mov	lr, r3
 800a6ba:	4770      	bx	lr
