
stm32f405rg_fw.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000994c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000114  08009adc  08009adc  00019adc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009bf0  08009bf0  00020208  2**0
                  CONTENTS
  4 .ARM          00000008  08009bf0  08009bf0  00019bf0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009bf8  08009bf8  00020208  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009bf8  08009bf8  00019bf8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009bfc  08009bfc  00019bfc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000208  20000000  08009c00  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001100  20000208  08009e08  00020208  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001308  08009e08  00021308  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020208  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001edb3  00000000  00000000  00020238  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00004954  00000000  00000000  0003efeb  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001270  00000000  00000000  00043940  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001038  00000000  00000000  00044bb0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00025e2c  00000000  00000000  00045be8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00019191  00000000  00000000  0006ba14  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000c2a20  00000000  00000000  00084ba5  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001475c5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004f74  00000000  00000000  00147640  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000208 	.word	0x20000208
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08009ac4 	.word	0x08009ac4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000020c 	.word	0x2000020c
 80001cc:	08009ac4 	.word	0x08009ac4

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b972 	b.w	800056c <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9e08      	ldr	r6, [sp, #32]
 80002a6:	4604      	mov	r4, r0
 80002a8:	4688      	mov	r8, r1
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	d14b      	bne.n	8000346 <__udivmoddi4+0xa6>
 80002ae:	428a      	cmp	r2, r1
 80002b0:	4615      	mov	r5, r2
 80002b2:	d967      	bls.n	8000384 <__udivmoddi4+0xe4>
 80002b4:	fab2 f282 	clz	r2, r2
 80002b8:	b14a      	cbz	r2, 80002ce <__udivmoddi4+0x2e>
 80002ba:	f1c2 0720 	rsb	r7, r2, #32
 80002be:	fa01 f302 	lsl.w	r3, r1, r2
 80002c2:	fa20 f707 	lsr.w	r7, r0, r7
 80002c6:	4095      	lsls	r5, r2
 80002c8:	ea47 0803 	orr.w	r8, r7, r3
 80002cc:	4094      	lsls	r4, r2
 80002ce:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002d2:	0c23      	lsrs	r3, r4, #16
 80002d4:	fbb8 f7fe 	udiv	r7, r8, lr
 80002d8:	fa1f fc85 	uxth.w	ip, r5
 80002dc:	fb0e 8817 	mls	r8, lr, r7, r8
 80002e0:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002e4:	fb07 f10c 	mul.w	r1, r7, ip
 80002e8:	4299      	cmp	r1, r3
 80002ea:	d909      	bls.n	8000300 <__udivmoddi4+0x60>
 80002ec:	18eb      	adds	r3, r5, r3
 80002ee:	f107 30ff 	add.w	r0, r7, #4294967295
 80002f2:	f080 811b 	bcs.w	800052c <__udivmoddi4+0x28c>
 80002f6:	4299      	cmp	r1, r3
 80002f8:	f240 8118 	bls.w	800052c <__udivmoddi4+0x28c>
 80002fc:	3f02      	subs	r7, #2
 80002fe:	442b      	add	r3, r5
 8000300:	1a5b      	subs	r3, r3, r1
 8000302:	b2a4      	uxth	r4, r4
 8000304:	fbb3 f0fe 	udiv	r0, r3, lr
 8000308:	fb0e 3310 	mls	r3, lr, r0, r3
 800030c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000310:	fb00 fc0c 	mul.w	ip, r0, ip
 8000314:	45a4      	cmp	ip, r4
 8000316:	d909      	bls.n	800032c <__udivmoddi4+0x8c>
 8000318:	192c      	adds	r4, r5, r4
 800031a:	f100 33ff 	add.w	r3, r0, #4294967295
 800031e:	f080 8107 	bcs.w	8000530 <__udivmoddi4+0x290>
 8000322:	45a4      	cmp	ip, r4
 8000324:	f240 8104 	bls.w	8000530 <__udivmoddi4+0x290>
 8000328:	3802      	subs	r0, #2
 800032a:	442c      	add	r4, r5
 800032c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000330:	eba4 040c 	sub.w	r4, r4, ip
 8000334:	2700      	movs	r7, #0
 8000336:	b11e      	cbz	r6, 8000340 <__udivmoddi4+0xa0>
 8000338:	40d4      	lsrs	r4, r2
 800033a:	2300      	movs	r3, #0
 800033c:	e9c6 4300 	strd	r4, r3, [r6]
 8000340:	4639      	mov	r1, r7
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	428b      	cmp	r3, r1
 8000348:	d909      	bls.n	800035e <__udivmoddi4+0xbe>
 800034a:	2e00      	cmp	r6, #0
 800034c:	f000 80eb 	beq.w	8000526 <__udivmoddi4+0x286>
 8000350:	2700      	movs	r7, #0
 8000352:	e9c6 0100 	strd	r0, r1, [r6]
 8000356:	4638      	mov	r0, r7
 8000358:	4639      	mov	r1, r7
 800035a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035e:	fab3 f783 	clz	r7, r3
 8000362:	2f00      	cmp	r7, #0
 8000364:	d147      	bne.n	80003f6 <__udivmoddi4+0x156>
 8000366:	428b      	cmp	r3, r1
 8000368:	d302      	bcc.n	8000370 <__udivmoddi4+0xd0>
 800036a:	4282      	cmp	r2, r0
 800036c:	f200 80fa 	bhi.w	8000564 <__udivmoddi4+0x2c4>
 8000370:	1a84      	subs	r4, r0, r2
 8000372:	eb61 0303 	sbc.w	r3, r1, r3
 8000376:	2001      	movs	r0, #1
 8000378:	4698      	mov	r8, r3
 800037a:	2e00      	cmp	r6, #0
 800037c:	d0e0      	beq.n	8000340 <__udivmoddi4+0xa0>
 800037e:	e9c6 4800 	strd	r4, r8, [r6]
 8000382:	e7dd      	b.n	8000340 <__udivmoddi4+0xa0>
 8000384:	b902      	cbnz	r2, 8000388 <__udivmoddi4+0xe8>
 8000386:	deff      	udf	#255	; 0xff
 8000388:	fab2 f282 	clz	r2, r2
 800038c:	2a00      	cmp	r2, #0
 800038e:	f040 808f 	bne.w	80004b0 <__udivmoddi4+0x210>
 8000392:	1b49      	subs	r1, r1, r5
 8000394:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000398:	fa1f f885 	uxth.w	r8, r5
 800039c:	2701      	movs	r7, #1
 800039e:	fbb1 fcfe 	udiv	ip, r1, lr
 80003a2:	0c23      	lsrs	r3, r4, #16
 80003a4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003a8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003ac:	fb08 f10c 	mul.w	r1, r8, ip
 80003b0:	4299      	cmp	r1, r3
 80003b2:	d907      	bls.n	80003c4 <__udivmoddi4+0x124>
 80003b4:	18eb      	adds	r3, r5, r3
 80003b6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003ba:	d202      	bcs.n	80003c2 <__udivmoddi4+0x122>
 80003bc:	4299      	cmp	r1, r3
 80003be:	f200 80cd 	bhi.w	800055c <__udivmoddi4+0x2bc>
 80003c2:	4684      	mov	ip, r0
 80003c4:	1a59      	subs	r1, r3, r1
 80003c6:	b2a3      	uxth	r3, r4
 80003c8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003cc:	fb0e 1410 	mls	r4, lr, r0, r1
 80003d0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80003d4:	fb08 f800 	mul.w	r8, r8, r0
 80003d8:	45a0      	cmp	r8, r4
 80003da:	d907      	bls.n	80003ec <__udivmoddi4+0x14c>
 80003dc:	192c      	adds	r4, r5, r4
 80003de:	f100 33ff 	add.w	r3, r0, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x14a>
 80003e4:	45a0      	cmp	r8, r4
 80003e6:	f200 80b6 	bhi.w	8000556 <__udivmoddi4+0x2b6>
 80003ea:	4618      	mov	r0, r3
 80003ec:	eba4 0408 	sub.w	r4, r4, r8
 80003f0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003f4:	e79f      	b.n	8000336 <__udivmoddi4+0x96>
 80003f6:	f1c7 0c20 	rsb	ip, r7, #32
 80003fa:	40bb      	lsls	r3, r7
 80003fc:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000400:	ea4e 0e03 	orr.w	lr, lr, r3
 8000404:	fa01 f407 	lsl.w	r4, r1, r7
 8000408:	fa20 f50c 	lsr.w	r5, r0, ip
 800040c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000410:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000414:	4325      	orrs	r5, r4
 8000416:	fbb3 f9f8 	udiv	r9, r3, r8
 800041a:	0c2c      	lsrs	r4, r5, #16
 800041c:	fb08 3319 	mls	r3, r8, r9, r3
 8000420:	fa1f fa8e 	uxth.w	sl, lr
 8000424:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000428:	fb09 f40a 	mul.w	r4, r9, sl
 800042c:	429c      	cmp	r4, r3
 800042e:	fa02 f207 	lsl.w	r2, r2, r7
 8000432:	fa00 f107 	lsl.w	r1, r0, r7
 8000436:	d90b      	bls.n	8000450 <__udivmoddi4+0x1b0>
 8000438:	eb1e 0303 	adds.w	r3, lr, r3
 800043c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000440:	f080 8087 	bcs.w	8000552 <__udivmoddi4+0x2b2>
 8000444:	429c      	cmp	r4, r3
 8000446:	f240 8084 	bls.w	8000552 <__udivmoddi4+0x2b2>
 800044a:	f1a9 0902 	sub.w	r9, r9, #2
 800044e:	4473      	add	r3, lr
 8000450:	1b1b      	subs	r3, r3, r4
 8000452:	b2ad      	uxth	r5, r5
 8000454:	fbb3 f0f8 	udiv	r0, r3, r8
 8000458:	fb08 3310 	mls	r3, r8, r0, r3
 800045c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000460:	fb00 fa0a 	mul.w	sl, r0, sl
 8000464:	45a2      	cmp	sl, r4
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x1da>
 8000468:	eb1e 0404 	adds.w	r4, lr, r4
 800046c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000470:	d26b      	bcs.n	800054a <__udivmoddi4+0x2aa>
 8000472:	45a2      	cmp	sl, r4
 8000474:	d969      	bls.n	800054a <__udivmoddi4+0x2aa>
 8000476:	3802      	subs	r0, #2
 8000478:	4474      	add	r4, lr
 800047a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800047e:	fba0 8902 	umull	r8, r9, r0, r2
 8000482:	eba4 040a 	sub.w	r4, r4, sl
 8000486:	454c      	cmp	r4, r9
 8000488:	46c2      	mov	sl, r8
 800048a:	464b      	mov	r3, r9
 800048c:	d354      	bcc.n	8000538 <__udivmoddi4+0x298>
 800048e:	d051      	beq.n	8000534 <__udivmoddi4+0x294>
 8000490:	2e00      	cmp	r6, #0
 8000492:	d069      	beq.n	8000568 <__udivmoddi4+0x2c8>
 8000494:	ebb1 050a 	subs.w	r5, r1, sl
 8000498:	eb64 0403 	sbc.w	r4, r4, r3
 800049c:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004a0:	40fd      	lsrs	r5, r7
 80004a2:	40fc      	lsrs	r4, r7
 80004a4:	ea4c 0505 	orr.w	r5, ip, r5
 80004a8:	e9c6 5400 	strd	r5, r4, [r6]
 80004ac:	2700      	movs	r7, #0
 80004ae:	e747      	b.n	8000340 <__udivmoddi4+0xa0>
 80004b0:	f1c2 0320 	rsb	r3, r2, #32
 80004b4:	fa20 f703 	lsr.w	r7, r0, r3
 80004b8:	4095      	lsls	r5, r2
 80004ba:	fa01 f002 	lsl.w	r0, r1, r2
 80004be:	fa21 f303 	lsr.w	r3, r1, r3
 80004c2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004c6:	4338      	orrs	r0, r7
 80004c8:	0c01      	lsrs	r1, r0, #16
 80004ca:	fbb3 f7fe 	udiv	r7, r3, lr
 80004ce:	fa1f f885 	uxth.w	r8, r5
 80004d2:	fb0e 3317 	mls	r3, lr, r7, r3
 80004d6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004da:	fb07 f308 	mul.w	r3, r7, r8
 80004de:	428b      	cmp	r3, r1
 80004e0:	fa04 f402 	lsl.w	r4, r4, r2
 80004e4:	d907      	bls.n	80004f6 <__udivmoddi4+0x256>
 80004e6:	1869      	adds	r1, r5, r1
 80004e8:	f107 3cff 	add.w	ip, r7, #4294967295
 80004ec:	d22f      	bcs.n	800054e <__udivmoddi4+0x2ae>
 80004ee:	428b      	cmp	r3, r1
 80004f0:	d92d      	bls.n	800054e <__udivmoddi4+0x2ae>
 80004f2:	3f02      	subs	r7, #2
 80004f4:	4429      	add	r1, r5
 80004f6:	1acb      	subs	r3, r1, r3
 80004f8:	b281      	uxth	r1, r0
 80004fa:	fbb3 f0fe 	udiv	r0, r3, lr
 80004fe:	fb0e 3310 	mls	r3, lr, r0, r3
 8000502:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000506:	fb00 f308 	mul.w	r3, r0, r8
 800050a:	428b      	cmp	r3, r1
 800050c:	d907      	bls.n	800051e <__udivmoddi4+0x27e>
 800050e:	1869      	adds	r1, r5, r1
 8000510:	f100 3cff 	add.w	ip, r0, #4294967295
 8000514:	d217      	bcs.n	8000546 <__udivmoddi4+0x2a6>
 8000516:	428b      	cmp	r3, r1
 8000518:	d915      	bls.n	8000546 <__udivmoddi4+0x2a6>
 800051a:	3802      	subs	r0, #2
 800051c:	4429      	add	r1, r5
 800051e:	1ac9      	subs	r1, r1, r3
 8000520:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000524:	e73b      	b.n	800039e <__udivmoddi4+0xfe>
 8000526:	4637      	mov	r7, r6
 8000528:	4630      	mov	r0, r6
 800052a:	e709      	b.n	8000340 <__udivmoddi4+0xa0>
 800052c:	4607      	mov	r7, r0
 800052e:	e6e7      	b.n	8000300 <__udivmoddi4+0x60>
 8000530:	4618      	mov	r0, r3
 8000532:	e6fb      	b.n	800032c <__udivmoddi4+0x8c>
 8000534:	4541      	cmp	r1, r8
 8000536:	d2ab      	bcs.n	8000490 <__udivmoddi4+0x1f0>
 8000538:	ebb8 0a02 	subs.w	sl, r8, r2
 800053c:	eb69 020e 	sbc.w	r2, r9, lr
 8000540:	3801      	subs	r0, #1
 8000542:	4613      	mov	r3, r2
 8000544:	e7a4      	b.n	8000490 <__udivmoddi4+0x1f0>
 8000546:	4660      	mov	r0, ip
 8000548:	e7e9      	b.n	800051e <__udivmoddi4+0x27e>
 800054a:	4618      	mov	r0, r3
 800054c:	e795      	b.n	800047a <__udivmoddi4+0x1da>
 800054e:	4667      	mov	r7, ip
 8000550:	e7d1      	b.n	80004f6 <__udivmoddi4+0x256>
 8000552:	4681      	mov	r9, r0
 8000554:	e77c      	b.n	8000450 <__udivmoddi4+0x1b0>
 8000556:	3802      	subs	r0, #2
 8000558:	442c      	add	r4, r5
 800055a:	e747      	b.n	80003ec <__udivmoddi4+0x14c>
 800055c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000560:	442b      	add	r3, r5
 8000562:	e72f      	b.n	80003c4 <__udivmoddi4+0x124>
 8000564:	4638      	mov	r0, r7
 8000566:	e708      	b.n	800037a <__udivmoddi4+0xda>
 8000568:	4637      	mov	r7, r6
 800056a:	e6e9      	b.n	8000340 <__udivmoddi4+0xa0>

0800056c <__aeabi_idiv0>:
 800056c:	4770      	bx	lr
 800056e:	bf00      	nop

08000570 <apInit>:
 */

#include "ap.h"

void apInit(void)
{
 8000570:	b580      	push	{r7, lr}
 8000572:	af00      	add	r7, sp, #0

  uartOpen(_DEF_UART1, 57600);        // USB
 8000574:	f44f 4161 	mov.w	r1, #57600	; 0xe100
 8000578:	2000      	movs	r0, #0
 800057a:	f000 fbc3 	bl	8000d04 <uartOpen>
  uartOpen(_DEF_UART2, 57600);        // UART
 800057e:	f44f 4161 	mov.w	r1, #57600	; 0xe100
 8000582:	2001      	movs	r0, #1
 8000584:	f000 fbbe 	bl	8000d04 <uartOpen>

}
 8000588:	bf00      	nop
 800058a:	bd80      	pop	{r7, pc}

0800058c <apMain>:

void apMain(void)
{
 800058c:	b580      	push	{r7, lr}
 800058e:	b082      	sub	sp, #8
 8000590:	af00      	add	r7, sp, #0
  uint32_t pre_time;

  pre_time = millis();
 8000592:	f000 f846 	bl	8000622 <millis>
 8000596:	6078      	str	r0, [r7, #4]

  while(1)
  {
    if(millis()-pre_time >= 500)
 8000598:	f000 f843 	bl	8000622 <millis>
 800059c:	4602      	mov	r2, r0
 800059e:	687b      	ldr	r3, [r7, #4]
 80005a0:	1ad3      	subs	r3, r2, r3
 80005a2:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80005a6:	d3f7      	bcc.n	8000598 <apMain+0xc>
    {
      pre_time = millis();
 80005a8:	f000 f83b 	bl	8000622 <millis>
 80005ac:	6078      	str	r0, [r7, #4]
      ledToggle(_DEF_LED1);
 80005ae:	2000      	movs	r0, #0
 80005b0:	f000 fad4 	bl	8000b5c <ledToggle>
      ledToggle(_DEF_LED2);
 80005b4:	2001      	movs	r0, #1
 80005b6:	f000 fad1 	bl	8000b5c <ledToggle>
      ledToggle(_DEF_LED3);
 80005ba:	2002      	movs	r0, #2
 80005bc:	f000 face 	bl	8000b5c <ledToggle>

      logPrintf("logprintf test %d\n", (int)millis());
 80005c0:	f000 f82f 	bl	8000622 <millis>
 80005c4:	4603      	mov	r3, r0
 80005c6:	4619      	mov	r1, r3
 80005c8:	4801      	ldr	r0, [pc, #4]	; (80005d0 <apMain+0x44>)
 80005ca:	f008 fc3f 	bl	8008e4c <iprintf>
    if(millis()-pre_time >= 500)
 80005ce:	e7e3      	b.n	8000598 <apMain+0xc>
 80005d0:	08009adc 	.word	0x08009adc

080005d4 <bspInit>:
#include "uart.h"

void SystemClock_Config(void);

void bspInit(void)
{
 80005d4:	b580      	push	{r7, lr}
 80005d6:	b082      	sub	sp, #8
 80005d8:	af00      	add	r7, sp, #0

  HAL_Init();
 80005da:	f000 fd5f 	bl	800109c <HAL_Init>
  SystemClock_Config();
 80005de:	f000 f837 	bl	8000650 <SystemClock_Config>


  __HAL_RCC_GPIOB_CLK_ENABLE();       // GPIO Init
 80005e2:	2300      	movs	r3, #0
 80005e4:	607b      	str	r3, [r7, #4]
 80005e6:	4b08      	ldr	r3, [pc, #32]	; (8000608 <bspInit+0x34>)
 80005e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005ea:	4a07      	ldr	r2, [pc, #28]	; (8000608 <bspInit+0x34>)
 80005ec:	f043 0302 	orr.w	r3, r3, #2
 80005f0:	6313      	str	r3, [r2, #48]	; 0x30
 80005f2:	4b05      	ldr	r3, [pc, #20]	; (8000608 <bspInit+0x34>)
 80005f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005f6:	f003 0302 	and.w	r3, r3, #2
 80005fa:	607b      	str	r3, [r7, #4]
 80005fc:	687b      	ldr	r3, [r7, #4]

}
 80005fe:	bf00      	nop
 8000600:	3708      	adds	r7, #8
 8000602:	46bd      	mov	sp, r7
 8000604:	bd80      	pop	{r7, pc}
 8000606:	bf00      	nop
 8000608:	40023800 	.word	0x40023800

0800060c <delay>:

void delay(uint32_t ms)
{
 800060c:	b580      	push	{r7, lr}
 800060e:	b082      	sub	sp, #8
 8000610:	af00      	add	r7, sp, #0
 8000612:	6078      	str	r0, [r7, #4]
  HAL_Delay(ms);
 8000614:	6878      	ldr	r0, [r7, #4]
 8000616:	f000 fdb3 	bl	8001180 <HAL_Delay>
}
 800061a:	bf00      	nop
 800061c:	3708      	adds	r7, #8
 800061e:	46bd      	mov	sp, r7
 8000620:	bd80      	pop	{r7, pc}

08000622 <millis>:

uint32_t millis(void)
{
 8000622:	b580      	push	{r7, lr}
 8000624:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8000626:	f000 fd9f 	bl	8001168 <HAL_GetTick>
 800062a:	4603      	mov	r3, r0
}
 800062c:	4618      	mov	r0, r3
 800062e:	bd80      	pop	{r7, pc}

08000630 <__io_putchar>:


int __io_putchar(int ch)
{
 8000630:	b580      	push	{r7, lr}
 8000632:	b082      	sub	sp, #8
 8000634:	af00      	add	r7, sp, #0
 8000636:	6078      	str	r0, [r7, #4]
  // USB printf Char transmit
  uartWrite(_DEF_UART1, (uint8_t *)&ch, 1);
 8000638:	1d3b      	adds	r3, r7, #4
 800063a:	2201      	movs	r2, #1
 800063c:	4619      	mov	r1, r3
 800063e:	2000      	movs	r0, #0
 8000640:	f000 fbf8 	bl	8000e34 <uartWrite>

  return 1;
 8000644:	2301      	movs	r3, #1
}
 8000646:	4618      	mov	r0, r3
 8000648:	3708      	adds	r7, #8
 800064a:	46bd      	mov	sp, r7
 800064c:	bd80      	pop	{r7, pc}
	...

08000650 <SystemClock_Config>:


void SystemClock_Config(void)
{
 8000650:	b580      	push	{r7, lr}
 8000652:	b098      	sub	sp, #96	; 0x60
 8000654:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000656:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800065a:	2230      	movs	r2, #48	; 0x30
 800065c:	2100      	movs	r1, #0
 800065e:	4618      	mov	r0, r3
 8000660:	f008 fb44 	bl	8008cec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000664:	f107 031c 	add.w	r3, r7, #28
 8000668:	2200      	movs	r2, #0
 800066a:	601a      	str	r2, [r3, #0]
 800066c:	605a      	str	r2, [r3, #4]
 800066e:	609a      	str	r2, [r3, #8]
 8000670:	60da      	str	r2, [r3, #12]
 8000672:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000674:	f107 030c 	add.w	r3, r7, #12
 8000678:	2200      	movs	r2, #0
 800067a:	601a      	str	r2, [r3, #0]
 800067c:	605a      	str	r2, [r3, #4]
 800067e:	609a      	str	r2, [r3, #8]
 8000680:	60da      	str	r2, [r3, #12]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000682:	2300      	movs	r3, #0
 8000684:	60bb      	str	r3, [r7, #8]
 8000686:	4b30      	ldr	r3, [pc, #192]	; (8000748 <SystemClock_Config+0xf8>)
 8000688:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800068a:	4a2f      	ldr	r2, [pc, #188]	; (8000748 <SystemClock_Config+0xf8>)
 800068c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000690:	6413      	str	r3, [r2, #64]	; 0x40
 8000692:	4b2d      	ldr	r3, [pc, #180]	; (8000748 <SystemClock_Config+0xf8>)
 8000694:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000696:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800069a:	60bb      	str	r3, [r7, #8]
 800069c:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800069e:	2300      	movs	r3, #0
 80006a0:	607b      	str	r3, [r7, #4]
 80006a2:	4b2a      	ldr	r3, [pc, #168]	; (800074c <SystemClock_Config+0xfc>)
 80006a4:	681b      	ldr	r3, [r3, #0]
 80006a6:	4a29      	ldr	r2, [pc, #164]	; (800074c <SystemClock_Config+0xfc>)
 80006a8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006ac:	6013      	str	r3, [r2, #0]
 80006ae:	4b27      	ldr	r3, [pc, #156]	; (800074c <SystemClock_Config+0xfc>)
 80006b0:	681b      	ldr	r3, [r3, #0]
 80006b2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80006b6:	607b      	str	r3, [r7, #4]
 80006b8:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 80006ba:	2309      	movs	r3, #9
 80006bc:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80006be:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80006c2:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80006c4:	2301      	movs	r3, #1
 80006c6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006c8:	2302      	movs	r3, #2
 80006ca:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80006cc:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80006d0:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80006d2:	2304      	movs	r3, #4
 80006d4:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 72;
 80006d6:	2348      	movs	r3, #72	; 0x48
 80006d8:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006da:	2302      	movs	r3, #2
 80006dc:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 3;
 80006de:	2303      	movs	r3, #3
 80006e0:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006e2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80006e6:	4618      	mov	r0, r3
 80006e8:	f002 fee8 	bl	80034bc <HAL_RCC_OscConfig>
 80006ec:	4603      	mov	r3, r0
 80006ee:	2b00      	cmp	r3, #0
 80006f0:	d001      	beq.n	80006f6 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 80006f2:	f000 f82d 	bl	8000750 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006f6:	230f      	movs	r3, #15
 80006f8:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006fa:	2302      	movs	r3, #2
 80006fc:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006fe:	2300      	movs	r3, #0
 8000700:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000702:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000706:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000708:	2300      	movs	r3, #0
 800070a:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800070c:	f107 031c 	add.w	r3, r7, #28
 8000710:	2102      	movs	r1, #2
 8000712:	4618      	mov	r0, r3
 8000714:	f003 f942 	bl	800399c <HAL_RCC_ClockConfig>
 8000718:	4603      	mov	r3, r0
 800071a:	2b00      	cmp	r3, #0
 800071c:	d001      	beq.n	8000722 <SystemClock_Config+0xd2>
  {
    Error_Handler();
 800071e:	f000 f817 	bl	8000750 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8000722:	2302      	movs	r3, #2
 8000724:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8000726:	f44f 7300 	mov.w	r3, #512	; 0x200
 800072a:	61bb      	str	r3, [r7, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800072c:	f107 030c 	add.w	r3, r7, #12
 8000730:	4618      	mov	r0, r3
 8000732:	f003 fb25 	bl	8003d80 <HAL_RCCEx_PeriphCLKConfig>
 8000736:	4603      	mov	r3, r0
 8000738:	2b00      	cmp	r3, #0
 800073a:	d001      	beq.n	8000740 <SystemClock_Config+0xf0>
  {
    Error_Handler();
 800073c:	f000 f808 	bl	8000750 <Error_Handler>
  }
}
 8000740:	bf00      	nop
 8000742:	3760      	adds	r7, #96	; 0x60
 8000744:	46bd      	mov	sp, r7
 8000746:	bd80      	pop	{r7, pc}
 8000748:	40023800 	.word	0x40023800
 800074c:	40007000 	.word	0x40007000

08000750 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000750:	b480      	push	{r7}
 8000752:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000754:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000756:	e7fe      	b.n	8000756 <Error_Handler+0x6>

08000758 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000758:	b480      	push	{r7}
 800075a:	b083      	sub	sp, #12
 800075c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800075e:	2300      	movs	r3, #0
 8000760:	607b      	str	r3, [r7, #4]
 8000762:	4b10      	ldr	r3, [pc, #64]	; (80007a4 <HAL_MspInit+0x4c>)
 8000764:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000766:	4a0f      	ldr	r2, [pc, #60]	; (80007a4 <HAL_MspInit+0x4c>)
 8000768:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800076c:	6453      	str	r3, [r2, #68]	; 0x44
 800076e:	4b0d      	ldr	r3, [pc, #52]	; (80007a4 <HAL_MspInit+0x4c>)
 8000770:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000772:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000776:	607b      	str	r3, [r7, #4]
 8000778:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800077a:	2300      	movs	r3, #0
 800077c:	603b      	str	r3, [r7, #0]
 800077e:	4b09      	ldr	r3, [pc, #36]	; (80007a4 <HAL_MspInit+0x4c>)
 8000780:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000782:	4a08      	ldr	r2, [pc, #32]	; (80007a4 <HAL_MspInit+0x4c>)
 8000784:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000788:	6413      	str	r3, [r2, #64]	; 0x40
 800078a:	4b06      	ldr	r3, [pc, #24]	; (80007a4 <HAL_MspInit+0x4c>)
 800078c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800078e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000792:	603b      	str	r3, [r7, #0]
 8000794:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000796:	bf00      	nop
 8000798:	370c      	adds	r7, #12
 800079a:	46bd      	mov	sp, r7
 800079c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007a0:	4770      	bx	lr
 80007a2:	bf00      	nop
 80007a4:	40023800 	.word	0x40023800

080007a8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80007a8:	b480      	push	{r7}
 80007aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80007ac:	e7fe      	b.n	80007ac <NMI_Handler+0x4>

080007ae <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80007ae:	b480      	push	{r7}
 80007b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80007b2:	e7fe      	b.n	80007b2 <HardFault_Handler+0x4>

080007b4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80007b4:	b480      	push	{r7}
 80007b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80007b8:	e7fe      	b.n	80007b8 <MemManage_Handler+0x4>

080007ba <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80007ba:	b480      	push	{r7}
 80007bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80007be:	e7fe      	b.n	80007be <BusFault_Handler+0x4>

080007c0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80007c0:	b480      	push	{r7}
 80007c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80007c4:	e7fe      	b.n	80007c4 <UsageFault_Handler+0x4>

080007c6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80007c6:	b480      	push	{r7}
 80007c8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80007ca:	bf00      	nop
 80007cc:	46bd      	mov	sp, r7
 80007ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007d2:	4770      	bx	lr

080007d4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80007d4:	b480      	push	{r7}
 80007d6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80007d8:	bf00      	nop
 80007da:	46bd      	mov	sp, r7
 80007dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007e0:	4770      	bx	lr

080007e2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80007e2:	b480      	push	{r7}
 80007e4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80007e6:	bf00      	nop
 80007e8:	46bd      	mov	sp, r7
 80007ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ee:	4770      	bx	lr

080007f0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80007f0:	b580      	push	{r7, lr}
 80007f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80007f4:	f000 fca4 	bl	8001140 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80007f8:	bf00      	nop
 80007fa:	bd80      	pop	{r7, pc}

080007fc <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80007fc:	b580      	push	{r7, lr}
 80007fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000800:	4802      	ldr	r0, [pc, #8]	; (800080c <USART1_IRQHandler+0x10>)
 8000802:	f003 fe49 	bl	8004498 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000806:	bf00      	nop
 8000808:	bd80      	pop	{r7, pc}
 800080a:	bf00      	nop
 800080c:	200003e8 	.word	0x200003e8

08000810 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8000810:	b580      	push	{r7, lr}
 8000812:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8000814:	4802      	ldr	r0, [pc, #8]	; (8000820 <DMA2_Stream2_IRQHandler+0x10>)
 8000816:	f000 ff9d 	bl	8001754 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 800081a:	bf00      	nop
 800081c:	bd80      	pop	{r7, pc}
 800081e:	bf00      	nop
 8000820:	20000388 	.word	0x20000388

08000824 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000824:	b580      	push	{r7, lr}
 8000826:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000828:	4802      	ldr	r0, [pc, #8]	; (8000834 <OTG_FS_IRQHandler+0x10>)
 800082a:	f001 fe13 	bl	8002454 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800082e:	bf00      	nop
 8000830:	bd80      	pop	{r7, pc}
 8000832:	bf00      	nop
 8000834:	20000efc 	.word	0x20000efc

08000838 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000838:	b580      	push	{r7, lr}
 800083a:	b086      	sub	sp, #24
 800083c:	af00      	add	r7, sp, #0
 800083e:	60f8      	str	r0, [r7, #12]
 8000840:	60b9      	str	r1, [r7, #8]
 8000842:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000844:	2300      	movs	r3, #0
 8000846:	617b      	str	r3, [r7, #20]
 8000848:	e00a      	b.n	8000860 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800084a:	f3af 8000 	nop.w
 800084e:	4601      	mov	r1, r0
 8000850:	68bb      	ldr	r3, [r7, #8]
 8000852:	1c5a      	adds	r2, r3, #1
 8000854:	60ba      	str	r2, [r7, #8]
 8000856:	b2ca      	uxtb	r2, r1
 8000858:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800085a:	697b      	ldr	r3, [r7, #20]
 800085c:	3301      	adds	r3, #1
 800085e:	617b      	str	r3, [r7, #20]
 8000860:	697a      	ldr	r2, [r7, #20]
 8000862:	687b      	ldr	r3, [r7, #4]
 8000864:	429a      	cmp	r2, r3
 8000866:	dbf0      	blt.n	800084a <_read+0x12>
	}

return len;
 8000868:	687b      	ldr	r3, [r7, #4]
}
 800086a:	4618      	mov	r0, r3
 800086c:	3718      	adds	r7, #24
 800086e:	46bd      	mov	sp, r7
 8000870:	bd80      	pop	{r7, pc}

08000872 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000872:	b580      	push	{r7, lr}
 8000874:	b086      	sub	sp, #24
 8000876:	af00      	add	r7, sp, #0
 8000878:	60f8      	str	r0, [r7, #12]
 800087a:	60b9      	str	r1, [r7, #8]
 800087c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800087e:	2300      	movs	r3, #0
 8000880:	617b      	str	r3, [r7, #20]
 8000882:	e009      	b.n	8000898 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000884:	68bb      	ldr	r3, [r7, #8]
 8000886:	1c5a      	adds	r2, r3, #1
 8000888:	60ba      	str	r2, [r7, #8]
 800088a:	781b      	ldrb	r3, [r3, #0]
 800088c:	4618      	mov	r0, r3
 800088e:	f7ff fecf 	bl	8000630 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000892:	697b      	ldr	r3, [r7, #20]
 8000894:	3301      	adds	r3, #1
 8000896:	617b      	str	r3, [r7, #20]
 8000898:	697a      	ldr	r2, [r7, #20]
 800089a:	687b      	ldr	r3, [r7, #4]
 800089c:	429a      	cmp	r2, r3
 800089e:	dbf1      	blt.n	8000884 <_write+0x12>
	}
	return len;
 80008a0:	687b      	ldr	r3, [r7, #4]
}
 80008a2:	4618      	mov	r0, r3
 80008a4:	3718      	adds	r7, #24
 80008a6:	46bd      	mov	sp, r7
 80008a8:	bd80      	pop	{r7, pc}

080008aa <_close>:

int _close(int file)
{
 80008aa:	b480      	push	{r7}
 80008ac:	b083      	sub	sp, #12
 80008ae:	af00      	add	r7, sp, #0
 80008b0:	6078      	str	r0, [r7, #4]
	return -1;
 80008b2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80008b6:	4618      	mov	r0, r3
 80008b8:	370c      	adds	r7, #12
 80008ba:	46bd      	mov	sp, r7
 80008bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008c0:	4770      	bx	lr

080008c2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80008c2:	b480      	push	{r7}
 80008c4:	b083      	sub	sp, #12
 80008c6:	af00      	add	r7, sp, #0
 80008c8:	6078      	str	r0, [r7, #4]
 80008ca:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80008cc:	683b      	ldr	r3, [r7, #0]
 80008ce:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80008d2:	605a      	str	r2, [r3, #4]
	return 0;
 80008d4:	2300      	movs	r3, #0
}
 80008d6:	4618      	mov	r0, r3
 80008d8:	370c      	adds	r7, #12
 80008da:	46bd      	mov	sp, r7
 80008dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008e0:	4770      	bx	lr

080008e2 <_isatty>:

int _isatty(int file)
{
 80008e2:	b480      	push	{r7}
 80008e4:	b083      	sub	sp, #12
 80008e6:	af00      	add	r7, sp, #0
 80008e8:	6078      	str	r0, [r7, #4]
	return 1;
 80008ea:	2301      	movs	r3, #1
}
 80008ec:	4618      	mov	r0, r3
 80008ee:	370c      	adds	r7, #12
 80008f0:	46bd      	mov	sp, r7
 80008f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008f6:	4770      	bx	lr

080008f8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80008f8:	b480      	push	{r7}
 80008fa:	b085      	sub	sp, #20
 80008fc:	af00      	add	r7, sp, #0
 80008fe:	60f8      	str	r0, [r7, #12]
 8000900:	60b9      	str	r1, [r7, #8]
 8000902:	607a      	str	r2, [r7, #4]
	return 0;
 8000904:	2300      	movs	r3, #0
}
 8000906:	4618      	mov	r0, r3
 8000908:	3714      	adds	r7, #20
 800090a:	46bd      	mov	sp, r7
 800090c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000910:	4770      	bx	lr
	...

08000914 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000914:	b580      	push	{r7, lr}
 8000916:	b086      	sub	sp, #24
 8000918:	af00      	add	r7, sp, #0
 800091a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800091c:	4a14      	ldr	r2, [pc, #80]	; (8000970 <_sbrk+0x5c>)
 800091e:	4b15      	ldr	r3, [pc, #84]	; (8000974 <_sbrk+0x60>)
 8000920:	1ad3      	subs	r3, r2, r3
 8000922:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000924:	697b      	ldr	r3, [r7, #20]
 8000926:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000928:	4b13      	ldr	r3, [pc, #76]	; (8000978 <_sbrk+0x64>)
 800092a:	681b      	ldr	r3, [r3, #0]
 800092c:	2b00      	cmp	r3, #0
 800092e:	d102      	bne.n	8000936 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000930:	4b11      	ldr	r3, [pc, #68]	; (8000978 <_sbrk+0x64>)
 8000932:	4a12      	ldr	r2, [pc, #72]	; (800097c <_sbrk+0x68>)
 8000934:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000936:	4b10      	ldr	r3, [pc, #64]	; (8000978 <_sbrk+0x64>)
 8000938:	681a      	ldr	r2, [r3, #0]
 800093a:	687b      	ldr	r3, [r7, #4]
 800093c:	4413      	add	r3, r2
 800093e:	693a      	ldr	r2, [r7, #16]
 8000940:	429a      	cmp	r2, r3
 8000942:	d207      	bcs.n	8000954 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000944:	f008 f998 	bl	8008c78 <__errno>
 8000948:	4602      	mov	r2, r0
 800094a:	230c      	movs	r3, #12
 800094c:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 800094e:	f04f 33ff 	mov.w	r3, #4294967295
 8000952:	e009      	b.n	8000968 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000954:	4b08      	ldr	r3, [pc, #32]	; (8000978 <_sbrk+0x64>)
 8000956:	681b      	ldr	r3, [r3, #0]
 8000958:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800095a:	4b07      	ldr	r3, [pc, #28]	; (8000978 <_sbrk+0x64>)
 800095c:	681a      	ldr	r2, [r3, #0]
 800095e:	687b      	ldr	r3, [r7, #4]
 8000960:	4413      	add	r3, r2
 8000962:	4a05      	ldr	r2, [pc, #20]	; (8000978 <_sbrk+0x64>)
 8000964:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000966:	68fb      	ldr	r3, [r7, #12]
}
 8000968:	4618      	mov	r0, r3
 800096a:	3718      	adds	r7, #24
 800096c:	46bd      	mov	sp, r7
 800096e:	bd80      	pop	{r7, pc}
 8000970:	20020000 	.word	0x20020000
 8000974:	00000400 	.word	0x00000400
 8000978:	20000224 	.word	0x20000224
 800097c:	20001308 	.word	0x20001308

08000980 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000980:	b480      	push	{r7}
 8000982:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000984:	4b08      	ldr	r3, [pc, #32]	; (80009a8 <SystemInit+0x28>)
 8000986:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800098a:	4a07      	ldr	r2, [pc, #28]	; (80009a8 <SystemInit+0x28>)
 800098c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000990:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000994:	4b04      	ldr	r3, [pc, #16]	; (80009a8 <SystemInit+0x28>)
 8000996:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800099a:	609a      	str	r2, [r3, #8]
#endif
}
 800099c:	bf00      	nop
 800099e:	46bd      	mov	sp, r7
 80009a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a4:	4770      	bx	lr
 80009a6:	bf00      	nop
 80009a8:	e000ed00 	.word	0xe000ed00

080009ac <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80009ac:	f8df d034 	ldr.w	sp, [pc, #52]	; 80009e4 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80009b0:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80009b2:	e003      	b.n	80009bc <LoopCopyDataInit>

080009b4 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80009b4:	4b0c      	ldr	r3, [pc, #48]	; (80009e8 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80009b6:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80009b8:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80009ba:	3104      	adds	r1, #4

080009bc <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80009bc:	480b      	ldr	r0, [pc, #44]	; (80009ec <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80009be:	4b0c      	ldr	r3, [pc, #48]	; (80009f0 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80009c0:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80009c2:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80009c4:	d3f6      	bcc.n	80009b4 <CopyDataInit>
  ldr  r2, =_sbss
 80009c6:	4a0b      	ldr	r2, [pc, #44]	; (80009f4 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80009c8:	e002      	b.n	80009d0 <LoopFillZerobss>

080009ca <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80009ca:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80009cc:	f842 3b04 	str.w	r3, [r2], #4

080009d0 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80009d0:	4b09      	ldr	r3, [pc, #36]	; (80009f8 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80009d2:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80009d4:	d3f9      	bcc.n	80009ca <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80009d6:	f7ff ffd3 	bl	8000980 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80009da:	f008 f953 	bl	8008c84 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80009de:	f008 f93f 	bl	8008c60 <main>
  bx  lr    
 80009e2:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80009e4:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 80009e8:	08009c00 	.word	0x08009c00
  ldr  r0, =_sdata
 80009ec:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80009f0:	20000208 	.word	0x20000208
  ldr  r2, =_sbss
 80009f4:	20000208 	.word	0x20000208
  ldr  r3, = _ebss
 80009f8:	20001308 	.word	0x20001308

080009fc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80009fc:	e7fe      	b.n	80009fc <ADC_IRQHandler>

080009fe <qbufferCreat>:

#include "qbuffer.h"


bool qbufferCreat(qbuffer_t *p_node, uint8_t *p_buf, uint32_t length)
{
 80009fe:	b480      	push	{r7}
 8000a00:	b087      	sub	sp, #28
 8000a02:	af00      	add	r7, sp, #0
 8000a04:	60f8      	str	r0, [r7, #12]
 8000a06:	60b9      	str	r1, [r7, #8]
 8000a08:	607a      	str	r2, [r7, #4]
  bool ret = true;
 8000a0a:	2301      	movs	r3, #1
 8000a0c:	75fb      	strb	r3, [r7, #23]

  p_node->in = 0;
 8000a0e:	68fb      	ldr	r3, [r7, #12]
 8000a10:	2200      	movs	r2, #0
 8000a12:	601a      	str	r2, [r3, #0]
  p_node->out = 0;
 8000a14:	68fb      	ldr	r3, [r7, #12]
 8000a16:	2200      	movs	r2, #0
 8000a18:	605a      	str	r2, [r3, #4]
  p_node->len = length;
 8000a1a:	68fb      	ldr	r3, [r7, #12]
 8000a1c:	687a      	ldr	r2, [r7, #4]
 8000a1e:	609a      	str	r2, [r3, #8]
  p_node->p_buf = p_buf;
 8000a20:	68fb      	ldr	r3, [r7, #12]
 8000a22:	68ba      	ldr	r2, [r7, #8]
 8000a24:	60da      	str	r2, [r3, #12]

  return ret;
 8000a26:	7dfb      	ldrb	r3, [r7, #23]

}
 8000a28:	4618      	mov	r0, r3
 8000a2a:	371c      	adds	r7, #28
 8000a2c:	46bd      	mov	sp, r7
 8000a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a32:	4770      	bx	lr

08000a34 <ledInit>:
        {GPIOB, GPIO_PIN_11, GPIO_PIN_RESET, GPIO_PIN_SET},
        {GPIOC, GPIO_PIN_8, GPIO_PIN_RESET, GPIO_PIN_SET},
    };

bool ledInit(void)
{
 8000a34:	b580      	push	{r7, lr}
 8000a36:	b08c      	sub	sp, #48	; 0x30
 8000a38:	af00      	add	r7, sp, #0
  bool ret = true;
 8000a3a:	2301      	movs	r3, #1
 8000a3c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a40:	f107 0314 	add.w	r3, r7, #20
 8000a44:	2200      	movs	r2, #0
 8000a46:	601a      	str	r2, [r3, #0]
 8000a48:	605a      	str	r2, [r3, #4]
 8000a4a:	609a      	str	r2, [r3, #8]
 8000a4c:	60da      	str	r2, [r3, #12]
 8000a4e:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a50:	2300      	movs	r3, #0
 8000a52:	613b      	str	r3, [r7, #16]
 8000a54:	4b2f      	ldr	r3, [pc, #188]	; (8000b14 <ledInit+0xe0>)
 8000a56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a58:	4a2e      	ldr	r2, [pc, #184]	; (8000b14 <ledInit+0xe0>)
 8000a5a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000a5e:	6313      	str	r3, [r2, #48]	; 0x30
 8000a60:	4b2c      	ldr	r3, [pc, #176]	; (8000b14 <ledInit+0xe0>)
 8000a62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a64:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a68:	613b      	str	r3, [r7, #16]
 8000a6a:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a6c:	2300      	movs	r3, #0
 8000a6e:	60fb      	str	r3, [r7, #12]
 8000a70:	4b28      	ldr	r3, [pc, #160]	; (8000b14 <ledInit+0xe0>)
 8000a72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a74:	4a27      	ldr	r2, [pc, #156]	; (8000b14 <ledInit+0xe0>)
 8000a76:	f043 0302 	orr.w	r3, r3, #2
 8000a7a:	6313      	str	r3, [r2, #48]	; 0x30
 8000a7c:	4b25      	ldr	r3, [pc, #148]	; (8000b14 <ledInit+0xe0>)
 8000a7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a80:	f003 0302 	and.w	r3, r3, #2
 8000a84:	60fb      	str	r3, [r7, #12]
 8000a86:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a88:	2300      	movs	r3, #0
 8000a8a:	60bb      	str	r3, [r7, #8]
 8000a8c:	4b21      	ldr	r3, [pc, #132]	; (8000b14 <ledInit+0xe0>)
 8000a8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a90:	4a20      	ldr	r2, [pc, #128]	; (8000b14 <ledInit+0xe0>)
 8000a92:	f043 0304 	orr.w	r3, r3, #4
 8000a96:	6313      	str	r3, [r2, #48]	; 0x30
 8000a98:	4b1e      	ldr	r3, [pc, #120]	; (8000b14 <ledInit+0xe0>)
 8000a9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a9c:	f003 0304 	and.w	r3, r3, #4
 8000aa0:	60bb      	str	r3, [r7, #8]
 8000aa2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000aa4:	2300      	movs	r3, #0
 8000aa6:	607b      	str	r3, [r7, #4]
 8000aa8:	4b1a      	ldr	r3, [pc, #104]	; (8000b14 <ledInit+0xe0>)
 8000aaa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aac:	4a19      	ldr	r2, [pc, #100]	; (8000b14 <ledInit+0xe0>)
 8000aae:	f043 0301 	orr.w	r3, r3, #1
 8000ab2:	6313      	str	r3, [r2, #48]	; 0x30
 8000ab4:	4b17      	ldr	r3, [pc, #92]	; (8000b14 <ledInit+0xe0>)
 8000ab6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ab8:	f003 0301 	and.w	r3, r3, #1
 8000abc:	607b      	str	r3, [r7, #4]
 8000abe:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pins : PB2 PB11 PC8 */
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ac0:	2301      	movs	r3, #1
 8000ac2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ac4:	2300      	movs	r3, #0
 8000ac6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ac8:	2300      	movs	r3, #0
 8000aca:	623b      	str	r3, [r7, #32]

  for(int i=0; i<LED_MAX_CH; i++)
 8000acc:	2300      	movs	r3, #0
 8000ace:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000ad0:	e017      	b.n	8000b02 <ledInit+0xce>
  {
    GPIO_InitStruct.Pin = led_tbl[i].pin;
 8000ad2:	4a11      	ldr	r2, [pc, #68]	; (8000b18 <ledInit+0xe4>)
 8000ad4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000ad6:	00db      	lsls	r3, r3, #3
 8000ad8:	4413      	add	r3, r2
 8000ada:	889b      	ldrh	r3, [r3, #4]
 8000adc:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(led_tbl[i].port, &GPIO_InitStruct);
 8000ade:	4a0e      	ldr	r2, [pc, #56]	; (8000b18 <ledInit+0xe4>)
 8000ae0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000ae2:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8000ae6:	f107 0214 	add.w	r2, r7, #20
 8000aea:	4611      	mov	r1, r2
 8000aec:	4618      	mov	r0, r3
 8000aee:	f001 f899 	bl	8001c24 <HAL_GPIO_Init>

    ledOff(i);
 8000af2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000af4:	b2db      	uxtb	r3, r3
 8000af6:	4618      	mov	r0, r3
 8000af8:	f000 f810 	bl	8000b1c <ledOff>
  for(int i=0; i<LED_MAX_CH; i++)
 8000afc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000afe:	3301      	adds	r3, #1
 8000b00:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000b02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000b04:	2b02      	cmp	r3, #2
 8000b06:	dde4      	ble.n	8000ad2 <ledInit+0x9e>
  }
  return ret;
 8000b08:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8000b0c:	4618      	mov	r0, r3
 8000b0e:	3730      	adds	r7, #48	; 0x30
 8000b10:	46bd      	mov	sp, r7
 8000b12:	bd80      	pop	{r7, pc}
 8000b14:	40023800 	.word	0x40023800
 8000b18:	20000004 	.word	0x20000004

08000b1c <ledOff>:

  HAL_GPIO_WritePin(led_tbl[ch].port, led_tbl[ch].pin, led_tbl[ch].on_state);
}

void ledOff(uint8_t ch)
{
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	b082      	sub	sp, #8
 8000b20:	af00      	add	r7, sp, #0
 8000b22:	4603      	mov	r3, r0
 8000b24:	71fb      	strb	r3, [r7, #7]
  if(ch >= LED_MAX_CH) return;
 8000b26:	79fb      	ldrb	r3, [r7, #7]
 8000b28:	2b02      	cmp	r3, #2
 8000b2a:	d811      	bhi.n	8000b50 <ledOff+0x34>

  HAL_GPIO_WritePin(led_tbl[ch].port, led_tbl[ch].pin, led_tbl[ch].off_state);
 8000b2c:	79fb      	ldrb	r3, [r7, #7]
 8000b2e:	4a0a      	ldr	r2, [pc, #40]	; (8000b58 <ledOff+0x3c>)
 8000b30:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8000b34:	79fb      	ldrb	r3, [r7, #7]
 8000b36:	4a08      	ldr	r2, [pc, #32]	; (8000b58 <ledOff+0x3c>)
 8000b38:	00db      	lsls	r3, r3, #3
 8000b3a:	4413      	add	r3, r2
 8000b3c:	8899      	ldrh	r1, [r3, #4]
 8000b3e:	79fb      	ldrb	r3, [r7, #7]
 8000b40:	4a05      	ldr	r2, [pc, #20]	; (8000b58 <ledOff+0x3c>)
 8000b42:	00db      	lsls	r3, r3, #3
 8000b44:	4413      	add	r3, r2
 8000b46:	79db      	ldrb	r3, [r3, #7]
 8000b48:	461a      	mov	r2, r3
 8000b4a:	f001 faff 	bl	800214c <HAL_GPIO_WritePin>
 8000b4e:	e000      	b.n	8000b52 <ledOff+0x36>
  if(ch >= LED_MAX_CH) return;
 8000b50:	bf00      	nop
}
 8000b52:	3708      	adds	r7, #8
 8000b54:	46bd      	mov	sp, r7
 8000b56:	bd80      	pop	{r7, pc}
 8000b58:	20000004 	.word	0x20000004

08000b5c <ledToggle>:

void ledToggle(uint8_t ch)
{
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	b082      	sub	sp, #8
 8000b60:	af00      	add	r7, sp, #0
 8000b62:	4603      	mov	r3, r0
 8000b64:	71fb      	strb	r3, [r7, #7]
  if(ch >= LED_MAX_CH) return;
 8000b66:	79fb      	ldrb	r3, [r7, #7]
 8000b68:	2b02      	cmp	r3, #2
 8000b6a:	d80c      	bhi.n	8000b86 <ledToggle+0x2a>

  HAL_GPIO_TogglePin(led_tbl[ch].port, led_tbl[ch].pin);
 8000b6c:	79fb      	ldrb	r3, [r7, #7]
 8000b6e:	4a08      	ldr	r2, [pc, #32]	; (8000b90 <ledToggle+0x34>)
 8000b70:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8000b74:	79fb      	ldrb	r3, [r7, #7]
 8000b76:	4a06      	ldr	r2, [pc, #24]	; (8000b90 <ledToggle+0x34>)
 8000b78:	00db      	lsls	r3, r3, #3
 8000b7a:	4413      	add	r3, r2
 8000b7c:	889b      	ldrh	r3, [r3, #4]
 8000b7e:	4619      	mov	r1, r3
 8000b80:	f001 fafd 	bl	800217e <HAL_GPIO_TogglePin>
 8000b84:	e000      	b.n	8000b88 <ledToggle+0x2c>
  if(ch >= LED_MAX_CH) return;
 8000b86:	bf00      	nop

}
 8000b88:	3708      	adds	r7, #8
 8000b8a:	46bd      	mov	sp, r7
 8000b8c:	bd80      	pop	{r7, pc}
 8000b8e:	bf00      	nop
 8000b90:	20000004 	.word	0x20000004

08000b94 <resetInit>:
#include "rtc.h"

static uint32_t reset_count = 0;

bool resetInit(void)
{
 8000b94:	b580      	push	{r7, lr}
 8000b96:	b082      	sub	sp, #8
 8000b98:	af00      	add	r7, sp, #0
  bool ret = true;
 8000b9a:	2301      	movs	r3, #1
 8000b9c:	71fb      	strb	r3, [r7, #7]

  // if Reset btn clicked
  if(RCC->CSR & (1<<26))
 8000b9e:	4b11      	ldr	r3, [pc, #68]	; (8000be4 <resetInit+0x50>)
 8000ba0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000ba2:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000ba6:	2b00      	cmp	r3, #0
 8000ba8:	d012      	beq.n	8000bd0 <resetInit+0x3c>
  {
    rtcBackupRegWrite(1, rtcbackupRegRead(1) + 1);
 8000baa:	2001      	movs	r0, #1
 8000bac:	f000 f86a 	bl	8000c84 <rtcbackupRegRead>
 8000bb0:	4603      	mov	r3, r0
 8000bb2:	3301      	adds	r3, #1
 8000bb4:	4619      	mov	r1, r3
 8000bb6:	2001      	movs	r0, #1
 8000bb8:	f000 f854 	bl	8000c64 <rtcBackupRegWrite>
    delay(500);
 8000bbc:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000bc0:	f7ff fd24 	bl	800060c <delay>
    reset_count = rtcbackupRegRead(1);
 8000bc4:	2001      	movs	r0, #1
 8000bc6:	f000 f85d 	bl	8000c84 <rtcbackupRegRead>
 8000bca:	4602      	mov	r2, r0
 8000bcc:	4b06      	ldr	r3, [pc, #24]	; (8000be8 <resetInit+0x54>)
 8000bce:	601a      	str	r2, [r3, #0]
  }

  rtcBackupRegWrite(1, 0);
 8000bd0:	2100      	movs	r1, #0
 8000bd2:	2001      	movs	r0, #1
 8000bd4:	f000 f846 	bl	8000c64 <rtcBackupRegWrite>


  return ret;
 8000bd8:	79fb      	ldrb	r3, [r7, #7]
}
 8000bda:	4618      	mov	r0, r3
 8000bdc:	3708      	adds	r7, #8
 8000bde:	46bd      	mov	sp, r7
 8000be0:	bd80      	pop	{r7, pc}
 8000be2:	bf00      	nop
 8000be4:	40023800 	.word	0x40023800
 8000be8:	20000228 	.word	0x20000228

08000bec <rtcInit>:
#include "rtc.h"

static RTC_HandleTypeDef hrtc;

bool rtcInit(void)
{
 8000bec:	b580      	push	{r7, lr}
 8000bee:	b082      	sub	sp, #8
 8000bf0:	af00      	add	r7, sp, #0
  bool ret = true;
 8000bf2:	2301      	movs	r3, #1
 8000bf4:	71fb      	strb	r3, [r7, #7]

  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000bf6:	2300      	movs	r3, #0
 8000bf8:	603b      	str	r3, [r7, #0]
 8000bfa:	4b17      	ldr	r3, [pc, #92]	; (8000c58 <rtcInit+0x6c>)
 8000bfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bfe:	4a16      	ldr	r2, [pc, #88]	; (8000c58 <rtcInit+0x6c>)
 8000c00:	f043 0304 	orr.w	r3, r3, #4
 8000c04:	6313      	str	r3, [r2, #48]	; 0x30
 8000c06:	4b14      	ldr	r3, [pc, #80]	; (8000c58 <rtcInit+0x6c>)
 8000c08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c0a:	f003 0304 	and.w	r3, r3, #4
 8000c0e:	603b      	str	r3, [r7, #0]
 8000c10:	683b      	ldr	r3, [r7, #0]

  hrtc.Instance = RTC;
 8000c12:	4b12      	ldr	r3, [pc, #72]	; (8000c5c <rtcInit+0x70>)
 8000c14:	4a12      	ldr	r2, [pc, #72]	; (8000c60 <rtcInit+0x74>)
 8000c16:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000c18:	4b10      	ldr	r3, [pc, #64]	; (8000c5c <rtcInit+0x70>)
 8000c1a:	2200      	movs	r2, #0
 8000c1c:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000c1e:	4b0f      	ldr	r3, [pc, #60]	; (8000c5c <rtcInit+0x70>)
 8000c20:	227f      	movs	r2, #127	; 0x7f
 8000c22:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000c24:	4b0d      	ldr	r3, [pc, #52]	; (8000c5c <rtcInit+0x70>)
 8000c26:	22ff      	movs	r2, #255	; 0xff
 8000c28:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000c2a:	4b0c      	ldr	r3, [pc, #48]	; (8000c5c <rtcInit+0x70>)
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000c30:	4b0a      	ldr	r3, [pc, #40]	; (8000c5c <rtcInit+0x70>)
 8000c32:	2200      	movs	r2, #0
 8000c34:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000c36:	4b09      	ldr	r3, [pc, #36]	; (8000c5c <rtcInit+0x70>)
 8000c38:	2200      	movs	r2, #0
 8000c3a:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000c3c:	4807      	ldr	r0, [pc, #28]	; (8000c5c <rtcInit+0x70>)
 8000c3e:	f003 f981 	bl	8003f44 <HAL_RTC_Init>
 8000c42:	4603      	mov	r3, r0
 8000c44:	2b00      	cmp	r3, #0
 8000c46:	d001      	beq.n	8000c4c <rtcInit+0x60>
  {
    Error_Handler();
 8000c48:	f7ff fd82 	bl	8000750 <Error_Handler>
  }

  return ret;
 8000c4c:	79fb      	ldrb	r3, [r7, #7]

}
 8000c4e:	4618      	mov	r0, r3
 8000c50:	3708      	adds	r7, #8
 8000c52:	46bd      	mov	sp, r7
 8000c54:	bd80      	pop	{r7, pc}
 8000c56:	bf00      	nop
 8000c58:	40023800 	.word	0x40023800
 8000c5c:	2000022c 	.word	0x2000022c
 8000c60:	40002800 	.word	0x40002800

08000c64 <rtcBackupRegWrite>:

void rtcBackupRegWrite(uint32_t index, uint32_t data)
{
 8000c64:	b580      	push	{r7, lr}
 8000c66:	b082      	sub	sp, #8
 8000c68:	af00      	add	r7, sp, #0
 8000c6a:	6078      	str	r0, [r7, #4]
 8000c6c:	6039      	str	r1, [r7, #0]

  HAL_RTCEx_BKUPWrite(&hrtc, index, data);
 8000c6e:	683a      	ldr	r2, [r7, #0]
 8000c70:	6879      	ldr	r1, [r7, #4]
 8000c72:	4803      	ldr	r0, [pc, #12]	; (8000c80 <rtcBackupRegWrite+0x1c>)
 8000c74:	f003 fa4b 	bl	800410e <HAL_RTCEx_BKUPWrite>

}
 8000c78:	bf00      	nop
 8000c7a:	3708      	adds	r7, #8
 8000c7c:	46bd      	mov	sp, r7
 8000c7e:	bd80      	pop	{r7, pc}
 8000c80:	2000022c 	.word	0x2000022c

08000c84 <rtcbackupRegRead>:

uint32_t rtcbackupRegRead(uint32_t index)
{
 8000c84:	b580      	push	{r7, lr}
 8000c86:	b082      	sub	sp, #8
 8000c88:	af00      	add	r7, sp, #0
 8000c8a:	6078      	str	r0, [r7, #4]
  return HAL_RTCEx_BKUPRead(&hrtc, index);
 8000c8c:	6879      	ldr	r1, [r7, #4]
 8000c8e:	4804      	ldr	r0, [pc, #16]	; (8000ca0 <rtcbackupRegRead+0x1c>)
 8000c90:	f003 fa57 	bl	8004142 <HAL_RTCEx_BKUPRead>
 8000c94:	4603      	mov	r3, r0
}
 8000c96:	4618      	mov	r0, r3
 8000c98:	3708      	adds	r7, #8
 8000c9a:	46bd      	mov	sp, r7
 8000c9c:	bd80      	pop	{r7, pc}
 8000c9e:	bf00      	nop
 8000ca0:	2000022c 	.word	0x2000022c

08000ca4 <HAL_RTC_MspInit>:


void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8000ca4:	b480      	push	{r7}
 8000ca6:	b083      	sub	sp, #12
 8000ca8:	af00      	add	r7, sp, #0
 8000caa:	6078      	str	r0, [r7, #4]

  if(rtcHandle->Instance==RTC)
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	681b      	ldr	r3, [r3, #0]
 8000cb0:	4a05      	ldr	r2, [pc, #20]	; (8000cc8 <HAL_RTC_MspInit+0x24>)
 8000cb2:	4293      	cmp	r3, r2
 8000cb4:	d102      	bne.n	8000cbc <HAL_RTC_MspInit+0x18>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000cb6:	4b05      	ldr	r3, [pc, #20]	; (8000ccc <HAL_RTC_MspInit+0x28>)
 8000cb8:	2201      	movs	r2, #1
 8000cba:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8000cbc:	bf00      	nop
 8000cbe:	370c      	adds	r7, #12
 8000cc0:	46bd      	mov	sp, r7
 8000cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc6:	4770      	bx	lr
 8000cc8:	40002800 	.word	0x40002800
 8000ccc:	42470e3c 	.word	0x42470e3c

08000cd0 <uartInit>:

UART_HandleTypeDef huart1;
DMA_HandleTypeDef hdma_usart1_rx;

bool uartInit(void)
{
 8000cd0:	b480      	push	{r7}
 8000cd2:	b083      	sub	sp, #12
 8000cd4:	af00      	add	r7, sp, #0
  for(int i=0; i<UART_MAX_CH; i++)
 8000cd6:	2300      	movs	r3, #0
 8000cd8:	607b      	str	r3, [r7, #4]
 8000cda:	e007      	b.n	8000cec <uartInit+0x1c>
  {
    is_open[i] = false;
 8000cdc:	4a08      	ldr	r2, [pc, #32]	; (8000d00 <uartInit+0x30>)
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	4413      	add	r3, r2
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	701a      	strb	r2, [r3, #0]
  for(int i=0; i<UART_MAX_CH; i++)
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	3301      	adds	r3, #1
 8000cea:	607b      	str	r3, [r7, #4]
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	2b01      	cmp	r3, #1
 8000cf0:	ddf4      	ble.n	8000cdc <uartInit+0xc>
  }

  return true;
 8000cf2:	2301      	movs	r3, #1

}
 8000cf4:	4618      	mov	r0, r3
 8000cf6:	370c      	adds	r7, #12
 8000cf8:	46bd      	mov	sp, r7
 8000cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cfe:	4770      	bx	lr
 8000d00:	2000024c 	.word	0x2000024c

08000d04 <uartOpen>:

bool uartOpen(uint8_t ch, uint32_t baud)
{
 8000d04:	b580      	push	{r7, lr}
 8000d06:	b084      	sub	sp, #16
 8000d08:	af00      	add	r7, sp, #0
 8000d0a:	4603      	mov	r3, r0
 8000d0c:	6039      	str	r1, [r7, #0]
 8000d0e:	71fb      	strb	r3, [r7, #7]
  bool ret = false;
 8000d10:	2300      	movs	r3, #0
 8000d12:	73fb      	strb	r3, [r7, #15]

  switch(ch)
 8000d14:	79fb      	ldrb	r3, [r7, #7]
 8000d16:	2b00      	cmp	r3, #0
 8000d18:	d002      	beq.n	8000d20 <uartOpen+0x1c>
 8000d1a:	2b01      	cmp	r3, #1
 8000d1c:	d007      	beq.n	8000d2e <uartOpen+0x2a>
 8000d1e:	e076      	b.n	8000e0e <uartOpen+0x10a>
  {
    case _DEF_UART1:
      is_open[ch] = true;
 8000d20:	79fb      	ldrb	r3, [r7, #7]
 8000d22:	4a3d      	ldr	r2, [pc, #244]	; (8000e18 <uartOpen+0x114>)
 8000d24:	2101      	movs	r1, #1
 8000d26:	54d1      	strb	r1, [r2, r3]
      ret = true;
 8000d28:	2301      	movs	r3, #1
 8000d2a:	73fb      	strb	r3, [r7, #15]
      break;
 8000d2c:	e06f      	b.n	8000e0e <uartOpen+0x10a>

    case _DEF_UART2:
      huart1.Instance = USART1;
 8000d2e:	4b3b      	ldr	r3, [pc, #236]	; (8000e1c <uartOpen+0x118>)
 8000d30:	4a3b      	ldr	r2, [pc, #236]	; (8000e20 <uartOpen+0x11c>)
 8000d32:	601a      	str	r2, [r3, #0]
      huart1.Init.BaudRate = baud;
 8000d34:	4a39      	ldr	r2, [pc, #228]	; (8000e1c <uartOpen+0x118>)
 8000d36:	683b      	ldr	r3, [r7, #0]
 8000d38:	6053      	str	r3, [r2, #4]
      huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000d3a:	4b38      	ldr	r3, [pc, #224]	; (8000e1c <uartOpen+0x118>)
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	609a      	str	r2, [r3, #8]
      huart1.Init.StopBits = UART_STOPBITS_1;
 8000d40:	4b36      	ldr	r3, [pc, #216]	; (8000e1c <uartOpen+0x118>)
 8000d42:	2200      	movs	r2, #0
 8000d44:	60da      	str	r2, [r3, #12]
      huart1.Init.Parity = UART_PARITY_NONE;
 8000d46:	4b35      	ldr	r3, [pc, #212]	; (8000e1c <uartOpen+0x118>)
 8000d48:	2200      	movs	r2, #0
 8000d4a:	611a      	str	r2, [r3, #16]
      huart1.Init.Mode = UART_MODE_TX_RX;
 8000d4c:	4b33      	ldr	r3, [pc, #204]	; (8000e1c <uartOpen+0x118>)
 8000d4e:	220c      	movs	r2, #12
 8000d50:	615a      	str	r2, [r3, #20]
      huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d52:	4b32      	ldr	r3, [pc, #200]	; (8000e1c <uartOpen+0x118>)
 8000d54:	2200      	movs	r2, #0
 8000d56:	619a      	str	r2, [r3, #24]
      huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d58:	4b30      	ldr	r3, [pc, #192]	; (8000e1c <uartOpen+0x118>)
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	61da      	str	r2, [r3, #28]

      HAL_UART_DeInit(&huart1);
 8000d5e:	482f      	ldr	r0, [pc, #188]	; (8000e1c <uartOpen+0x118>)
 8000d60:	f003 fa54 	bl	800420c <HAL_UART_DeInit>

      qbufferCreat(&qbuffer[ch], &rx_buf[0], 256);
 8000d64:	79fb      	ldrb	r3, [r7, #7]
 8000d66:	011b      	lsls	r3, r3, #4
 8000d68:	4a2e      	ldr	r2, [pc, #184]	; (8000e24 <uartOpen+0x120>)
 8000d6a:	4413      	add	r3, r2
 8000d6c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000d70:	492d      	ldr	r1, [pc, #180]	; (8000e28 <uartOpen+0x124>)
 8000d72:	4618      	mov	r0, r3
 8000d74:	f7ff fe43 	bl	80009fe <qbufferCreat>

      __HAL_RCC_DMA2_CLK_ENABLE();
 8000d78:	2300      	movs	r3, #0
 8000d7a:	60bb      	str	r3, [r7, #8]
 8000d7c:	4b2b      	ldr	r3, [pc, #172]	; (8000e2c <uartOpen+0x128>)
 8000d7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d80:	4a2a      	ldr	r2, [pc, #168]	; (8000e2c <uartOpen+0x128>)
 8000d82:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000d86:	6313      	str	r3, [r2, #48]	; 0x30
 8000d88:	4b28      	ldr	r3, [pc, #160]	; (8000e2c <uartOpen+0x128>)
 8000d8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d8c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000d90:	60bb      	str	r3, [r7, #8]
 8000d92:	68bb      	ldr	r3, [r7, #8]

      HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 8000d94:	2200      	movs	r2, #0
 8000d96:	2100      	movs	r1, #0
 8000d98:	203a      	movs	r0, #58	; 0x3a
 8000d9a:	f000 fb10 	bl	80013be <HAL_NVIC_SetPriority>
      HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8000d9e:	203a      	movs	r0, #58	; 0x3a
 8000da0:	f000 fb29 	bl	80013f6 <HAL_NVIC_EnableIRQ>



      if (HAL_UART_Init(&huart1) != HAL_OK)
 8000da4:	481d      	ldr	r0, [pc, #116]	; (8000e1c <uartOpen+0x118>)
 8000da6:	f003 f9e4 	bl	8004172 <HAL_UART_Init>
 8000daa:	4603      	mov	r3, r0
 8000dac:	2b00      	cmp	r3, #0
 8000dae:	d002      	beq.n	8000db6 <uartOpen+0xb2>
      {
        ret = false;
 8000db0:	2300      	movs	r3, #0
 8000db2:	73fb      	strb	r3, [r7, #15]
        }

        qbuffer[ch].in = qbuffer[ch].len - hdma_usart1_rx.Instance -> NDTR;
        qbuffer[ch].out = qbuffer[ch].in;
      }
      break;
 8000db4:	e02a      	b.n	8000e0c <uartOpen+0x108>
        ret = true;
 8000db6:	2301      	movs	r3, #1
 8000db8:	73fb      	strb	r3, [r7, #15]
        is_open[ch] = true;
 8000dba:	79fb      	ldrb	r3, [r7, #7]
 8000dbc:	4a16      	ldr	r2, [pc, #88]	; (8000e18 <uartOpen+0x114>)
 8000dbe:	2101      	movs	r1, #1
 8000dc0:	54d1      	strb	r1, [r2, r3]
        if(HAL_UART_Receive_DMA(&huart1, (uint8_t *)&rx_buf[0], 256) != HAL_OK)
 8000dc2:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000dc6:	4918      	ldr	r1, [pc, #96]	; (8000e28 <uartOpen+0x124>)
 8000dc8:	4814      	ldr	r0, [pc, #80]	; (8000e1c <uartOpen+0x118>)
 8000dca:	f003 fae5 	bl	8004398 <HAL_UART_Receive_DMA>
 8000dce:	4603      	mov	r3, r0
 8000dd0:	2b00      	cmp	r3, #0
 8000dd2:	d001      	beq.n	8000dd8 <uartOpen+0xd4>
          ret = false;
 8000dd4:	2300      	movs	r3, #0
 8000dd6:	73fb      	strb	r3, [r7, #15]
        qbuffer[ch].in = qbuffer[ch].len - hdma_usart1_rx.Instance -> NDTR;
 8000dd8:	79fb      	ldrb	r3, [r7, #7]
 8000dda:	4a12      	ldr	r2, [pc, #72]	; (8000e24 <uartOpen+0x120>)
 8000ddc:	011b      	lsls	r3, r3, #4
 8000dde:	4413      	add	r3, r2
 8000de0:	3308      	adds	r3, #8
 8000de2:	6819      	ldr	r1, [r3, #0]
 8000de4:	4b12      	ldr	r3, [pc, #72]	; (8000e30 <uartOpen+0x12c>)
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	685a      	ldr	r2, [r3, #4]
 8000dea:	79fb      	ldrb	r3, [r7, #7]
 8000dec:	1a8a      	subs	r2, r1, r2
 8000dee:	490d      	ldr	r1, [pc, #52]	; (8000e24 <uartOpen+0x120>)
 8000df0:	011b      	lsls	r3, r3, #4
 8000df2:	440b      	add	r3, r1
 8000df4:	601a      	str	r2, [r3, #0]
        qbuffer[ch].out = qbuffer[ch].in;
 8000df6:	79fa      	ldrb	r2, [r7, #7]
 8000df8:	79fb      	ldrb	r3, [r7, #7]
 8000dfa:	490a      	ldr	r1, [pc, #40]	; (8000e24 <uartOpen+0x120>)
 8000dfc:	0112      	lsls	r2, r2, #4
 8000dfe:	440a      	add	r2, r1
 8000e00:	6812      	ldr	r2, [r2, #0]
 8000e02:	4908      	ldr	r1, [pc, #32]	; (8000e24 <uartOpen+0x120>)
 8000e04:	011b      	lsls	r3, r3, #4
 8000e06:	440b      	add	r3, r1
 8000e08:	3304      	adds	r3, #4
 8000e0a:	601a      	str	r2, [r3, #0]
      break;
 8000e0c:	bf00      	nop

  }

  return ret;
 8000e0e:	7bfb      	ldrb	r3, [r7, #15]

}
 8000e10:	4618      	mov	r0, r3
 8000e12:	3710      	adds	r7, #16
 8000e14:	46bd      	mov	sp, r7
 8000e16:	bd80      	pop	{r7, pc}
 8000e18:	2000024c 	.word	0x2000024c
 8000e1c:	200003e8 	.word	0x200003e8
 8000e20:	40011000 	.word	0x40011000
 8000e24:	20000250 	.word	0x20000250
 8000e28:	20000270 	.word	0x20000270
 8000e2c:	40023800 	.word	0x40023800
 8000e30:	20000388 	.word	0x20000388

08000e34 <uartWrite>:
  return ret;

}

uint32_t uartWrite(uint8_t ch, uint8_t *p_data, uint32_t length)
{
 8000e34:	b580      	push	{r7, lr}
 8000e36:	b086      	sub	sp, #24
 8000e38:	af00      	add	r7, sp, #0
 8000e3a:	4603      	mov	r3, r0
 8000e3c:	60b9      	str	r1, [r7, #8]
 8000e3e:	607a      	str	r2, [r7, #4]
 8000e40:	73fb      	strb	r3, [r7, #15]
  uint32_t ret = 0;
 8000e42:	2300      	movs	r3, #0
 8000e44:	617b      	str	r3, [r7, #20]
  HAL_StatusTypeDef status;

  switch(ch)
 8000e46:	7bfb      	ldrb	r3, [r7, #15]
 8000e48:	2b00      	cmp	r3, #0
 8000e4a:	d002      	beq.n	8000e52 <uartWrite+0x1e>
 8000e4c:	2b01      	cmp	r3, #1
 8000e4e:	d006      	beq.n	8000e5e <uartWrite+0x2a>
 8000e50:	e014      	b.n	8000e7c <uartWrite+0x48>
  {
    case _DEF_UART1:
      ret = cdcWrite(p_data, length);
 8000e52:	6879      	ldr	r1, [r7, #4]
 8000e54:	68b8      	ldr	r0, [r7, #8]
 8000e56:	f007 f969 	bl	800812c <cdcWrite>
 8000e5a:	6178      	str	r0, [r7, #20]
      break;
 8000e5c:	e00e      	b.n	8000e7c <uartWrite+0x48>

    case _DEF_UART2:
      status = HAL_UART_Transmit(&huart1, p_data, length, 100);
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	b29a      	uxth	r2, r3
 8000e62:	2364      	movs	r3, #100	; 0x64
 8000e64:	68b9      	ldr	r1, [r7, #8]
 8000e66:	4808      	ldr	r0, [pc, #32]	; (8000e88 <uartWrite+0x54>)
 8000e68:	f003 f9fc 	bl	8004264 <HAL_UART_Transmit>
 8000e6c:	4603      	mov	r3, r0
 8000e6e:	74fb      	strb	r3, [r7, #19]
      if(status == HAL_OK)
 8000e70:	7cfb      	ldrb	r3, [r7, #19]
 8000e72:	2b00      	cmp	r3, #0
 8000e74:	d101      	bne.n	8000e7a <uartWrite+0x46>
      {
        ret = length;
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	617b      	str	r3, [r7, #20]
      }
      break;
 8000e7a:	bf00      	nop
  }

  return ret;
 8000e7c:	697b      	ldr	r3, [r7, #20]


}
 8000e7e:	4618      	mov	r0, r3
 8000e80:	3718      	adds	r7, #24
 8000e82:	46bd      	mov	sp, r7
 8000e84:	bd80      	pop	{r7, pc}
 8000e86:	bf00      	nop
 8000e88:	200003e8 	.word	0x200003e8

08000e8c <HAL_UART_RxCpltCallback>:
}



void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000e8c:	b480      	push	{r7}
 8000e8e:	b083      	sub	sp, #12
 8000e90:	af00      	add	r7, sp, #0
 8000e92:	6078      	str	r0, [r7, #4]
    qbufferWrite(&qbuffer[_DEF_UART2], &rx_data[_DEF_UART2], 1);

    HAL_UART_Receive_IT(&huart1, (uint8_t *)&rx_data[_DEF_UART2], 1);
  }
#endif
}
 8000e94:	bf00      	nop
 8000e96:	370c      	adds	r7, #12
 8000e98:	46bd      	mov	sp, r7
 8000e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e9e:	4770      	bx	lr

08000ea0 <HAL_UART_ErrorCallback>:

void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8000ea0:	b480      	push	{r7}
 8000ea2:	b083      	sub	sp, #12
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	6078      	str	r0, [r7, #4]
  if (huart->Instance == USART1)
  {

  }
}
 8000ea8:	bf00      	nop
 8000eaa:	370c      	adds	r7, #12
 8000eac:	46bd      	mov	sp, r7
 8000eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb2:	4770      	bx	lr

08000eb4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	b08a      	sub	sp, #40	; 0x28
 8000eb8:	af00      	add	r7, sp, #0
 8000eba:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ebc:	f107 0314 	add.w	r3, r7, #20
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	601a      	str	r2, [r3, #0]
 8000ec4:	605a      	str	r2, [r3, #4]
 8000ec6:	609a      	str	r2, [r3, #8]
 8000ec8:	60da      	str	r2, [r3, #12]
 8000eca:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	4a35      	ldr	r2, [pc, #212]	; (8000fa8 <HAL_UART_MspInit+0xf4>)
 8000ed2:	4293      	cmp	r3, r2
 8000ed4:	d163      	bne.n	8000f9e <HAL_UART_MspInit+0xea>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	613b      	str	r3, [r7, #16]
 8000eda:	4b34      	ldr	r3, [pc, #208]	; (8000fac <HAL_UART_MspInit+0xf8>)
 8000edc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ede:	4a33      	ldr	r2, [pc, #204]	; (8000fac <HAL_UART_MspInit+0xf8>)
 8000ee0:	f043 0310 	orr.w	r3, r3, #16
 8000ee4:	6453      	str	r3, [r2, #68]	; 0x44
 8000ee6:	4b31      	ldr	r3, [pc, #196]	; (8000fac <HAL_UART_MspInit+0xf8>)
 8000ee8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000eea:	f003 0310 	and.w	r3, r3, #16
 8000eee:	613b      	str	r3, [r7, #16]
 8000ef0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	60fb      	str	r3, [r7, #12]
 8000ef6:	4b2d      	ldr	r3, [pc, #180]	; (8000fac <HAL_UART_MspInit+0xf8>)
 8000ef8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000efa:	4a2c      	ldr	r2, [pc, #176]	; (8000fac <HAL_UART_MspInit+0xf8>)
 8000efc:	f043 0301 	orr.w	r3, r3, #1
 8000f00:	6313      	str	r3, [r2, #48]	; 0x30
 8000f02:	4b2a      	ldr	r3, [pc, #168]	; (8000fac <HAL_UART_MspInit+0xf8>)
 8000f04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f06:	f003 0301 	and.w	r3, r3, #1
 8000f0a:	60fb      	str	r3, [r7, #12]
 8000f0c:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000f0e:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000f12:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f14:	2302      	movs	r3, #2
 8000f16:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f18:	2300      	movs	r3, #0
 8000f1a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f1c:	2303      	movs	r3, #3
 8000f1e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000f20:	2307      	movs	r3, #7
 8000f22:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f24:	f107 0314 	add.w	r3, r7, #20
 8000f28:	4619      	mov	r1, r3
 8000f2a:	4821      	ldr	r0, [pc, #132]	; (8000fb0 <HAL_UART_MspInit+0xfc>)
 8000f2c:	f000 fe7a 	bl	8001c24 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream2;
 8000f30:	4b20      	ldr	r3, [pc, #128]	; (8000fb4 <HAL_UART_MspInit+0x100>)
 8000f32:	4a21      	ldr	r2, [pc, #132]	; (8000fb8 <HAL_UART_MspInit+0x104>)
 8000f34:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 8000f36:	4b1f      	ldr	r3, [pc, #124]	; (8000fb4 <HAL_UART_MspInit+0x100>)
 8000f38:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000f3c:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000f3e:	4b1d      	ldr	r3, [pc, #116]	; (8000fb4 <HAL_UART_MspInit+0x100>)
 8000f40:	2200      	movs	r2, #0
 8000f42:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000f44:	4b1b      	ldr	r3, [pc, #108]	; (8000fb4 <HAL_UART_MspInit+0x100>)
 8000f46:	2200      	movs	r2, #0
 8000f48:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000f4a:	4b1a      	ldr	r3, [pc, #104]	; (8000fb4 <HAL_UART_MspInit+0x100>)
 8000f4c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000f50:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000f52:	4b18      	ldr	r3, [pc, #96]	; (8000fb4 <HAL_UART_MspInit+0x100>)
 8000f54:	2200      	movs	r2, #0
 8000f56:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000f58:	4b16      	ldr	r3, [pc, #88]	; (8000fb4 <HAL_UART_MspInit+0x100>)
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 8000f5e:	4b15      	ldr	r3, [pc, #84]	; (8000fb4 <HAL_UART_MspInit+0x100>)
 8000f60:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000f64:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000f66:	4b13      	ldr	r3, [pc, #76]	; (8000fb4 <HAL_UART_MspInit+0x100>)
 8000f68:	2200      	movs	r2, #0
 8000f6a:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000f6c:	4b11      	ldr	r3, [pc, #68]	; (8000fb4 <HAL_UART_MspInit+0x100>)
 8000f6e:	2200      	movs	r2, #0
 8000f70:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8000f72:	4810      	ldr	r0, [pc, #64]	; (8000fb4 <HAL_UART_MspInit+0x100>)
 8000f74:	f000 fa68 	bl	8001448 <HAL_DMA_Init>
 8000f78:	4603      	mov	r3, r0
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	d001      	beq.n	8000f82 <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 8000f7e:	f7ff fbe7 	bl	8000750 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	4a0b      	ldr	r2, [pc, #44]	; (8000fb4 <HAL_UART_MspInit+0x100>)
 8000f86:	635a      	str	r2, [r3, #52]	; 0x34
 8000f88:	4a0a      	ldr	r2, [pc, #40]	; (8000fb4 <HAL_UART_MspInit+0x100>)
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000f8e:	2200      	movs	r2, #0
 8000f90:	2100      	movs	r1, #0
 8000f92:	2025      	movs	r0, #37	; 0x25
 8000f94:	f000 fa13 	bl	80013be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000f98:	2025      	movs	r0, #37	; 0x25
 8000f9a:	f000 fa2c 	bl	80013f6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8000f9e:	bf00      	nop
 8000fa0:	3728      	adds	r7, #40	; 0x28
 8000fa2:	46bd      	mov	sp, r7
 8000fa4:	bd80      	pop	{r7, pc}
 8000fa6:	bf00      	nop
 8000fa8:	40011000 	.word	0x40011000
 8000fac:	40023800 	.word	0x40023800
 8000fb0:	40020000 	.word	0x40020000
 8000fb4:	20000388 	.word	0x20000388
 8000fb8:	40026440 	.word	0x40026440

08000fbc <HAL_UART_MspDeInit>:

void HAL_UART_MspDeInit(UART_HandleTypeDef* uartHandle)
{
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	b082      	sub	sp, #8
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	6078      	str	r0, [r7, #4]

  if(uartHandle->Instance==USART1)
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	4a0c      	ldr	r2, [pc, #48]	; (8000ffc <HAL_UART_MspDeInit+0x40>)
 8000fca:	4293      	cmp	r3, r2
 8000fcc:	d112      	bne.n	8000ff4 <HAL_UART_MspDeInit+0x38>
  {
  /* USER CODE BEGIN USART1_MspDeInit 0 */

  /* USER CODE END USART1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USART1_CLK_DISABLE();
 8000fce:	4b0c      	ldr	r3, [pc, #48]	; (8001000 <HAL_UART_MspDeInit+0x44>)
 8000fd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fd2:	4a0b      	ldr	r2, [pc, #44]	; (8001000 <HAL_UART_MspDeInit+0x44>)
 8000fd4:	f023 0310 	bic.w	r3, r3, #16
 8000fd8:	6453      	str	r3, [r2, #68]	; 0x44

    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_9|GPIO_PIN_10);
 8000fda:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8000fde:	4809      	ldr	r0, [pc, #36]	; (8001004 <HAL_UART_MspDeInit+0x48>)
 8000fe0:	f000 ffba 	bl	8001f58 <HAL_GPIO_DeInit>

    /* USART1 DMA DeInit */
    HAL_DMA_DeInit(uartHandle->hdmarx);
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000fe8:	4618      	mov	r0, r3
 8000fea:	f000 fadb 	bl	80015a4 <HAL_DMA_DeInit>

    /* USART1 interrupt Deinit */
    HAL_NVIC_DisableIRQ(USART1_IRQn);
 8000fee:	2025      	movs	r0, #37	; 0x25
 8000ff0:	f000 fa0f 	bl	8001412 <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN USART1_MspDeInit 1 */

  /* USER CODE END USART1_MspDeInit 1 */
  }
}
 8000ff4:	bf00      	nop
 8000ff6:	3708      	adds	r7, #8
 8000ff8:	46bd      	mov	sp, r7
 8000ffa:	bd80      	pop	{r7, pc}
 8000ffc:	40011000 	.word	0x40011000
 8001000:	40023800 	.word	0x40023800
 8001004:	40020000 	.word	0x40020000

08001008 <usbInit>:


#include "usb.h"

bool usbInit(void)
{
 8001008:	b580      	push	{r7, lr}
 800100a:	b086      	sub	sp, #24
 800100c:	af00      	add	r7, sp, #0
  bool ret = true;
 800100e:	2301      	movs	r3, #1
 8001010:	75fb      	strb	r3, [r7, #23]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001012:	463b      	mov	r3, r7
 8001014:	2200      	movs	r2, #0
 8001016:	601a      	str	r2, [r3, #0]
 8001018:	605a      	str	r2, [r3, #4]
 800101a:	609a      	str	r2, [r3, #8]
 800101c:	60da      	str	r2, [r3, #12]
 800101e:	611a      	str	r2, [r3, #16]

  /*USB Reset GPIO at reset*/
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001020:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001024:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8001026:	2311      	movs	r3, #17
 8001028:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800102a:	2300      	movs	r3, #0
 800102c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800102e:	2300      	movs	r3, #0
 8001030:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001032:	463b      	mov	r3, r7
 8001034:	4619      	mov	r1, r3
 8001036:	4810      	ldr	r0, [pc, #64]	; (8001078 <usbInit+0x70>)
 8001038:	f000 fdf4 	bl	8001c24 <HAL_GPIO_Init>

  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
 800103c:	2200      	movs	r2, #0
 800103e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001042:	480d      	ldr	r0, [pc, #52]	; (8001078 <usbInit+0x70>)
 8001044:	f001 f882 	bl	800214c <HAL_GPIO_WritePin>
  delay(100);
 8001048:	2064      	movs	r0, #100	; 0x64
 800104a:	f7ff fadf 	bl	800060c <delay>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET);
 800104e:	2201      	movs	r2, #1
 8001050:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001054:	4808      	ldr	r0, [pc, #32]	; (8001078 <usbInit+0x70>)
 8001056:	f001 f879 	bl	800214c <HAL_GPIO_WritePin>

  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800105a:	2300      	movs	r3, #0
 800105c:	607b      	str	r3, [r7, #4]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800105e:	463b      	mov	r3, r7
 8001060:	4619      	mov	r1, r3
 8001062:	4805      	ldr	r0, [pc, #20]	; (8001078 <usbInit+0x70>)
 8001064:	f000 fdde 	bl	8001c24 <HAL_GPIO_Init>


  MX_USB_DEVICE_Init();
 8001068:	f006 ffe6 	bl	8008038 <MX_USB_DEVICE_Init>

  return ret;
 800106c:	7dfb      	ldrb	r3, [r7, #23]
}
 800106e:	4618      	mov	r0, r3
 8001070:	3718      	adds	r7, #24
 8001072:	46bd      	mov	sp, r7
 8001074:	bd80      	pop	{r7, pc}
 8001076:	bf00      	nop
 8001078:	40020000 	.word	0x40020000

0800107c <hwInit>:


#include "hw.h"

void hwInit(void)
{
 800107c:	b580      	push	{r7, lr}
 800107e:	af00      	add	r7, sp, #0

  bspInit();
 8001080:	f7ff faa8 	bl	80005d4 <bspInit>
  rtcInit();
 8001084:	f7ff fdb2 	bl	8000bec <rtcInit>

  resetInit();
 8001088:	f7ff fd84 	bl	8000b94 <resetInit>
  ledInit();
 800108c:	f7ff fcd2 	bl	8000a34 <ledInit>
  usbInit();
 8001090:	f7ff ffba 	bl	8001008 <usbInit>
  uartInit();
 8001094:	f7ff fe1c 	bl	8000cd0 <uartInit>

}
 8001098:	bf00      	nop
 800109a:	bd80      	pop	{r7, pc}

0800109c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800109c:	b580      	push	{r7, lr}
 800109e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80010a0:	4b0e      	ldr	r3, [pc, #56]	; (80010dc <HAL_Init+0x40>)
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	4a0d      	ldr	r2, [pc, #52]	; (80010dc <HAL_Init+0x40>)
 80010a6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80010aa:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80010ac:	4b0b      	ldr	r3, [pc, #44]	; (80010dc <HAL_Init+0x40>)
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	4a0a      	ldr	r2, [pc, #40]	; (80010dc <HAL_Init+0x40>)
 80010b2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80010b6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80010b8:	4b08      	ldr	r3, [pc, #32]	; (80010dc <HAL_Init+0x40>)
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	4a07      	ldr	r2, [pc, #28]	; (80010dc <HAL_Init+0x40>)
 80010be:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80010c2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80010c4:	2003      	movs	r0, #3
 80010c6:	f000 f96f 	bl	80013a8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80010ca:	2000      	movs	r0, #0
 80010cc:	f000 f808 	bl	80010e0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80010d0:	f7ff fb42 	bl	8000758 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80010d4:	2300      	movs	r3, #0
}
 80010d6:	4618      	mov	r0, r3
 80010d8:	bd80      	pop	{r7, pc}
 80010da:	bf00      	nop
 80010dc:	40023c00 	.word	0x40023c00

080010e0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	b082      	sub	sp, #8
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80010e8:	4b12      	ldr	r3, [pc, #72]	; (8001134 <HAL_InitTick+0x54>)
 80010ea:	681a      	ldr	r2, [r3, #0]
 80010ec:	4b12      	ldr	r3, [pc, #72]	; (8001138 <HAL_InitTick+0x58>)
 80010ee:	781b      	ldrb	r3, [r3, #0]
 80010f0:	4619      	mov	r1, r3
 80010f2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80010f6:	fbb3 f3f1 	udiv	r3, r3, r1
 80010fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80010fe:	4618      	mov	r0, r3
 8001100:	f000 f995 	bl	800142e <HAL_SYSTICK_Config>
 8001104:	4603      	mov	r3, r0
 8001106:	2b00      	cmp	r3, #0
 8001108:	d001      	beq.n	800110e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800110a:	2301      	movs	r3, #1
 800110c:	e00e      	b.n	800112c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	2b0f      	cmp	r3, #15
 8001112:	d80a      	bhi.n	800112a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001114:	2200      	movs	r2, #0
 8001116:	6879      	ldr	r1, [r7, #4]
 8001118:	f04f 30ff 	mov.w	r0, #4294967295
 800111c:	f000 f94f 	bl	80013be <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001120:	4a06      	ldr	r2, [pc, #24]	; (800113c <HAL_InitTick+0x5c>)
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001126:	2300      	movs	r3, #0
 8001128:	e000      	b.n	800112c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800112a:	2301      	movs	r3, #1
}
 800112c:	4618      	mov	r0, r3
 800112e:	3708      	adds	r7, #8
 8001130:	46bd      	mov	sp, r7
 8001132:	bd80      	pop	{r7, pc}
 8001134:	20000000 	.word	0x20000000
 8001138:	20000020 	.word	0x20000020
 800113c:	2000001c 	.word	0x2000001c

08001140 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001140:	b480      	push	{r7}
 8001142:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001144:	4b06      	ldr	r3, [pc, #24]	; (8001160 <HAL_IncTick+0x20>)
 8001146:	781b      	ldrb	r3, [r3, #0]
 8001148:	461a      	mov	r2, r3
 800114a:	4b06      	ldr	r3, [pc, #24]	; (8001164 <HAL_IncTick+0x24>)
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	4413      	add	r3, r2
 8001150:	4a04      	ldr	r2, [pc, #16]	; (8001164 <HAL_IncTick+0x24>)
 8001152:	6013      	str	r3, [r2, #0]
}
 8001154:	bf00      	nop
 8001156:	46bd      	mov	sp, r7
 8001158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800115c:	4770      	bx	lr
 800115e:	bf00      	nop
 8001160:	20000020 	.word	0x20000020
 8001164:	20000428 	.word	0x20000428

08001168 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001168:	b480      	push	{r7}
 800116a:	af00      	add	r7, sp, #0
  return uwTick;
 800116c:	4b03      	ldr	r3, [pc, #12]	; (800117c <HAL_GetTick+0x14>)
 800116e:	681b      	ldr	r3, [r3, #0]
}
 8001170:	4618      	mov	r0, r3
 8001172:	46bd      	mov	sp, r7
 8001174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001178:	4770      	bx	lr
 800117a:	bf00      	nop
 800117c:	20000428 	.word	0x20000428

08001180 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001180:	b580      	push	{r7, lr}
 8001182:	b084      	sub	sp, #16
 8001184:	af00      	add	r7, sp, #0
 8001186:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001188:	f7ff ffee 	bl	8001168 <HAL_GetTick>
 800118c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001192:	68fb      	ldr	r3, [r7, #12]
 8001194:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001198:	d005      	beq.n	80011a6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800119a:	4b09      	ldr	r3, [pc, #36]	; (80011c0 <HAL_Delay+0x40>)
 800119c:	781b      	ldrb	r3, [r3, #0]
 800119e:	461a      	mov	r2, r3
 80011a0:	68fb      	ldr	r3, [r7, #12]
 80011a2:	4413      	add	r3, r2
 80011a4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80011a6:	bf00      	nop
 80011a8:	f7ff ffde 	bl	8001168 <HAL_GetTick>
 80011ac:	4602      	mov	r2, r0
 80011ae:	68bb      	ldr	r3, [r7, #8]
 80011b0:	1ad3      	subs	r3, r2, r3
 80011b2:	68fa      	ldr	r2, [r7, #12]
 80011b4:	429a      	cmp	r2, r3
 80011b6:	d8f7      	bhi.n	80011a8 <HAL_Delay+0x28>
  {
  }
}
 80011b8:	bf00      	nop
 80011ba:	3710      	adds	r7, #16
 80011bc:	46bd      	mov	sp, r7
 80011be:	bd80      	pop	{r7, pc}
 80011c0:	20000020 	.word	0x20000020

080011c4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011c4:	b480      	push	{r7}
 80011c6:	b085      	sub	sp, #20
 80011c8:	af00      	add	r7, sp, #0
 80011ca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	f003 0307 	and.w	r3, r3, #7
 80011d2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80011d4:	4b0c      	ldr	r3, [pc, #48]	; (8001208 <__NVIC_SetPriorityGrouping+0x44>)
 80011d6:	68db      	ldr	r3, [r3, #12]
 80011d8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80011da:	68ba      	ldr	r2, [r7, #8]
 80011dc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80011e0:	4013      	ands	r3, r2
 80011e2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80011e4:	68fb      	ldr	r3, [r7, #12]
 80011e6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80011e8:	68bb      	ldr	r3, [r7, #8]
 80011ea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80011ec:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80011f0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80011f4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80011f6:	4a04      	ldr	r2, [pc, #16]	; (8001208 <__NVIC_SetPriorityGrouping+0x44>)
 80011f8:	68bb      	ldr	r3, [r7, #8]
 80011fa:	60d3      	str	r3, [r2, #12]
}
 80011fc:	bf00      	nop
 80011fe:	3714      	adds	r7, #20
 8001200:	46bd      	mov	sp, r7
 8001202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001206:	4770      	bx	lr
 8001208:	e000ed00 	.word	0xe000ed00

0800120c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800120c:	b480      	push	{r7}
 800120e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001210:	4b04      	ldr	r3, [pc, #16]	; (8001224 <__NVIC_GetPriorityGrouping+0x18>)
 8001212:	68db      	ldr	r3, [r3, #12]
 8001214:	0a1b      	lsrs	r3, r3, #8
 8001216:	f003 0307 	and.w	r3, r3, #7
}
 800121a:	4618      	mov	r0, r3
 800121c:	46bd      	mov	sp, r7
 800121e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001222:	4770      	bx	lr
 8001224:	e000ed00 	.word	0xe000ed00

08001228 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001228:	b480      	push	{r7}
 800122a:	b083      	sub	sp, #12
 800122c:	af00      	add	r7, sp, #0
 800122e:	4603      	mov	r3, r0
 8001230:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001232:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001236:	2b00      	cmp	r3, #0
 8001238:	db0b      	blt.n	8001252 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800123a:	79fb      	ldrb	r3, [r7, #7]
 800123c:	f003 021f 	and.w	r2, r3, #31
 8001240:	4907      	ldr	r1, [pc, #28]	; (8001260 <__NVIC_EnableIRQ+0x38>)
 8001242:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001246:	095b      	lsrs	r3, r3, #5
 8001248:	2001      	movs	r0, #1
 800124a:	fa00 f202 	lsl.w	r2, r0, r2
 800124e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001252:	bf00      	nop
 8001254:	370c      	adds	r7, #12
 8001256:	46bd      	mov	sp, r7
 8001258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800125c:	4770      	bx	lr
 800125e:	bf00      	nop
 8001260:	e000e100 	.word	0xe000e100

08001264 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8001264:	b480      	push	{r7}
 8001266:	b083      	sub	sp, #12
 8001268:	af00      	add	r7, sp, #0
 800126a:	4603      	mov	r3, r0
 800126c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800126e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001272:	2b00      	cmp	r3, #0
 8001274:	db10      	blt.n	8001298 <__NVIC_DisableIRQ+0x34>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001276:	79fb      	ldrb	r3, [r7, #7]
 8001278:	f003 021f 	and.w	r2, r3, #31
 800127c:	4909      	ldr	r1, [pc, #36]	; (80012a4 <__NVIC_DisableIRQ+0x40>)
 800127e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001282:	095b      	lsrs	r3, r3, #5
 8001284:	2001      	movs	r0, #1
 8001286:	fa00 f202 	lsl.w	r2, r0, r2
 800128a:	3320      	adds	r3, #32
 800128c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001290:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8001294:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
  }
}
 8001298:	bf00      	nop
 800129a:	370c      	adds	r7, #12
 800129c:	46bd      	mov	sp, r7
 800129e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a2:	4770      	bx	lr
 80012a4:	e000e100 	.word	0xe000e100

080012a8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80012a8:	b480      	push	{r7}
 80012aa:	b083      	sub	sp, #12
 80012ac:	af00      	add	r7, sp, #0
 80012ae:	4603      	mov	r3, r0
 80012b0:	6039      	str	r1, [r7, #0]
 80012b2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	db0a      	blt.n	80012d2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012bc:	683b      	ldr	r3, [r7, #0]
 80012be:	b2da      	uxtb	r2, r3
 80012c0:	490c      	ldr	r1, [pc, #48]	; (80012f4 <__NVIC_SetPriority+0x4c>)
 80012c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012c6:	0112      	lsls	r2, r2, #4
 80012c8:	b2d2      	uxtb	r2, r2
 80012ca:	440b      	add	r3, r1
 80012cc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80012d0:	e00a      	b.n	80012e8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012d2:	683b      	ldr	r3, [r7, #0]
 80012d4:	b2da      	uxtb	r2, r3
 80012d6:	4908      	ldr	r1, [pc, #32]	; (80012f8 <__NVIC_SetPriority+0x50>)
 80012d8:	79fb      	ldrb	r3, [r7, #7]
 80012da:	f003 030f 	and.w	r3, r3, #15
 80012de:	3b04      	subs	r3, #4
 80012e0:	0112      	lsls	r2, r2, #4
 80012e2:	b2d2      	uxtb	r2, r2
 80012e4:	440b      	add	r3, r1
 80012e6:	761a      	strb	r2, [r3, #24]
}
 80012e8:	bf00      	nop
 80012ea:	370c      	adds	r7, #12
 80012ec:	46bd      	mov	sp, r7
 80012ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f2:	4770      	bx	lr
 80012f4:	e000e100 	.word	0xe000e100
 80012f8:	e000ed00 	.word	0xe000ed00

080012fc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80012fc:	b480      	push	{r7}
 80012fe:	b089      	sub	sp, #36	; 0x24
 8001300:	af00      	add	r7, sp, #0
 8001302:	60f8      	str	r0, [r7, #12]
 8001304:	60b9      	str	r1, [r7, #8]
 8001306:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001308:	68fb      	ldr	r3, [r7, #12]
 800130a:	f003 0307 	and.w	r3, r3, #7
 800130e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001310:	69fb      	ldr	r3, [r7, #28]
 8001312:	f1c3 0307 	rsb	r3, r3, #7
 8001316:	2b04      	cmp	r3, #4
 8001318:	bf28      	it	cs
 800131a:	2304      	movcs	r3, #4
 800131c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800131e:	69fb      	ldr	r3, [r7, #28]
 8001320:	3304      	adds	r3, #4
 8001322:	2b06      	cmp	r3, #6
 8001324:	d902      	bls.n	800132c <NVIC_EncodePriority+0x30>
 8001326:	69fb      	ldr	r3, [r7, #28]
 8001328:	3b03      	subs	r3, #3
 800132a:	e000      	b.n	800132e <NVIC_EncodePriority+0x32>
 800132c:	2300      	movs	r3, #0
 800132e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001330:	f04f 32ff 	mov.w	r2, #4294967295
 8001334:	69bb      	ldr	r3, [r7, #24]
 8001336:	fa02 f303 	lsl.w	r3, r2, r3
 800133a:	43da      	mvns	r2, r3
 800133c:	68bb      	ldr	r3, [r7, #8]
 800133e:	401a      	ands	r2, r3
 8001340:	697b      	ldr	r3, [r7, #20]
 8001342:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001344:	f04f 31ff 	mov.w	r1, #4294967295
 8001348:	697b      	ldr	r3, [r7, #20]
 800134a:	fa01 f303 	lsl.w	r3, r1, r3
 800134e:	43d9      	mvns	r1, r3
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001354:	4313      	orrs	r3, r2
         );
}
 8001356:	4618      	mov	r0, r3
 8001358:	3724      	adds	r7, #36	; 0x24
 800135a:	46bd      	mov	sp, r7
 800135c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001360:	4770      	bx	lr
	...

08001364 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001364:	b580      	push	{r7, lr}
 8001366:	b082      	sub	sp, #8
 8001368:	af00      	add	r7, sp, #0
 800136a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	3b01      	subs	r3, #1
 8001370:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001374:	d301      	bcc.n	800137a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001376:	2301      	movs	r3, #1
 8001378:	e00f      	b.n	800139a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800137a:	4a0a      	ldr	r2, [pc, #40]	; (80013a4 <SysTick_Config+0x40>)
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	3b01      	subs	r3, #1
 8001380:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001382:	210f      	movs	r1, #15
 8001384:	f04f 30ff 	mov.w	r0, #4294967295
 8001388:	f7ff ff8e 	bl	80012a8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800138c:	4b05      	ldr	r3, [pc, #20]	; (80013a4 <SysTick_Config+0x40>)
 800138e:	2200      	movs	r2, #0
 8001390:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001392:	4b04      	ldr	r3, [pc, #16]	; (80013a4 <SysTick_Config+0x40>)
 8001394:	2207      	movs	r2, #7
 8001396:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001398:	2300      	movs	r3, #0
}
 800139a:	4618      	mov	r0, r3
 800139c:	3708      	adds	r7, #8
 800139e:	46bd      	mov	sp, r7
 80013a0:	bd80      	pop	{r7, pc}
 80013a2:	bf00      	nop
 80013a4:	e000e010 	.word	0xe000e010

080013a8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013a8:	b580      	push	{r7, lr}
 80013aa:	b082      	sub	sp, #8
 80013ac:	af00      	add	r7, sp, #0
 80013ae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80013b0:	6878      	ldr	r0, [r7, #4]
 80013b2:	f7ff ff07 	bl	80011c4 <__NVIC_SetPriorityGrouping>
}
 80013b6:	bf00      	nop
 80013b8:	3708      	adds	r7, #8
 80013ba:	46bd      	mov	sp, r7
 80013bc:	bd80      	pop	{r7, pc}

080013be <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80013be:	b580      	push	{r7, lr}
 80013c0:	b086      	sub	sp, #24
 80013c2:	af00      	add	r7, sp, #0
 80013c4:	4603      	mov	r3, r0
 80013c6:	60b9      	str	r1, [r7, #8]
 80013c8:	607a      	str	r2, [r7, #4]
 80013ca:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80013cc:	2300      	movs	r3, #0
 80013ce:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80013d0:	f7ff ff1c 	bl	800120c <__NVIC_GetPriorityGrouping>
 80013d4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80013d6:	687a      	ldr	r2, [r7, #4]
 80013d8:	68b9      	ldr	r1, [r7, #8]
 80013da:	6978      	ldr	r0, [r7, #20]
 80013dc:	f7ff ff8e 	bl	80012fc <NVIC_EncodePriority>
 80013e0:	4602      	mov	r2, r0
 80013e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80013e6:	4611      	mov	r1, r2
 80013e8:	4618      	mov	r0, r3
 80013ea:	f7ff ff5d 	bl	80012a8 <__NVIC_SetPriority>
}
 80013ee:	bf00      	nop
 80013f0:	3718      	adds	r7, #24
 80013f2:	46bd      	mov	sp, r7
 80013f4:	bd80      	pop	{r7, pc}

080013f6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80013f6:	b580      	push	{r7, lr}
 80013f8:	b082      	sub	sp, #8
 80013fa:	af00      	add	r7, sp, #0
 80013fc:	4603      	mov	r3, r0
 80013fe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001400:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001404:	4618      	mov	r0, r3
 8001406:	f7ff ff0f 	bl	8001228 <__NVIC_EnableIRQ>
}
 800140a:	bf00      	nop
 800140c:	3708      	adds	r7, #8
 800140e:	46bd      	mov	sp, r7
 8001410:	bd80      	pop	{r7, pc}

08001412 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8001412:	b580      	push	{r7, lr}
 8001414:	b082      	sub	sp, #8
 8001416:	af00      	add	r7, sp, #0
 8001418:	4603      	mov	r3, r0
 800141a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 800141c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001420:	4618      	mov	r0, r3
 8001422:	f7ff ff1f 	bl	8001264 <__NVIC_DisableIRQ>
}
 8001426:	bf00      	nop
 8001428:	3708      	adds	r7, #8
 800142a:	46bd      	mov	sp, r7
 800142c:	bd80      	pop	{r7, pc}

0800142e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800142e:	b580      	push	{r7, lr}
 8001430:	b082      	sub	sp, #8
 8001432:	af00      	add	r7, sp, #0
 8001434:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001436:	6878      	ldr	r0, [r7, #4]
 8001438:	f7ff ff94 	bl	8001364 <SysTick_Config>
 800143c:	4603      	mov	r3, r0
}
 800143e:	4618      	mov	r0, r3
 8001440:	3708      	adds	r7, #8
 8001442:	46bd      	mov	sp, r7
 8001444:	bd80      	pop	{r7, pc}
	...

08001448 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001448:	b580      	push	{r7, lr}
 800144a:	b086      	sub	sp, #24
 800144c:	af00      	add	r7, sp, #0
 800144e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001450:	2300      	movs	r3, #0
 8001452:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001454:	f7ff fe88 	bl	8001168 <HAL_GetTick>
 8001458:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	2b00      	cmp	r3, #0
 800145e:	d101      	bne.n	8001464 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001460:	2301      	movs	r3, #1
 8001462:	e099      	b.n	8001598 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	2200      	movs	r2, #0
 8001468:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	2202      	movs	r2, #2
 8001470:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	681a      	ldr	r2, [r3, #0]
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	f022 0201 	bic.w	r2, r2, #1
 8001482:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001484:	e00f      	b.n	80014a6 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001486:	f7ff fe6f 	bl	8001168 <HAL_GetTick>
 800148a:	4602      	mov	r2, r0
 800148c:	693b      	ldr	r3, [r7, #16]
 800148e:	1ad3      	subs	r3, r2, r3
 8001490:	2b05      	cmp	r3, #5
 8001492:	d908      	bls.n	80014a6 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	2220      	movs	r2, #32
 8001498:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	2203      	movs	r2, #3
 800149e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80014a2:	2303      	movs	r3, #3
 80014a4:	e078      	b.n	8001598 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	f003 0301 	and.w	r3, r3, #1
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d1e8      	bne.n	8001486 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80014bc:	697a      	ldr	r2, [r7, #20]
 80014be:	4b38      	ldr	r3, [pc, #224]	; (80015a0 <HAL_DMA_Init+0x158>)
 80014c0:	4013      	ands	r3, r2
 80014c2:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	685a      	ldr	r2, [r3, #4]
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	689b      	ldr	r3, [r3, #8]
 80014cc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80014d2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	691b      	ldr	r3, [r3, #16]
 80014d8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80014de:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	699b      	ldr	r3, [r3, #24]
 80014e4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80014ea:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	6a1b      	ldr	r3, [r3, #32]
 80014f0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80014f2:	697a      	ldr	r2, [r7, #20]
 80014f4:	4313      	orrs	r3, r2
 80014f6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014fc:	2b04      	cmp	r3, #4
 80014fe:	d107      	bne.n	8001510 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001508:	4313      	orrs	r3, r2
 800150a:	697a      	ldr	r2, [r7, #20]
 800150c:	4313      	orrs	r3, r2
 800150e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	697a      	ldr	r2, [r7, #20]
 8001516:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	695b      	ldr	r3, [r3, #20]
 800151e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001520:	697b      	ldr	r3, [r7, #20]
 8001522:	f023 0307 	bic.w	r3, r3, #7
 8001526:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800152c:	697a      	ldr	r2, [r7, #20]
 800152e:	4313      	orrs	r3, r2
 8001530:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001536:	2b04      	cmp	r3, #4
 8001538:	d117      	bne.n	800156a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800153e:	697a      	ldr	r2, [r7, #20]
 8001540:	4313      	orrs	r3, r2
 8001542:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001548:	2b00      	cmp	r3, #0
 800154a:	d00e      	beq.n	800156a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800154c:	6878      	ldr	r0, [r7, #4]
 800154e:	f000 faef 	bl	8001b30 <DMA_CheckFifoParam>
 8001552:	4603      	mov	r3, r0
 8001554:	2b00      	cmp	r3, #0
 8001556:	d008      	beq.n	800156a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	2240      	movs	r2, #64	; 0x40
 800155c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	2201      	movs	r2, #1
 8001562:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001566:	2301      	movs	r3, #1
 8001568:	e016      	b.n	8001598 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	697a      	ldr	r2, [r7, #20]
 8001570:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001572:	6878      	ldr	r0, [r7, #4]
 8001574:	f000 faa6 	bl	8001ac4 <DMA_CalcBaseAndBitshift>
 8001578:	4603      	mov	r3, r0
 800157a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001580:	223f      	movs	r2, #63	; 0x3f
 8001582:	409a      	lsls	r2, r3
 8001584:	68fb      	ldr	r3, [r7, #12]
 8001586:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	2200      	movs	r2, #0
 800158c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	2201      	movs	r2, #1
 8001592:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001596:	2300      	movs	r3, #0
}
 8001598:	4618      	mov	r0, r3
 800159a:	3718      	adds	r7, #24
 800159c:	46bd      	mov	sp, r7
 800159e:	bd80      	pop	{r7, pc}
 80015a0:	f010803f 	.word	0xf010803f

080015a4 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 80015a4:	b580      	push	{r7, lr}
 80015a6:	b084      	sub	sp, #16
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d101      	bne.n	80015b6 <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 80015b2:	2301      	movs	r3, #1
 80015b4:	e050      	b.n	8001658 <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80015bc:	b2db      	uxtb	r3, r3
 80015be:	2b02      	cmp	r3, #2
 80015c0:	d101      	bne.n	80015c6 <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 80015c2:	2302      	movs	r3, #2
 80015c4:	e048      	b.n	8001658 <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	681a      	ldr	r2, [r3, #0]
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	f022 0201 	bic.w	r2, r2, #1
 80015d4:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	2200      	movs	r2, #0
 80015dc:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	2200      	movs	r2, #0
 80015e4:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	2200      	movs	r2, #0
 80015ec:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	2200      	movs	r2, #0
 80015f4:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	2200      	movs	r2, #0
 80015fc:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = 0x00000021U;
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	2221      	movs	r2, #33	; 0x21
 8001604:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001606:	6878      	ldr	r0, [r7, #4]
 8001608:	f000 fa5c 	bl	8001ac4 <DMA_CalcBaseAndBitshift>
 800160c:	4603      	mov	r3, r0
 800160e:	60fb      	str	r3, [r7, #12]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	2200      	movs	r2, #0
 8001614:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->XferHalfCpltCallback = NULL;
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	2200      	movs	r2, #0
 800161a:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->XferM1CpltCallback = NULL;
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	2200      	movs	r2, #0
 8001620:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	2200      	movs	r2, #0
 8001626:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->XferErrorCallback = NULL;
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	2200      	movs	r2, #0
 800162c:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->XferAbortCallback = NULL;
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	2200      	movs	r2, #0
 8001632:	651a      	str	r2, [r3, #80]	; 0x50

  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001638:	223f      	movs	r2, #63	; 0x3f
 800163a:	409a      	lsls	r2, r3
 800163c:	68fb      	ldr	r3, [r7, #12]
 800163e:	609a      	str	r2, [r3, #8]

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	2200      	movs	r2, #0
 8001644:	655a      	str	r2, [r3, #84]	; 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	2200      	movs	r2, #0
 800164a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	2200      	movs	r2, #0
 8001652:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8001656:	2300      	movs	r3, #0
}
 8001658:	4618      	mov	r0, r3
 800165a:	3710      	adds	r7, #16
 800165c:	46bd      	mov	sp, r7
 800165e:	bd80      	pop	{r7, pc}

08001660 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001660:	b580      	push	{r7, lr}
 8001662:	b086      	sub	sp, #24
 8001664:	af00      	add	r7, sp, #0
 8001666:	60f8      	str	r0, [r7, #12]
 8001668:	60b9      	str	r1, [r7, #8]
 800166a:	607a      	str	r2, [r7, #4]
 800166c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800166e:	2300      	movs	r3, #0
 8001670:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001672:	68fb      	ldr	r3, [r7, #12]
 8001674:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001676:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001678:	68fb      	ldr	r3, [r7, #12]
 800167a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800167e:	2b01      	cmp	r3, #1
 8001680:	d101      	bne.n	8001686 <HAL_DMA_Start_IT+0x26>
 8001682:	2302      	movs	r3, #2
 8001684:	e040      	b.n	8001708 <HAL_DMA_Start_IT+0xa8>
 8001686:	68fb      	ldr	r3, [r7, #12]
 8001688:	2201      	movs	r2, #1
 800168a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800168e:	68fb      	ldr	r3, [r7, #12]
 8001690:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001694:	b2db      	uxtb	r3, r3
 8001696:	2b01      	cmp	r3, #1
 8001698:	d12f      	bne.n	80016fa <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800169a:	68fb      	ldr	r3, [r7, #12]
 800169c:	2202      	movs	r2, #2
 800169e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80016a2:	68fb      	ldr	r3, [r7, #12]
 80016a4:	2200      	movs	r2, #0
 80016a6:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80016a8:	683b      	ldr	r3, [r7, #0]
 80016aa:	687a      	ldr	r2, [r7, #4]
 80016ac:	68b9      	ldr	r1, [r7, #8]
 80016ae:	68f8      	ldr	r0, [r7, #12]
 80016b0:	f000 f9da 	bl	8001a68 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80016b4:	68fb      	ldr	r3, [r7, #12]
 80016b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80016b8:	223f      	movs	r2, #63	; 0x3f
 80016ba:	409a      	lsls	r2, r3
 80016bc:	693b      	ldr	r3, [r7, #16]
 80016be:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80016c0:	68fb      	ldr	r3, [r7, #12]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	681a      	ldr	r2, [r3, #0]
 80016c6:	68fb      	ldr	r3, [r7, #12]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	f042 0216 	orr.w	r2, r2, #22
 80016ce:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80016d0:	68fb      	ldr	r3, [r7, #12]
 80016d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d007      	beq.n	80016e8 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80016d8:	68fb      	ldr	r3, [r7, #12]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	681a      	ldr	r2, [r3, #0]
 80016de:	68fb      	ldr	r3, [r7, #12]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	f042 0208 	orr.w	r2, r2, #8
 80016e6:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80016e8:	68fb      	ldr	r3, [r7, #12]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	681a      	ldr	r2, [r3, #0]
 80016ee:	68fb      	ldr	r3, [r7, #12]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	f042 0201 	orr.w	r2, r2, #1
 80016f6:	601a      	str	r2, [r3, #0]
 80016f8:	e005      	b.n	8001706 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80016fa:	68fb      	ldr	r3, [r7, #12]
 80016fc:	2200      	movs	r2, #0
 80016fe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001702:	2302      	movs	r3, #2
 8001704:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001706:	7dfb      	ldrb	r3, [r7, #23]
}
 8001708:	4618      	mov	r0, r3
 800170a:	3718      	adds	r7, #24
 800170c:	46bd      	mov	sp, r7
 800170e:	bd80      	pop	{r7, pc}

08001710 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001710:	b480      	push	{r7}
 8001712:	b083      	sub	sp, #12
 8001714:	af00      	add	r7, sp, #0
 8001716:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800171e:	b2db      	uxtb	r3, r3
 8001720:	2b02      	cmp	r3, #2
 8001722:	d004      	beq.n	800172e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	2280      	movs	r2, #128	; 0x80
 8001728:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800172a:	2301      	movs	r3, #1
 800172c:	e00c      	b.n	8001748 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	2205      	movs	r2, #5
 8001732:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	681a      	ldr	r2, [r3, #0]
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	f022 0201 	bic.w	r2, r2, #1
 8001744:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001746:	2300      	movs	r3, #0
}
 8001748:	4618      	mov	r0, r3
 800174a:	370c      	adds	r7, #12
 800174c:	46bd      	mov	sp, r7
 800174e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001752:	4770      	bx	lr

08001754 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001754:	b580      	push	{r7, lr}
 8001756:	b086      	sub	sp, #24
 8001758:	af00      	add	r7, sp, #0
 800175a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800175c:	2300      	movs	r3, #0
 800175e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001760:	4b92      	ldr	r3, [pc, #584]	; (80019ac <HAL_DMA_IRQHandler+0x258>)
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	4a92      	ldr	r2, [pc, #584]	; (80019b0 <HAL_DMA_IRQHandler+0x25c>)
 8001766:	fba2 2303 	umull	r2, r3, r2, r3
 800176a:	0a9b      	lsrs	r3, r3, #10
 800176c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001772:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001774:	693b      	ldr	r3, [r7, #16]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800177e:	2208      	movs	r2, #8
 8001780:	409a      	lsls	r2, r3
 8001782:	68fb      	ldr	r3, [r7, #12]
 8001784:	4013      	ands	r3, r2
 8001786:	2b00      	cmp	r3, #0
 8001788:	d01a      	beq.n	80017c0 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	f003 0304 	and.w	r3, r3, #4
 8001794:	2b00      	cmp	r3, #0
 8001796:	d013      	beq.n	80017c0 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	681a      	ldr	r2, [r3, #0]
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	f022 0204 	bic.w	r2, r2, #4
 80017a6:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80017ac:	2208      	movs	r2, #8
 80017ae:	409a      	lsls	r2, r3
 80017b0:	693b      	ldr	r3, [r7, #16]
 80017b2:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80017b8:	f043 0201 	orr.w	r2, r3, #1
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80017c4:	2201      	movs	r2, #1
 80017c6:	409a      	lsls	r2, r3
 80017c8:	68fb      	ldr	r3, [r7, #12]
 80017ca:	4013      	ands	r3, r2
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d012      	beq.n	80017f6 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	695b      	ldr	r3, [r3, #20]
 80017d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d00b      	beq.n	80017f6 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80017e2:	2201      	movs	r2, #1
 80017e4:	409a      	lsls	r2, r3
 80017e6:	693b      	ldr	r3, [r7, #16]
 80017e8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80017ee:	f043 0202 	orr.w	r2, r3, #2
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80017fa:	2204      	movs	r2, #4
 80017fc:	409a      	lsls	r2, r3
 80017fe:	68fb      	ldr	r3, [r7, #12]
 8001800:	4013      	ands	r3, r2
 8001802:	2b00      	cmp	r3, #0
 8001804:	d012      	beq.n	800182c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	f003 0302 	and.w	r3, r3, #2
 8001810:	2b00      	cmp	r3, #0
 8001812:	d00b      	beq.n	800182c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001818:	2204      	movs	r2, #4
 800181a:	409a      	lsls	r2, r3
 800181c:	693b      	ldr	r3, [r7, #16]
 800181e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001824:	f043 0204 	orr.w	r2, r3, #4
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001830:	2210      	movs	r2, #16
 8001832:	409a      	lsls	r2, r3
 8001834:	68fb      	ldr	r3, [r7, #12]
 8001836:	4013      	ands	r3, r2
 8001838:	2b00      	cmp	r3, #0
 800183a:	d043      	beq.n	80018c4 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	f003 0308 	and.w	r3, r3, #8
 8001846:	2b00      	cmp	r3, #0
 8001848:	d03c      	beq.n	80018c4 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800184e:	2210      	movs	r2, #16
 8001850:	409a      	lsls	r2, r3
 8001852:	693b      	ldr	r3, [r7, #16]
 8001854:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001860:	2b00      	cmp	r3, #0
 8001862:	d018      	beq.n	8001896 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800186e:	2b00      	cmp	r3, #0
 8001870:	d108      	bne.n	8001884 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001876:	2b00      	cmp	r3, #0
 8001878:	d024      	beq.n	80018c4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800187e:	6878      	ldr	r0, [r7, #4]
 8001880:	4798      	blx	r3
 8001882:	e01f      	b.n	80018c4 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001888:	2b00      	cmp	r3, #0
 800188a:	d01b      	beq.n	80018c4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001890:	6878      	ldr	r0, [r7, #4]
 8001892:	4798      	blx	r3
 8001894:	e016      	b.n	80018c4 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d107      	bne.n	80018b4 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	681a      	ldr	r2, [r3, #0]
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	f022 0208 	bic.w	r2, r2, #8
 80018b2:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d003      	beq.n	80018c4 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018c0:	6878      	ldr	r0, [r7, #4]
 80018c2:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80018c8:	2220      	movs	r2, #32
 80018ca:	409a      	lsls	r2, r3
 80018cc:	68fb      	ldr	r3, [r7, #12]
 80018ce:	4013      	ands	r3, r2
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	f000 808e 	beq.w	80019f2 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	f003 0310 	and.w	r3, r3, #16
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	f000 8086 	beq.w	80019f2 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80018ea:	2220      	movs	r2, #32
 80018ec:	409a      	lsls	r2, r3
 80018ee:	693b      	ldr	r3, [r7, #16]
 80018f0:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80018f8:	b2db      	uxtb	r3, r3
 80018fa:	2b05      	cmp	r3, #5
 80018fc:	d136      	bne.n	800196c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	681a      	ldr	r2, [r3, #0]
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	f022 0216 	bic.w	r2, r2, #22
 800190c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	695a      	ldr	r2, [r3, #20]
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800191c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001922:	2b00      	cmp	r3, #0
 8001924:	d103      	bne.n	800192e <HAL_DMA_IRQHandler+0x1da>
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800192a:	2b00      	cmp	r3, #0
 800192c:	d007      	beq.n	800193e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	681a      	ldr	r2, [r3, #0]
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	f022 0208 	bic.w	r2, r2, #8
 800193c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001942:	223f      	movs	r2, #63	; 0x3f
 8001944:	409a      	lsls	r2, r3
 8001946:	693b      	ldr	r3, [r7, #16]
 8001948:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	2200      	movs	r2, #0
 800194e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	2201      	movs	r2, #1
 8001956:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800195e:	2b00      	cmp	r3, #0
 8001960:	d07d      	beq.n	8001a5e <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001966:	6878      	ldr	r0, [r7, #4]
 8001968:	4798      	blx	r3
        }
        return;
 800196a:	e078      	b.n	8001a5e <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001976:	2b00      	cmp	r3, #0
 8001978:	d01c      	beq.n	80019b4 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001984:	2b00      	cmp	r3, #0
 8001986:	d108      	bne.n	800199a <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800198c:	2b00      	cmp	r3, #0
 800198e:	d030      	beq.n	80019f2 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001994:	6878      	ldr	r0, [r7, #4]
 8001996:	4798      	blx	r3
 8001998:	e02b      	b.n	80019f2 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d027      	beq.n	80019f2 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80019a6:	6878      	ldr	r0, [r7, #4]
 80019a8:	4798      	blx	r3
 80019aa:	e022      	b.n	80019f2 <HAL_DMA_IRQHandler+0x29e>
 80019ac:	20000000 	.word	0x20000000
 80019b0:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d10f      	bne.n	80019e2 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	681a      	ldr	r2, [r3, #0]
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	f022 0210 	bic.w	r2, r2, #16
 80019d0:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	2200      	movs	r2, #0
 80019d6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	2201      	movs	r2, #1
 80019de:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d003      	beq.n	80019f2 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80019ee:	6878      	ldr	r0, [r7, #4]
 80019f0:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d032      	beq.n	8001a60 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80019fe:	f003 0301 	and.w	r3, r3, #1
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d022      	beq.n	8001a4c <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	2205      	movs	r2, #5
 8001a0a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	681a      	ldr	r2, [r3, #0]
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	f022 0201 	bic.w	r2, r2, #1
 8001a1c:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001a1e:	68bb      	ldr	r3, [r7, #8]
 8001a20:	3301      	adds	r3, #1
 8001a22:	60bb      	str	r3, [r7, #8]
 8001a24:	697a      	ldr	r2, [r7, #20]
 8001a26:	429a      	cmp	r2, r3
 8001a28:	d307      	bcc.n	8001a3a <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	f003 0301 	and.w	r3, r3, #1
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d1f2      	bne.n	8001a1e <HAL_DMA_IRQHandler+0x2ca>
 8001a38:	e000      	b.n	8001a3c <HAL_DMA_IRQHandler+0x2e8>
          break;
 8001a3a:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	2200      	movs	r2, #0
 8001a40:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	2201      	movs	r2, #1
 8001a48:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d005      	beq.n	8001a60 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a58:	6878      	ldr	r0, [r7, #4]
 8001a5a:	4798      	blx	r3
 8001a5c:	e000      	b.n	8001a60 <HAL_DMA_IRQHandler+0x30c>
        return;
 8001a5e:	bf00      	nop
    }
  }
}
 8001a60:	3718      	adds	r7, #24
 8001a62:	46bd      	mov	sp, r7
 8001a64:	bd80      	pop	{r7, pc}
 8001a66:	bf00      	nop

08001a68 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001a68:	b480      	push	{r7}
 8001a6a:	b085      	sub	sp, #20
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	60f8      	str	r0, [r7, #12]
 8001a70:	60b9      	str	r1, [r7, #8]
 8001a72:	607a      	str	r2, [r7, #4]
 8001a74:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8001a76:	68fb      	ldr	r3, [r7, #12]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	681a      	ldr	r2, [r3, #0]
 8001a7c:	68fb      	ldr	r3, [r7, #12]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001a84:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8001a86:	68fb      	ldr	r3, [r7, #12]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	683a      	ldr	r2, [r7, #0]
 8001a8c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001a8e:	68fb      	ldr	r3, [r7, #12]
 8001a90:	689b      	ldr	r3, [r3, #8]
 8001a92:	2b40      	cmp	r3, #64	; 0x40
 8001a94:	d108      	bne.n	8001aa8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8001a96:	68fb      	ldr	r3, [r7, #12]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	687a      	ldr	r2, [r7, #4]
 8001a9c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8001a9e:	68fb      	ldr	r3, [r7, #12]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	68ba      	ldr	r2, [r7, #8]
 8001aa4:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8001aa6:	e007      	b.n	8001ab8 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8001aa8:	68fb      	ldr	r3, [r7, #12]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	68ba      	ldr	r2, [r7, #8]
 8001aae:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8001ab0:	68fb      	ldr	r3, [r7, #12]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	687a      	ldr	r2, [r7, #4]
 8001ab6:	60da      	str	r2, [r3, #12]
}
 8001ab8:	bf00      	nop
 8001aba:	3714      	adds	r7, #20
 8001abc:	46bd      	mov	sp, r7
 8001abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac2:	4770      	bx	lr

08001ac4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001ac4:	b480      	push	{r7}
 8001ac6:	b085      	sub	sp, #20
 8001ac8:	af00      	add	r7, sp, #0
 8001aca:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	b2db      	uxtb	r3, r3
 8001ad2:	3b10      	subs	r3, #16
 8001ad4:	4a14      	ldr	r2, [pc, #80]	; (8001b28 <DMA_CalcBaseAndBitshift+0x64>)
 8001ad6:	fba2 2303 	umull	r2, r3, r2, r3
 8001ada:	091b      	lsrs	r3, r3, #4
 8001adc:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001ade:	4a13      	ldr	r2, [pc, #76]	; (8001b2c <DMA_CalcBaseAndBitshift+0x68>)
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	4413      	add	r3, r2
 8001ae4:	781b      	ldrb	r3, [r3, #0]
 8001ae6:	461a      	mov	r2, r3
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8001aec:	68fb      	ldr	r3, [r7, #12]
 8001aee:	2b03      	cmp	r3, #3
 8001af0:	d909      	bls.n	8001b06 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001afa:	f023 0303 	bic.w	r3, r3, #3
 8001afe:	1d1a      	adds	r2, r3, #4
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	659a      	str	r2, [r3, #88]	; 0x58
 8001b04:	e007      	b.n	8001b16 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001b0e:	f023 0303 	bic.w	r3, r3, #3
 8001b12:	687a      	ldr	r2, [r7, #4]
 8001b14:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8001b1a:	4618      	mov	r0, r3
 8001b1c:	3714      	adds	r7, #20
 8001b1e:	46bd      	mov	sp, r7
 8001b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b24:	4770      	bx	lr
 8001b26:	bf00      	nop
 8001b28:	aaaaaaab 	.word	0xaaaaaaab
 8001b2c:	08009b50 	.word	0x08009b50

08001b30 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001b30:	b480      	push	{r7}
 8001b32:	b085      	sub	sp, #20
 8001b34:	af00      	add	r7, sp, #0
 8001b36:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001b38:	2300      	movs	r3, #0
 8001b3a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b40:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	699b      	ldr	r3, [r3, #24]
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d11f      	bne.n	8001b8a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8001b4a:	68bb      	ldr	r3, [r7, #8]
 8001b4c:	2b03      	cmp	r3, #3
 8001b4e:	d855      	bhi.n	8001bfc <DMA_CheckFifoParam+0xcc>
 8001b50:	a201      	add	r2, pc, #4	; (adr r2, 8001b58 <DMA_CheckFifoParam+0x28>)
 8001b52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b56:	bf00      	nop
 8001b58:	08001b69 	.word	0x08001b69
 8001b5c:	08001b7b 	.word	0x08001b7b
 8001b60:	08001b69 	.word	0x08001b69
 8001b64:	08001bfd 	.word	0x08001bfd
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b6c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d045      	beq.n	8001c00 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8001b74:	2301      	movs	r3, #1
 8001b76:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001b78:	e042      	b.n	8001c00 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b7e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001b82:	d13f      	bne.n	8001c04 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8001b84:	2301      	movs	r3, #1
 8001b86:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001b88:	e03c      	b.n	8001c04 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	699b      	ldr	r3, [r3, #24]
 8001b8e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001b92:	d121      	bne.n	8001bd8 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8001b94:	68bb      	ldr	r3, [r7, #8]
 8001b96:	2b03      	cmp	r3, #3
 8001b98:	d836      	bhi.n	8001c08 <DMA_CheckFifoParam+0xd8>
 8001b9a:	a201      	add	r2, pc, #4	; (adr r2, 8001ba0 <DMA_CheckFifoParam+0x70>)
 8001b9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ba0:	08001bb1 	.word	0x08001bb1
 8001ba4:	08001bb7 	.word	0x08001bb7
 8001ba8:	08001bb1 	.word	0x08001bb1
 8001bac:	08001bc9 	.word	0x08001bc9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001bb0:	2301      	movs	r3, #1
 8001bb2:	73fb      	strb	r3, [r7, #15]
      break;
 8001bb4:	e02f      	b.n	8001c16 <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bba:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d024      	beq.n	8001c0c <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8001bc2:	2301      	movs	r3, #1
 8001bc4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001bc6:	e021      	b.n	8001c0c <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bcc:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001bd0:	d11e      	bne.n	8001c10 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8001bd2:	2301      	movs	r3, #1
 8001bd4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001bd6:	e01b      	b.n	8001c10 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001bd8:	68bb      	ldr	r3, [r7, #8]
 8001bda:	2b02      	cmp	r3, #2
 8001bdc:	d902      	bls.n	8001be4 <DMA_CheckFifoParam+0xb4>
 8001bde:	2b03      	cmp	r3, #3
 8001be0:	d003      	beq.n	8001bea <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001be2:	e018      	b.n	8001c16 <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8001be4:	2301      	movs	r3, #1
 8001be6:	73fb      	strb	r3, [r7, #15]
      break;
 8001be8:	e015      	b.n	8001c16 <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bee:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d00e      	beq.n	8001c14 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8001bf6:	2301      	movs	r3, #1
 8001bf8:	73fb      	strb	r3, [r7, #15]
      break;
 8001bfa:	e00b      	b.n	8001c14 <DMA_CheckFifoParam+0xe4>
      break;
 8001bfc:	bf00      	nop
 8001bfe:	e00a      	b.n	8001c16 <DMA_CheckFifoParam+0xe6>
      break;
 8001c00:	bf00      	nop
 8001c02:	e008      	b.n	8001c16 <DMA_CheckFifoParam+0xe6>
      break;
 8001c04:	bf00      	nop
 8001c06:	e006      	b.n	8001c16 <DMA_CheckFifoParam+0xe6>
      break;
 8001c08:	bf00      	nop
 8001c0a:	e004      	b.n	8001c16 <DMA_CheckFifoParam+0xe6>
      break;
 8001c0c:	bf00      	nop
 8001c0e:	e002      	b.n	8001c16 <DMA_CheckFifoParam+0xe6>
      break;   
 8001c10:	bf00      	nop
 8001c12:	e000      	b.n	8001c16 <DMA_CheckFifoParam+0xe6>
      break;
 8001c14:	bf00      	nop
    }
  } 
  
  return status; 
 8001c16:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c18:	4618      	mov	r0, r3
 8001c1a:	3714      	adds	r7, #20
 8001c1c:	46bd      	mov	sp, r7
 8001c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c22:	4770      	bx	lr

08001c24 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001c24:	b480      	push	{r7}
 8001c26:	b089      	sub	sp, #36	; 0x24
 8001c28:	af00      	add	r7, sp, #0
 8001c2a:	6078      	str	r0, [r7, #4]
 8001c2c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001c2e:	2300      	movs	r3, #0
 8001c30:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001c32:	2300      	movs	r3, #0
 8001c34:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001c36:	2300      	movs	r3, #0
 8001c38:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001c3a:	2300      	movs	r3, #0
 8001c3c:	61fb      	str	r3, [r7, #28]
 8001c3e:	e16b      	b.n	8001f18 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001c40:	2201      	movs	r2, #1
 8001c42:	69fb      	ldr	r3, [r7, #28]
 8001c44:	fa02 f303 	lsl.w	r3, r2, r3
 8001c48:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001c4a:	683b      	ldr	r3, [r7, #0]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	697a      	ldr	r2, [r7, #20]
 8001c50:	4013      	ands	r3, r2
 8001c52:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001c54:	693a      	ldr	r2, [r7, #16]
 8001c56:	697b      	ldr	r3, [r7, #20]
 8001c58:	429a      	cmp	r2, r3
 8001c5a:	f040 815a 	bne.w	8001f12 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001c5e:	683b      	ldr	r3, [r7, #0]
 8001c60:	685b      	ldr	r3, [r3, #4]
 8001c62:	2b01      	cmp	r3, #1
 8001c64:	d00b      	beq.n	8001c7e <HAL_GPIO_Init+0x5a>
 8001c66:	683b      	ldr	r3, [r7, #0]
 8001c68:	685b      	ldr	r3, [r3, #4]
 8001c6a:	2b02      	cmp	r3, #2
 8001c6c:	d007      	beq.n	8001c7e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001c6e:	683b      	ldr	r3, [r7, #0]
 8001c70:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001c72:	2b11      	cmp	r3, #17
 8001c74:	d003      	beq.n	8001c7e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001c76:	683b      	ldr	r3, [r7, #0]
 8001c78:	685b      	ldr	r3, [r3, #4]
 8001c7a:	2b12      	cmp	r3, #18
 8001c7c:	d130      	bne.n	8001ce0 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	689b      	ldr	r3, [r3, #8]
 8001c82:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001c84:	69fb      	ldr	r3, [r7, #28]
 8001c86:	005b      	lsls	r3, r3, #1
 8001c88:	2203      	movs	r2, #3
 8001c8a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c8e:	43db      	mvns	r3, r3
 8001c90:	69ba      	ldr	r2, [r7, #24]
 8001c92:	4013      	ands	r3, r2
 8001c94:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001c96:	683b      	ldr	r3, [r7, #0]
 8001c98:	68da      	ldr	r2, [r3, #12]
 8001c9a:	69fb      	ldr	r3, [r7, #28]
 8001c9c:	005b      	lsls	r3, r3, #1
 8001c9e:	fa02 f303 	lsl.w	r3, r2, r3
 8001ca2:	69ba      	ldr	r2, [r7, #24]
 8001ca4:	4313      	orrs	r3, r2
 8001ca6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	69ba      	ldr	r2, [r7, #24]
 8001cac:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	685b      	ldr	r3, [r3, #4]
 8001cb2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001cb4:	2201      	movs	r2, #1
 8001cb6:	69fb      	ldr	r3, [r7, #28]
 8001cb8:	fa02 f303 	lsl.w	r3, r2, r3
 8001cbc:	43db      	mvns	r3, r3
 8001cbe:	69ba      	ldr	r2, [r7, #24]
 8001cc0:	4013      	ands	r3, r2
 8001cc2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001cc4:	683b      	ldr	r3, [r7, #0]
 8001cc6:	685b      	ldr	r3, [r3, #4]
 8001cc8:	091b      	lsrs	r3, r3, #4
 8001cca:	f003 0201 	and.w	r2, r3, #1
 8001cce:	69fb      	ldr	r3, [r7, #28]
 8001cd0:	fa02 f303 	lsl.w	r3, r2, r3
 8001cd4:	69ba      	ldr	r2, [r7, #24]
 8001cd6:	4313      	orrs	r3, r2
 8001cd8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	69ba      	ldr	r2, [r7, #24]
 8001cde:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	68db      	ldr	r3, [r3, #12]
 8001ce4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001ce6:	69fb      	ldr	r3, [r7, #28]
 8001ce8:	005b      	lsls	r3, r3, #1
 8001cea:	2203      	movs	r2, #3
 8001cec:	fa02 f303 	lsl.w	r3, r2, r3
 8001cf0:	43db      	mvns	r3, r3
 8001cf2:	69ba      	ldr	r2, [r7, #24]
 8001cf4:	4013      	ands	r3, r2
 8001cf6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001cf8:	683b      	ldr	r3, [r7, #0]
 8001cfa:	689a      	ldr	r2, [r3, #8]
 8001cfc:	69fb      	ldr	r3, [r7, #28]
 8001cfe:	005b      	lsls	r3, r3, #1
 8001d00:	fa02 f303 	lsl.w	r3, r2, r3
 8001d04:	69ba      	ldr	r2, [r7, #24]
 8001d06:	4313      	orrs	r3, r2
 8001d08:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	69ba      	ldr	r2, [r7, #24]
 8001d0e:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001d10:	683b      	ldr	r3, [r7, #0]
 8001d12:	685b      	ldr	r3, [r3, #4]
 8001d14:	2b02      	cmp	r3, #2
 8001d16:	d003      	beq.n	8001d20 <HAL_GPIO_Init+0xfc>
 8001d18:	683b      	ldr	r3, [r7, #0]
 8001d1a:	685b      	ldr	r3, [r3, #4]
 8001d1c:	2b12      	cmp	r3, #18
 8001d1e:	d123      	bne.n	8001d68 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001d20:	69fb      	ldr	r3, [r7, #28]
 8001d22:	08da      	lsrs	r2, r3, #3
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	3208      	adds	r2, #8
 8001d28:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001d2c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001d2e:	69fb      	ldr	r3, [r7, #28]
 8001d30:	f003 0307 	and.w	r3, r3, #7
 8001d34:	009b      	lsls	r3, r3, #2
 8001d36:	220f      	movs	r2, #15
 8001d38:	fa02 f303 	lsl.w	r3, r2, r3
 8001d3c:	43db      	mvns	r3, r3
 8001d3e:	69ba      	ldr	r2, [r7, #24]
 8001d40:	4013      	ands	r3, r2
 8001d42:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001d44:	683b      	ldr	r3, [r7, #0]
 8001d46:	691a      	ldr	r2, [r3, #16]
 8001d48:	69fb      	ldr	r3, [r7, #28]
 8001d4a:	f003 0307 	and.w	r3, r3, #7
 8001d4e:	009b      	lsls	r3, r3, #2
 8001d50:	fa02 f303 	lsl.w	r3, r2, r3
 8001d54:	69ba      	ldr	r2, [r7, #24]
 8001d56:	4313      	orrs	r3, r2
 8001d58:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001d5a:	69fb      	ldr	r3, [r7, #28]
 8001d5c:	08da      	lsrs	r2, r3, #3
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	3208      	adds	r2, #8
 8001d62:	69b9      	ldr	r1, [r7, #24]
 8001d64:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001d6e:	69fb      	ldr	r3, [r7, #28]
 8001d70:	005b      	lsls	r3, r3, #1
 8001d72:	2203      	movs	r2, #3
 8001d74:	fa02 f303 	lsl.w	r3, r2, r3
 8001d78:	43db      	mvns	r3, r3
 8001d7a:	69ba      	ldr	r2, [r7, #24]
 8001d7c:	4013      	ands	r3, r2
 8001d7e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001d80:	683b      	ldr	r3, [r7, #0]
 8001d82:	685b      	ldr	r3, [r3, #4]
 8001d84:	f003 0203 	and.w	r2, r3, #3
 8001d88:	69fb      	ldr	r3, [r7, #28]
 8001d8a:	005b      	lsls	r3, r3, #1
 8001d8c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d90:	69ba      	ldr	r2, [r7, #24]
 8001d92:	4313      	orrs	r3, r2
 8001d94:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	69ba      	ldr	r2, [r7, #24]
 8001d9a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001d9c:	683b      	ldr	r3, [r7, #0]
 8001d9e:	685b      	ldr	r3, [r3, #4]
 8001da0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	f000 80b4 	beq.w	8001f12 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001daa:	2300      	movs	r3, #0
 8001dac:	60fb      	str	r3, [r7, #12]
 8001dae:	4b5f      	ldr	r3, [pc, #380]	; (8001f2c <HAL_GPIO_Init+0x308>)
 8001db0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001db2:	4a5e      	ldr	r2, [pc, #376]	; (8001f2c <HAL_GPIO_Init+0x308>)
 8001db4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001db8:	6453      	str	r3, [r2, #68]	; 0x44
 8001dba:	4b5c      	ldr	r3, [pc, #368]	; (8001f2c <HAL_GPIO_Init+0x308>)
 8001dbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dbe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001dc2:	60fb      	str	r3, [r7, #12]
 8001dc4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001dc6:	4a5a      	ldr	r2, [pc, #360]	; (8001f30 <HAL_GPIO_Init+0x30c>)
 8001dc8:	69fb      	ldr	r3, [r7, #28]
 8001dca:	089b      	lsrs	r3, r3, #2
 8001dcc:	3302      	adds	r3, #2
 8001dce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001dd2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001dd4:	69fb      	ldr	r3, [r7, #28]
 8001dd6:	f003 0303 	and.w	r3, r3, #3
 8001dda:	009b      	lsls	r3, r3, #2
 8001ddc:	220f      	movs	r2, #15
 8001dde:	fa02 f303 	lsl.w	r3, r2, r3
 8001de2:	43db      	mvns	r3, r3
 8001de4:	69ba      	ldr	r2, [r7, #24]
 8001de6:	4013      	ands	r3, r2
 8001de8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	4a51      	ldr	r2, [pc, #324]	; (8001f34 <HAL_GPIO_Init+0x310>)
 8001dee:	4293      	cmp	r3, r2
 8001df0:	d02b      	beq.n	8001e4a <HAL_GPIO_Init+0x226>
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	4a50      	ldr	r2, [pc, #320]	; (8001f38 <HAL_GPIO_Init+0x314>)
 8001df6:	4293      	cmp	r3, r2
 8001df8:	d025      	beq.n	8001e46 <HAL_GPIO_Init+0x222>
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	4a4f      	ldr	r2, [pc, #316]	; (8001f3c <HAL_GPIO_Init+0x318>)
 8001dfe:	4293      	cmp	r3, r2
 8001e00:	d01f      	beq.n	8001e42 <HAL_GPIO_Init+0x21e>
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	4a4e      	ldr	r2, [pc, #312]	; (8001f40 <HAL_GPIO_Init+0x31c>)
 8001e06:	4293      	cmp	r3, r2
 8001e08:	d019      	beq.n	8001e3e <HAL_GPIO_Init+0x21a>
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	4a4d      	ldr	r2, [pc, #308]	; (8001f44 <HAL_GPIO_Init+0x320>)
 8001e0e:	4293      	cmp	r3, r2
 8001e10:	d013      	beq.n	8001e3a <HAL_GPIO_Init+0x216>
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	4a4c      	ldr	r2, [pc, #304]	; (8001f48 <HAL_GPIO_Init+0x324>)
 8001e16:	4293      	cmp	r3, r2
 8001e18:	d00d      	beq.n	8001e36 <HAL_GPIO_Init+0x212>
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	4a4b      	ldr	r2, [pc, #300]	; (8001f4c <HAL_GPIO_Init+0x328>)
 8001e1e:	4293      	cmp	r3, r2
 8001e20:	d007      	beq.n	8001e32 <HAL_GPIO_Init+0x20e>
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	4a4a      	ldr	r2, [pc, #296]	; (8001f50 <HAL_GPIO_Init+0x32c>)
 8001e26:	4293      	cmp	r3, r2
 8001e28:	d101      	bne.n	8001e2e <HAL_GPIO_Init+0x20a>
 8001e2a:	2307      	movs	r3, #7
 8001e2c:	e00e      	b.n	8001e4c <HAL_GPIO_Init+0x228>
 8001e2e:	2308      	movs	r3, #8
 8001e30:	e00c      	b.n	8001e4c <HAL_GPIO_Init+0x228>
 8001e32:	2306      	movs	r3, #6
 8001e34:	e00a      	b.n	8001e4c <HAL_GPIO_Init+0x228>
 8001e36:	2305      	movs	r3, #5
 8001e38:	e008      	b.n	8001e4c <HAL_GPIO_Init+0x228>
 8001e3a:	2304      	movs	r3, #4
 8001e3c:	e006      	b.n	8001e4c <HAL_GPIO_Init+0x228>
 8001e3e:	2303      	movs	r3, #3
 8001e40:	e004      	b.n	8001e4c <HAL_GPIO_Init+0x228>
 8001e42:	2302      	movs	r3, #2
 8001e44:	e002      	b.n	8001e4c <HAL_GPIO_Init+0x228>
 8001e46:	2301      	movs	r3, #1
 8001e48:	e000      	b.n	8001e4c <HAL_GPIO_Init+0x228>
 8001e4a:	2300      	movs	r3, #0
 8001e4c:	69fa      	ldr	r2, [r7, #28]
 8001e4e:	f002 0203 	and.w	r2, r2, #3
 8001e52:	0092      	lsls	r2, r2, #2
 8001e54:	4093      	lsls	r3, r2
 8001e56:	69ba      	ldr	r2, [r7, #24]
 8001e58:	4313      	orrs	r3, r2
 8001e5a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001e5c:	4934      	ldr	r1, [pc, #208]	; (8001f30 <HAL_GPIO_Init+0x30c>)
 8001e5e:	69fb      	ldr	r3, [r7, #28]
 8001e60:	089b      	lsrs	r3, r3, #2
 8001e62:	3302      	adds	r3, #2
 8001e64:	69ba      	ldr	r2, [r7, #24]
 8001e66:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001e6a:	4b3a      	ldr	r3, [pc, #232]	; (8001f54 <HAL_GPIO_Init+0x330>)
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e70:	693b      	ldr	r3, [r7, #16]
 8001e72:	43db      	mvns	r3, r3
 8001e74:	69ba      	ldr	r2, [r7, #24]
 8001e76:	4013      	ands	r3, r2
 8001e78:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001e7a:	683b      	ldr	r3, [r7, #0]
 8001e7c:	685b      	ldr	r3, [r3, #4]
 8001e7e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d003      	beq.n	8001e8e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001e86:	69ba      	ldr	r2, [r7, #24]
 8001e88:	693b      	ldr	r3, [r7, #16]
 8001e8a:	4313      	orrs	r3, r2
 8001e8c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001e8e:	4a31      	ldr	r2, [pc, #196]	; (8001f54 <HAL_GPIO_Init+0x330>)
 8001e90:	69bb      	ldr	r3, [r7, #24]
 8001e92:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001e94:	4b2f      	ldr	r3, [pc, #188]	; (8001f54 <HAL_GPIO_Init+0x330>)
 8001e96:	685b      	ldr	r3, [r3, #4]
 8001e98:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e9a:	693b      	ldr	r3, [r7, #16]
 8001e9c:	43db      	mvns	r3, r3
 8001e9e:	69ba      	ldr	r2, [r7, #24]
 8001ea0:	4013      	ands	r3, r2
 8001ea2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001ea4:	683b      	ldr	r3, [r7, #0]
 8001ea6:	685b      	ldr	r3, [r3, #4]
 8001ea8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d003      	beq.n	8001eb8 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001eb0:	69ba      	ldr	r2, [r7, #24]
 8001eb2:	693b      	ldr	r3, [r7, #16]
 8001eb4:	4313      	orrs	r3, r2
 8001eb6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001eb8:	4a26      	ldr	r2, [pc, #152]	; (8001f54 <HAL_GPIO_Init+0x330>)
 8001eba:	69bb      	ldr	r3, [r7, #24]
 8001ebc:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001ebe:	4b25      	ldr	r3, [pc, #148]	; (8001f54 <HAL_GPIO_Init+0x330>)
 8001ec0:	689b      	ldr	r3, [r3, #8]
 8001ec2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ec4:	693b      	ldr	r3, [r7, #16]
 8001ec6:	43db      	mvns	r3, r3
 8001ec8:	69ba      	ldr	r2, [r7, #24]
 8001eca:	4013      	ands	r3, r2
 8001ecc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001ece:	683b      	ldr	r3, [r7, #0]
 8001ed0:	685b      	ldr	r3, [r3, #4]
 8001ed2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d003      	beq.n	8001ee2 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001eda:	69ba      	ldr	r2, [r7, #24]
 8001edc:	693b      	ldr	r3, [r7, #16]
 8001ede:	4313      	orrs	r3, r2
 8001ee0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001ee2:	4a1c      	ldr	r2, [pc, #112]	; (8001f54 <HAL_GPIO_Init+0x330>)
 8001ee4:	69bb      	ldr	r3, [r7, #24]
 8001ee6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001ee8:	4b1a      	ldr	r3, [pc, #104]	; (8001f54 <HAL_GPIO_Init+0x330>)
 8001eea:	68db      	ldr	r3, [r3, #12]
 8001eec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001eee:	693b      	ldr	r3, [r7, #16]
 8001ef0:	43db      	mvns	r3, r3
 8001ef2:	69ba      	ldr	r2, [r7, #24]
 8001ef4:	4013      	ands	r3, r2
 8001ef6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001ef8:	683b      	ldr	r3, [r7, #0]
 8001efa:	685b      	ldr	r3, [r3, #4]
 8001efc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d003      	beq.n	8001f0c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001f04:	69ba      	ldr	r2, [r7, #24]
 8001f06:	693b      	ldr	r3, [r7, #16]
 8001f08:	4313      	orrs	r3, r2
 8001f0a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001f0c:	4a11      	ldr	r2, [pc, #68]	; (8001f54 <HAL_GPIO_Init+0x330>)
 8001f0e:	69bb      	ldr	r3, [r7, #24]
 8001f10:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001f12:	69fb      	ldr	r3, [r7, #28]
 8001f14:	3301      	adds	r3, #1
 8001f16:	61fb      	str	r3, [r7, #28]
 8001f18:	69fb      	ldr	r3, [r7, #28]
 8001f1a:	2b0f      	cmp	r3, #15
 8001f1c:	f67f ae90 	bls.w	8001c40 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001f20:	bf00      	nop
 8001f22:	3724      	adds	r7, #36	; 0x24
 8001f24:	46bd      	mov	sp, r7
 8001f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f2a:	4770      	bx	lr
 8001f2c:	40023800 	.word	0x40023800
 8001f30:	40013800 	.word	0x40013800
 8001f34:	40020000 	.word	0x40020000
 8001f38:	40020400 	.word	0x40020400
 8001f3c:	40020800 	.word	0x40020800
 8001f40:	40020c00 	.word	0x40020c00
 8001f44:	40021000 	.word	0x40021000
 8001f48:	40021400 	.word	0x40021400
 8001f4c:	40021800 	.word	0x40021800
 8001f50:	40021c00 	.word	0x40021c00
 8001f54:	40013c00 	.word	0x40013c00

08001f58 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8001f58:	b480      	push	{r7}
 8001f5a:	b087      	sub	sp, #28
 8001f5c:	af00      	add	r7, sp, #0
 8001f5e:	6078      	str	r0, [r7, #4]
 8001f60:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001f62:	2300      	movs	r3, #0
 8001f64:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 8001f66:	2300      	movs	r3, #0
 8001f68:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 8001f6a:	2300      	movs	r3, #0
 8001f6c:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001f6e:	2300      	movs	r3, #0
 8001f70:	617b      	str	r3, [r7, #20]
 8001f72:	e0cd      	b.n	8002110 <HAL_GPIO_DeInit+0x1b8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001f74:	2201      	movs	r2, #1
 8001f76:	697b      	ldr	r3, [r7, #20]
 8001f78:	fa02 f303 	lsl.w	r3, r2, r3
 8001f7c:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8001f7e:	683a      	ldr	r2, [r7, #0]
 8001f80:	693b      	ldr	r3, [r7, #16]
 8001f82:	4013      	ands	r3, r2
 8001f84:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 8001f86:	68fa      	ldr	r2, [r7, #12]
 8001f88:	693b      	ldr	r3, [r7, #16]
 8001f8a:	429a      	cmp	r2, r3
 8001f8c:	f040 80bd 	bne.w	800210a <HAL_GPIO_DeInit+0x1b2>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 8001f90:	4a64      	ldr	r2, [pc, #400]	; (8002124 <HAL_GPIO_DeInit+0x1cc>)
 8001f92:	697b      	ldr	r3, [r7, #20]
 8001f94:	089b      	lsrs	r3, r3, #2
 8001f96:	3302      	adds	r3, #2
 8001f98:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f9c:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 8001f9e:	697b      	ldr	r3, [r7, #20]
 8001fa0:	f003 0303 	and.w	r3, r3, #3
 8001fa4:	009b      	lsls	r3, r3, #2
 8001fa6:	220f      	movs	r2, #15
 8001fa8:	fa02 f303 	lsl.w	r3, r2, r3
 8001fac:	68ba      	ldr	r2, [r7, #8]
 8001fae:	4013      	ands	r3, r2
 8001fb0:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	4a5c      	ldr	r2, [pc, #368]	; (8002128 <HAL_GPIO_DeInit+0x1d0>)
 8001fb6:	4293      	cmp	r3, r2
 8001fb8:	d02b      	beq.n	8002012 <HAL_GPIO_DeInit+0xba>
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	4a5b      	ldr	r2, [pc, #364]	; (800212c <HAL_GPIO_DeInit+0x1d4>)
 8001fbe:	4293      	cmp	r3, r2
 8001fc0:	d025      	beq.n	800200e <HAL_GPIO_DeInit+0xb6>
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	4a5a      	ldr	r2, [pc, #360]	; (8002130 <HAL_GPIO_DeInit+0x1d8>)
 8001fc6:	4293      	cmp	r3, r2
 8001fc8:	d01f      	beq.n	800200a <HAL_GPIO_DeInit+0xb2>
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	4a59      	ldr	r2, [pc, #356]	; (8002134 <HAL_GPIO_DeInit+0x1dc>)
 8001fce:	4293      	cmp	r3, r2
 8001fd0:	d019      	beq.n	8002006 <HAL_GPIO_DeInit+0xae>
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	4a58      	ldr	r2, [pc, #352]	; (8002138 <HAL_GPIO_DeInit+0x1e0>)
 8001fd6:	4293      	cmp	r3, r2
 8001fd8:	d013      	beq.n	8002002 <HAL_GPIO_DeInit+0xaa>
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	4a57      	ldr	r2, [pc, #348]	; (800213c <HAL_GPIO_DeInit+0x1e4>)
 8001fde:	4293      	cmp	r3, r2
 8001fe0:	d00d      	beq.n	8001ffe <HAL_GPIO_DeInit+0xa6>
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	4a56      	ldr	r2, [pc, #344]	; (8002140 <HAL_GPIO_DeInit+0x1e8>)
 8001fe6:	4293      	cmp	r3, r2
 8001fe8:	d007      	beq.n	8001ffa <HAL_GPIO_DeInit+0xa2>
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	4a55      	ldr	r2, [pc, #340]	; (8002144 <HAL_GPIO_DeInit+0x1ec>)
 8001fee:	4293      	cmp	r3, r2
 8001ff0:	d101      	bne.n	8001ff6 <HAL_GPIO_DeInit+0x9e>
 8001ff2:	2307      	movs	r3, #7
 8001ff4:	e00e      	b.n	8002014 <HAL_GPIO_DeInit+0xbc>
 8001ff6:	2308      	movs	r3, #8
 8001ff8:	e00c      	b.n	8002014 <HAL_GPIO_DeInit+0xbc>
 8001ffa:	2306      	movs	r3, #6
 8001ffc:	e00a      	b.n	8002014 <HAL_GPIO_DeInit+0xbc>
 8001ffe:	2305      	movs	r3, #5
 8002000:	e008      	b.n	8002014 <HAL_GPIO_DeInit+0xbc>
 8002002:	2304      	movs	r3, #4
 8002004:	e006      	b.n	8002014 <HAL_GPIO_DeInit+0xbc>
 8002006:	2303      	movs	r3, #3
 8002008:	e004      	b.n	8002014 <HAL_GPIO_DeInit+0xbc>
 800200a:	2302      	movs	r3, #2
 800200c:	e002      	b.n	8002014 <HAL_GPIO_DeInit+0xbc>
 800200e:	2301      	movs	r3, #1
 8002010:	e000      	b.n	8002014 <HAL_GPIO_DeInit+0xbc>
 8002012:	2300      	movs	r3, #0
 8002014:	697a      	ldr	r2, [r7, #20]
 8002016:	f002 0203 	and.w	r2, r2, #3
 800201a:	0092      	lsls	r2, r2, #2
 800201c:	4093      	lsls	r3, r2
 800201e:	68ba      	ldr	r2, [r7, #8]
 8002020:	429a      	cmp	r2, r3
 8002022:	d132      	bne.n	800208a <HAL_GPIO_DeInit+0x132>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8002024:	4b48      	ldr	r3, [pc, #288]	; (8002148 <HAL_GPIO_DeInit+0x1f0>)
 8002026:	681a      	ldr	r2, [r3, #0]
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	43db      	mvns	r3, r3
 800202c:	4946      	ldr	r1, [pc, #280]	; (8002148 <HAL_GPIO_DeInit+0x1f0>)
 800202e:	4013      	ands	r3, r2
 8002030:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8002032:	4b45      	ldr	r3, [pc, #276]	; (8002148 <HAL_GPIO_DeInit+0x1f0>)
 8002034:	685a      	ldr	r2, [r3, #4]
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	43db      	mvns	r3, r3
 800203a:	4943      	ldr	r1, [pc, #268]	; (8002148 <HAL_GPIO_DeInit+0x1f0>)
 800203c:	4013      	ands	r3, r2
 800203e:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8002040:	4b41      	ldr	r3, [pc, #260]	; (8002148 <HAL_GPIO_DeInit+0x1f0>)
 8002042:	689a      	ldr	r2, [r3, #8]
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	43db      	mvns	r3, r3
 8002048:	493f      	ldr	r1, [pc, #252]	; (8002148 <HAL_GPIO_DeInit+0x1f0>)
 800204a:	4013      	ands	r3, r2
 800204c:	608b      	str	r3, [r1, #8]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 800204e:	4b3e      	ldr	r3, [pc, #248]	; (8002148 <HAL_GPIO_DeInit+0x1f0>)
 8002050:	68da      	ldr	r2, [r3, #12]
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	43db      	mvns	r3, r3
 8002056:	493c      	ldr	r1, [pc, #240]	; (8002148 <HAL_GPIO_DeInit+0x1f0>)
 8002058:	4013      	ands	r3, r2
 800205a:	60cb      	str	r3, [r1, #12]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 800205c:	697b      	ldr	r3, [r7, #20]
 800205e:	f003 0303 	and.w	r3, r3, #3
 8002062:	009b      	lsls	r3, r3, #2
 8002064:	220f      	movs	r2, #15
 8002066:	fa02 f303 	lsl.w	r3, r2, r3
 800206a:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 800206c:	4a2d      	ldr	r2, [pc, #180]	; (8002124 <HAL_GPIO_DeInit+0x1cc>)
 800206e:	697b      	ldr	r3, [r7, #20]
 8002070:	089b      	lsrs	r3, r3, #2
 8002072:	3302      	adds	r3, #2
 8002074:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8002078:	68bb      	ldr	r3, [r7, #8]
 800207a:	43da      	mvns	r2, r3
 800207c:	4829      	ldr	r0, [pc, #164]	; (8002124 <HAL_GPIO_DeInit+0x1cc>)
 800207e:	697b      	ldr	r3, [r7, #20]
 8002080:	089b      	lsrs	r3, r3, #2
 8002082:	400a      	ands	r2, r1
 8002084:	3302      	adds	r3, #2
 8002086:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681a      	ldr	r2, [r3, #0]
 800208e:	697b      	ldr	r3, [r7, #20]
 8002090:	005b      	lsls	r3, r3, #1
 8002092:	2103      	movs	r1, #3
 8002094:	fa01 f303 	lsl.w	r3, r1, r3
 8002098:	43db      	mvns	r3, r3
 800209a:	401a      	ands	r2, r3
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80020a0:	697b      	ldr	r3, [r7, #20]
 80020a2:	08da      	lsrs	r2, r3, #3
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	3208      	adds	r2, #8
 80020a8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80020ac:	697b      	ldr	r3, [r7, #20]
 80020ae:	f003 0307 	and.w	r3, r3, #7
 80020b2:	009b      	lsls	r3, r3, #2
 80020b4:	220f      	movs	r2, #15
 80020b6:	fa02 f303 	lsl.w	r3, r2, r3
 80020ba:	43db      	mvns	r3, r3
 80020bc:	697a      	ldr	r2, [r7, #20]
 80020be:	08d2      	lsrs	r2, r2, #3
 80020c0:	4019      	ands	r1, r3
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	3208      	adds	r2, #8
 80020c6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	68da      	ldr	r2, [r3, #12]
 80020ce:	697b      	ldr	r3, [r7, #20]
 80020d0:	005b      	lsls	r3, r3, #1
 80020d2:	2103      	movs	r1, #3
 80020d4:	fa01 f303 	lsl.w	r3, r1, r3
 80020d8:	43db      	mvns	r3, r3
 80020da:	401a      	ands	r2, r3
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	685a      	ldr	r2, [r3, #4]
 80020e4:	2101      	movs	r1, #1
 80020e6:	697b      	ldr	r3, [r7, #20]
 80020e8:	fa01 f303 	lsl.w	r3, r1, r3
 80020ec:	43db      	mvns	r3, r3
 80020ee:	401a      	ands	r2, r3
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	689a      	ldr	r2, [r3, #8]
 80020f8:	697b      	ldr	r3, [r7, #20]
 80020fa:	005b      	lsls	r3, r3, #1
 80020fc:	2103      	movs	r1, #3
 80020fe:	fa01 f303 	lsl.w	r3, r1, r3
 8002102:	43db      	mvns	r3, r3
 8002104:	401a      	ands	r2, r3
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800210a:	697b      	ldr	r3, [r7, #20]
 800210c:	3301      	adds	r3, #1
 800210e:	617b      	str	r3, [r7, #20]
 8002110:	697b      	ldr	r3, [r7, #20]
 8002112:	2b0f      	cmp	r3, #15
 8002114:	f67f af2e 	bls.w	8001f74 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8002118:	bf00      	nop
 800211a:	371c      	adds	r7, #28
 800211c:	46bd      	mov	sp, r7
 800211e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002122:	4770      	bx	lr
 8002124:	40013800 	.word	0x40013800
 8002128:	40020000 	.word	0x40020000
 800212c:	40020400 	.word	0x40020400
 8002130:	40020800 	.word	0x40020800
 8002134:	40020c00 	.word	0x40020c00
 8002138:	40021000 	.word	0x40021000
 800213c:	40021400 	.word	0x40021400
 8002140:	40021800 	.word	0x40021800
 8002144:	40021c00 	.word	0x40021c00
 8002148:	40013c00 	.word	0x40013c00

0800214c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800214c:	b480      	push	{r7}
 800214e:	b083      	sub	sp, #12
 8002150:	af00      	add	r7, sp, #0
 8002152:	6078      	str	r0, [r7, #4]
 8002154:	460b      	mov	r3, r1
 8002156:	807b      	strh	r3, [r7, #2]
 8002158:	4613      	mov	r3, r2
 800215a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800215c:	787b      	ldrb	r3, [r7, #1]
 800215e:	2b00      	cmp	r3, #0
 8002160:	d003      	beq.n	800216a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002162:	887a      	ldrh	r2, [r7, #2]
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002168:	e003      	b.n	8002172 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800216a:	887b      	ldrh	r3, [r7, #2]
 800216c:	041a      	lsls	r2, r3, #16
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	619a      	str	r2, [r3, #24]
}
 8002172:	bf00      	nop
 8002174:	370c      	adds	r7, #12
 8002176:	46bd      	mov	sp, r7
 8002178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800217c:	4770      	bx	lr

0800217e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800217e:	b480      	push	{r7}
 8002180:	b083      	sub	sp, #12
 8002182:	af00      	add	r7, sp, #0
 8002184:	6078      	str	r0, [r7, #4]
 8002186:	460b      	mov	r3, r1
 8002188:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	695a      	ldr	r2, [r3, #20]
 800218e:	887b      	ldrh	r3, [r7, #2]
 8002190:	401a      	ands	r2, r3
 8002192:	887b      	ldrh	r3, [r7, #2]
 8002194:	429a      	cmp	r2, r3
 8002196:	d104      	bne.n	80021a2 <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8002198:	887b      	ldrh	r3, [r7, #2]
 800219a:	041a      	lsls	r2, r3, #16
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 80021a0:	e002      	b.n	80021a8 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 80021a2:	887a      	ldrh	r2, [r7, #2]
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	619a      	str	r2, [r3, #24]
}
 80021a8:	bf00      	nop
 80021aa:	370c      	adds	r7, #12
 80021ac:	46bd      	mov	sp, r7
 80021ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b2:	4770      	bx	lr

080021b4 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80021b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80021b6:	b08f      	sub	sp, #60	; 0x3c
 80021b8:	af0a      	add	r7, sp, #40	; 0x28
 80021ba:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d101      	bne.n	80021c6 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80021c2:	2301      	movs	r3, #1
 80021c4:	e10f      	b.n	80023e6 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 80021d2:	b2db      	uxtb	r3, r3
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d106      	bne.n	80021e6 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	2200      	movs	r2, #0
 80021dc:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80021e0:	6878      	ldr	r0, [r7, #4]
 80021e2:	f006 fa41 	bl	8008668 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	2203      	movs	r2, #3
 80021ea:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80021ee:	68bb      	ldr	r3, [r7, #8]
 80021f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80021f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d102      	bne.n	8002200 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	2200      	movs	r2, #0
 80021fe:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	4618      	mov	r0, r3
 8002206:	f003 f8fa 	bl	80053fe <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	603b      	str	r3, [r7, #0]
 8002210:	687e      	ldr	r6, [r7, #4]
 8002212:	466d      	mov	r5, sp
 8002214:	f106 0410 	add.w	r4, r6, #16
 8002218:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800221a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800221c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800221e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002220:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002224:	e885 0003 	stmia.w	r5, {r0, r1}
 8002228:	1d33      	adds	r3, r6, #4
 800222a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800222c:	6838      	ldr	r0, [r7, #0]
 800222e:	f002 ffd1 	bl	80051d4 <USB_CoreInit>
 8002232:	4603      	mov	r3, r0
 8002234:	2b00      	cmp	r3, #0
 8002236:	d005      	beq.n	8002244 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	2202      	movs	r2, #2
 800223c:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8002240:	2301      	movs	r3, #1
 8002242:	e0d0      	b.n	80023e6 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	2100      	movs	r1, #0
 800224a:	4618      	mov	r0, r3
 800224c:	f003 f8e8 	bl	8005420 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002250:	2300      	movs	r3, #0
 8002252:	73fb      	strb	r3, [r7, #15]
 8002254:	e04a      	b.n	80022ec <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002256:	7bfa      	ldrb	r2, [r7, #15]
 8002258:	6879      	ldr	r1, [r7, #4]
 800225a:	4613      	mov	r3, r2
 800225c:	00db      	lsls	r3, r3, #3
 800225e:	1a9b      	subs	r3, r3, r2
 8002260:	009b      	lsls	r3, r3, #2
 8002262:	440b      	add	r3, r1
 8002264:	333d      	adds	r3, #61	; 0x3d
 8002266:	2201      	movs	r2, #1
 8002268:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800226a:	7bfa      	ldrb	r2, [r7, #15]
 800226c:	6879      	ldr	r1, [r7, #4]
 800226e:	4613      	mov	r3, r2
 8002270:	00db      	lsls	r3, r3, #3
 8002272:	1a9b      	subs	r3, r3, r2
 8002274:	009b      	lsls	r3, r3, #2
 8002276:	440b      	add	r3, r1
 8002278:	333c      	adds	r3, #60	; 0x3c
 800227a:	7bfa      	ldrb	r2, [r7, #15]
 800227c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800227e:	7bfa      	ldrb	r2, [r7, #15]
 8002280:	7bfb      	ldrb	r3, [r7, #15]
 8002282:	b298      	uxth	r0, r3
 8002284:	6879      	ldr	r1, [r7, #4]
 8002286:	4613      	mov	r3, r2
 8002288:	00db      	lsls	r3, r3, #3
 800228a:	1a9b      	subs	r3, r3, r2
 800228c:	009b      	lsls	r3, r3, #2
 800228e:	440b      	add	r3, r1
 8002290:	3342      	adds	r3, #66	; 0x42
 8002292:	4602      	mov	r2, r0
 8002294:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002296:	7bfa      	ldrb	r2, [r7, #15]
 8002298:	6879      	ldr	r1, [r7, #4]
 800229a:	4613      	mov	r3, r2
 800229c:	00db      	lsls	r3, r3, #3
 800229e:	1a9b      	subs	r3, r3, r2
 80022a0:	009b      	lsls	r3, r3, #2
 80022a2:	440b      	add	r3, r1
 80022a4:	333f      	adds	r3, #63	; 0x3f
 80022a6:	2200      	movs	r2, #0
 80022a8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80022aa:	7bfa      	ldrb	r2, [r7, #15]
 80022ac:	6879      	ldr	r1, [r7, #4]
 80022ae:	4613      	mov	r3, r2
 80022b0:	00db      	lsls	r3, r3, #3
 80022b2:	1a9b      	subs	r3, r3, r2
 80022b4:	009b      	lsls	r3, r3, #2
 80022b6:	440b      	add	r3, r1
 80022b8:	3344      	adds	r3, #68	; 0x44
 80022ba:	2200      	movs	r2, #0
 80022bc:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80022be:	7bfa      	ldrb	r2, [r7, #15]
 80022c0:	6879      	ldr	r1, [r7, #4]
 80022c2:	4613      	mov	r3, r2
 80022c4:	00db      	lsls	r3, r3, #3
 80022c6:	1a9b      	subs	r3, r3, r2
 80022c8:	009b      	lsls	r3, r3, #2
 80022ca:	440b      	add	r3, r1
 80022cc:	3348      	adds	r3, #72	; 0x48
 80022ce:	2200      	movs	r2, #0
 80022d0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80022d2:	7bfa      	ldrb	r2, [r7, #15]
 80022d4:	6879      	ldr	r1, [r7, #4]
 80022d6:	4613      	mov	r3, r2
 80022d8:	00db      	lsls	r3, r3, #3
 80022da:	1a9b      	subs	r3, r3, r2
 80022dc:	009b      	lsls	r3, r3, #2
 80022de:	440b      	add	r3, r1
 80022e0:	3350      	adds	r3, #80	; 0x50
 80022e2:	2200      	movs	r2, #0
 80022e4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80022e6:	7bfb      	ldrb	r3, [r7, #15]
 80022e8:	3301      	adds	r3, #1
 80022ea:	73fb      	strb	r3, [r7, #15]
 80022ec:	7bfa      	ldrb	r2, [r7, #15]
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	685b      	ldr	r3, [r3, #4]
 80022f2:	429a      	cmp	r2, r3
 80022f4:	d3af      	bcc.n	8002256 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80022f6:	2300      	movs	r3, #0
 80022f8:	73fb      	strb	r3, [r7, #15]
 80022fa:	e044      	b.n	8002386 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80022fc:	7bfa      	ldrb	r2, [r7, #15]
 80022fe:	6879      	ldr	r1, [r7, #4]
 8002300:	4613      	mov	r3, r2
 8002302:	00db      	lsls	r3, r3, #3
 8002304:	1a9b      	subs	r3, r3, r2
 8002306:	009b      	lsls	r3, r3, #2
 8002308:	440b      	add	r3, r1
 800230a:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 800230e:	2200      	movs	r2, #0
 8002310:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002312:	7bfa      	ldrb	r2, [r7, #15]
 8002314:	6879      	ldr	r1, [r7, #4]
 8002316:	4613      	mov	r3, r2
 8002318:	00db      	lsls	r3, r3, #3
 800231a:	1a9b      	subs	r3, r3, r2
 800231c:	009b      	lsls	r3, r3, #2
 800231e:	440b      	add	r3, r1
 8002320:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8002324:	7bfa      	ldrb	r2, [r7, #15]
 8002326:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002328:	7bfa      	ldrb	r2, [r7, #15]
 800232a:	6879      	ldr	r1, [r7, #4]
 800232c:	4613      	mov	r3, r2
 800232e:	00db      	lsls	r3, r3, #3
 8002330:	1a9b      	subs	r3, r3, r2
 8002332:	009b      	lsls	r3, r3, #2
 8002334:	440b      	add	r3, r1
 8002336:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800233a:	2200      	movs	r2, #0
 800233c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800233e:	7bfa      	ldrb	r2, [r7, #15]
 8002340:	6879      	ldr	r1, [r7, #4]
 8002342:	4613      	mov	r3, r2
 8002344:	00db      	lsls	r3, r3, #3
 8002346:	1a9b      	subs	r3, r3, r2
 8002348:	009b      	lsls	r3, r3, #2
 800234a:	440b      	add	r3, r1
 800234c:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8002350:	2200      	movs	r2, #0
 8002352:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002354:	7bfa      	ldrb	r2, [r7, #15]
 8002356:	6879      	ldr	r1, [r7, #4]
 8002358:	4613      	mov	r3, r2
 800235a:	00db      	lsls	r3, r3, #3
 800235c:	1a9b      	subs	r3, r3, r2
 800235e:	009b      	lsls	r3, r3, #2
 8002360:	440b      	add	r3, r1
 8002362:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002366:	2200      	movs	r2, #0
 8002368:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800236a:	7bfa      	ldrb	r2, [r7, #15]
 800236c:	6879      	ldr	r1, [r7, #4]
 800236e:	4613      	mov	r3, r2
 8002370:	00db      	lsls	r3, r3, #3
 8002372:	1a9b      	subs	r3, r3, r2
 8002374:	009b      	lsls	r3, r3, #2
 8002376:	440b      	add	r3, r1
 8002378:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800237c:	2200      	movs	r2, #0
 800237e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002380:	7bfb      	ldrb	r3, [r7, #15]
 8002382:	3301      	adds	r3, #1
 8002384:	73fb      	strb	r3, [r7, #15]
 8002386:	7bfa      	ldrb	r2, [r7, #15]
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	685b      	ldr	r3, [r3, #4]
 800238c:	429a      	cmp	r2, r3
 800238e:	d3b5      	bcc.n	80022fc <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	603b      	str	r3, [r7, #0]
 8002396:	687e      	ldr	r6, [r7, #4]
 8002398:	466d      	mov	r5, sp
 800239a:	f106 0410 	add.w	r4, r6, #16
 800239e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80023a0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80023a2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80023a4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80023a6:	e894 0003 	ldmia.w	r4, {r0, r1}
 80023aa:	e885 0003 	stmia.w	r5, {r0, r1}
 80023ae:	1d33      	adds	r3, r6, #4
 80023b0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80023b2:	6838      	ldr	r0, [r7, #0]
 80023b4:	f003 f85e 	bl	8005474 <USB_DevInit>
 80023b8:	4603      	mov	r3, r0
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d005      	beq.n	80023ca <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	2202      	movs	r2, #2
 80023c2:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80023c6:	2301      	movs	r3, #1
 80023c8:	e00d      	b.n	80023e6 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	2200      	movs	r2, #0
 80023ce:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	2201      	movs	r2, #1
 80023d6:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	4618      	mov	r0, r3
 80023e0:	f004 f8a6 	bl	8006530 <USB_DevDisconnect>

  return HAL_OK;
 80023e4:	2300      	movs	r3, #0
}
 80023e6:	4618      	mov	r0, r3
 80023e8:	3714      	adds	r7, #20
 80023ea:	46bd      	mov	sp, r7
 80023ec:	bdf0      	pop	{r4, r5, r6, r7, pc}

080023ee <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80023ee:	b580      	push	{r7, lr}
 80023f0:	b084      	sub	sp, #16
 80023f2:	af00      	add	r7, sp, #0
 80023f4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002402:	2b01      	cmp	r3, #1
 8002404:	d101      	bne.n	800240a <HAL_PCD_Start+0x1c>
 8002406:	2302      	movs	r3, #2
 8002408:	e020      	b.n	800244c <HAL_PCD_Start+0x5e>
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	2201      	movs	r2, #1
 800240e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002416:	2b01      	cmp	r3, #1
 8002418:	d109      	bne.n	800242e <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 800241e:	2b01      	cmp	r3, #1
 8002420:	d005      	beq.n	800242e <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002426:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	4618      	mov	r0, r3
 8002434:	f002 ffd2 	bl	80053dc <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	4618      	mov	r0, r3
 800243e:	f004 f856 	bl	80064ee <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	2200      	movs	r2, #0
 8002446:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800244a:	2300      	movs	r3, #0
}
 800244c:	4618      	mov	r0, r3
 800244e:	3710      	adds	r7, #16
 8002450:	46bd      	mov	sp, r7
 8002452:	bd80      	pop	{r7, pc}

08002454 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002454:	b590      	push	{r4, r7, lr}
 8002456:	b08d      	sub	sp, #52	; 0x34
 8002458:	af00      	add	r7, sp, #0
 800245a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002462:	6a3b      	ldr	r3, [r7, #32]
 8002464:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	4618      	mov	r0, r3
 800246c:	f004 f914 	bl	8006698 <USB_GetMode>
 8002470:	4603      	mov	r3, r0
 8002472:	2b00      	cmp	r3, #0
 8002474:	f040 839d 	bne.w	8002bb2 <HAL_PCD_IRQHandler+0x75e>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	4618      	mov	r0, r3
 800247e:	f004 f878 	bl	8006572 <USB_ReadInterrupts>
 8002482:	4603      	mov	r3, r0
 8002484:	2b00      	cmp	r3, #0
 8002486:	f000 8393 	beq.w	8002bb0 <HAL_PCD_IRQHandler+0x75c>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	4618      	mov	r0, r3
 8002490:	f004 f86f 	bl	8006572 <USB_ReadInterrupts>
 8002494:	4603      	mov	r3, r0
 8002496:	f003 0302 	and.w	r3, r3, #2
 800249a:	2b02      	cmp	r3, #2
 800249c:	d107      	bne.n	80024ae <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	695a      	ldr	r2, [r3, #20]
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	f002 0202 	and.w	r2, r2, #2
 80024ac:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	4618      	mov	r0, r3
 80024b4:	f004 f85d 	bl	8006572 <USB_ReadInterrupts>
 80024b8:	4603      	mov	r3, r0
 80024ba:	f003 0310 	and.w	r3, r3, #16
 80024be:	2b10      	cmp	r3, #16
 80024c0:	d161      	bne.n	8002586 <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	699a      	ldr	r2, [r3, #24]
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	f022 0210 	bic.w	r2, r2, #16
 80024d0:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 80024d2:	6a3b      	ldr	r3, [r7, #32]
 80024d4:	6a1b      	ldr	r3, [r3, #32]
 80024d6:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 80024d8:	69bb      	ldr	r3, [r7, #24]
 80024da:	f003 020f 	and.w	r2, r3, #15
 80024de:	4613      	mov	r3, r2
 80024e0:	00db      	lsls	r3, r3, #3
 80024e2:	1a9b      	subs	r3, r3, r2
 80024e4:	009b      	lsls	r3, r3, #2
 80024e6:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80024ea:	687a      	ldr	r2, [r7, #4]
 80024ec:	4413      	add	r3, r2
 80024ee:	3304      	adds	r3, #4
 80024f0:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80024f2:	69bb      	ldr	r3, [r7, #24]
 80024f4:	0c5b      	lsrs	r3, r3, #17
 80024f6:	f003 030f 	and.w	r3, r3, #15
 80024fa:	2b02      	cmp	r3, #2
 80024fc:	d124      	bne.n	8002548 <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 80024fe:	69ba      	ldr	r2, [r7, #24]
 8002500:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8002504:	4013      	ands	r3, r2
 8002506:	2b00      	cmp	r3, #0
 8002508:	d035      	beq.n	8002576 <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800250a:	697b      	ldr	r3, [r7, #20]
 800250c:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 800250e:	69bb      	ldr	r3, [r7, #24]
 8002510:	091b      	lsrs	r3, r3, #4
 8002512:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002514:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002518:	b29b      	uxth	r3, r3
 800251a:	461a      	mov	r2, r3
 800251c:	6a38      	ldr	r0, [r7, #32]
 800251e:	f003 fec3 	bl	80062a8 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002522:	697b      	ldr	r3, [r7, #20]
 8002524:	68da      	ldr	r2, [r3, #12]
 8002526:	69bb      	ldr	r3, [r7, #24]
 8002528:	091b      	lsrs	r3, r3, #4
 800252a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800252e:	441a      	add	r2, r3
 8002530:	697b      	ldr	r3, [r7, #20]
 8002532:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002534:	697b      	ldr	r3, [r7, #20]
 8002536:	699a      	ldr	r2, [r3, #24]
 8002538:	69bb      	ldr	r3, [r7, #24]
 800253a:	091b      	lsrs	r3, r3, #4
 800253c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002540:	441a      	add	r2, r3
 8002542:	697b      	ldr	r3, [r7, #20]
 8002544:	619a      	str	r2, [r3, #24]
 8002546:	e016      	b.n	8002576 <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8002548:	69bb      	ldr	r3, [r7, #24]
 800254a:	0c5b      	lsrs	r3, r3, #17
 800254c:	f003 030f 	and.w	r3, r3, #15
 8002550:	2b06      	cmp	r3, #6
 8002552:	d110      	bne.n	8002576 <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800255a:	2208      	movs	r2, #8
 800255c:	4619      	mov	r1, r3
 800255e:	6a38      	ldr	r0, [r7, #32]
 8002560:	f003 fea2 	bl	80062a8 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002564:	697b      	ldr	r3, [r7, #20]
 8002566:	699a      	ldr	r2, [r3, #24]
 8002568:	69bb      	ldr	r3, [r7, #24]
 800256a:	091b      	lsrs	r3, r3, #4
 800256c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002570:	441a      	add	r2, r3
 8002572:	697b      	ldr	r3, [r7, #20]
 8002574:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	699a      	ldr	r2, [r3, #24]
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	f042 0210 	orr.w	r2, r2, #16
 8002584:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	4618      	mov	r0, r3
 800258c:	f003 fff1 	bl	8006572 <USB_ReadInterrupts>
 8002590:	4603      	mov	r3, r0
 8002592:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002596:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800259a:	d16e      	bne.n	800267a <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 800259c:	2300      	movs	r3, #0
 800259e:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	4618      	mov	r0, r3
 80025a6:	f003 fff7 	bl	8006598 <USB_ReadDevAllOutEpInterrupt>
 80025aa:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 80025ac:	e062      	b.n	8002674 <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 80025ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80025b0:	f003 0301 	and.w	r3, r3, #1
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d057      	beq.n	8002668 <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80025be:	b2d2      	uxtb	r2, r2
 80025c0:	4611      	mov	r1, r2
 80025c2:	4618      	mov	r0, r3
 80025c4:	f004 f81c 	bl	8006600 <USB_ReadDevOutEPInterrupt>
 80025c8:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80025ca:	693b      	ldr	r3, [r7, #16]
 80025cc:	f003 0301 	and.w	r3, r3, #1
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d00c      	beq.n	80025ee <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80025d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025d6:	015a      	lsls	r2, r3, #5
 80025d8:	69fb      	ldr	r3, [r7, #28]
 80025da:	4413      	add	r3, r2
 80025dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80025e0:	461a      	mov	r2, r3
 80025e2:	2301      	movs	r3, #1
 80025e4:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80025e6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80025e8:	6878      	ldr	r0, [r7, #4]
 80025ea:	f000 fdb1 	bl	8003150 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80025ee:	693b      	ldr	r3, [r7, #16]
 80025f0:	f003 0308 	and.w	r3, r3, #8
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d00c      	beq.n	8002612 <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80025f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025fa:	015a      	lsls	r2, r3, #5
 80025fc:	69fb      	ldr	r3, [r7, #28]
 80025fe:	4413      	add	r3, r2
 8002600:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002604:	461a      	mov	r2, r3
 8002606:	2308      	movs	r3, #8
 8002608:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 800260a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800260c:	6878      	ldr	r0, [r7, #4]
 800260e:	f000 feab 	bl	8003368 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8002612:	693b      	ldr	r3, [r7, #16]
 8002614:	f003 0310 	and.w	r3, r3, #16
 8002618:	2b00      	cmp	r3, #0
 800261a:	d008      	beq.n	800262e <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800261c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800261e:	015a      	lsls	r2, r3, #5
 8002620:	69fb      	ldr	r3, [r7, #28]
 8002622:	4413      	add	r3, r2
 8002624:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002628:	461a      	mov	r2, r3
 800262a:	2310      	movs	r3, #16
 800262c:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800262e:	693b      	ldr	r3, [r7, #16]
 8002630:	f003 0320 	and.w	r3, r3, #32
 8002634:	2b00      	cmp	r3, #0
 8002636:	d008      	beq.n	800264a <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002638:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800263a:	015a      	lsls	r2, r3, #5
 800263c:	69fb      	ldr	r3, [r7, #28]
 800263e:	4413      	add	r3, r2
 8002640:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002644:	461a      	mov	r2, r3
 8002646:	2320      	movs	r3, #32
 8002648:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 800264a:	693b      	ldr	r3, [r7, #16]
 800264c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002650:	2b00      	cmp	r3, #0
 8002652:	d009      	beq.n	8002668 <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8002654:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002656:	015a      	lsls	r2, r3, #5
 8002658:	69fb      	ldr	r3, [r7, #28]
 800265a:	4413      	add	r3, r2
 800265c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002660:	461a      	mov	r2, r3
 8002662:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002666:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8002668:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800266a:	3301      	adds	r3, #1
 800266c:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800266e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002670:	085b      	lsrs	r3, r3, #1
 8002672:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8002674:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002676:	2b00      	cmp	r3, #0
 8002678:	d199      	bne.n	80025ae <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	4618      	mov	r0, r3
 8002680:	f003 ff77 	bl	8006572 <USB_ReadInterrupts>
 8002684:	4603      	mov	r3, r0
 8002686:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800268a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800268e:	f040 80c0 	bne.w	8002812 <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	4618      	mov	r0, r3
 8002698:	f003 ff98 	bl	80065cc <USB_ReadDevAllInEpInterrupt>
 800269c:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 800269e:	2300      	movs	r3, #0
 80026a0:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 80026a2:	e0b2      	b.n	800280a <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80026a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026a6:	f003 0301 	and.w	r3, r3, #1
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	f000 80a7 	beq.w	80027fe <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80026b6:	b2d2      	uxtb	r2, r2
 80026b8:	4611      	mov	r1, r2
 80026ba:	4618      	mov	r0, r3
 80026bc:	f003 ffbe 	bl	800663c <USB_ReadDevInEPInterrupt>
 80026c0:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80026c2:	693b      	ldr	r3, [r7, #16]
 80026c4:	f003 0301 	and.w	r3, r3, #1
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d057      	beq.n	800277c <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80026cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026ce:	f003 030f 	and.w	r3, r3, #15
 80026d2:	2201      	movs	r2, #1
 80026d4:	fa02 f303 	lsl.w	r3, r2, r3
 80026d8:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80026da:	69fb      	ldr	r3, [r7, #28]
 80026dc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80026e0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	43db      	mvns	r3, r3
 80026e6:	69f9      	ldr	r1, [r7, #28]
 80026e8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80026ec:	4013      	ands	r3, r2
 80026ee:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80026f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026f2:	015a      	lsls	r2, r3, #5
 80026f4:	69fb      	ldr	r3, [r7, #28]
 80026f6:	4413      	add	r3, r2
 80026f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80026fc:	461a      	mov	r2, r3
 80026fe:	2301      	movs	r3, #1
 8002700:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	691b      	ldr	r3, [r3, #16]
 8002706:	2b01      	cmp	r3, #1
 8002708:	d132      	bne.n	8002770 <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 800270a:	6879      	ldr	r1, [r7, #4]
 800270c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800270e:	4613      	mov	r3, r2
 8002710:	00db      	lsls	r3, r3, #3
 8002712:	1a9b      	subs	r3, r3, r2
 8002714:	009b      	lsls	r3, r3, #2
 8002716:	440b      	add	r3, r1
 8002718:	3348      	adds	r3, #72	; 0x48
 800271a:	6819      	ldr	r1, [r3, #0]
 800271c:	6878      	ldr	r0, [r7, #4]
 800271e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002720:	4613      	mov	r3, r2
 8002722:	00db      	lsls	r3, r3, #3
 8002724:	1a9b      	subs	r3, r3, r2
 8002726:	009b      	lsls	r3, r3, #2
 8002728:	4403      	add	r3, r0
 800272a:	3344      	adds	r3, #68	; 0x44
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	4419      	add	r1, r3
 8002730:	6878      	ldr	r0, [r7, #4]
 8002732:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002734:	4613      	mov	r3, r2
 8002736:	00db      	lsls	r3, r3, #3
 8002738:	1a9b      	subs	r3, r3, r2
 800273a:	009b      	lsls	r3, r3, #2
 800273c:	4403      	add	r3, r0
 800273e:	3348      	adds	r3, #72	; 0x48
 8002740:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8002742:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002744:	2b00      	cmp	r3, #0
 8002746:	d113      	bne.n	8002770 <HAL_PCD_IRQHandler+0x31c>
 8002748:	6879      	ldr	r1, [r7, #4]
 800274a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800274c:	4613      	mov	r3, r2
 800274e:	00db      	lsls	r3, r3, #3
 8002750:	1a9b      	subs	r3, r3, r2
 8002752:	009b      	lsls	r3, r3, #2
 8002754:	440b      	add	r3, r1
 8002756:	3350      	adds	r3, #80	; 0x50
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	2b00      	cmp	r3, #0
 800275c:	d108      	bne.n	8002770 <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	6818      	ldr	r0, [r3, #0]
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002768:	461a      	mov	r2, r3
 800276a:	2101      	movs	r1, #1
 800276c:	f003 ffc6 	bl	80066fc <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8002770:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002772:	b2db      	uxtb	r3, r3
 8002774:	4619      	mov	r1, r3
 8002776:	6878      	ldr	r0, [r7, #4]
 8002778:	f005 fff7 	bl	800876a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800277c:	693b      	ldr	r3, [r7, #16]
 800277e:	f003 0308 	and.w	r3, r3, #8
 8002782:	2b00      	cmp	r3, #0
 8002784:	d008      	beq.n	8002798 <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8002786:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002788:	015a      	lsls	r2, r3, #5
 800278a:	69fb      	ldr	r3, [r7, #28]
 800278c:	4413      	add	r3, r2
 800278e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002792:	461a      	mov	r2, r3
 8002794:	2308      	movs	r3, #8
 8002796:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8002798:	693b      	ldr	r3, [r7, #16]
 800279a:	f003 0310 	and.w	r3, r3, #16
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d008      	beq.n	80027b4 <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80027a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027a4:	015a      	lsls	r2, r3, #5
 80027a6:	69fb      	ldr	r3, [r7, #28]
 80027a8:	4413      	add	r3, r2
 80027aa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80027ae:	461a      	mov	r2, r3
 80027b0:	2310      	movs	r3, #16
 80027b2:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80027b4:	693b      	ldr	r3, [r7, #16]
 80027b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d008      	beq.n	80027d0 <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80027be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027c0:	015a      	lsls	r2, r3, #5
 80027c2:	69fb      	ldr	r3, [r7, #28]
 80027c4:	4413      	add	r3, r2
 80027c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80027ca:	461a      	mov	r2, r3
 80027cc:	2340      	movs	r3, #64	; 0x40
 80027ce:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80027d0:	693b      	ldr	r3, [r7, #16]
 80027d2:	f003 0302 	and.w	r3, r3, #2
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d008      	beq.n	80027ec <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80027da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027dc:	015a      	lsls	r2, r3, #5
 80027de:	69fb      	ldr	r3, [r7, #28]
 80027e0:	4413      	add	r3, r2
 80027e2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80027e6:	461a      	mov	r2, r3
 80027e8:	2302      	movs	r3, #2
 80027ea:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80027ec:	693b      	ldr	r3, [r7, #16]
 80027ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d003      	beq.n	80027fe <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80027f6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80027f8:	6878      	ldr	r0, [r7, #4]
 80027fa:	f000 fc1b 	bl	8003034 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80027fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002800:	3301      	adds	r3, #1
 8002802:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8002804:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002806:	085b      	lsrs	r3, r3, #1
 8002808:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800280a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800280c:	2b00      	cmp	r3, #0
 800280e:	f47f af49 	bne.w	80026a4 <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	4618      	mov	r0, r3
 8002818:	f003 feab 	bl	8006572 <USB_ReadInterrupts>
 800281c:	4603      	mov	r3, r0
 800281e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002822:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002826:	d122      	bne.n	800286e <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002828:	69fb      	ldr	r3, [r7, #28]
 800282a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800282e:	685b      	ldr	r3, [r3, #4]
 8002830:	69fa      	ldr	r2, [r7, #28]
 8002832:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002836:	f023 0301 	bic.w	r3, r3, #1
 800283a:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8002842:	2b01      	cmp	r3, #1
 8002844:	d108      	bne.n	8002858 <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	2200      	movs	r2, #0
 800284a:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800284e:	2100      	movs	r1, #0
 8002850:	6878      	ldr	r0, [r7, #4]
 8002852:	f000 fe27 	bl	80034a4 <HAL_PCDEx_LPM_Callback>
 8002856:	e002      	b.n	800285e <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8002858:	6878      	ldr	r0, [r7, #4]
 800285a:	f005 fffd 	bl	8008858 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	695a      	ldr	r2, [r3, #20]
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 800286c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	4618      	mov	r0, r3
 8002874:	f003 fe7d 	bl	8006572 <USB_ReadInterrupts>
 8002878:	4603      	mov	r3, r0
 800287a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800287e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002882:	d112      	bne.n	80028aa <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8002884:	69fb      	ldr	r3, [r7, #28]
 8002886:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800288a:	689b      	ldr	r3, [r3, #8]
 800288c:	f003 0301 	and.w	r3, r3, #1
 8002890:	2b01      	cmp	r3, #1
 8002892:	d102      	bne.n	800289a <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8002894:	6878      	ldr	r0, [r7, #4]
 8002896:	f005 ffb9 	bl	800880c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	695a      	ldr	r2, [r3, #20]
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 80028a8:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	4618      	mov	r0, r3
 80028b0:	f003 fe5f 	bl	8006572 <USB_ReadInterrupts>
 80028b4:	4603      	mov	r3, r0
 80028b6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80028ba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80028be:	f040 80c7 	bne.w	8002a50 <HAL_PCD_IRQHandler+0x5fc>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80028c2:	69fb      	ldr	r3, [r7, #28]
 80028c4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80028c8:	685b      	ldr	r3, [r3, #4]
 80028ca:	69fa      	ldr	r2, [r7, #28]
 80028cc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80028d0:	f023 0301 	bic.w	r3, r3, #1
 80028d4:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	2110      	movs	r1, #16
 80028dc:	4618      	mov	r0, r3
 80028de:	f002 ff2d 	bl	800573c <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80028e2:	2300      	movs	r3, #0
 80028e4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80028e6:	e056      	b.n	8002996 <HAL_PCD_IRQHandler+0x542>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80028e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80028ea:	015a      	lsls	r2, r3, #5
 80028ec:	69fb      	ldr	r3, [r7, #28]
 80028ee:	4413      	add	r3, r2
 80028f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80028f4:	461a      	mov	r2, r3
 80028f6:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80028fa:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80028fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80028fe:	015a      	lsls	r2, r3, #5
 8002900:	69fb      	ldr	r3, [r7, #28]
 8002902:	4413      	add	r3, r2
 8002904:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800290c:	0151      	lsls	r1, r2, #5
 800290e:	69fa      	ldr	r2, [r7, #28]
 8002910:	440a      	add	r2, r1
 8002912:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8002916:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800291a:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800291c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800291e:	015a      	lsls	r2, r3, #5
 8002920:	69fb      	ldr	r3, [r7, #28]
 8002922:	4413      	add	r3, r2
 8002924:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800292c:	0151      	lsls	r1, r2, #5
 800292e:	69fa      	ldr	r2, [r7, #28]
 8002930:	440a      	add	r2, r1
 8002932:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8002936:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800293a:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800293c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800293e:	015a      	lsls	r2, r3, #5
 8002940:	69fb      	ldr	r3, [r7, #28]
 8002942:	4413      	add	r3, r2
 8002944:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002948:	461a      	mov	r2, r3
 800294a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800294e:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8002950:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002952:	015a      	lsls	r2, r3, #5
 8002954:	69fb      	ldr	r3, [r7, #28]
 8002956:	4413      	add	r3, r2
 8002958:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002960:	0151      	lsls	r1, r2, #5
 8002962:	69fa      	ldr	r2, [r7, #28]
 8002964:	440a      	add	r2, r1
 8002966:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800296a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800296e:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8002970:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002972:	015a      	lsls	r2, r3, #5
 8002974:	69fb      	ldr	r3, [r7, #28]
 8002976:	4413      	add	r3, r2
 8002978:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002980:	0151      	lsls	r1, r2, #5
 8002982:	69fa      	ldr	r2, [r7, #28]
 8002984:	440a      	add	r2, r1
 8002986:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800298a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800298e:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002990:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002992:	3301      	adds	r3, #1
 8002994:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	685b      	ldr	r3, [r3, #4]
 800299a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800299c:	429a      	cmp	r2, r3
 800299e:	d3a3      	bcc.n	80028e8 <HAL_PCD_IRQHandler+0x494>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80029a0:	69fb      	ldr	r3, [r7, #28]
 80029a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80029a6:	69db      	ldr	r3, [r3, #28]
 80029a8:	69fa      	ldr	r2, [r7, #28]
 80029aa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80029ae:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 80029b2:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d016      	beq.n	80029ea <HAL_PCD_IRQHandler+0x596>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80029bc:	69fb      	ldr	r3, [r7, #28]
 80029be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80029c2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80029c6:	69fa      	ldr	r2, [r7, #28]
 80029c8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80029cc:	f043 030b 	orr.w	r3, r3, #11
 80029d0:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80029d4:	69fb      	ldr	r3, [r7, #28]
 80029d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80029da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029dc:	69fa      	ldr	r2, [r7, #28]
 80029de:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80029e2:	f043 030b 	orr.w	r3, r3, #11
 80029e6:	6453      	str	r3, [r2, #68]	; 0x44
 80029e8:	e015      	b.n	8002a16 <HAL_PCD_IRQHandler+0x5c2>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80029ea:	69fb      	ldr	r3, [r7, #28]
 80029ec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80029f0:	695b      	ldr	r3, [r3, #20]
 80029f2:	69fa      	ldr	r2, [r7, #28]
 80029f4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80029f8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80029fc:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8002a00:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8002a02:	69fb      	ldr	r3, [r7, #28]
 8002a04:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002a08:	691b      	ldr	r3, [r3, #16]
 8002a0a:	69fa      	ldr	r2, [r7, #28]
 8002a0c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002a10:	f043 030b 	orr.w	r3, r3, #11
 8002a14:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8002a16:	69fb      	ldr	r3, [r7, #28]
 8002a18:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	69fa      	ldr	r2, [r7, #28]
 8002a20:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002a24:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8002a28:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	6818      	ldr	r0, [r3, #0]
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	691b      	ldr	r3, [r3, #16]
 8002a32:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002a3a:	461a      	mov	r2, r3
 8002a3c:	f003 fe5e 	bl	80066fc <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	695a      	ldr	r2, [r3, #20]
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8002a4e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	4618      	mov	r0, r3
 8002a56:	f003 fd8c 	bl	8006572 <USB_ReadInterrupts>
 8002a5a:	4603      	mov	r3, r0
 8002a5c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002a60:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002a64:	d124      	bne.n	8002ab0 <HAL_PCD_IRQHandler+0x65c>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	4618      	mov	r0, r3
 8002a6c:	f003 fe22 	bl	80066b4 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	4618      	mov	r0, r3
 8002a76:	f002 fec2 	bl	80057fe <USB_GetDevSpeed>
 8002a7a:	4603      	mov	r3, r0
 8002a7c:	461a      	mov	r2, r3
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681c      	ldr	r4, [r3, #0]
 8002a86:	f001 f947 	bl	8003d18 <HAL_RCC_GetHCLKFreq>
 8002a8a:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002a90:	b2db      	uxtb	r3, r3
 8002a92:	461a      	mov	r2, r3
 8002a94:	4620      	mov	r0, r4
 8002a96:	f002 fbff 	bl	8005298 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8002a9a:	6878      	ldr	r0, [r7, #4]
 8002a9c:	f005 fe8d 	bl	80087ba <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	695a      	ldr	r2, [r3, #20]
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8002aae:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	4618      	mov	r0, r3
 8002ab6:	f003 fd5c 	bl	8006572 <USB_ReadInterrupts>
 8002aba:	4603      	mov	r3, r0
 8002abc:	f003 0308 	and.w	r3, r3, #8
 8002ac0:	2b08      	cmp	r3, #8
 8002ac2:	d10a      	bne.n	8002ada <HAL_PCD_IRQHandler+0x686>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8002ac4:	6878      	ldr	r0, [r7, #4]
 8002ac6:	f005 fe6a 	bl	800879e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	695a      	ldr	r2, [r3, #20]
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	f002 0208 	and.w	r2, r2, #8
 8002ad8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	4618      	mov	r0, r3
 8002ae0:	f003 fd47 	bl	8006572 <USB_ReadInterrupts>
 8002ae4:	4603      	mov	r3, r0
 8002ae6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002aea:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002aee:	d10f      	bne.n	8002b10 <HAL_PCD_IRQHandler+0x6bc>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8002af0:	2300      	movs	r3, #0
 8002af2:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8002af4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002af6:	b2db      	uxtb	r3, r3
 8002af8:	4619      	mov	r1, r3
 8002afa:	6878      	ldr	r0, [r7, #4]
 8002afc:	f005 fecc 	bl	8008898 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	695a      	ldr	r2, [r3, #20]
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8002b0e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	4618      	mov	r0, r3
 8002b16:	f003 fd2c 	bl	8006572 <USB_ReadInterrupts>
 8002b1a:	4603      	mov	r3, r0
 8002b1c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002b20:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002b24:	d10f      	bne.n	8002b46 <HAL_PCD_IRQHandler+0x6f2>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8002b26:	2300      	movs	r3, #0
 8002b28:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8002b2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b2c:	b2db      	uxtb	r3, r3
 8002b2e:	4619      	mov	r1, r3
 8002b30:	6878      	ldr	r0, [r7, #4]
 8002b32:	f005 fe9f 	bl	8008874 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	695a      	ldr	r2, [r3, #20]
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8002b44:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	4618      	mov	r0, r3
 8002b4c:	f003 fd11 	bl	8006572 <USB_ReadInterrupts>
 8002b50:	4603      	mov	r3, r0
 8002b52:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8002b56:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002b5a:	d10a      	bne.n	8002b72 <HAL_PCD_IRQHandler+0x71e>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8002b5c:	6878      	ldr	r0, [r7, #4]
 8002b5e:	f005 fead 	bl	80088bc <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	695a      	ldr	r2, [r3, #20]
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8002b70:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	4618      	mov	r0, r3
 8002b78:	f003 fcfb 	bl	8006572 <USB_ReadInterrupts>
 8002b7c:	4603      	mov	r3, r0
 8002b7e:	f003 0304 	and.w	r3, r3, #4
 8002b82:	2b04      	cmp	r3, #4
 8002b84:	d115      	bne.n	8002bb2 <HAL_PCD_IRQHandler+0x75e>
    {
      temp = hpcd->Instance->GOTGINT;
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	685b      	ldr	r3, [r3, #4]
 8002b8c:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8002b8e:	69bb      	ldr	r3, [r7, #24]
 8002b90:	f003 0304 	and.w	r3, r3, #4
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d002      	beq.n	8002b9e <HAL_PCD_IRQHandler+0x74a>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8002b98:	6878      	ldr	r0, [r7, #4]
 8002b9a:	f005 fe9d 	bl	80088d8 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	6859      	ldr	r1, [r3, #4]
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	69ba      	ldr	r2, [r7, #24]
 8002baa:	430a      	orrs	r2, r1
 8002bac:	605a      	str	r2, [r3, #4]
 8002bae:	e000      	b.n	8002bb2 <HAL_PCD_IRQHandler+0x75e>
      return;
 8002bb0:	bf00      	nop
    }
  }
}
 8002bb2:	3734      	adds	r7, #52	; 0x34
 8002bb4:	46bd      	mov	sp, r7
 8002bb6:	bd90      	pop	{r4, r7, pc}

08002bb8 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002bb8:	b580      	push	{r7, lr}
 8002bba:	b082      	sub	sp, #8
 8002bbc:	af00      	add	r7, sp, #0
 8002bbe:	6078      	str	r0, [r7, #4]
 8002bc0:	460b      	mov	r3, r1
 8002bc2:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002bca:	2b01      	cmp	r3, #1
 8002bcc:	d101      	bne.n	8002bd2 <HAL_PCD_SetAddress+0x1a>
 8002bce:	2302      	movs	r3, #2
 8002bd0:	e013      	b.n	8002bfa <HAL_PCD_SetAddress+0x42>
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	2201      	movs	r2, #1
 8002bd6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	78fa      	ldrb	r2, [r7, #3]
 8002bde:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	78fa      	ldrb	r2, [r7, #3]
 8002be8:	4611      	mov	r1, r2
 8002bea:	4618      	mov	r0, r3
 8002bec:	f003 fc59 	bl	80064a2 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	2200      	movs	r2, #0
 8002bf4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8002bf8:	2300      	movs	r3, #0
}
 8002bfa:	4618      	mov	r0, r3
 8002bfc:	3708      	adds	r7, #8
 8002bfe:	46bd      	mov	sp, r7
 8002c00:	bd80      	pop	{r7, pc}

08002c02 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8002c02:	b580      	push	{r7, lr}
 8002c04:	b084      	sub	sp, #16
 8002c06:	af00      	add	r7, sp, #0
 8002c08:	6078      	str	r0, [r7, #4]
 8002c0a:	4608      	mov	r0, r1
 8002c0c:	4611      	mov	r1, r2
 8002c0e:	461a      	mov	r2, r3
 8002c10:	4603      	mov	r3, r0
 8002c12:	70fb      	strb	r3, [r7, #3]
 8002c14:	460b      	mov	r3, r1
 8002c16:	803b      	strh	r3, [r7, #0]
 8002c18:	4613      	mov	r3, r2
 8002c1a:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8002c1c:	2300      	movs	r3, #0
 8002c1e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002c20:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	da0f      	bge.n	8002c48 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002c28:	78fb      	ldrb	r3, [r7, #3]
 8002c2a:	f003 020f 	and.w	r2, r3, #15
 8002c2e:	4613      	mov	r3, r2
 8002c30:	00db      	lsls	r3, r3, #3
 8002c32:	1a9b      	subs	r3, r3, r2
 8002c34:	009b      	lsls	r3, r3, #2
 8002c36:	3338      	adds	r3, #56	; 0x38
 8002c38:	687a      	ldr	r2, [r7, #4]
 8002c3a:	4413      	add	r3, r2
 8002c3c:	3304      	adds	r3, #4
 8002c3e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	2201      	movs	r2, #1
 8002c44:	705a      	strb	r2, [r3, #1]
 8002c46:	e00f      	b.n	8002c68 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002c48:	78fb      	ldrb	r3, [r7, #3]
 8002c4a:	f003 020f 	and.w	r2, r3, #15
 8002c4e:	4613      	mov	r3, r2
 8002c50:	00db      	lsls	r3, r3, #3
 8002c52:	1a9b      	subs	r3, r3, r2
 8002c54:	009b      	lsls	r3, r3, #2
 8002c56:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002c5a:	687a      	ldr	r2, [r7, #4]
 8002c5c:	4413      	add	r3, r2
 8002c5e:	3304      	adds	r3, #4
 8002c60:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	2200      	movs	r2, #0
 8002c66:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002c68:	78fb      	ldrb	r3, [r7, #3]
 8002c6a:	f003 030f 	and.w	r3, r3, #15
 8002c6e:	b2da      	uxtb	r2, r3
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8002c74:	883a      	ldrh	r2, [r7, #0]
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	78ba      	ldrb	r2, [r7, #2]
 8002c7e:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	785b      	ldrb	r3, [r3, #1]
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d004      	beq.n	8002c92 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	781b      	ldrb	r3, [r3, #0]
 8002c8c:	b29a      	uxth	r2, r3
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002c92:	78bb      	ldrb	r3, [r7, #2]
 8002c94:	2b02      	cmp	r3, #2
 8002c96:	d102      	bne.n	8002c9e <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	2200      	movs	r2, #0
 8002c9c:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002ca4:	2b01      	cmp	r3, #1
 8002ca6:	d101      	bne.n	8002cac <HAL_PCD_EP_Open+0xaa>
 8002ca8:	2302      	movs	r3, #2
 8002caa:	e00e      	b.n	8002cca <HAL_PCD_EP_Open+0xc8>
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	2201      	movs	r2, #1
 8002cb0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	68f9      	ldr	r1, [r7, #12]
 8002cba:	4618      	mov	r0, r3
 8002cbc:	f002 fdc4 	bl	8005848 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	2200      	movs	r2, #0
 8002cc4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 8002cc8:	7afb      	ldrb	r3, [r7, #11]
}
 8002cca:	4618      	mov	r0, r3
 8002ccc:	3710      	adds	r7, #16
 8002cce:	46bd      	mov	sp, r7
 8002cd0:	bd80      	pop	{r7, pc}

08002cd2 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002cd2:	b580      	push	{r7, lr}
 8002cd4:	b084      	sub	sp, #16
 8002cd6:	af00      	add	r7, sp, #0
 8002cd8:	6078      	str	r0, [r7, #4]
 8002cda:	460b      	mov	r3, r1
 8002cdc:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002cde:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	da0f      	bge.n	8002d06 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002ce6:	78fb      	ldrb	r3, [r7, #3]
 8002ce8:	f003 020f 	and.w	r2, r3, #15
 8002cec:	4613      	mov	r3, r2
 8002cee:	00db      	lsls	r3, r3, #3
 8002cf0:	1a9b      	subs	r3, r3, r2
 8002cf2:	009b      	lsls	r3, r3, #2
 8002cf4:	3338      	adds	r3, #56	; 0x38
 8002cf6:	687a      	ldr	r2, [r7, #4]
 8002cf8:	4413      	add	r3, r2
 8002cfa:	3304      	adds	r3, #4
 8002cfc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	2201      	movs	r2, #1
 8002d02:	705a      	strb	r2, [r3, #1]
 8002d04:	e00f      	b.n	8002d26 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002d06:	78fb      	ldrb	r3, [r7, #3]
 8002d08:	f003 020f 	and.w	r2, r3, #15
 8002d0c:	4613      	mov	r3, r2
 8002d0e:	00db      	lsls	r3, r3, #3
 8002d10:	1a9b      	subs	r3, r3, r2
 8002d12:	009b      	lsls	r3, r3, #2
 8002d14:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002d18:	687a      	ldr	r2, [r7, #4]
 8002d1a:	4413      	add	r3, r2
 8002d1c:	3304      	adds	r3, #4
 8002d1e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	2200      	movs	r2, #0
 8002d24:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8002d26:	78fb      	ldrb	r3, [r7, #3]
 8002d28:	f003 030f 	and.w	r3, r3, #15
 8002d2c:	b2da      	uxtb	r2, r3
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002d38:	2b01      	cmp	r3, #1
 8002d3a:	d101      	bne.n	8002d40 <HAL_PCD_EP_Close+0x6e>
 8002d3c:	2302      	movs	r3, #2
 8002d3e:	e00e      	b.n	8002d5e <HAL_PCD_EP_Close+0x8c>
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	2201      	movs	r2, #1
 8002d44:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	68f9      	ldr	r1, [r7, #12]
 8002d4e:	4618      	mov	r0, r3
 8002d50:	f002 fe02 	bl	8005958 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	2200      	movs	r2, #0
 8002d58:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8002d5c:	2300      	movs	r3, #0
}
 8002d5e:	4618      	mov	r0, r3
 8002d60:	3710      	adds	r7, #16
 8002d62:	46bd      	mov	sp, r7
 8002d64:	bd80      	pop	{r7, pc}

08002d66 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002d66:	b580      	push	{r7, lr}
 8002d68:	b086      	sub	sp, #24
 8002d6a:	af00      	add	r7, sp, #0
 8002d6c:	60f8      	str	r0, [r7, #12]
 8002d6e:	607a      	str	r2, [r7, #4]
 8002d70:	603b      	str	r3, [r7, #0]
 8002d72:	460b      	mov	r3, r1
 8002d74:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002d76:	7afb      	ldrb	r3, [r7, #11]
 8002d78:	f003 020f 	and.w	r2, r3, #15
 8002d7c:	4613      	mov	r3, r2
 8002d7e:	00db      	lsls	r3, r3, #3
 8002d80:	1a9b      	subs	r3, r3, r2
 8002d82:	009b      	lsls	r3, r3, #2
 8002d84:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002d88:	68fa      	ldr	r2, [r7, #12]
 8002d8a:	4413      	add	r3, r2
 8002d8c:	3304      	adds	r3, #4
 8002d8e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002d90:	697b      	ldr	r3, [r7, #20]
 8002d92:	687a      	ldr	r2, [r7, #4]
 8002d94:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8002d96:	697b      	ldr	r3, [r7, #20]
 8002d98:	683a      	ldr	r2, [r7, #0]
 8002d9a:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8002d9c:	697b      	ldr	r3, [r7, #20]
 8002d9e:	2200      	movs	r2, #0
 8002da0:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 8002da2:	697b      	ldr	r3, [r7, #20]
 8002da4:	2200      	movs	r2, #0
 8002da6:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002da8:	7afb      	ldrb	r3, [r7, #11]
 8002daa:	f003 030f 	and.w	r3, r3, #15
 8002dae:	b2da      	uxtb	r2, r3
 8002db0:	697b      	ldr	r3, [r7, #20]
 8002db2:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	691b      	ldr	r3, [r3, #16]
 8002db8:	2b01      	cmp	r3, #1
 8002dba:	d102      	bne.n	8002dc2 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002dbc:	687a      	ldr	r2, [r7, #4]
 8002dbe:	697b      	ldr	r3, [r7, #20]
 8002dc0:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002dc2:	7afb      	ldrb	r3, [r7, #11]
 8002dc4:	f003 030f 	and.w	r3, r3, #15
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d109      	bne.n	8002de0 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	6818      	ldr	r0, [r3, #0]
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	691b      	ldr	r3, [r3, #16]
 8002dd4:	b2db      	uxtb	r3, r3
 8002dd6:	461a      	mov	r2, r3
 8002dd8:	6979      	ldr	r1, [r7, #20]
 8002dda:	f003 f8dd 	bl	8005f98 <USB_EP0StartXfer>
 8002dde:	e008      	b.n	8002df2 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	6818      	ldr	r0, [r3, #0]
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	691b      	ldr	r3, [r3, #16]
 8002de8:	b2db      	uxtb	r3, r3
 8002dea:	461a      	mov	r2, r3
 8002dec:	6979      	ldr	r1, [r7, #20]
 8002dee:	f002 fe8f 	bl	8005b10 <USB_EPStartXfer>
  }

  return HAL_OK;
 8002df2:	2300      	movs	r3, #0
}
 8002df4:	4618      	mov	r0, r3
 8002df6:	3718      	adds	r7, #24
 8002df8:	46bd      	mov	sp, r7
 8002dfa:	bd80      	pop	{r7, pc}

08002dfc <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002dfc:	b480      	push	{r7}
 8002dfe:	b083      	sub	sp, #12
 8002e00:	af00      	add	r7, sp, #0
 8002e02:	6078      	str	r0, [r7, #4]
 8002e04:	460b      	mov	r3, r1
 8002e06:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8002e08:	78fb      	ldrb	r3, [r7, #3]
 8002e0a:	f003 020f 	and.w	r2, r3, #15
 8002e0e:	6879      	ldr	r1, [r7, #4]
 8002e10:	4613      	mov	r3, r2
 8002e12:	00db      	lsls	r3, r3, #3
 8002e14:	1a9b      	subs	r3, r3, r2
 8002e16:	009b      	lsls	r3, r3, #2
 8002e18:	440b      	add	r3, r1
 8002e1a:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8002e1e:	681b      	ldr	r3, [r3, #0]
}
 8002e20:	4618      	mov	r0, r3
 8002e22:	370c      	adds	r7, #12
 8002e24:	46bd      	mov	sp, r7
 8002e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e2a:	4770      	bx	lr

08002e2c <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002e2c:	b580      	push	{r7, lr}
 8002e2e:	b086      	sub	sp, #24
 8002e30:	af00      	add	r7, sp, #0
 8002e32:	60f8      	str	r0, [r7, #12]
 8002e34:	607a      	str	r2, [r7, #4]
 8002e36:	603b      	str	r3, [r7, #0]
 8002e38:	460b      	mov	r3, r1
 8002e3a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002e3c:	7afb      	ldrb	r3, [r7, #11]
 8002e3e:	f003 020f 	and.w	r2, r3, #15
 8002e42:	4613      	mov	r3, r2
 8002e44:	00db      	lsls	r3, r3, #3
 8002e46:	1a9b      	subs	r3, r3, r2
 8002e48:	009b      	lsls	r3, r3, #2
 8002e4a:	3338      	adds	r3, #56	; 0x38
 8002e4c:	68fa      	ldr	r2, [r7, #12]
 8002e4e:	4413      	add	r3, r2
 8002e50:	3304      	adds	r3, #4
 8002e52:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002e54:	697b      	ldr	r3, [r7, #20]
 8002e56:	687a      	ldr	r2, [r7, #4]
 8002e58:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8002e5a:	697b      	ldr	r3, [r7, #20]
 8002e5c:	683a      	ldr	r2, [r7, #0]
 8002e5e:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8002e60:	697b      	ldr	r3, [r7, #20]
 8002e62:	2200      	movs	r2, #0
 8002e64:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8002e66:	697b      	ldr	r3, [r7, #20]
 8002e68:	2201      	movs	r2, #1
 8002e6a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002e6c:	7afb      	ldrb	r3, [r7, #11]
 8002e6e:	f003 030f 	and.w	r3, r3, #15
 8002e72:	b2da      	uxtb	r2, r3
 8002e74:	697b      	ldr	r3, [r7, #20]
 8002e76:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	691b      	ldr	r3, [r3, #16]
 8002e7c:	2b01      	cmp	r3, #1
 8002e7e:	d102      	bne.n	8002e86 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002e80:	687a      	ldr	r2, [r7, #4]
 8002e82:	697b      	ldr	r3, [r7, #20]
 8002e84:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002e86:	7afb      	ldrb	r3, [r7, #11]
 8002e88:	f003 030f 	and.w	r3, r3, #15
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d109      	bne.n	8002ea4 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	6818      	ldr	r0, [r3, #0]
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	691b      	ldr	r3, [r3, #16]
 8002e98:	b2db      	uxtb	r3, r3
 8002e9a:	461a      	mov	r2, r3
 8002e9c:	6979      	ldr	r1, [r7, #20]
 8002e9e:	f003 f87b 	bl	8005f98 <USB_EP0StartXfer>
 8002ea2:	e008      	b.n	8002eb6 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	6818      	ldr	r0, [r3, #0]
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	691b      	ldr	r3, [r3, #16]
 8002eac:	b2db      	uxtb	r3, r3
 8002eae:	461a      	mov	r2, r3
 8002eb0:	6979      	ldr	r1, [r7, #20]
 8002eb2:	f002 fe2d 	bl	8005b10 <USB_EPStartXfer>
  }

  return HAL_OK;
 8002eb6:	2300      	movs	r3, #0
}
 8002eb8:	4618      	mov	r0, r3
 8002eba:	3718      	adds	r7, #24
 8002ebc:	46bd      	mov	sp, r7
 8002ebe:	bd80      	pop	{r7, pc}

08002ec0 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002ec0:	b580      	push	{r7, lr}
 8002ec2:	b084      	sub	sp, #16
 8002ec4:	af00      	add	r7, sp, #0
 8002ec6:	6078      	str	r0, [r7, #4]
 8002ec8:	460b      	mov	r3, r1
 8002eca:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002ecc:	78fb      	ldrb	r3, [r7, #3]
 8002ece:	f003 020f 	and.w	r2, r3, #15
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	685b      	ldr	r3, [r3, #4]
 8002ed6:	429a      	cmp	r2, r3
 8002ed8:	d901      	bls.n	8002ede <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8002eda:	2301      	movs	r3, #1
 8002edc:	e050      	b.n	8002f80 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002ede:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	da0f      	bge.n	8002f06 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002ee6:	78fb      	ldrb	r3, [r7, #3]
 8002ee8:	f003 020f 	and.w	r2, r3, #15
 8002eec:	4613      	mov	r3, r2
 8002eee:	00db      	lsls	r3, r3, #3
 8002ef0:	1a9b      	subs	r3, r3, r2
 8002ef2:	009b      	lsls	r3, r3, #2
 8002ef4:	3338      	adds	r3, #56	; 0x38
 8002ef6:	687a      	ldr	r2, [r7, #4]
 8002ef8:	4413      	add	r3, r2
 8002efa:	3304      	adds	r3, #4
 8002efc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	2201      	movs	r2, #1
 8002f02:	705a      	strb	r2, [r3, #1]
 8002f04:	e00d      	b.n	8002f22 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002f06:	78fa      	ldrb	r2, [r7, #3]
 8002f08:	4613      	mov	r3, r2
 8002f0a:	00db      	lsls	r3, r3, #3
 8002f0c:	1a9b      	subs	r3, r3, r2
 8002f0e:	009b      	lsls	r3, r3, #2
 8002f10:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002f14:	687a      	ldr	r2, [r7, #4]
 8002f16:	4413      	add	r3, r2
 8002f18:	3304      	adds	r3, #4
 8002f1a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	2200      	movs	r2, #0
 8002f20:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	2201      	movs	r2, #1
 8002f26:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002f28:	78fb      	ldrb	r3, [r7, #3]
 8002f2a:	f003 030f 	and.w	r3, r3, #15
 8002f2e:	b2da      	uxtb	r2, r3
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002f3a:	2b01      	cmp	r3, #1
 8002f3c:	d101      	bne.n	8002f42 <HAL_PCD_EP_SetStall+0x82>
 8002f3e:	2302      	movs	r3, #2
 8002f40:	e01e      	b.n	8002f80 <HAL_PCD_EP_SetStall+0xc0>
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	2201      	movs	r2, #1
 8002f46:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	68f9      	ldr	r1, [r7, #12]
 8002f50:	4618      	mov	r0, r3
 8002f52:	f003 f9d2 	bl	80062fa <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002f56:	78fb      	ldrb	r3, [r7, #3]
 8002f58:	f003 030f 	and.w	r3, r3, #15
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d10a      	bne.n	8002f76 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	6818      	ldr	r0, [r3, #0]
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	691b      	ldr	r3, [r3, #16]
 8002f68:	b2d9      	uxtb	r1, r3
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002f70:	461a      	mov	r2, r3
 8002f72:	f003 fbc3 	bl	80066fc <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	2200      	movs	r2, #0
 8002f7a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8002f7e:	2300      	movs	r3, #0
}
 8002f80:	4618      	mov	r0, r3
 8002f82:	3710      	adds	r7, #16
 8002f84:	46bd      	mov	sp, r7
 8002f86:	bd80      	pop	{r7, pc}

08002f88 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002f88:	b580      	push	{r7, lr}
 8002f8a:	b084      	sub	sp, #16
 8002f8c:	af00      	add	r7, sp, #0
 8002f8e:	6078      	str	r0, [r7, #4]
 8002f90:	460b      	mov	r3, r1
 8002f92:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002f94:	78fb      	ldrb	r3, [r7, #3]
 8002f96:	f003 020f 	and.w	r2, r3, #15
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	685b      	ldr	r3, [r3, #4]
 8002f9e:	429a      	cmp	r2, r3
 8002fa0:	d901      	bls.n	8002fa6 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8002fa2:	2301      	movs	r3, #1
 8002fa4:	e042      	b.n	800302c <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002fa6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	da0f      	bge.n	8002fce <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002fae:	78fb      	ldrb	r3, [r7, #3]
 8002fb0:	f003 020f 	and.w	r2, r3, #15
 8002fb4:	4613      	mov	r3, r2
 8002fb6:	00db      	lsls	r3, r3, #3
 8002fb8:	1a9b      	subs	r3, r3, r2
 8002fba:	009b      	lsls	r3, r3, #2
 8002fbc:	3338      	adds	r3, #56	; 0x38
 8002fbe:	687a      	ldr	r2, [r7, #4]
 8002fc0:	4413      	add	r3, r2
 8002fc2:	3304      	adds	r3, #4
 8002fc4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	2201      	movs	r2, #1
 8002fca:	705a      	strb	r2, [r3, #1]
 8002fcc:	e00f      	b.n	8002fee <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002fce:	78fb      	ldrb	r3, [r7, #3]
 8002fd0:	f003 020f 	and.w	r2, r3, #15
 8002fd4:	4613      	mov	r3, r2
 8002fd6:	00db      	lsls	r3, r3, #3
 8002fd8:	1a9b      	subs	r3, r3, r2
 8002fda:	009b      	lsls	r3, r3, #2
 8002fdc:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002fe0:	687a      	ldr	r2, [r7, #4]
 8002fe2:	4413      	add	r3, r2
 8002fe4:	3304      	adds	r3, #4
 8002fe6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	2200      	movs	r2, #0
 8002fec:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	2200      	movs	r2, #0
 8002ff2:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002ff4:	78fb      	ldrb	r3, [r7, #3]
 8002ff6:	f003 030f 	and.w	r3, r3, #15
 8002ffa:	b2da      	uxtb	r2, r3
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003006:	2b01      	cmp	r3, #1
 8003008:	d101      	bne.n	800300e <HAL_PCD_EP_ClrStall+0x86>
 800300a:	2302      	movs	r3, #2
 800300c:	e00e      	b.n	800302c <HAL_PCD_EP_ClrStall+0xa4>
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	2201      	movs	r2, #1
 8003012:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	68f9      	ldr	r1, [r7, #12]
 800301c:	4618      	mov	r0, r3
 800301e:	f003 f9da 	bl	80063d6 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	2200      	movs	r2, #0
 8003026:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800302a:	2300      	movs	r3, #0
}
 800302c:	4618      	mov	r0, r3
 800302e:	3710      	adds	r7, #16
 8003030:	46bd      	mov	sp, r7
 8003032:	bd80      	pop	{r7, pc}

08003034 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003034:	b580      	push	{r7, lr}
 8003036:	b08a      	sub	sp, #40	; 0x28
 8003038:	af02      	add	r7, sp, #8
 800303a:	6078      	str	r0, [r7, #4]
 800303c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003044:	697b      	ldr	r3, [r7, #20]
 8003046:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8003048:	683a      	ldr	r2, [r7, #0]
 800304a:	4613      	mov	r3, r2
 800304c:	00db      	lsls	r3, r3, #3
 800304e:	1a9b      	subs	r3, r3, r2
 8003050:	009b      	lsls	r3, r3, #2
 8003052:	3338      	adds	r3, #56	; 0x38
 8003054:	687a      	ldr	r2, [r7, #4]
 8003056:	4413      	add	r3, r2
 8003058:	3304      	adds	r3, #4
 800305a:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	699a      	ldr	r2, [r3, #24]
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	695b      	ldr	r3, [r3, #20]
 8003064:	429a      	cmp	r2, r3
 8003066:	d901      	bls.n	800306c <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8003068:	2301      	movs	r3, #1
 800306a:	e06c      	b.n	8003146 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	695a      	ldr	r2, [r3, #20]
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	699b      	ldr	r3, [r3, #24]
 8003074:	1ad3      	subs	r3, r2, r3
 8003076:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	689b      	ldr	r3, [r3, #8]
 800307c:	69fa      	ldr	r2, [r7, #28]
 800307e:	429a      	cmp	r2, r3
 8003080:	d902      	bls.n	8003088 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	689b      	ldr	r3, [r3, #8]
 8003086:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8003088:	69fb      	ldr	r3, [r7, #28]
 800308a:	3303      	adds	r3, #3
 800308c:	089b      	lsrs	r3, r3, #2
 800308e:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003090:	e02b      	b.n	80030ea <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	695a      	ldr	r2, [r3, #20]
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	699b      	ldr	r3, [r3, #24]
 800309a:	1ad3      	subs	r3, r2, r3
 800309c:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	689b      	ldr	r3, [r3, #8]
 80030a2:	69fa      	ldr	r2, [r7, #28]
 80030a4:	429a      	cmp	r2, r3
 80030a6:	d902      	bls.n	80030ae <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	689b      	ldr	r3, [r3, #8]
 80030ac:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80030ae:	69fb      	ldr	r3, [r7, #28]
 80030b0:	3303      	adds	r3, #3
 80030b2:	089b      	lsrs	r3, r3, #2
 80030b4:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	68d9      	ldr	r1, [r3, #12]
 80030ba:	683b      	ldr	r3, [r7, #0]
 80030bc:	b2da      	uxtb	r2, r3
 80030be:	69fb      	ldr	r3, [r7, #28]
 80030c0:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80030c6:	b2db      	uxtb	r3, r3
 80030c8:	9300      	str	r3, [sp, #0]
 80030ca:	4603      	mov	r3, r0
 80030cc:	6978      	ldr	r0, [r7, #20]
 80030ce:	f003 f8b6 	bl	800623e <USB_WritePacket>

    ep->xfer_buff  += len;
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	68da      	ldr	r2, [r3, #12]
 80030d6:	69fb      	ldr	r3, [r7, #28]
 80030d8:	441a      	add	r2, r3
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	699a      	ldr	r2, [r3, #24]
 80030e2:	69fb      	ldr	r3, [r7, #28]
 80030e4:	441a      	add	r2, r3
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80030ea:	683b      	ldr	r3, [r7, #0]
 80030ec:	015a      	lsls	r2, r3, #5
 80030ee:	693b      	ldr	r3, [r7, #16]
 80030f0:	4413      	add	r3, r2
 80030f2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80030f6:	699b      	ldr	r3, [r3, #24]
 80030f8:	b29b      	uxth	r3, r3
 80030fa:	69ba      	ldr	r2, [r7, #24]
 80030fc:	429a      	cmp	r2, r3
 80030fe:	d809      	bhi.n	8003114 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	699a      	ldr	r2, [r3, #24]
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003108:	429a      	cmp	r2, r3
 800310a:	d203      	bcs.n	8003114 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	695b      	ldr	r3, [r3, #20]
 8003110:	2b00      	cmp	r3, #0
 8003112:	d1be      	bne.n	8003092 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	695a      	ldr	r2, [r3, #20]
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	699b      	ldr	r3, [r3, #24]
 800311c:	429a      	cmp	r2, r3
 800311e:	d811      	bhi.n	8003144 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003120:	683b      	ldr	r3, [r7, #0]
 8003122:	f003 030f 	and.w	r3, r3, #15
 8003126:	2201      	movs	r2, #1
 8003128:	fa02 f303 	lsl.w	r3, r2, r3
 800312c:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800312e:	693b      	ldr	r3, [r7, #16]
 8003130:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003134:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003136:	68bb      	ldr	r3, [r7, #8]
 8003138:	43db      	mvns	r3, r3
 800313a:	6939      	ldr	r1, [r7, #16]
 800313c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003140:	4013      	ands	r3, r2
 8003142:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8003144:	2300      	movs	r3, #0
}
 8003146:	4618      	mov	r0, r3
 8003148:	3720      	adds	r7, #32
 800314a:	46bd      	mov	sp, r7
 800314c:	bd80      	pop	{r7, pc}
	...

08003150 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003150:	b580      	push	{r7, lr}
 8003152:	b086      	sub	sp, #24
 8003154:	af00      	add	r7, sp, #0
 8003156:	6078      	str	r0, [r7, #4]
 8003158:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003160:	697b      	ldr	r3, [r7, #20]
 8003162:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003164:	697b      	ldr	r3, [r7, #20]
 8003166:	333c      	adds	r3, #60	; 0x3c
 8003168:	3304      	adds	r3, #4
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800316e:	683b      	ldr	r3, [r7, #0]
 8003170:	015a      	lsls	r2, r3, #5
 8003172:	693b      	ldr	r3, [r7, #16]
 8003174:	4413      	add	r3, r2
 8003176:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800317a:	689b      	ldr	r3, [r3, #8]
 800317c:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	691b      	ldr	r3, [r3, #16]
 8003182:	2b01      	cmp	r3, #1
 8003184:	f040 80a0 	bne.w	80032c8 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8003188:	68bb      	ldr	r3, [r7, #8]
 800318a:	f003 0308 	and.w	r3, r3, #8
 800318e:	2b00      	cmp	r3, #0
 8003190:	d015      	beq.n	80031be <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	4a72      	ldr	r2, [pc, #456]	; (8003360 <PCD_EP_OutXfrComplete_int+0x210>)
 8003196:	4293      	cmp	r3, r2
 8003198:	f240 80dd 	bls.w	8003356 <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800319c:	68bb      	ldr	r3, [r7, #8]
 800319e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	f000 80d7 	beq.w	8003356 <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80031a8:	683b      	ldr	r3, [r7, #0]
 80031aa:	015a      	lsls	r2, r3, #5
 80031ac:	693b      	ldr	r3, [r7, #16]
 80031ae:	4413      	add	r3, r2
 80031b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80031b4:	461a      	mov	r2, r3
 80031b6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80031ba:	6093      	str	r3, [r2, #8]
 80031bc:	e0cb      	b.n	8003356 <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80031be:	68bb      	ldr	r3, [r7, #8]
 80031c0:	f003 0320 	and.w	r3, r3, #32
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d009      	beq.n	80031dc <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80031c8:	683b      	ldr	r3, [r7, #0]
 80031ca:	015a      	lsls	r2, r3, #5
 80031cc:	693b      	ldr	r3, [r7, #16]
 80031ce:	4413      	add	r3, r2
 80031d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80031d4:	461a      	mov	r2, r3
 80031d6:	2320      	movs	r3, #32
 80031d8:	6093      	str	r3, [r2, #8]
 80031da:	e0bc      	b.n	8003356 <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80031dc:	68bb      	ldr	r3, [r7, #8]
 80031de:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	f040 80b7 	bne.w	8003356 <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	4a5d      	ldr	r2, [pc, #372]	; (8003360 <PCD_EP_OutXfrComplete_int+0x210>)
 80031ec:	4293      	cmp	r3, r2
 80031ee:	d90f      	bls.n	8003210 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80031f0:	68bb      	ldr	r3, [r7, #8]
 80031f2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d00a      	beq.n	8003210 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80031fa:	683b      	ldr	r3, [r7, #0]
 80031fc:	015a      	lsls	r2, r3, #5
 80031fe:	693b      	ldr	r3, [r7, #16]
 8003200:	4413      	add	r3, r2
 8003202:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003206:	461a      	mov	r2, r3
 8003208:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800320c:	6093      	str	r3, [r2, #8]
 800320e:	e0a2      	b.n	8003356 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 8003210:	6879      	ldr	r1, [r7, #4]
 8003212:	683a      	ldr	r2, [r7, #0]
 8003214:	4613      	mov	r3, r2
 8003216:	00db      	lsls	r3, r3, #3
 8003218:	1a9b      	subs	r3, r3, r2
 800321a:	009b      	lsls	r3, r3, #2
 800321c:	440b      	add	r3, r1
 800321e:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8003222:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8003224:	683b      	ldr	r3, [r7, #0]
 8003226:	0159      	lsls	r1, r3, #5
 8003228:	693b      	ldr	r3, [r7, #16]
 800322a:	440b      	add	r3, r1
 800322c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003230:	691b      	ldr	r3, [r3, #16]
 8003232:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 8003236:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 8003238:	6878      	ldr	r0, [r7, #4]
 800323a:	683a      	ldr	r2, [r7, #0]
 800323c:	4613      	mov	r3, r2
 800323e:	00db      	lsls	r3, r3, #3
 8003240:	1a9b      	subs	r3, r3, r2
 8003242:	009b      	lsls	r3, r3, #2
 8003244:	4403      	add	r3, r0
 8003246:	f503 7305 	add.w	r3, r3, #532	; 0x214
 800324a:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 800324c:	6879      	ldr	r1, [r7, #4]
 800324e:	683a      	ldr	r2, [r7, #0]
 8003250:	4613      	mov	r3, r2
 8003252:	00db      	lsls	r3, r3, #3
 8003254:	1a9b      	subs	r3, r3, r2
 8003256:	009b      	lsls	r3, r3, #2
 8003258:	440b      	add	r3, r1
 800325a:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800325e:	6819      	ldr	r1, [r3, #0]
 8003260:	6878      	ldr	r0, [r7, #4]
 8003262:	683a      	ldr	r2, [r7, #0]
 8003264:	4613      	mov	r3, r2
 8003266:	00db      	lsls	r3, r3, #3
 8003268:	1a9b      	subs	r3, r3, r2
 800326a:	009b      	lsls	r3, r3, #2
 800326c:	4403      	add	r3, r0
 800326e:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	4419      	add	r1, r3
 8003276:	6878      	ldr	r0, [r7, #4]
 8003278:	683a      	ldr	r2, [r7, #0]
 800327a:	4613      	mov	r3, r2
 800327c:	00db      	lsls	r3, r3, #3
 800327e:	1a9b      	subs	r3, r3, r2
 8003280:	009b      	lsls	r3, r3, #2
 8003282:	4403      	add	r3, r0
 8003284:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003288:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800328a:	683b      	ldr	r3, [r7, #0]
 800328c:	2b00      	cmp	r3, #0
 800328e:	d114      	bne.n	80032ba <PCD_EP_OutXfrComplete_int+0x16a>
 8003290:	6879      	ldr	r1, [r7, #4]
 8003292:	683a      	ldr	r2, [r7, #0]
 8003294:	4613      	mov	r3, r2
 8003296:	00db      	lsls	r3, r3, #3
 8003298:	1a9b      	subs	r3, r3, r2
 800329a:	009b      	lsls	r3, r3, #2
 800329c:	440b      	add	r3, r1
 800329e:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d108      	bne.n	80032ba <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	6818      	ldr	r0, [r3, #0]
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80032b2:	461a      	mov	r2, r3
 80032b4:	2101      	movs	r1, #1
 80032b6:	f003 fa21 	bl	80066fc <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80032ba:	683b      	ldr	r3, [r7, #0]
 80032bc:	b2db      	uxtb	r3, r3
 80032be:	4619      	mov	r1, r3
 80032c0:	6878      	ldr	r0, [r7, #4]
 80032c2:	f005 fa37 	bl	8008734 <HAL_PCD_DataOutStageCallback>
 80032c6:	e046      	b.n	8003356 <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	4a26      	ldr	r2, [pc, #152]	; (8003364 <PCD_EP_OutXfrComplete_int+0x214>)
 80032cc:	4293      	cmp	r3, r2
 80032ce:	d124      	bne.n	800331a <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80032d0:	68bb      	ldr	r3, [r7, #8]
 80032d2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d00a      	beq.n	80032f0 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80032da:	683b      	ldr	r3, [r7, #0]
 80032dc:	015a      	lsls	r2, r3, #5
 80032de:	693b      	ldr	r3, [r7, #16]
 80032e0:	4413      	add	r3, r2
 80032e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80032e6:	461a      	mov	r2, r3
 80032e8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80032ec:	6093      	str	r3, [r2, #8]
 80032ee:	e032      	b.n	8003356 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80032f0:	68bb      	ldr	r3, [r7, #8]
 80032f2:	f003 0320 	and.w	r3, r3, #32
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d008      	beq.n	800330c <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80032fa:	683b      	ldr	r3, [r7, #0]
 80032fc:	015a      	lsls	r2, r3, #5
 80032fe:	693b      	ldr	r3, [r7, #16]
 8003300:	4413      	add	r3, r2
 8003302:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003306:	461a      	mov	r2, r3
 8003308:	2320      	movs	r3, #32
 800330a:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800330c:	683b      	ldr	r3, [r7, #0]
 800330e:	b2db      	uxtb	r3, r3
 8003310:	4619      	mov	r1, r3
 8003312:	6878      	ldr	r0, [r7, #4]
 8003314:	f005 fa0e 	bl	8008734 <HAL_PCD_DataOutStageCallback>
 8003318:	e01d      	b.n	8003356 <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800331a:	683b      	ldr	r3, [r7, #0]
 800331c:	2b00      	cmp	r3, #0
 800331e:	d114      	bne.n	800334a <PCD_EP_OutXfrComplete_int+0x1fa>
 8003320:	6879      	ldr	r1, [r7, #4]
 8003322:	683a      	ldr	r2, [r7, #0]
 8003324:	4613      	mov	r3, r2
 8003326:	00db      	lsls	r3, r3, #3
 8003328:	1a9b      	subs	r3, r3, r2
 800332a:	009b      	lsls	r3, r3, #2
 800332c:	440b      	add	r3, r1
 800332e:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	2b00      	cmp	r3, #0
 8003336:	d108      	bne.n	800334a <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	6818      	ldr	r0, [r3, #0]
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003342:	461a      	mov	r2, r3
 8003344:	2100      	movs	r1, #0
 8003346:	f003 f9d9 	bl	80066fc <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800334a:	683b      	ldr	r3, [r7, #0]
 800334c:	b2db      	uxtb	r3, r3
 800334e:	4619      	mov	r1, r3
 8003350:	6878      	ldr	r0, [r7, #4]
 8003352:	f005 f9ef 	bl	8008734 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8003356:	2300      	movs	r3, #0
}
 8003358:	4618      	mov	r0, r3
 800335a:	3718      	adds	r7, #24
 800335c:	46bd      	mov	sp, r7
 800335e:	bd80      	pop	{r7, pc}
 8003360:	4f54300a 	.word	0x4f54300a
 8003364:	4f54310a 	.word	0x4f54310a

08003368 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003368:	b580      	push	{r7, lr}
 800336a:	b086      	sub	sp, #24
 800336c:	af00      	add	r7, sp, #0
 800336e:	6078      	str	r0, [r7, #4]
 8003370:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003378:	697b      	ldr	r3, [r7, #20]
 800337a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800337c:	697b      	ldr	r3, [r7, #20]
 800337e:	333c      	adds	r3, #60	; 0x3c
 8003380:	3304      	adds	r3, #4
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003386:	683b      	ldr	r3, [r7, #0]
 8003388:	015a      	lsls	r2, r3, #5
 800338a:	693b      	ldr	r3, [r7, #16]
 800338c:	4413      	add	r3, r2
 800338e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003392:	689b      	ldr	r3, [r3, #8]
 8003394:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	4a15      	ldr	r2, [pc, #84]	; (80033f0 <PCD_EP_OutSetupPacket_int+0x88>)
 800339a:	4293      	cmp	r3, r2
 800339c:	d90e      	bls.n	80033bc <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800339e:	68bb      	ldr	r3, [r7, #8]
 80033a0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d009      	beq.n	80033bc <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80033a8:	683b      	ldr	r3, [r7, #0]
 80033aa:	015a      	lsls	r2, r3, #5
 80033ac:	693b      	ldr	r3, [r7, #16]
 80033ae:	4413      	add	r3, r2
 80033b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80033b4:	461a      	mov	r2, r3
 80033b6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80033ba:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80033bc:	6878      	ldr	r0, [r7, #4]
 80033be:	f005 f9a7 	bl	8008710 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	4a0a      	ldr	r2, [pc, #40]	; (80033f0 <PCD_EP_OutSetupPacket_int+0x88>)
 80033c6:	4293      	cmp	r3, r2
 80033c8:	d90c      	bls.n	80033e4 <PCD_EP_OutSetupPacket_int+0x7c>
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	691b      	ldr	r3, [r3, #16]
 80033ce:	2b01      	cmp	r3, #1
 80033d0:	d108      	bne.n	80033e4 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	6818      	ldr	r0, [r3, #0]
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80033dc:	461a      	mov	r2, r3
 80033de:	2101      	movs	r1, #1
 80033e0:	f003 f98c 	bl	80066fc <USB_EP0_OutStart>
  }

  return HAL_OK;
 80033e4:	2300      	movs	r3, #0
}
 80033e6:	4618      	mov	r0, r3
 80033e8:	3718      	adds	r7, #24
 80033ea:	46bd      	mov	sp, r7
 80033ec:	bd80      	pop	{r7, pc}
 80033ee:	bf00      	nop
 80033f0:	4f54300a 	.word	0x4f54300a

080033f4 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80033f4:	b480      	push	{r7}
 80033f6:	b085      	sub	sp, #20
 80033f8:	af00      	add	r7, sp, #0
 80033fa:	6078      	str	r0, [r7, #4]
 80033fc:	460b      	mov	r3, r1
 80033fe:	70fb      	strb	r3, [r7, #3]
 8003400:	4613      	mov	r3, r2
 8003402:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800340a:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 800340c:	78fb      	ldrb	r3, [r7, #3]
 800340e:	2b00      	cmp	r3, #0
 8003410:	d107      	bne.n	8003422 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8003412:	883b      	ldrh	r3, [r7, #0]
 8003414:	0419      	lsls	r1, r3, #16
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	68ba      	ldr	r2, [r7, #8]
 800341c:	430a      	orrs	r2, r1
 800341e:	629a      	str	r2, [r3, #40]	; 0x28
 8003420:	e028      	b.n	8003474 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003428:	0c1b      	lsrs	r3, r3, #16
 800342a:	68ba      	ldr	r2, [r7, #8]
 800342c:	4413      	add	r3, r2
 800342e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003430:	2300      	movs	r3, #0
 8003432:	73fb      	strb	r3, [r7, #15]
 8003434:	e00d      	b.n	8003452 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681a      	ldr	r2, [r3, #0]
 800343a:	7bfb      	ldrb	r3, [r7, #15]
 800343c:	3340      	adds	r3, #64	; 0x40
 800343e:	009b      	lsls	r3, r3, #2
 8003440:	4413      	add	r3, r2
 8003442:	685b      	ldr	r3, [r3, #4]
 8003444:	0c1b      	lsrs	r3, r3, #16
 8003446:	68ba      	ldr	r2, [r7, #8]
 8003448:	4413      	add	r3, r2
 800344a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800344c:	7bfb      	ldrb	r3, [r7, #15]
 800344e:	3301      	adds	r3, #1
 8003450:	73fb      	strb	r3, [r7, #15]
 8003452:	7bfa      	ldrb	r2, [r7, #15]
 8003454:	78fb      	ldrb	r3, [r7, #3]
 8003456:	3b01      	subs	r3, #1
 8003458:	429a      	cmp	r2, r3
 800345a:	d3ec      	bcc.n	8003436 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 800345c:	883b      	ldrh	r3, [r7, #0]
 800345e:	0418      	lsls	r0, r3, #16
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	6819      	ldr	r1, [r3, #0]
 8003464:	78fb      	ldrb	r3, [r7, #3]
 8003466:	3b01      	subs	r3, #1
 8003468:	68ba      	ldr	r2, [r7, #8]
 800346a:	4302      	orrs	r2, r0
 800346c:	3340      	adds	r3, #64	; 0x40
 800346e:	009b      	lsls	r3, r3, #2
 8003470:	440b      	add	r3, r1
 8003472:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8003474:	2300      	movs	r3, #0
}
 8003476:	4618      	mov	r0, r3
 8003478:	3714      	adds	r7, #20
 800347a:	46bd      	mov	sp, r7
 800347c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003480:	4770      	bx	lr

08003482 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8003482:	b480      	push	{r7}
 8003484:	b083      	sub	sp, #12
 8003486:	af00      	add	r7, sp, #0
 8003488:	6078      	str	r0, [r7, #4]
 800348a:	460b      	mov	r3, r1
 800348c:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	887a      	ldrh	r2, [r7, #2]
 8003494:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8003496:	2300      	movs	r3, #0
}
 8003498:	4618      	mov	r0, r3
 800349a:	370c      	adds	r7, #12
 800349c:	46bd      	mov	sp, r7
 800349e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034a2:	4770      	bx	lr

080034a4 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80034a4:	b480      	push	{r7}
 80034a6:	b083      	sub	sp, #12
 80034a8:	af00      	add	r7, sp, #0
 80034aa:	6078      	str	r0, [r7, #4]
 80034ac:	460b      	mov	r3, r1
 80034ae:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80034b0:	bf00      	nop
 80034b2:	370c      	adds	r7, #12
 80034b4:	46bd      	mov	sp, r7
 80034b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ba:	4770      	bx	lr

080034bc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80034bc:	b580      	push	{r7, lr}
 80034be:	b086      	sub	sp, #24
 80034c0:	af00      	add	r7, sp, #0
 80034c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d101      	bne.n	80034ce <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80034ca:	2301      	movs	r3, #1
 80034cc:	e25b      	b.n	8003986 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	f003 0301 	and.w	r3, r3, #1
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d075      	beq.n	80035c6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80034da:	4ba3      	ldr	r3, [pc, #652]	; (8003768 <HAL_RCC_OscConfig+0x2ac>)
 80034dc:	689b      	ldr	r3, [r3, #8]
 80034de:	f003 030c 	and.w	r3, r3, #12
 80034e2:	2b04      	cmp	r3, #4
 80034e4:	d00c      	beq.n	8003500 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80034e6:	4ba0      	ldr	r3, [pc, #640]	; (8003768 <HAL_RCC_OscConfig+0x2ac>)
 80034e8:	689b      	ldr	r3, [r3, #8]
 80034ea:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80034ee:	2b08      	cmp	r3, #8
 80034f0:	d112      	bne.n	8003518 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80034f2:	4b9d      	ldr	r3, [pc, #628]	; (8003768 <HAL_RCC_OscConfig+0x2ac>)
 80034f4:	685b      	ldr	r3, [r3, #4]
 80034f6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80034fa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80034fe:	d10b      	bne.n	8003518 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003500:	4b99      	ldr	r3, [pc, #612]	; (8003768 <HAL_RCC_OscConfig+0x2ac>)
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003508:	2b00      	cmp	r3, #0
 800350a:	d05b      	beq.n	80035c4 <HAL_RCC_OscConfig+0x108>
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	685b      	ldr	r3, [r3, #4]
 8003510:	2b00      	cmp	r3, #0
 8003512:	d157      	bne.n	80035c4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003514:	2301      	movs	r3, #1
 8003516:	e236      	b.n	8003986 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	685b      	ldr	r3, [r3, #4]
 800351c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003520:	d106      	bne.n	8003530 <HAL_RCC_OscConfig+0x74>
 8003522:	4b91      	ldr	r3, [pc, #580]	; (8003768 <HAL_RCC_OscConfig+0x2ac>)
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	4a90      	ldr	r2, [pc, #576]	; (8003768 <HAL_RCC_OscConfig+0x2ac>)
 8003528:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800352c:	6013      	str	r3, [r2, #0]
 800352e:	e01d      	b.n	800356c <HAL_RCC_OscConfig+0xb0>
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	685b      	ldr	r3, [r3, #4]
 8003534:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003538:	d10c      	bne.n	8003554 <HAL_RCC_OscConfig+0x98>
 800353a:	4b8b      	ldr	r3, [pc, #556]	; (8003768 <HAL_RCC_OscConfig+0x2ac>)
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	4a8a      	ldr	r2, [pc, #552]	; (8003768 <HAL_RCC_OscConfig+0x2ac>)
 8003540:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003544:	6013      	str	r3, [r2, #0]
 8003546:	4b88      	ldr	r3, [pc, #544]	; (8003768 <HAL_RCC_OscConfig+0x2ac>)
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	4a87      	ldr	r2, [pc, #540]	; (8003768 <HAL_RCC_OscConfig+0x2ac>)
 800354c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003550:	6013      	str	r3, [r2, #0]
 8003552:	e00b      	b.n	800356c <HAL_RCC_OscConfig+0xb0>
 8003554:	4b84      	ldr	r3, [pc, #528]	; (8003768 <HAL_RCC_OscConfig+0x2ac>)
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	4a83      	ldr	r2, [pc, #524]	; (8003768 <HAL_RCC_OscConfig+0x2ac>)
 800355a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800355e:	6013      	str	r3, [r2, #0]
 8003560:	4b81      	ldr	r3, [pc, #516]	; (8003768 <HAL_RCC_OscConfig+0x2ac>)
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	4a80      	ldr	r2, [pc, #512]	; (8003768 <HAL_RCC_OscConfig+0x2ac>)
 8003566:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800356a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	685b      	ldr	r3, [r3, #4]
 8003570:	2b00      	cmp	r3, #0
 8003572:	d013      	beq.n	800359c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003574:	f7fd fdf8 	bl	8001168 <HAL_GetTick>
 8003578:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800357a:	e008      	b.n	800358e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800357c:	f7fd fdf4 	bl	8001168 <HAL_GetTick>
 8003580:	4602      	mov	r2, r0
 8003582:	693b      	ldr	r3, [r7, #16]
 8003584:	1ad3      	subs	r3, r2, r3
 8003586:	2b64      	cmp	r3, #100	; 0x64
 8003588:	d901      	bls.n	800358e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800358a:	2303      	movs	r3, #3
 800358c:	e1fb      	b.n	8003986 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800358e:	4b76      	ldr	r3, [pc, #472]	; (8003768 <HAL_RCC_OscConfig+0x2ac>)
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003596:	2b00      	cmp	r3, #0
 8003598:	d0f0      	beq.n	800357c <HAL_RCC_OscConfig+0xc0>
 800359a:	e014      	b.n	80035c6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800359c:	f7fd fde4 	bl	8001168 <HAL_GetTick>
 80035a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80035a2:	e008      	b.n	80035b6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80035a4:	f7fd fde0 	bl	8001168 <HAL_GetTick>
 80035a8:	4602      	mov	r2, r0
 80035aa:	693b      	ldr	r3, [r7, #16]
 80035ac:	1ad3      	subs	r3, r2, r3
 80035ae:	2b64      	cmp	r3, #100	; 0x64
 80035b0:	d901      	bls.n	80035b6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80035b2:	2303      	movs	r3, #3
 80035b4:	e1e7      	b.n	8003986 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80035b6:	4b6c      	ldr	r3, [pc, #432]	; (8003768 <HAL_RCC_OscConfig+0x2ac>)
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d1f0      	bne.n	80035a4 <HAL_RCC_OscConfig+0xe8>
 80035c2:	e000      	b.n	80035c6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80035c4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	f003 0302 	and.w	r3, r3, #2
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d063      	beq.n	800369a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80035d2:	4b65      	ldr	r3, [pc, #404]	; (8003768 <HAL_RCC_OscConfig+0x2ac>)
 80035d4:	689b      	ldr	r3, [r3, #8]
 80035d6:	f003 030c 	and.w	r3, r3, #12
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d00b      	beq.n	80035f6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80035de:	4b62      	ldr	r3, [pc, #392]	; (8003768 <HAL_RCC_OscConfig+0x2ac>)
 80035e0:	689b      	ldr	r3, [r3, #8]
 80035e2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80035e6:	2b08      	cmp	r3, #8
 80035e8:	d11c      	bne.n	8003624 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80035ea:	4b5f      	ldr	r3, [pc, #380]	; (8003768 <HAL_RCC_OscConfig+0x2ac>)
 80035ec:	685b      	ldr	r3, [r3, #4]
 80035ee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d116      	bne.n	8003624 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80035f6:	4b5c      	ldr	r3, [pc, #368]	; (8003768 <HAL_RCC_OscConfig+0x2ac>)
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	f003 0302 	and.w	r3, r3, #2
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d005      	beq.n	800360e <HAL_RCC_OscConfig+0x152>
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	68db      	ldr	r3, [r3, #12]
 8003606:	2b01      	cmp	r3, #1
 8003608:	d001      	beq.n	800360e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800360a:	2301      	movs	r3, #1
 800360c:	e1bb      	b.n	8003986 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800360e:	4b56      	ldr	r3, [pc, #344]	; (8003768 <HAL_RCC_OscConfig+0x2ac>)
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	691b      	ldr	r3, [r3, #16]
 800361a:	00db      	lsls	r3, r3, #3
 800361c:	4952      	ldr	r1, [pc, #328]	; (8003768 <HAL_RCC_OscConfig+0x2ac>)
 800361e:	4313      	orrs	r3, r2
 8003620:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003622:	e03a      	b.n	800369a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	68db      	ldr	r3, [r3, #12]
 8003628:	2b00      	cmp	r3, #0
 800362a:	d020      	beq.n	800366e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800362c:	4b4f      	ldr	r3, [pc, #316]	; (800376c <HAL_RCC_OscConfig+0x2b0>)
 800362e:	2201      	movs	r2, #1
 8003630:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003632:	f7fd fd99 	bl	8001168 <HAL_GetTick>
 8003636:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003638:	e008      	b.n	800364c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800363a:	f7fd fd95 	bl	8001168 <HAL_GetTick>
 800363e:	4602      	mov	r2, r0
 8003640:	693b      	ldr	r3, [r7, #16]
 8003642:	1ad3      	subs	r3, r2, r3
 8003644:	2b02      	cmp	r3, #2
 8003646:	d901      	bls.n	800364c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003648:	2303      	movs	r3, #3
 800364a:	e19c      	b.n	8003986 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800364c:	4b46      	ldr	r3, [pc, #280]	; (8003768 <HAL_RCC_OscConfig+0x2ac>)
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	f003 0302 	and.w	r3, r3, #2
 8003654:	2b00      	cmp	r3, #0
 8003656:	d0f0      	beq.n	800363a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003658:	4b43      	ldr	r3, [pc, #268]	; (8003768 <HAL_RCC_OscConfig+0x2ac>)
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	691b      	ldr	r3, [r3, #16]
 8003664:	00db      	lsls	r3, r3, #3
 8003666:	4940      	ldr	r1, [pc, #256]	; (8003768 <HAL_RCC_OscConfig+0x2ac>)
 8003668:	4313      	orrs	r3, r2
 800366a:	600b      	str	r3, [r1, #0]
 800366c:	e015      	b.n	800369a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800366e:	4b3f      	ldr	r3, [pc, #252]	; (800376c <HAL_RCC_OscConfig+0x2b0>)
 8003670:	2200      	movs	r2, #0
 8003672:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003674:	f7fd fd78 	bl	8001168 <HAL_GetTick>
 8003678:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800367a:	e008      	b.n	800368e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800367c:	f7fd fd74 	bl	8001168 <HAL_GetTick>
 8003680:	4602      	mov	r2, r0
 8003682:	693b      	ldr	r3, [r7, #16]
 8003684:	1ad3      	subs	r3, r2, r3
 8003686:	2b02      	cmp	r3, #2
 8003688:	d901      	bls.n	800368e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800368a:	2303      	movs	r3, #3
 800368c:	e17b      	b.n	8003986 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800368e:	4b36      	ldr	r3, [pc, #216]	; (8003768 <HAL_RCC_OscConfig+0x2ac>)
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	f003 0302 	and.w	r3, r3, #2
 8003696:	2b00      	cmp	r3, #0
 8003698:	d1f0      	bne.n	800367c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	f003 0308 	and.w	r3, r3, #8
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d030      	beq.n	8003708 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	695b      	ldr	r3, [r3, #20]
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d016      	beq.n	80036dc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80036ae:	4b30      	ldr	r3, [pc, #192]	; (8003770 <HAL_RCC_OscConfig+0x2b4>)
 80036b0:	2201      	movs	r2, #1
 80036b2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80036b4:	f7fd fd58 	bl	8001168 <HAL_GetTick>
 80036b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80036ba:	e008      	b.n	80036ce <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80036bc:	f7fd fd54 	bl	8001168 <HAL_GetTick>
 80036c0:	4602      	mov	r2, r0
 80036c2:	693b      	ldr	r3, [r7, #16]
 80036c4:	1ad3      	subs	r3, r2, r3
 80036c6:	2b02      	cmp	r3, #2
 80036c8:	d901      	bls.n	80036ce <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80036ca:	2303      	movs	r3, #3
 80036cc:	e15b      	b.n	8003986 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80036ce:	4b26      	ldr	r3, [pc, #152]	; (8003768 <HAL_RCC_OscConfig+0x2ac>)
 80036d0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80036d2:	f003 0302 	and.w	r3, r3, #2
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d0f0      	beq.n	80036bc <HAL_RCC_OscConfig+0x200>
 80036da:	e015      	b.n	8003708 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80036dc:	4b24      	ldr	r3, [pc, #144]	; (8003770 <HAL_RCC_OscConfig+0x2b4>)
 80036de:	2200      	movs	r2, #0
 80036e0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80036e2:	f7fd fd41 	bl	8001168 <HAL_GetTick>
 80036e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80036e8:	e008      	b.n	80036fc <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80036ea:	f7fd fd3d 	bl	8001168 <HAL_GetTick>
 80036ee:	4602      	mov	r2, r0
 80036f0:	693b      	ldr	r3, [r7, #16]
 80036f2:	1ad3      	subs	r3, r2, r3
 80036f4:	2b02      	cmp	r3, #2
 80036f6:	d901      	bls.n	80036fc <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80036f8:	2303      	movs	r3, #3
 80036fa:	e144      	b.n	8003986 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80036fc:	4b1a      	ldr	r3, [pc, #104]	; (8003768 <HAL_RCC_OscConfig+0x2ac>)
 80036fe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003700:	f003 0302 	and.w	r3, r3, #2
 8003704:	2b00      	cmp	r3, #0
 8003706:	d1f0      	bne.n	80036ea <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	f003 0304 	and.w	r3, r3, #4
 8003710:	2b00      	cmp	r3, #0
 8003712:	f000 80a0 	beq.w	8003856 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003716:	2300      	movs	r3, #0
 8003718:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800371a:	4b13      	ldr	r3, [pc, #76]	; (8003768 <HAL_RCC_OscConfig+0x2ac>)
 800371c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800371e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003722:	2b00      	cmp	r3, #0
 8003724:	d10f      	bne.n	8003746 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003726:	2300      	movs	r3, #0
 8003728:	60bb      	str	r3, [r7, #8]
 800372a:	4b0f      	ldr	r3, [pc, #60]	; (8003768 <HAL_RCC_OscConfig+0x2ac>)
 800372c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800372e:	4a0e      	ldr	r2, [pc, #56]	; (8003768 <HAL_RCC_OscConfig+0x2ac>)
 8003730:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003734:	6413      	str	r3, [r2, #64]	; 0x40
 8003736:	4b0c      	ldr	r3, [pc, #48]	; (8003768 <HAL_RCC_OscConfig+0x2ac>)
 8003738:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800373a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800373e:	60bb      	str	r3, [r7, #8]
 8003740:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003742:	2301      	movs	r3, #1
 8003744:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003746:	4b0b      	ldr	r3, [pc, #44]	; (8003774 <HAL_RCC_OscConfig+0x2b8>)
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800374e:	2b00      	cmp	r3, #0
 8003750:	d121      	bne.n	8003796 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003752:	4b08      	ldr	r3, [pc, #32]	; (8003774 <HAL_RCC_OscConfig+0x2b8>)
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	4a07      	ldr	r2, [pc, #28]	; (8003774 <HAL_RCC_OscConfig+0x2b8>)
 8003758:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800375c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800375e:	f7fd fd03 	bl	8001168 <HAL_GetTick>
 8003762:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003764:	e011      	b.n	800378a <HAL_RCC_OscConfig+0x2ce>
 8003766:	bf00      	nop
 8003768:	40023800 	.word	0x40023800
 800376c:	42470000 	.word	0x42470000
 8003770:	42470e80 	.word	0x42470e80
 8003774:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003778:	f7fd fcf6 	bl	8001168 <HAL_GetTick>
 800377c:	4602      	mov	r2, r0
 800377e:	693b      	ldr	r3, [r7, #16]
 8003780:	1ad3      	subs	r3, r2, r3
 8003782:	2b02      	cmp	r3, #2
 8003784:	d901      	bls.n	800378a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8003786:	2303      	movs	r3, #3
 8003788:	e0fd      	b.n	8003986 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800378a:	4b81      	ldr	r3, [pc, #516]	; (8003990 <HAL_RCC_OscConfig+0x4d4>)
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003792:	2b00      	cmp	r3, #0
 8003794:	d0f0      	beq.n	8003778 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	689b      	ldr	r3, [r3, #8]
 800379a:	2b01      	cmp	r3, #1
 800379c:	d106      	bne.n	80037ac <HAL_RCC_OscConfig+0x2f0>
 800379e:	4b7d      	ldr	r3, [pc, #500]	; (8003994 <HAL_RCC_OscConfig+0x4d8>)
 80037a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037a2:	4a7c      	ldr	r2, [pc, #496]	; (8003994 <HAL_RCC_OscConfig+0x4d8>)
 80037a4:	f043 0301 	orr.w	r3, r3, #1
 80037a8:	6713      	str	r3, [r2, #112]	; 0x70
 80037aa:	e01c      	b.n	80037e6 <HAL_RCC_OscConfig+0x32a>
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	689b      	ldr	r3, [r3, #8]
 80037b0:	2b05      	cmp	r3, #5
 80037b2:	d10c      	bne.n	80037ce <HAL_RCC_OscConfig+0x312>
 80037b4:	4b77      	ldr	r3, [pc, #476]	; (8003994 <HAL_RCC_OscConfig+0x4d8>)
 80037b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037b8:	4a76      	ldr	r2, [pc, #472]	; (8003994 <HAL_RCC_OscConfig+0x4d8>)
 80037ba:	f043 0304 	orr.w	r3, r3, #4
 80037be:	6713      	str	r3, [r2, #112]	; 0x70
 80037c0:	4b74      	ldr	r3, [pc, #464]	; (8003994 <HAL_RCC_OscConfig+0x4d8>)
 80037c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037c4:	4a73      	ldr	r2, [pc, #460]	; (8003994 <HAL_RCC_OscConfig+0x4d8>)
 80037c6:	f043 0301 	orr.w	r3, r3, #1
 80037ca:	6713      	str	r3, [r2, #112]	; 0x70
 80037cc:	e00b      	b.n	80037e6 <HAL_RCC_OscConfig+0x32a>
 80037ce:	4b71      	ldr	r3, [pc, #452]	; (8003994 <HAL_RCC_OscConfig+0x4d8>)
 80037d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037d2:	4a70      	ldr	r2, [pc, #448]	; (8003994 <HAL_RCC_OscConfig+0x4d8>)
 80037d4:	f023 0301 	bic.w	r3, r3, #1
 80037d8:	6713      	str	r3, [r2, #112]	; 0x70
 80037da:	4b6e      	ldr	r3, [pc, #440]	; (8003994 <HAL_RCC_OscConfig+0x4d8>)
 80037dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037de:	4a6d      	ldr	r2, [pc, #436]	; (8003994 <HAL_RCC_OscConfig+0x4d8>)
 80037e0:	f023 0304 	bic.w	r3, r3, #4
 80037e4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	689b      	ldr	r3, [r3, #8]
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d015      	beq.n	800381a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80037ee:	f7fd fcbb 	bl	8001168 <HAL_GetTick>
 80037f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80037f4:	e00a      	b.n	800380c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80037f6:	f7fd fcb7 	bl	8001168 <HAL_GetTick>
 80037fa:	4602      	mov	r2, r0
 80037fc:	693b      	ldr	r3, [r7, #16]
 80037fe:	1ad3      	subs	r3, r2, r3
 8003800:	f241 3288 	movw	r2, #5000	; 0x1388
 8003804:	4293      	cmp	r3, r2
 8003806:	d901      	bls.n	800380c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8003808:	2303      	movs	r3, #3
 800380a:	e0bc      	b.n	8003986 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800380c:	4b61      	ldr	r3, [pc, #388]	; (8003994 <HAL_RCC_OscConfig+0x4d8>)
 800380e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003810:	f003 0302 	and.w	r3, r3, #2
 8003814:	2b00      	cmp	r3, #0
 8003816:	d0ee      	beq.n	80037f6 <HAL_RCC_OscConfig+0x33a>
 8003818:	e014      	b.n	8003844 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800381a:	f7fd fca5 	bl	8001168 <HAL_GetTick>
 800381e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003820:	e00a      	b.n	8003838 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003822:	f7fd fca1 	bl	8001168 <HAL_GetTick>
 8003826:	4602      	mov	r2, r0
 8003828:	693b      	ldr	r3, [r7, #16]
 800382a:	1ad3      	subs	r3, r2, r3
 800382c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003830:	4293      	cmp	r3, r2
 8003832:	d901      	bls.n	8003838 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8003834:	2303      	movs	r3, #3
 8003836:	e0a6      	b.n	8003986 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003838:	4b56      	ldr	r3, [pc, #344]	; (8003994 <HAL_RCC_OscConfig+0x4d8>)
 800383a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800383c:	f003 0302 	and.w	r3, r3, #2
 8003840:	2b00      	cmp	r3, #0
 8003842:	d1ee      	bne.n	8003822 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003844:	7dfb      	ldrb	r3, [r7, #23]
 8003846:	2b01      	cmp	r3, #1
 8003848:	d105      	bne.n	8003856 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800384a:	4b52      	ldr	r3, [pc, #328]	; (8003994 <HAL_RCC_OscConfig+0x4d8>)
 800384c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800384e:	4a51      	ldr	r2, [pc, #324]	; (8003994 <HAL_RCC_OscConfig+0x4d8>)
 8003850:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003854:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	699b      	ldr	r3, [r3, #24]
 800385a:	2b00      	cmp	r3, #0
 800385c:	f000 8092 	beq.w	8003984 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003860:	4b4c      	ldr	r3, [pc, #304]	; (8003994 <HAL_RCC_OscConfig+0x4d8>)
 8003862:	689b      	ldr	r3, [r3, #8]
 8003864:	f003 030c 	and.w	r3, r3, #12
 8003868:	2b08      	cmp	r3, #8
 800386a:	d05c      	beq.n	8003926 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	699b      	ldr	r3, [r3, #24]
 8003870:	2b02      	cmp	r3, #2
 8003872:	d141      	bne.n	80038f8 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003874:	4b48      	ldr	r3, [pc, #288]	; (8003998 <HAL_RCC_OscConfig+0x4dc>)
 8003876:	2200      	movs	r2, #0
 8003878:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800387a:	f7fd fc75 	bl	8001168 <HAL_GetTick>
 800387e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003880:	e008      	b.n	8003894 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003882:	f7fd fc71 	bl	8001168 <HAL_GetTick>
 8003886:	4602      	mov	r2, r0
 8003888:	693b      	ldr	r3, [r7, #16]
 800388a:	1ad3      	subs	r3, r2, r3
 800388c:	2b02      	cmp	r3, #2
 800388e:	d901      	bls.n	8003894 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8003890:	2303      	movs	r3, #3
 8003892:	e078      	b.n	8003986 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003894:	4b3f      	ldr	r3, [pc, #252]	; (8003994 <HAL_RCC_OscConfig+0x4d8>)
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800389c:	2b00      	cmp	r3, #0
 800389e:	d1f0      	bne.n	8003882 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	69da      	ldr	r2, [r3, #28]
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	6a1b      	ldr	r3, [r3, #32]
 80038a8:	431a      	orrs	r2, r3
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038ae:	019b      	lsls	r3, r3, #6
 80038b0:	431a      	orrs	r2, r3
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038b6:	085b      	lsrs	r3, r3, #1
 80038b8:	3b01      	subs	r3, #1
 80038ba:	041b      	lsls	r3, r3, #16
 80038bc:	431a      	orrs	r2, r3
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038c2:	061b      	lsls	r3, r3, #24
 80038c4:	4933      	ldr	r1, [pc, #204]	; (8003994 <HAL_RCC_OscConfig+0x4d8>)
 80038c6:	4313      	orrs	r3, r2
 80038c8:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80038ca:	4b33      	ldr	r3, [pc, #204]	; (8003998 <HAL_RCC_OscConfig+0x4dc>)
 80038cc:	2201      	movs	r2, #1
 80038ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038d0:	f7fd fc4a 	bl	8001168 <HAL_GetTick>
 80038d4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80038d6:	e008      	b.n	80038ea <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80038d8:	f7fd fc46 	bl	8001168 <HAL_GetTick>
 80038dc:	4602      	mov	r2, r0
 80038de:	693b      	ldr	r3, [r7, #16]
 80038e0:	1ad3      	subs	r3, r2, r3
 80038e2:	2b02      	cmp	r3, #2
 80038e4:	d901      	bls.n	80038ea <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80038e6:	2303      	movs	r3, #3
 80038e8:	e04d      	b.n	8003986 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80038ea:	4b2a      	ldr	r3, [pc, #168]	; (8003994 <HAL_RCC_OscConfig+0x4d8>)
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d0f0      	beq.n	80038d8 <HAL_RCC_OscConfig+0x41c>
 80038f6:	e045      	b.n	8003984 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80038f8:	4b27      	ldr	r3, [pc, #156]	; (8003998 <HAL_RCC_OscConfig+0x4dc>)
 80038fa:	2200      	movs	r2, #0
 80038fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038fe:	f7fd fc33 	bl	8001168 <HAL_GetTick>
 8003902:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003904:	e008      	b.n	8003918 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003906:	f7fd fc2f 	bl	8001168 <HAL_GetTick>
 800390a:	4602      	mov	r2, r0
 800390c:	693b      	ldr	r3, [r7, #16]
 800390e:	1ad3      	subs	r3, r2, r3
 8003910:	2b02      	cmp	r3, #2
 8003912:	d901      	bls.n	8003918 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8003914:	2303      	movs	r3, #3
 8003916:	e036      	b.n	8003986 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003918:	4b1e      	ldr	r3, [pc, #120]	; (8003994 <HAL_RCC_OscConfig+0x4d8>)
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003920:	2b00      	cmp	r3, #0
 8003922:	d1f0      	bne.n	8003906 <HAL_RCC_OscConfig+0x44a>
 8003924:	e02e      	b.n	8003984 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	699b      	ldr	r3, [r3, #24]
 800392a:	2b01      	cmp	r3, #1
 800392c:	d101      	bne.n	8003932 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800392e:	2301      	movs	r3, #1
 8003930:	e029      	b.n	8003986 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003932:	4b18      	ldr	r3, [pc, #96]	; (8003994 <HAL_RCC_OscConfig+0x4d8>)
 8003934:	685b      	ldr	r3, [r3, #4]
 8003936:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	69db      	ldr	r3, [r3, #28]
 8003942:	429a      	cmp	r2, r3
 8003944:	d11c      	bne.n	8003980 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003950:	429a      	cmp	r2, r3
 8003952:	d115      	bne.n	8003980 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8003954:	68fa      	ldr	r2, [r7, #12]
 8003956:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800395a:	4013      	ands	r3, r2
 800395c:	687a      	ldr	r2, [r7, #4]
 800395e:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003960:	4293      	cmp	r3, r2
 8003962:	d10d      	bne.n	8003980 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800396e:	429a      	cmp	r2, r3
 8003970:	d106      	bne.n	8003980 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800397c:	429a      	cmp	r2, r3
 800397e:	d001      	beq.n	8003984 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8003980:	2301      	movs	r3, #1
 8003982:	e000      	b.n	8003986 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8003984:	2300      	movs	r3, #0
}
 8003986:	4618      	mov	r0, r3
 8003988:	3718      	adds	r7, #24
 800398a:	46bd      	mov	sp, r7
 800398c:	bd80      	pop	{r7, pc}
 800398e:	bf00      	nop
 8003990:	40007000 	.word	0x40007000
 8003994:	40023800 	.word	0x40023800
 8003998:	42470060 	.word	0x42470060

0800399c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800399c:	b580      	push	{r7, lr}
 800399e:	b084      	sub	sp, #16
 80039a0:	af00      	add	r7, sp, #0
 80039a2:	6078      	str	r0, [r7, #4]
 80039a4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d101      	bne.n	80039b0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80039ac:	2301      	movs	r3, #1
 80039ae:	e0cc      	b.n	8003b4a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80039b0:	4b68      	ldr	r3, [pc, #416]	; (8003b54 <HAL_RCC_ClockConfig+0x1b8>)
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	f003 030f 	and.w	r3, r3, #15
 80039b8:	683a      	ldr	r2, [r7, #0]
 80039ba:	429a      	cmp	r2, r3
 80039bc:	d90c      	bls.n	80039d8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80039be:	4b65      	ldr	r3, [pc, #404]	; (8003b54 <HAL_RCC_ClockConfig+0x1b8>)
 80039c0:	683a      	ldr	r2, [r7, #0]
 80039c2:	b2d2      	uxtb	r2, r2
 80039c4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80039c6:	4b63      	ldr	r3, [pc, #396]	; (8003b54 <HAL_RCC_ClockConfig+0x1b8>)
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	f003 030f 	and.w	r3, r3, #15
 80039ce:	683a      	ldr	r2, [r7, #0]
 80039d0:	429a      	cmp	r2, r3
 80039d2:	d001      	beq.n	80039d8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80039d4:	2301      	movs	r3, #1
 80039d6:	e0b8      	b.n	8003b4a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	f003 0302 	and.w	r3, r3, #2
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d020      	beq.n	8003a26 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	f003 0304 	and.w	r3, r3, #4
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d005      	beq.n	80039fc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80039f0:	4b59      	ldr	r3, [pc, #356]	; (8003b58 <HAL_RCC_ClockConfig+0x1bc>)
 80039f2:	689b      	ldr	r3, [r3, #8]
 80039f4:	4a58      	ldr	r2, [pc, #352]	; (8003b58 <HAL_RCC_ClockConfig+0x1bc>)
 80039f6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80039fa:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	f003 0308 	and.w	r3, r3, #8
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d005      	beq.n	8003a14 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003a08:	4b53      	ldr	r3, [pc, #332]	; (8003b58 <HAL_RCC_ClockConfig+0x1bc>)
 8003a0a:	689b      	ldr	r3, [r3, #8]
 8003a0c:	4a52      	ldr	r2, [pc, #328]	; (8003b58 <HAL_RCC_ClockConfig+0x1bc>)
 8003a0e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003a12:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003a14:	4b50      	ldr	r3, [pc, #320]	; (8003b58 <HAL_RCC_ClockConfig+0x1bc>)
 8003a16:	689b      	ldr	r3, [r3, #8]
 8003a18:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	689b      	ldr	r3, [r3, #8]
 8003a20:	494d      	ldr	r1, [pc, #308]	; (8003b58 <HAL_RCC_ClockConfig+0x1bc>)
 8003a22:	4313      	orrs	r3, r2
 8003a24:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	f003 0301 	and.w	r3, r3, #1
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d044      	beq.n	8003abc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	685b      	ldr	r3, [r3, #4]
 8003a36:	2b01      	cmp	r3, #1
 8003a38:	d107      	bne.n	8003a4a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a3a:	4b47      	ldr	r3, [pc, #284]	; (8003b58 <HAL_RCC_ClockConfig+0x1bc>)
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d119      	bne.n	8003a7a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003a46:	2301      	movs	r3, #1
 8003a48:	e07f      	b.n	8003b4a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	685b      	ldr	r3, [r3, #4]
 8003a4e:	2b02      	cmp	r3, #2
 8003a50:	d003      	beq.n	8003a5a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003a56:	2b03      	cmp	r3, #3
 8003a58:	d107      	bne.n	8003a6a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003a5a:	4b3f      	ldr	r3, [pc, #252]	; (8003b58 <HAL_RCC_ClockConfig+0x1bc>)
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d109      	bne.n	8003a7a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003a66:	2301      	movs	r3, #1
 8003a68:	e06f      	b.n	8003b4a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a6a:	4b3b      	ldr	r3, [pc, #236]	; (8003b58 <HAL_RCC_ClockConfig+0x1bc>)
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	f003 0302 	and.w	r3, r3, #2
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d101      	bne.n	8003a7a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003a76:	2301      	movs	r3, #1
 8003a78:	e067      	b.n	8003b4a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003a7a:	4b37      	ldr	r3, [pc, #220]	; (8003b58 <HAL_RCC_ClockConfig+0x1bc>)
 8003a7c:	689b      	ldr	r3, [r3, #8]
 8003a7e:	f023 0203 	bic.w	r2, r3, #3
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	685b      	ldr	r3, [r3, #4]
 8003a86:	4934      	ldr	r1, [pc, #208]	; (8003b58 <HAL_RCC_ClockConfig+0x1bc>)
 8003a88:	4313      	orrs	r3, r2
 8003a8a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003a8c:	f7fd fb6c 	bl	8001168 <HAL_GetTick>
 8003a90:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003a92:	e00a      	b.n	8003aaa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003a94:	f7fd fb68 	bl	8001168 <HAL_GetTick>
 8003a98:	4602      	mov	r2, r0
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	1ad3      	subs	r3, r2, r3
 8003a9e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003aa2:	4293      	cmp	r3, r2
 8003aa4:	d901      	bls.n	8003aaa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003aa6:	2303      	movs	r3, #3
 8003aa8:	e04f      	b.n	8003b4a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003aaa:	4b2b      	ldr	r3, [pc, #172]	; (8003b58 <HAL_RCC_ClockConfig+0x1bc>)
 8003aac:	689b      	ldr	r3, [r3, #8]
 8003aae:	f003 020c 	and.w	r2, r3, #12
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	685b      	ldr	r3, [r3, #4]
 8003ab6:	009b      	lsls	r3, r3, #2
 8003ab8:	429a      	cmp	r2, r3
 8003aba:	d1eb      	bne.n	8003a94 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003abc:	4b25      	ldr	r3, [pc, #148]	; (8003b54 <HAL_RCC_ClockConfig+0x1b8>)
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	f003 030f 	and.w	r3, r3, #15
 8003ac4:	683a      	ldr	r2, [r7, #0]
 8003ac6:	429a      	cmp	r2, r3
 8003ac8:	d20c      	bcs.n	8003ae4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003aca:	4b22      	ldr	r3, [pc, #136]	; (8003b54 <HAL_RCC_ClockConfig+0x1b8>)
 8003acc:	683a      	ldr	r2, [r7, #0]
 8003ace:	b2d2      	uxtb	r2, r2
 8003ad0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003ad2:	4b20      	ldr	r3, [pc, #128]	; (8003b54 <HAL_RCC_ClockConfig+0x1b8>)
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	f003 030f 	and.w	r3, r3, #15
 8003ada:	683a      	ldr	r2, [r7, #0]
 8003adc:	429a      	cmp	r2, r3
 8003ade:	d001      	beq.n	8003ae4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003ae0:	2301      	movs	r3, #1
 8003ae2:	e032      	b.n	8003b4a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	f003 0304 	and.w	r3, r3, #4
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d008      	beq.n	8003b02 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003af0:	4b19      	ldr	r3, [pc, #100]	; (8003b58 <HAL_RCC_ClockConfig+0x1bc>)
 8003af2:	689b      	ldr	r3, [r3, #8]
 8003af4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	68db      	ldr	r3, [r3, #12]
 8003afc:	4916      	ldr	r1, [pc, #88]	; (8003b58 <HAL_RCC_ClockConfig+0x1bc>)
 8003afe:	4313      	orrs	r3, r2
 8003b00:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	f003 0308 	and.w	r3, r3, #8
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d009      	beq.n	8003b22 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003b0e:	4b12      	ldr	r3, [pc, #72]	; (8003b58 <HAL_RCC_ClockConfig+0x1bc>)
 8003b10:	689b      	ldr	r3, [r3, #8]
 8003b12:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	691b      	ldr	r3, [r3, #16]
 8003b1a:	00db      	lsls	r3, r3, #3
 8003b1c:	490e      	ldr	r1, [pc, #56]	; (8003b58 <HAL_RCC_ClockConfig+0x1bc>)
 8003b1e:	4313      	orrs	r3, r2
 8003b20:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003b22:	f000 f821 	bl	8003b68 <HAL_RCC_GetSysClockFreq>
 8003b26:	4601      	mov	r1, r0
 8003b28:	4b0b      	ldr	r3, [pc, #44]	; (8003b58 <HAL_RCC_ClockConfig+0x1bc>)
 8003b2a:	689b      	ldr	r3, [r3, #8]
 8003b2c:	091b      	lsrs	r3, r3, #4
 8003b2e:	f003 030f 	and.w	r3, r3, #15
 8003b32:	4a0a      	ldr	r2, [pc, #40]	; (8003b5c <HAL_RCC_ClockConfig+0x1c0>)
 8003b34:	5cd3      	ldrb	r3, [r2, r3]
 8003b36:	fa21 f303 	lsr.w	r3, r1, r3
 8003b3a:	4a09      	ldr	r2, [pc, #36]	; (8003b60 <HAL_RCC_ClockConfig+0x1c4>)
 8003b3c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003b3e:	4b09      	ldr	r3, [pc, #36]	; (8003b64 <HAL_RCC_ClockConfig+0x1c8>)
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	4618      	mov	r0, r3
 8003b44:	f7fd facc 	bl	80010e0 <HAL_InitTick>

  return HAL_OK;
 8003b48:	2300      	movs	r3, #0
}
 8003b4a:	4618      	mov	r0, r3
 8003b4c:	3710      	adds	r7, #16
 8003b4e:	46bd      	mov	sp, r7
 8003b50:	bd80      	pop	{r7, pc}
 8003b52:	bf00      	nop
 8003b54:	40023c00 	.word	0x40023c00
 8003b58:	40023800 	.word	0x40023800
 8003b5c:	08009b38 	.word	0x08009b38
 8003b60:	20000000 	.word	0x20000000
 8003b64:	2000001c 	.word	0x2000001c

08003b68 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003b68:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003b6a:	b085      	sub	sp, #20
 8003b6c:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003b6e:	2300      	movs	r3, #0
 8003b70:	607b      	str	r3, [r7, #4]
 8003b72:	2300      	movs	r3, #0
 8003b74:	60fb      	str	r3, [r7, #12]
 8003b76:	2300      	movs	r3, #0
 8003b78:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8003b7a:	2300      	movs	r3, #0
 8003b7c:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003b7e:	4b63      	ldr	r3, [pc, #396]	; (8003d0c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003b80:	689b      	ldr	r3, [r3, #8]
 8003b82:	f003 030c 	and.w	r3, r3, #12
 8003b86:	2b04      	cmp	r3, #4
 8003b88:	d007      	beq.n	8003b9a <HAL_RCC_GetSysClockFreq+0x32>
 8003b8a:	2b08      	cmp	r3, #8
 8003b8c:	d008      	beq.n	8003ba0 <HAL_RCC_GetSysClockFreq+0x38>
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	f040 80b4 	bne.w	8003cfc <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003b94:	4b5e      	ldr	r3, [pc, #376]	; (8003d10 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8003b96:	60bb      	str	r3, [r7, #8]
       break;
 8003b98:	e0b3      	b.n	8003d02 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003b9a:	4b5e      	ldr	r3, [pc, #376]	; (8003d14 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8003b9c:	60bb      	str	r3, [r7, #8]
      break;
 8003b9e:	e0b0      	b.n	8003d02 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003ba0:	4b5a      	ldr	r3, [pc, #360]	; (8003d0c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003ba2:	685b      	ldr	r3, [r3, #4]
 8003ba4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003ba8:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003baa:	4b58      	ldr	r3, [pc, #352]	; (8003d0c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003bac:	685b      	ldr	r3, [r3, #4]
 8003bae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d04a      	beq.n	8003c4c <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003bb6:	4b55      	ldr	r3, [pc, #340]	; (8003d0c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003bb8:	685b      	ldr	r3, [r3, #4]
 8003bba:	099b      	lsrs	r3, r3, #6
 8003bbc:	f04f 0400 	mov.w	r4, #0
 8003bc0:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003bc4:	f04f 0200 	mov.w	r2, #0
 8003bc8:	ea03 0501 	and.w	r5, r3, r1
 8003bcc:	ea04 0602 	and.w	r6, r4, r2
 8003bd0:	4629      	mov	r1, r5
 8003bd2:	4632      	mov	r2, r6
 8003bd4:	f04f 0300 	mov.w	r3, #0
 8003bd8:	f04f 0400 	mov.w	r4, #0
 8003bdc:	0154      	lsls	r4, r2, #5
 8003bde:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8003be2:	014b      	lsls	r3, r1, #5
 8003be4:	4619      	mov	r1, r3
 8003be6:	4622      	mov	r2, r4
 8003be8:	1b49      	subs	r1, r1, r5
 8003bea:	eb62 0206 	sbc.w	r2, r2, r6
 8003bee:	f04f 0300 	mov.w	r3, #0
 8003bf2:	f04f 0400 	mov.w	r4, #0
 8003bf6:	0194      	lsls	r4, r2, #6
 8003bf8:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8003bfc:	018b      	lsls	r3, r1, #6
 8003bfe:	1a5b      	subs	r3, r3, r1
 8003c00:	eb64 0402 	sbc.w	r4, r4, r2
 8003c04:	f04f 0100 	mov.w	r1, #0
 8003c08:	f04f 0200 	mov.w	r2, #0
 8003c0c:	00e2      	lsls	r2, r4, #3
 8003c0e:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8003c12:	00d9      	lsls	r1, r3, #3
 8003c14:	460b      	mov	r3, r1
 8003c16:	4614      	mov	r4, r2
 8003c18:	195b      	adds	r3, r3, r5
 8003c1a:	eb44 0406 	adc.w	r4, r4, r6
 8003c1e:	f04f 0100 	mov.w	r1, #0
 8003c22:	f04f 0200 	mov.w	r2, #0
 8003c26:	0262      	lsls	r2, r4, #9
 8003c28:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8003c2c:	0259      	lsls	r1, r3, #9
 8003c2e:	460b      	mov	r3, r1
 8003c30:	4614      	mov	r4, r2
 8003c32:	4618      	mov	r0, r3
 8003c34:	4621      	mov	r1, r4
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	f04f 0400 	mov.w	r4, #0
 8003c3c:	461a      	mov	r2, r3
 8003c3e:	4623      	mov	r3, r4
 8003c40:	f7fc fb16 	bl	8000270 <__aeabi_uldivmod>
 8003c44:	4603      	mov	r3, r0
 8003c46:	460c      	mov	r4, r1
 8003c48:	60fb      	str	r3, [r7, #12]
 8003c4a:	e049      	b.n	8003ce0 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003c4c:	4b2f      	ldr	r3, [pc, #188]	; (8003d0c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003c4e:	685b      	ldr	r3, [r3, #4]
 8003c50:	099b      	lsrs	r3, r3, #6
 8003c52:	f04f 0400 	mov.w	r4, #0
 8003c56:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003c5a:	f04f 0200 	mov.w	r2, #0
 8003c5e:	ea03 0501 	and.w	r5, r3, r1
 8003c62:	ea04 0602 	and.w	r6, r4, r2
 8003c66:	4629      	mov	r1, r5
 8003c68:	4632      	mov	r2, r6
 8003c6a:	f04f 0300 	mov.w	r3, #0
 8003c6e:	f04f 0400 	mov.w	r4, #0
 8003c72:	0154      	lsls	r4, r2, #5
 8003c74:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8003c78:	014b      	lsls	r3, r1, #5
 8003c7a:	4619      	mov	r1, r3
 8003c7c:	4622      	mov	r2, r4
 8003c7e:	1b49      	subs	r1, r1, r5
 8003c80:	eb62 0206 	sbc.w	r2, r2, r6
 8003c84:	f04f 0300 	mov.w	r3, #0
 8003c88:	f04f 0400 	mov.w	r4, #0
 8003c8c:	0194      	lsls	r4, r2, #6
 8003c8e:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8003c92:	018b      	lsls	r3, r1, #6
 8003c94:	1a5b      	subs	r3, r3, r1
 8003c96:	eb64 0402 	sbc.w	r4, r4, r2
 8003c9a:	f04f 0100 	mov.w	r1, #0
 8003c9e:	f04f 0200 	mov.w	r2, #0
 8003ca2:	00e2      	lsls	r2, r4, #3
 8003ca4:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8003ca8:	00d9      	lsls	r1, r3, #3
 8003caa:	460b      	mov	r3, r1
 8003cac:	4614      	mov	r4, r2
 8003cae:	195b      	adds	r3, r3, r5
 8003cb0:	eb44 0406 	adc.w	r4, r4, r6
 8003cb4:	f04f 0100 	mov.w	r1, #0
 8003cb8:	f04f 0200 	mov.w	r2, #0
 8003cbc:	02a2      	lsls	r2, r4, #10
 8003cbe:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8003cc2:	0299      	lsls	r1, r3, #10
 8003cc4:	460b      	mov	r3, r1
 8003cc6:	4614      	mov	r4, r2
 8003cc8:	4618      	mov	r0, r3
 8003cca:	4621      	mov	r1, r4
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	f04f 0400 	mov.w	r4, #0
 8003cd2:	461a      	mov	r2, r3
 8003cd4:	4623      	mov	r3, r4
 8003cd6:	f7fc facb 	bl	8000270 <__aeabi_uldivmod>
 8003cda:	4603      	mov	r3, r0
 8003cdc:	460c      	mov	r4, r1
 8003cde:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003ce0:	4b0a      	ldr	r3, [pc, #40]	; (8003d0c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003ce2:	685b      	ldr	r3, [r3, #4]
 8003ce4:	0c1b      	lsrs	r3, r3, #16
 8003ce6:	f003 0303 	and.w	r3, r3, #3
 8003cea:	3301      	adds	r3, #1
 8003cec:	005b      	lsls	r3, r3, #1
 8003cee:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8003cf0:	68fa      	ldr	r2, [r7, #12]
 8003cf2:	683b      	ldr	r3, [r7, #0]
 8003cf4:	fbb2 f3f3 	udiv	r3, r2, r3
 8003cf8:	60bb      	str	r3, [r7, #8]
      break;
 8003cfa:	e002      	b.n	8003d02 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003cfc:	4b04      	ldr	r3, [pc, #16]	; (8003d10 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8003cfe:	60bb      	str	r3, [r7, #8]
      break;
 8003d00:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003d02:	68bb      	ldr	r3, [r7, #8]
}
 8003d04:	4618      	mov	r0, r3
 8003d06:	3714      	adds	r7, #20
 8003d08:	46bd      	mov	sp, r7
 8003d0a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003d0c:	40023800 	.word	0x40023800
 8003d10:	00f42400 	.word	0x00f42400
 8003d14:	007a1200 	.word	0x007a1200

08003d18 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003d18:	b480      	push	{r7}
 8003d1a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003d1c:	4b03      	ldr	r3, [pc, #12]	; (8003d2c <HAL_RCC_GetHCLKFreq+0x14>)
 8003d1e:	681b      	ldr	r3, [r3, #0]
}
 8003d20:	4618      	mov	r0, r3
 8003d22:	46bd      	mov	sp, r7
 8003d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d28:	4770      	bx	lr
 8003d2a:	bf00      	nop
 8003d2c:	20000000 	.word	0x20000000

08003d30 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003d30:	b580      	push	{r7, lr}
 8003d32:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003d34:	f7ff fff0 	bl	8003d18 <HAL_RCC_GetHCLKFreq>
 8003d38:	4601      	mov	r1, r0
 8003d3a:	4b05      	ldr	r3, [pc, #20]	; (8003d50 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003d3c:	689b      	ldr	r3, [r3, #8]
 8003d3e:	0a9b      	lsrs	r3, r3, #10
 8003d40:	f003 0307 	and.w	r3, r3, #7
 8003d44:	4a03      	ldr	r2, [pc, #12]	; (8003d54 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003d46:	5cd3      	ldrb	r3, [r2, r3]
 8003d48:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003d4c:	4618      	mov	r0, r3
 8003d4e:	bd80      	pop	{r7, pc}
 8003d50:	40023800 	.word	0x40023800
 8003d54:	08009b48 	.word	0x08009b48

08003d58 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003d58:	b580      	push	{r7, lr}
 8003d5a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003d5c:	f7ff ffdc 	bl	8003d18 <HAL_RCC_GetHCLKFreq>
 8003d60:	4601      	mov	r1, r0
 8003d62:	4b05      	ldr	r3, [pc, #20]	; (8003d78 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003d64:	689b      	ldr	r3, [r3, #8]
 8003d66:	0b5b      	lsrs	r3, r3, #13
 8003d68:	f003 0307 	and.w	r3, r3, #7
 8003d6c:	4a03      	ldr	r2, [pc, #12]	; (8003d7c <HAL_RCC_GetPCLK2Freq+0x24>)
 8003d6e:	5cd3      	ldrb	r3, [r2, r3]
 8003d70:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003d74:	4618      	mov	r0, r3
 8003d76:	bd80      	pop	{r7, pc}
 8003d78:	40023800 	.word	0x40023800
 8003d7c:	08009b48 	.word	0x08009b48

08003d80 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003d80:	b580      	push	{r7, lr}
 8003d82:	b086      	sub	sp, #24
 8003d84:	af00      	add	r7, sp, #0
 8003d86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003d88:	2300      	movs	r3, #0
 8003d8a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8003d8c:	2300      	movs	r3, #0
 8003d8e:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	f003 0301 	and.w	r3, r3, #1
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d105      	bne.n	8003da8 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d035      	beq.n	8003e14 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003da8:	4b62      	ldr	r3, [pc, #392]	; (8003f34 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8003daa:	2200      	movs	r2, #0
 8003dac:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003dae:	f7fd f9db 	bl	8001168 <HAL_GetTick>
 8003db2:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003db4:	e008      	b.n	8003dc8 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8003db6:	f7fd f9d7 	bl	8001168 <HAL_GetTick>
 8003dba:	4602      	mov	r2, r0
 8003dbc:	697b      	ldr	r3, [r7, #20]
 8003dbe:	1ad3      	subs	r3, r2, r3
 8003dc0:	2b02      	cmp	r3, #2
 8003dc2:	d901      	bls.n	8003dc8 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003dc4:	2303      	movs	r3, #3
 8003dc6:	e0b0      	b.n	8003f2a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003dc8:	4b5b      	ldr	r3, [pc, #364]	; (8003f38 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d1f0      	bne.n	8003db6 <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	685b      	ldr	r3, [r3, #4]
 8003dd8:	019a      	lsls	r2, r3, #6
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	689b      	ldr	r3, [r3, #8]
 8003dde:	071b      	lsls	r3, r3, #28
 8003de0:	4955      	ldr	r1, [pc, #340]	; (8003f38 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003de2:	4313      	orrs	r3, r2
 8003de4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003de8:	4b52      	ldr	r3, [pc, #328]	; (8003f34 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8003dea:	2201      	movs	r2, #1
 8003dec:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003dee:	f7fd f9bb 	bl	8001168 <HAL_GetTick>
 8003df2:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003df4:	e008      	b.n	8003e08 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8003df6:	f7fd f9b7 	bl	8001168 <HAL_GetTick>
 8003dfa:	4602      	mov	r2, r0
 8003dfc:	697b      	ldr	r3, [r7, #20]
 8003dfe:	1ad3      	subs	r3, r2, r3
 8003e00:	2b02      	cmp	r3, #2
 8003e02:	d901      	bls.n	8003e08 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003e04:	2303      	movs	r3, #3
 8003e06:	e090      	b.n	8003f2a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003e08:	4b4b      	ldr	r3, [pc, #300]	; (8003f38 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d0f0      	beq.n	8003df6 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	f003 0302 	and.w	r3, r3, #2
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	f000 8083 	beq.w	8003f28 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003e22:	2300      	movs	r3, #0
 8003e24:	60fb      	str	r3, [r7, #12]
 8003e26:	4b44      	ldr	r3, [pc, #272]	; (8003f38 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003e28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e2a:	4a43      	ldr	r2, [pc, #268]	; (8003f38 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003e2c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003e30:	6413      	str	r3, [r2, #64]	; 0x40
 8003e32:	4b41      	ldr	r3, [pc, #260]	; (8003f38 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003e34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e36:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e3a:	60fb      	str	r3, [r7, #12]
 8003e3c:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8003e3e:	4b3f      	ldr	r3, [pc, #252]	; (8003f3c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	4a3e      	ldr	r2, [pc, #248]	; (8003f3c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003e44:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003e48:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003e4a:	f7fd f98d 	bl	8001168 <HAL_GetTick>
 8003e4e:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8003e50:	e008      	b.n	8003e64 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8003e52:	f7fd f989 	bl	8001168 <HAL_GetTick>
 8003e56:	4602      	mov	r2, r0
 8003e58:	697b      	ldr	r3, [r7, #20]
 8003e5a:	1ad3      	subs	r3, r2, r3
 8003e5c:	2b02      	cmp	r3, #2
 8003e5e:	d901      	bls.n	8003e64 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8003e60:	2303      	movs	r3, #3
 8003e62:	e062      	b.n	8003f2a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8003e64:	4b35      	ldr	r3, [pc, #212]	; (8003f3c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d0f0      	beq.n	8003e52 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003e70:	4b31      	ldr	r3, [pc, #196]	; (8003f38 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003e72:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e74:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003e78:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003e7a:	693b      	ldr	r3, [r7, #16]
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d02f      	beq.n	8003ee0 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	68db      	ldr	r3, [r3, #12]
 8003e84:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003e88:	693a      	ldr	r2, [r7, #16]
 8003e8a:	429a      	cmp	r2, r3
 8003e8c:	d028      	beq.n	8003ee0 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003e8e:	4b2a      	ldr	r3, [pc, #168]	; (8003f38 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003e90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e92:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003e96:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003e98:	4b29      	ldr	r3, [pc, #164]	; (8003f40 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8003e9a:	2201      	movs	r2, #1
 8003e9c:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003e9e:	4b28      	ldr	r3, [pc, #160]	; (8003f40 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8003ea0:	2200      	movs	r2, #0
 8003ea2:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8003ea4:	4a24      	ldr	r2, [pc, #144]	; (8003f38 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003ea6:	693b      	ldr	r3, [r7, #16]
 8003ea8:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003eaa:	4b23      	ldr	r3, [pc, #140]	; (8003f38 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003eac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003eae:	f003 0301 	and.w	r3, r3, #1
 8003eb2:	2b01      	cmp	r3, #1
 8003eb4:	d114      	bne.n	8003ee0 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8003eb6:	f7fd f957 	bl	8001168 <HAL_GetTick>
 8003eba:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ebc:	e00a      	b.n	8003ed4 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003ebe:	f7fd f953 	bl	8001168 <HAL_GetTick>
 8003ec2:	4602      	mov	r2, r0
 8003ec4:	697b      	ldr	r3, [r7, #20]
 8003ec6:	1ad3      	subs	r3, r2, r3
 8003ec8:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ecc:	4293      	cmp	r3, r2
 8003ece:	d901      	bls.n	8003ed4 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8003ed0:	2303      	movs	r3, #3
 8003ed2:	e02a      	b.n	8003f2a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ed4:	4b18      	ldr	r3, [pc, #96]	; (8003f38 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003ed6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ed8:	f003 0302 	and.w	r3, r3, #2
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d0ee      	beq.n	8003ebe <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	68db      	ldr	r3, [r3, #12]
 8003ee4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003ee8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003eec:	d10d      	bne.n	8003f0a <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8003eee:	4b12      	ldr	r3, [pc, #72]	; (8003f38 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003ef0:	689b      	ldr	r3, [r3, #8]
 8003ef2:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	68db      	ldr	r3, [r3, #12]
 8003efa:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8003efe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003f02:	490d      	ldr	r1, [pc, #52]	; (8003f38 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003f04:	4313      	orrs	r3, r2
 8003f06:	608b      	str	r3, [r1, #8]
 8003f08:	e005      	b.n	8003f16 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8003f0a:	4b0b      	ldr	r3, [pc, #44]	; (8003f38 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003f0c:	689b      	ldr	r3, [r3, #8]
 8003f0e:	4a0a      	ldr	r2, [pc, #40]	; (8003f38 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003f10:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8003f14:	6093      	str	r3, [r2, #8]
 8003f16:	4b08      	ldr	r3, [pc, #32]	; (8003f38 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003f18:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	68db      	ldr	r3, [r3, #12]
 8003f1e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003f22:	4905      	ldr	r1, [pc, #20]	; (8003f38 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003f24:	4313      	orrs	r3, r2
 8003f26:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8003f28:	2300      	movs	r3, #0
}
 8003f2a:	4618      	mov	r0, r3
 8003f2c:	3718      	adds	r7, #24
 8003f2e:	46bd      	mov	sp, r7
 8003f30:	bd80      	pop	{r7, pc}
 8003f32:	bf00      	nop
 8003f34:	42470068 	.word	0x42470068
 8003f38:	40023800 	.word	0x40023800
 8003f3c:	40007000 	.word	0x40007000
 8003f40:	42470e40 	.word	0x42470e40

08003f44 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8003f44:	b580      	push	{r7, lr}
 8003f46:	b082      	sub	sp, #8
 8003f48:	af00      	add	r7, sp, #0
 8003f4a:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d101      	bne.n	8003f56 <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 8003f52:	2301      	movs	r3, #1
 8003f54:	e083      	b.n	800405e <HAL_RTC_Init+0x11a>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	7f5b      	ldrb	r3, [r3, #29]
 8003f5a:	b2db      	uxtb	r3, r3
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d105      	bne.n	8003f6c <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	2200      	movs	r2, #0
 8003f64:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8003f66:	6878      	ldr	r0, [r7, #4]
 8003f68:	f7fc fe9c 	bl	8000ca4 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	2202      	movs	r2, #2
 8003f70:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	22ca      	movs	r2, #202	; 0xca
 8003f78:	625a      	str	r2, [r3, #36]	; 0x24
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	2253      	movs	r2, #83	; 0x53
 8003f80:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8003f82:	6878      	ldr	r0, [r7, #4]
 8003f84:	f000 f897 	bl	80040b6 <RTC_EnterInitMode>
 8003f88:	4603      	mov	r3, r0
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d008      	beq.n	8003fa0 <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	22ff      	movs	r2, #255	; 0xff
 8003f94:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	2204      	movs	r2, #4
 8003f9a:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 8003f9c:	2301      	movs	r3, #1
 8003f9e:	e05e      	b.n	800405e <HAL_RTC_Init+0x11a>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	689b      	ldr	r3, [r3, #8]
 8003fa6:	687a      	ldr	r2, [r7, #4]
 8003fa8:	6812      	ldr	r2, [r2, #0]
 8003faa:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8003fae:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003fb2:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	6899      	ldr	r1, [r3, #8]
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	685a      	ldr	r2, [r3, #4]
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	691b      	ldr	r3, [r3, #16]
 8003fc2:	431a      	orrs	r2, r3
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	695b      	ldr	r3, [r3, #20]
 8003fc8:	431a      	orrs	r2, r3
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	430a      	orrs	r2, r1
 8003fd0:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	687a      	ldr	r2, [r7, #4]
 8003fd8:	68d2      	ldr	r2, [r2, #12]
 8003fda:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	6919      	ldr	r1, [r3, #16]
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	689b      	ldr	r3, [r3, #8]
 8003fe6:	041a      	lsls	r2, r3, #16
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	430a      	orrs	r2, r1
 8003fee:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	68da      	ldr	r2, [r3, #12]
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003ffe:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	689b      	ldr	r3, [r3, #8]
 8004006:	f003 0320 	and.w	r3, r3, #32
 800400a:	2b00      	cmp	r3, #0
 800400c:	d10e      	bne.n	800402c <HAL_RTC_Init+0xe8>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800400e:	6878      	ldr	r0, [r7, #4]
 8004010:	f000 f829 	bl	8004066 <HAL_RTC_WaitForSynchro>
 8004014:	4603      	mov	r3, r0
 8004016:	2b00      	cmp	r3, #0
 8004018:	d008      	beq.n	800402c <HAL_RTC_Init+0xe8>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	22ff      	movs	r2, #255	; 0xff
 8004020:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	2204      	movs	r2, #4
 8004026:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 8004028:	2301      	movs	r3, #1
 800402a:	e018      	b.n	800405e <HAL_RTC_Init+0x11a>
      }
    }

    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800403a:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	699a      	ldr	r2, [r3, #24]
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	430a      	orrs	r2, r1
 800404c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	22ff      	movs	r2, #255	; 0xff
 8004054:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	2201      	movs	r2, #1
 800405a:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 800405c:	2300      	movs	r3, #0
  }
}
 800405e:	4618      	mov	r0, r3
 8004060:	3708      	adds	r7, #8
 8004062:	46bd      	mov	sp, r7
 8004064:	bd80      	pop	{r7, pc}

08004066 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 8004066:	b580      	push	{r7, lr}
 8004068:	b084      	sub	sp, #16
 800406a:	af00      	add	r7, sp, #0
 800406c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800406e:	2300      	movs	r3, #0
 8004070:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	68da      	ldr	r2, [r3, #12]
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004080:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004082:	f7fd f871 	bl	8001168 <HAL_GetTick>
 8004086:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8004088:	e009      	b.n	800409e <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800408a:	f7fd f86d 	bl	8001168 <HAL_GetTick>
 800408e:	4602      	mov	r2, r0
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	1ad3      	subs	r3, r2, r3
 8004094:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004098:	d901      	bls.n	800409e <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 800409a:	2303      	movs	r3, #3
 800409c:	e007      	b.n	80040ae <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	68db      	ldr	r3, [r3, #12]
 80040a4:	f003 0320 	and.w	r3, r3, #32
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d0ee      	beq.n	800408a <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 80040ac:	2300      	movs	r3, #0
}
 80040ae:	4618      	mov	r0, r3
 80040b0:	3710      	adds	r7, #16
 80040b2:	46bd      	mov	sp, r7
 80040b4:	bd80      	pop	{r7, pc}

080040b6 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 80040b6:	b580      	push	{r7, lr}
 80040b8:	b084      	sub	sp, #16
 80040ba:	af00      	add	r7, sp, #0
 80040bc:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80040be:	2300      	movs	r3, #0
 80040c0:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	68db      	ldr	r3, [r3, #12]
 80040c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d119      	bne.n	8004104 <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	f04f 32ff 	mov.w	r2, #4294967295
 80040d8:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 80040da:	f7fd f845 	bl	8001168 <HAL_GetTick>
 80040de:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 80040e0:	e009      	b.n	80040f6 <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 80040e2:	f7fd f841 	bl	8001168 <HAL_GetTick>
 80040e6:	4602      	mov	r2, r0
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	1ad3      	subs	r3, r2, r3
 80040ec:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80040f0:	d901      	bls.n	80040f6 <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 80040f2:	2303      	movs	r3, #3
 80040f4:	e007      	b.n	8004106 <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	68db      	ldr	r3, [r3, #12]
 80040fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004100:	2b00      	cmp	r3, #0
 8004102:	d0ee      	beq.n	80040e2 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 8004104:	2300      	movs	r3, #0
}
 8004106:	4618      	mov	r0, r3
 8004108:	3710      	adds	r7, #16
 800410a:	46bd      	mov	sp, r7
 800410c:	bd80      	pop	{r7, pc}

0800410e <HAL_RTCEx_BKUPWrite>:
  *                                 specify the register.
  * @param  Data Data to be written in the specified RTC Backup data register.
  * @retval None
  */
void HAL_RTCEx_BKUPWrite(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister, uint32_t Data)
{
 800410e:	b480      	push	{r7}
 8004110:	b087      	sub	sp, #28
 8004112:	af00      	add	r7, sp, #0
 8004114:	60f8      	str	r0, [r7, #12]
 8004116:	60b9      	str	r1, [r7, #8]
 8004118:	607a      	str	r2, [r7, #4]
  uint32_t tmp = 0U;
 800411a:	2300      	movs	r3, #0
 800411c:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t)&(hrtc->Instance->BKP0R);
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	3350      	adds	r3, #80	; 0x50
 8004124:	617b      	str	r3, [r7, #20]
  tmp += (BackupRegister * 4U);
 8004126:	68bb      	ldr	r3, [r7, #8]
 8004128:	009b      	lsls	r3, r3, #2
 800412a:	697a      	ldr	r2, [r7, #20]
 800412c:	4413      	add	r3, r2
 800412e:	617b      	str	r3, [r7, #20]

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 8004130:	697b      	ldr	r3, [r7, #20]
 8004132:	687a      	ldr	r2, [r7, #4]
 8004134:	601a      	str	r2, [r3, #0]
}
 8004136:	bf00      	nop
 8004138:	371c      	adds	r7, #28
 800413a:	46bd      	mov	sp, r7
 800413c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004140:	4770      	bx	lr

08004142 <HAL_RTCEx_BKUPRead>:
  *          This parameter can be: RTC_BKP_DRx where x can be from 0 to 19 to
  *                                 specify the register.
  * @retval Read value
  */
uint32_t HAL_RTCEx_BKUPRead(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister)
{
 8004142:	b480      	push	{r7}
 8004144:	b085      	sub	sp, #20
 8004146:	af00      	add	r7, sp, #0
 8004148:	6078      	str	r0, [r7, #4]
 800414a:	6039      	str	r1, [r7, #0]
  uint32_t tmp = 0U;
 800414c:	2300      	movs	r3, #0
 800414e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t)&(hrtc->Instance->BKP0R);
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	3350      	adds	r3, #80	; 0x50
 8004156:	60fb      	str	r3, [r7, #12]
  tmp += (BackupRegister * 4U);
 8004158:	683b      	ldr	r3, [r7, #0]
 800415a:	009b      	lsls	r3, r3, #2
 800415c:	68fa      	ldr	r2, [r7, #12]
 800415e:	4413      	add	r3, r2
 8004160:	60fb      	str	r3, [r7, #12]

  /* Read the specified register */
  return (*(__IO uint32_t *)tmp);
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	681b      	ldr	r3, [r3, #0]
}
 8004166:	4618      	mov	r0, r3
 8004168:	3714      	adds	r7, #20
 800416a:	46bd      	mov	sp, r7
 800416c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004170:	4770      	bx	lr

08004172 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004172:	b580      	push	{r7, lr}
 8004174:	b082      	sub	sp, #8
 8004176:	af00      	add	r7, sp, #0
 8004178:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	2b00      	cmp	r3, #0
 800417e:	d101      	bne.n	8004184 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004180:	2301      	movs	r3, #1
 8004182:	e03f      	b.n	8004204 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800418a:	b2db      	uxtb	r3, r3
 800418c:	2b00      	cmp	r3, #0
 800418e:	d106      	bne.n	800419e <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	2200      	movs	r2, #0
 8004194:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004198:	6878      	ldr	r0, [r7, #4]
 800419a:	f7fc fe8b 	bl	8000eb4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	2224      	movs	r2, #36	; 0x24
 80041a2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	68da      	ldr	r2, [r3, #12]
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80041b4:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80041b6:	6878      	ldr	r0, [r7, #4]
 80041b8:	f000 fc90 	bl	8004adc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	691a      	ldr	r2, [r3, #16]
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80041ca:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	695a      	ldr	r2, [r3, #20]
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80041da:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	68da      	ldr	r2, [r3, #12]
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80041ea:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	2200      	movs	r2, #0
 80041f0:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	2220      	movs	r2, #32
 80041f6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	2220      	movs	r2, #32
 80041fe:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8004202:	2300      	movs	r3, #0
}
 8004204:	4618      	mov	r0, r3
 8004206:	3708      	adds	r7, #8
 8004208:	46bd      	mov	sp, r7
 800420a:	bd80      	pop	{r7, pc}

0800420c <HAL_UART_DeInit>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 800420c:	b580      	push	{r7, lr}
 800420e:	b082      	sub	sp, #8
 8004210:	af00      	add	r7, sp, #0
 8004212:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	2b00      	cmp	r3, #0
 8004218:	d101      	bne.n	800421e <HAL_UART_DeInit+0x12>
  {
    return HAL_ERROR;
 800421a:	2301      	movs	r3, #1
 800421c:	e01e      	b.n	800425c <HAL_UART_DeInit+0x50>
  }

  /* Check the parameters */
  assert_param(IS_UART_INSTANCE(huart->Instance));

  huart->gState = HAL_UART_STATE_BUSY;
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	2224      	movs	r2, #36	; 0x24
 8004222:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	68da      	ldr	r2, [r3, #12]
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004234:	60da      	str	r2, [r3, #12]
  }
  /* DeInit the low level hardware */
  huart->MspDeInitCallback(huart);
#else
  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 8004236:	6878      	ldr	r0, [r7, #4]
 8004238:	f7fc fec0 	bl	8000fbc <HAL_UART_MspDeInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	2200      	movs	r2, #0
 8004240:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_RESET;
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	2200      	movs	r2, #0
 8004246:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_RESET;
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	2200      	movs	r2, #0
 800424e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  /* Process Unlock */
  __HAL_UNLOCK(huart);
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	2200      	movs	r2, #0
 8004256:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 800425a:	2300      	movs	r3, #0
}
 800425c:	4618      	mov	r0, r3
 800425e:	3708      	adds	r7, #8
 8004260:	46bd      	mov	sp, r7
 8004262:	bd80      	pop	{r7, pc}

08004264 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004264:	b580      	push	{r7, lr}
 8004266:	b088      	sub	sp, #32
 8004268:	af02      	add	r7, sp, #8
 800426a:	60f8      	str	r0, [r7, #12]
 800426c:	60b9      	str	r1, [r7, #8]
 800426e:	603b      	str	r3, [r7, #0]
 8004270:	4613      	mov	r3, r2
 8004272:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8004274:	2300      	movs	r3, #0
 8004276:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800427e:	b2db      	uxtb	r3, r3
 8004280:	2b20      	cmp	r3, #32
 8004282:	f040 8083 	bne.w	800438c <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8004286:	68bb      	ldr	r3, [r7, #8]
 8004288:	2b00      	cmp	r3, #0
 800428a:	d002      	beq.n	8004292 <HAL_UART_Transmit+0x2e>
 800428c:	88fb      	ldrh	r3, [r7, #6]
 800428e:	2b00      	cmp	r3, #0
 8004290:	d101      	bne.n	8004296 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8004292:	2301      	movs	r3, #1
 8004294:	e07b      	b.n	800438e <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800429c:	2b01      	cmp	r3, #1
 800429e:	d101      	bne.n	80042a4 <HAL_UART_Transmit+0x40>
 80042a0:	2302      	movs	r3, #2
 80042a2:	e074      	b.n	800438e <HAL_UART_Transmit+0x12a>
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	2201      	movs	r2, #1
 80042a8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	2200      	movs	r2, #0
 80042b0:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	2221      	movs	r2, #33	; 0x21
 80042b6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 80042ba:	f7fc ff55 	bl	8001168 <HAL_GetTick>
 80042be:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	88fa      	ldrh	r2, [r7, #6]
 80042c4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	88fa      	ldrh	r2, [r7, #6]
 80042ca:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	2200      	movs	r2, #0
 80042d0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 80042d4:	e042      	b.n	800435c <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80042da:	b29b      	uxth	r3, r3
 80042dc:	3b01      	subs	r3, #1
 80042de:	b29a      	uxth	r2, r3
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	689b      	ldr	r3, [r3, #8]
 80042e8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80042ec:	d122      	bne.n	8004334 <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80042ee:	683b      	ldr	r3, [r7, #0]
 80042f0:	9300      	str	r3, [sp, #0]
 80042f2:	697b      	ldr	r3, [r7, #20]
 80042f4:	2200      	movs	r2, #0
 80042f6:	2180      	movs	r1, #128	; 0x80
 80042f8:	68f8      	ldr	r0, [r7, #12]
 80042fa:	f000 fa6d 	bl	80047d8 <UART_WaitOnFlagUntilTimeout>
 80042fe:	4603      	mov	r3, r0
 8004300:	2b00      	cmp	r3, #0
 8004302:	d001      	beq.n	8004308 <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 8004304:	2303      	movs	r3, #3
 8004306:	e042      	b.n	800438e <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8004308:	68bb      	ldr	r3, [r7, #8]
 800430a:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 800430c:	693b      	ldr	r3, [r7, #16]
 800430e:	881b      	ldrh	r3, [r3, #0]
 8004310:	461a      	mov	r2, r3
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800431a:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	691b      	ldr	r3, [r3, #16]
 8004320:	2b00      	cmp	r3, #0
 8004322:	d103      	bne.n	800432c <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 8004324:	68bb      	ldr	r3, [r7, #8]
 8004326:	3302      	adds	r3, #2
 8004328:	60bb      	str	r3, [r7, #8]
 800432a:	e017      	b.n	800435c <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 800432c:	68bb      	ldr	r3, [r7, #8]
 800432e:	3301      	adds	r3, #1
 8004330:	60bb      	str	r3, [r7, #8]
 8004332:	e013      	b.n	800435c <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004334:	683b      	ldr	r3, [r7, #0]
 8004336:	9300      	str	r3, [sp, #0]
 8004338:	697b      	ldr	r3, [r7, #20]
 800433a:	2200      	movs	r2, #0
 800433c:	2180      	movs	r1, #128	; 0x80
 800433e:	68f8      	ldr	r0, [r7, #12]
 8004340:	f000 fa4a 	bl	80047d8 <UART_WaitOnFlagUntilTimeout>
 8004344:	4603      	mov	r3, r0
 8004346:	2b00      	cmp	r3, #0
 8004348:	d001      	beq.n	800434e <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 800434a:	2303      	movs	r3, #3
 800434c:	e01f      	b.n	800438e <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 800434e:	68bb      	ldr	r3, [r7, #8]
 8004350:	1c5a      	adds	r2, r3, #1
 8004352:	60ba      	str	r2, [r7, #8]
 8004354:	781a      	ldrb	r2, [r3, #0]
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004360:	b29b      	uxth	r3, r3
 8004362:	2b00      	cmp	r3, #0
 8004364:	d1b7      	bne.n	80042d6 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004366:	683b      	ldr	r3, [r7, #0]
 8004368:	9300      	str	r3, [sp, #0]
 800436a:	697b      	ldr	r3, [r7, #20]
 800436c:	2200      	movs	r2, #0
 800436e:	2140      	movs	r1, #64	; 0x40
 8004370:	68f8      	ldr	r0, [r7, #12]
 8004372:	f000 fa31 	bl	80047d8 <UART_WaitOnFlagUntilTimeout>
 8004376:	4603      	mov	r3, r0
 8004378:	2b00      	cmp	r3, #0
 800437a:	d001      	beq.n	8004380 <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 800437c:	2303      	movs	r3, #3
 800437e:	e006      	b.n	800438e <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	2220      	movs	r2, #32
 8004384:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8004388:	2300      	movs	r3, #0
 800438a:	e000      	b.n	800438e <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 800438c:	2302      	movs	r3, #2
  }
}
 800438e:	4618      	mov	r0, r3
 8004390:	3718      	adds	r7, #24
 8004392:	46bd      	mov	sp, r7
 8004394:	bd80      	pop	{r7, pc}
	...

08004398 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004398:	b580      	push	{r7, lr}
 800439a:	b086      	sub	sp, #24
 800439c:	af00      	add	r7, sp, #0
 800439e:	60f8      	str	r0, [r7, #12]
 80043a0:	60b9      	str	r1, [r7, #8]
 80043a2:	4613      	mov	r3, r2
 80043a4:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80043ac:	b2db      	uxtb	r3, r3
 80043ae:	2b20      	cmp	r3, #32
 80043b0:	d166      	bne.n	8004480 <HAL_UART_Receive_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 80043b2:	68bb      	ldr	r3, [r7, #8]
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d002      	beq.n	80043be <HAL_UART_Receive_DMA+0x26>
 80043b8:	88fb      	ldrh	r3, [r7, #6]
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d101      	bne.n	80043c2 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 80043be:	2301      	movs	r3, #1
 80043c0:	e05f      	b.n	8004482 <HAL_UART_Receive_DMA+0xea>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80043c8:	2b01      	cmp	r3, #1
 80043ca:	d101      	bne.n	80043d0 <HAL_UART_Receive_DMA+0x38>
 80043cc:	2302      	movs	r3, #2
 80043ce:	e058      	b.n	8004482 <HAL_UART_Receive_DMA+0xea>
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	2201      	movs	r2, #1
 80043d4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 80043d8:	68ba      	ldr	r2, [r7, #8]
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	88fa      	ldrh	r2, [r7, #6]
 80043e2:	859a      	strh	r2, [r3, #44]	; 0x2c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	2200      	movs	r2, #0
 80043e8:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	2222      	movs	r2, #34	; 0x22
 80043ee:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80043f6:	4a25      	ldr	r2, [pc, #148]	; (800448c <HAL_UART_Receive_DMA+0xf4>)
 80043f8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80043fe:	4a24      	ldr	r2, [pc, #144]	; (8004490 <HAL_UART_Receive_DMA+0xf8>)
 8004400:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004406:	4a23      	ldr	r2, [pc, #140]	; (8004494 <HAL_UART_Receive_DMA+0xfc>)
 8004408:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800440e:	2200      	movs	r2, #0
 8004410:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA stream */
    tmp = (uint32_t *)&pData;
 8004412:	f107 0308 	add.w	r3, r7, #8
 8004416:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	6b58      	ldr	r0, [r3, #52]	; 0x34
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	3304      	adds	r3, #4
 8004422:	4619      	mov	r1, r3
 8004424:	697b      	ldr	r3, [r7, #20]
 8004426:	681a      	ldr	r2, [r3, #0]
 8004428:	88fb      	ldrh	r3, [r7, #6]
 800442a:	f7fd f919 	bl	8001660 <HAL_DMA_Start_IT>

    /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
    __HAL_UART_CLEAR_OREFLAG(huart);
 800442e:	2300      	movs	r3, #0
 8004430:	613b      	str	r3, [r7, #16]
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	613b      	str	r3, [r7, #16]
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	685b      	ldr	r3, [r3, #4]
 8004440:	613b      	str	r3, [r7, #16]
 8004442:	693b      	ldr	r3, [r7, #16]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	2200      	movs	r2, #0
 8004448:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	68da      	ldr	r2, [r3, #12]
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800445a:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	695a      	ldr	r2, [r3, #20]
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	f042 0201 	orr.w	r2, r2, #1
 800446a:	615a      	str	r2, [r3, #20]

    /* Enable the DMA transfer for the receiver request by setting the DMAR bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	695a      	ldr	r2, [r3, #20]
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800447a:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 800447c:	2300      	movs	r3, #0
 800447e:	e000      	b.n	8004482 <HAL_UART_Receive_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 8004480:	2302      	movs	r3, #2
  }
}
 8004482:	4618      	mov	r0, r3
 8004484:	3718      	adds	r7, #24
 8004486:	46bd      	mov	sp, r7
 8004488:	bd80      	pop	{r7, pc}
 800448a:	bf00      	nop
 800448c:	080046c1 	.word	0x080046c1
 8004490:	08004729 	.word	0x08004729
 8004494:	08004745 	.word	0x08004745

08004498 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004498:	b580      	push	{r7, lr}
 800449a:	b088      	sub	sp, #32
 800449c:	af00      	add	r7, sp, #0
 800449e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	68db      	ldr	r3, [r3, #12]
 80044ae:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	695b      	ldr	r3, [r3, #20]
 80044b6:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 80044b8:	2300      	movs	r3, #0
 80044ba:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 80044bc:	2300      	movs	r3, #0
 80044be:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80044c0:	69fb      	ldr	r3, [r7, #28]
 80044c2:	f003 030f 	and.w	r3, r3, #15
 80044c6:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 80044c8:	693b      	ldr	r3, [r7, #16]
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d10d      	bne.n	80044ea <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80044ce:	69fb      	ldr	r3, [r7, #28]
 80044d0:	f003 0320 	and.w	r3, r3, #32
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d008      	beq.n	80044ea <HAL_UART_IRQHandler+0x52>
 80044d8:	69bb      	ldr	r3, [r7, #24]
 80044da:	f003 0320 	and.w	r3, r3, #32
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d003      	beq.n	80044ea <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 80044e2:	6878      	ldr	r0, [r7, #4]
 80044e4:	f000 fa78 	bl	80049d8 <UART_Receive_IT>
      return;
 80044e8:	e0d1      	b.n	800468e <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80044ea:	693b      	ldr	r3, [r7, #16]
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	f000 80b0 	beq.w	8004652 <HAL_UART_IRQHandler+0x1ba>
 80044f2:	697b      	ldr	r3, [r7, #20]
 80044f4:	f003 0301 	and.w	r3, r3, #1
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d105      	bne.n	8004508 <HAL_UART_IRQHandler+0x70>
 80044fc:	69bb      	ldr	r3, [r7, #24]
 80044fe:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8004502:	2b00      	cmp	r3, #0
 8004504:	f000 80a5 	beq.w	8004652 <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004508:	69fb      	ldr	r3, [r7, #28]
 800450a:	f003 0301 	and.w	r3, r3, #1
 800450e:	2b00      	cmp	r3, #0
 8004510:	d00a      	beq.n	8004528 <HAL_UART_IRQHandler+0x90>
 8004512:	69bb      	ldr	r3, [r7, #24]
 8004514:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004518:	2b00      	cmp	r3, #0
 800451a:	d005      	beq.n	8004528 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004520:	f043 0201 	orr.w	r2, r3, #1
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004528:	69fb      	ldr	r3, [r7, #28]
 800452a:	f003 0304 	and.w	r3, r3, #4
 800452e:	2b00      	cmp	r3, #0
 8004530:	d00a      	beq.n	8004548 <HAL_UART_IRQHandler+0xb0>
 8004532:	697b      	ldr	r3, [r7, #20]
 8004534:	f003 0301 	and.w	r3, r3, #1
 8004538:	2b00      	cmp	r3, #0
 800453a:	d005      	beq.n	8004548 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004540:	f043 0202 	orr.w	r2, r3, #2
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004548:	69fb      	ldr	r3, [r7, #28]
 800454a:	f003 0302 	and.w	r3, r3, #2
 800454e:	2b00      	cmp	r3, #0
 8004550:	d00a      	beq.n	8004568 <HAL_UART_IRQHandler+0xd0>
 8004552:	697b      	ldr	r3, [r7, #20]
 8004554:	f003 0301 	and.w	r3, r3, #1
 8004558:	2b00      	cmp	r3, #0
 800455a:	d005      	beq.n	8004568 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004560:	f043 0204 	orr.w	r2, r3, #4
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8004568:	69fb      	ldr	r3, [r7, #28]
 800456a:	f003 0308 	and.w	r3, r3, #8
 800456e:	2b00      	cmp	r3, #0
 8004570:	d00f      	beq.n	8004592 <HAL_UART_IRQHandler+0xfa>
 8004572:	69bb      	ldr	r3, [r7, #24]
 8004574:	f003 0320 	and.w	r3, r3, #32
 8004578:	2b00      	cmp	r3, #0
 800457a:	d104      	bne.n	8004586 <HAL_UART_IRQHandler+0xee>
 800457c:	697b      	ldr	r3, [r7, #20]
 800457e:	f003 0301 	and.w	r3, r3, #1
 8004582:	2b00      	cmp	r3, #0
 8004584:	d005      	beq.n	8004592 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800458a:	f043 0208 	orr.w	r2, r3, #8
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004596:	2b00      	cmp	r3, #0
 8004598:	d078      	beq.n	800468c <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800459a:	69fb      	ldr	r3, [r7, #28]
 800459c:	f003 0320 	and.w	r3, r3, #32
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d007      	beq.n	80045b4 <HAL_UART_IRQHandler+0x11c>
 80045a4:	69bb      	ldr	r3, [r7, #24]
 80045a6:	f003 0320 	and.w	r3, r3, #32
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d002      	beq.n	80045b4 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 80045ae:	6878      	ldr	r0, [r7, #4]
 80045b0:	f000 fa12 	bl	80049d8 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	695b      	ldr	r3, [r3, #20]
 80045ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045be:	2b40      	cmp	r3, #64	; 0x40
 80045c0:	bf0c      	ite	eq
 80045c2:	2301      	moveq	r3, #1
 80045c4:	2300      	movne	r3, #0
 80045c6:	b2db      	uxtb	r3, r3
 80045c8:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80045ce:	f003 0308 	and.w	r3, r3, #8
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d102      	bne.n	80045dc <HAL_UART_IRQHandler+0x144>
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d031      	beq.n	8004640 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80045dc:	6878      	ldr	r0, [r7, #4]
 80045de:	f000 f95b 	bl	8004898 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	695b      	ldr	r3, [r3, #20]
 80045e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045ec:	2b40      	cmp	r3, #64	; 0x40
 80045ee:	d123      	bne.n	8004638 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	695a      	ldr	r2, [r3, #20]
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80045fe:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004604:	2b00      	cmp	r3, #0
 8004606:	d013      	beq.n	8004630 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800460c:	4a21      	ldr	r2, [pc, #132]	; (8004694 <HAL_UART_IRQHandler+0x1fc>)
 800460e:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004614:	4618      	mov	r0, r3
 8004616:	f7fd f87b 	bl	8001710 <HAL_DMA_Abort_IT>
 800461a:	4603      	mov	r3, r0
 800461c:	2b00      	cmp	r3, #0
 800461e:	d016      	beq.n	800464e <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004624:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004626:	687a      	ldr	r2, [r7, #4]
 8004628:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800462a:	4610      	mov	r0, r2
 800462c:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800462e:	e00e      	b.n	800464e <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004630:	6878      	ldr	r0, [r7, #4]
 8004632:	f7fc fc35 	bl	8000ea0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004636:	e00a      	b.n	800464e <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004638:	6878      	ldr	r0, [r7, #4]
 800463a:	f7fc fc31 	bl	8000ea0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800463e:	e006      	b.n	800464e <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004640:	6878      	ldr	r0, [r7, #4]
 8004642:	f7fc fc2d 	bl	8000ea0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	2200      	movs	r2, #0
 800464a:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 800464c:	e01e      	b.n	800468c <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800464e:	bf00      	nop
    return;
 8004650:	e01c      	b.n	800468c <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004652:	69fb      	ldr	r3, [r7, #28]
 8004654:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004658:	2b00      	cmp	r3, #0
 800465a:	d008      	beq.n	800466e <HAL_UART_IRQHandler+0x1d6>
 800465c:	69bb      	ldr	r3, [r7, #24]
 800465e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004662:	2b00      	cmp	r3, #0
 8004664:	d003      	beq.n	800466e <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 8004666:	6878      	ldr	r0, [r7, #4]
 8004668:	f000 f948 	bl	80048fc <UART_Transmit_IT>
    return;
 800466c:	e00f      	b.n	800468e <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800466e:	69fb      	ldr	r3, [r7, #28]
 8004670:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004674:	2b00      	cmp	r3, #0
 8004676:	d00a      	beq.n	800468e <HAL_UART_IRQHandler+0x1f6>
 8004678:	69bb      	ldr	r3, [r7, #24]
 800467a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800467e:	2b00      	cmp	r3, #0
 8004680:	d005      	beq.n	800468e <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 8004682:	6878      	ldr	r0, [r7, #4]
 8004684:	f000 f990 	bl	80049a8 <UART_EndTransmit_IT>
    return;
 8004688:	bf00      	nop
 800468a:	e000      	b.n	800468e <HAL_UART_IRQHandler+0x1f6>
    return;
 800468c:	bf00      	nop
  }
}
 800468e:	3720      	adds	r7, #32
 8004690:	46bd      	mov	sp, r7
 8004692:	bd80      	pop	{r7, pc}
 8004694:	080048d5 	.word	0x080048d5

08004698 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004698:	b480      	push	{r7}
 800469a:	b083      	sub	sp, #12
 800469c:	af00      	add	r7, sp, #0
 800469e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80046a0:	bf00      	nop
 80046a2:	370c      	adds	r7, #12
 80046a4:	46bd      	mov	sp, r7
 80046a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046aa:	4770      	bx	lr

080046ac <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80046ac:	b480      	push	{r7}
 80046ae:	b083      	sub	sp, #12
 80046b0:	af00      	add	r7, sp, #0
 80046b2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 80046b4:	bf00      	nop
 80046b6:	370c      	adds	r7, #12
 80046b8:	46bd      	mov	sp, r7
 80046ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046be:	4770      	bx	lr

080046c0 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80046c0:	b580      	push	{r7, lr}
 80046c2:	b084      	sub	sp, #16
 80046c4:	af00      	add	r7, sp, #0
 80046c6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046cc:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d11e      	bne.n	800471a <UART_DMAReceiveCplt+0x5a>
  {
    huart->RxXferCount = 0U;
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	2200      	movs	r2, #0
 80046e0:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	68da      	ldr	r2, [r3, #12]
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80046f0:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	695a      	ldr	r2, [r3, #20]
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	f022 0201 	bic.w	r2, r2, #1
 8004700:	615a      	str	r2, [r3, #20]

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	695a      	ldr	r2, [r3, #20]
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004710:	615a      	str	r2, [r3, #20]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	2220      	movs	r2, #32
 8004716:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx complete callback*/
  huart->RxCpltCallback(huart);
#else
  /*Call legacy weak Rx complete callback*/
  HAL_UART_RxCpltCallback(huart);
 800471a:	68f8      	ldr	r0, [r7, #12]
 800471c:	f7fc fbb6 	bl	8000e8c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004720:	bf00      	nop
 8004722:	3710      	adds	r7, #16
 8004724:	46bd      	mov	sp, r7
 8004726:	bd80      	pop	{r7, pc}

08004728 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8004728:	b580      	push	{r7, lr}
 800472a:	b084      	sub	sp, #16
 800472c:	af00      	add	r7, sp, #0
 800472e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004734:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx Half complete callback*/
  huart->RxHalfCpltCallback(huart);
#else
  /*Call legacy weak Rx Half complete callback*/
  HAL_UART_RxHalfCpltCallback(huart);
 8004736:	68f8      	ldr	r0, [r7, #12]
 8004738:	f7ff ffb8 	bl	80046ac <HAL_UART_RxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800473c:	bf00      	nop
 800473e:	3710      	adds	r7, #16
 8004740:	46bd      	mov	sp, r7
 8004742:	bd80      	pop	{r7, pc}

08004744 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8004744:	b580      	push	{r7, lr}
 8004746:	b084      	sub	sp, #16
 8004748:	af00      	add	r7, sp, #0
 800474a:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800474c:	2300      	movs	r3, #0
 800474e:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004754:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8004756:	68bb      	ldr	r3, [r7, #8]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	695b      	ldr	r3, [r3, #20]
 800475c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004760:	2b80      	cmp	r3, #128	; 0x80
 8004762:	bf0c      	ite	eq
 8004764:	2301      	moveq	r3, #1
 8004766:	2300      	movne	r3, #0
 8004768:	b2db      	uxtb	r3, r3
 800476a:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800476c:	68bb      	ldr	r3, [r7, #8]
 800476e:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004772:	b2db      	uxtb	r3, r3
 8004774:	2b21      	cmp	r3, #33	; 0x21
 8004776:	d108      	bne.n	800478a <UART_DMAError+0x46>
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	2b00      	cmp	r3, #0
 800477c:	d005      	beq.n	800478a <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800477e:	68bb      	ldr	r3, [r7, #8]
 8004780:	2200      	movs	r2, #0
 8004782:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8004784:	68b8      	ldr	r0, [r7, #8]
 8004786:	f000 f871 	bl	800486c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800478a:	68bb      	ldr	r3, [r7, #8]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	695b      	ldr	r3, [r3, #20]
 8004790:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004794:	2b40      	cmp	r3, #64	; 0x40
 8004796:	bf0c      	ite	eq
 8004798:	2301      	moveq	r3, #1
 800479a:	2300      	movne	r3, #0
 800479c:	b2db      	uxtb	r3, r3
 800479e:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80047a0:	68bb      	ldr	r3, [r7, #8]
 80047a2:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80047a6:	b2db      	uxtb	r3, r3
 80047a8:	2b22      	cmp	r3, #34	; 0x22
 80047aa:	d108      	bne.n	80047be <UART_DMAError+0x7a>
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d005      	beq.n	80047be <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 80047b2:	68bb      	ldr	r3, [r7, #8]
 80047b4:	2200      	movs	r2, #0
 80047b6:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 80047b8:	68b8      	ldr	r0, [r7, #8]
 80047ba:	f000 f86d 	bl	8004898 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80047be:	68bb      	ldr	r3, [r7, #8]
 80047c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80047c2:	f043 0210 	orr.w	r2, r3, #16
 80047c6:	68bb      	ldr	r3, [r7, #8]
 80047c8:	63da      	str	r2, [r3, #60]	; 0x3c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80047ca:	68b8      	ldr	r0, [r7, #8]
 80047cc:	f7fc fb68 	bl	8000ea0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80047d0:	bf00      	nop
 80047d2:	3710      	adds	r7, #16
 80047d4:	46bd      	mov	sp, r7
 80047d6:	bd80      	pop	{r7, pc}

080047d8 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80047d8:	b580      	push	{r7, lr}
 80047da:	b084      	sub	sp, #16
 80047dc:	af00      	add	r7, sp, #0
 80047de:	60f8      	str	r0, [r7, #12]
 80047e0:	60b9      	str	r1, [r7, #8]
 80047e2:	603b      	str	r3, [r7, #0]
 80047e4:	4613      	mov	r3, r2
 80047e6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80047e8:	e02c      	b.n	8004844 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80047ea:	69bb      	ldr	r3, [r7, #24]
 80047ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047f0:	d028      	beq.n	8004844 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80047f2:	69bb      	ldr	r3, [r7, #24]
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d007      	beq.n	8004808 <UART_WaitOnFlagUntilTimeout+0x30>
 80047f8:	f7fc fcb6 	bl	8001168 <HAL_GetTick>
 80047fc:	4602      	mov	r2, r0
 80047fe:	683b      	ldr	r3, [r7, #0]
 8004800:	1ad3      	subs	r3, r2, r3
 8004802:	69ba      	ldr	r2, [r7, #24]
 8004804:	429a      	cmp	r2, r3
 8004806:	d21d      	bcs.n	8004844 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	68da      	ldr	r2, [r3, #12]
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004816:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	695a      	ldr	r2, [r3, #20]
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	f022 0201 	bic.w	r2, r2, #1
 8004826:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	2220      	movs	r2, #32
 800482c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	2220      	movs	r2, #32
 8004834:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	2200      	movs	r2, #0
 800483c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8004840:	2303      	movs	r3, #3
 8004842:	e00f      	b.n	8004864 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	681a      	ldr	r2, [r3, #0]
 800484a:	68bb      	ldr	r3, [r7, #8]
 800484c:	4013      	ands	r3, r2
 800484e:	68ba      	ldr	r2, [r7, #8]
 8004850:	429a      	cmp	r2, r3
 8004852:	bf0c      	ite	eq
 8004854:	2301      	moveq	r3, #1
 8004856:	2300      	movne	r3, #0
 8004858:	b2db      	uxtb	r3, r3
 800485a:	461a      	mov	r2, r3
 800485c:	79fb      	ldrb	r3, [r7, #7]
 800485e:	429a      	cmp	r2, r3
 8004860:	d0c3      	beq.n	80047ea <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004862:	2300      	movs	r3, #0
}
 8004864:	4618      	mov	r0, r3
 8004866:	3710      	adds	r7, #16
 8004868:	46bd      	mov	sp, r7
 800486a:	bd80      	pop	{r7, pc}

0800486c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800486c:	b480      	push	{r7}
 800486e:	b083      	sub	sp, #12
 8004870:	af00      	add	r7, sp, #0
 8004872:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	68da      	ldr	r2, [r3, #12]
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8004882:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	2220      	movs	r2, #32
 8004888:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
}
 800488c:	bf00      	nop
 800488e:	370c      	adds	r7, #12
 8004890:	46bd      	mov	sp, r7
 8004892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004896:	4770      	bx	lr

08004898 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004898:	b480      	push	{r7}
 800489a:	b083      	sub	sp, #12
 800489c:	af00      	add	r7, sp, #0
 800489e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	68da      	ldr	r2, [r3, #12]
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80048ae:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	695a      	ldr	r2, [r3, #20]
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	f022 0201 	bic.w	r2, r2, #1
 80048be:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	2220      	movs	r2, #32
 80048c4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 80048c8:	bf00      	nop
 80048ca:	370c      	adds	r7, #12
 80048cc:	46bd      	mov	sp, r7
 80048ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048d2:	4770      	bx	lr

080048d4 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80048d4:	b580      	push	{r7, lr}
 80048d6:	b084      	sub	sp, #16
 80048d8:	af00      	add	r7, sp, #0
 80048da:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048e0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	2200      	movs	r2, #0
 80048e6:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	2200      	movs	r2, #0
 80048ec:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80048ee:	68f8      	ldr	r0, [r7, #12]
 80048f0:	f7fc fad6 	bl	8000ea0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80048f4:	bf00      	nop
 80048f6:	3710      	adds	r7, #16
 80048f8:	46bd      	mov	sp, r7
 80048fa:	bd80      	pop	{r7, pc}

080048fc <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80048fc:	b480      	push	{r7}
 80048fe:	b085      	sub	sp, #20
 8004900:	af00      	add	r7, sp, #0
 8004902:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800490a:	b2db      	uxtb	r3, r3
 800490c:	2b21      	cmp	r3, #33	; 0x21
 800490e:	d144      	bne.n	800499a <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	689b      	ldr	r3, [r3, #8]
 8004914:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004918:	d11a      	bne.n	8004950 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	6a1b      	ldr	r3, [r3, #32]
 800491e:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	881b      	ldrh	r3, [r3, #0]
 8004924:	461a      	mov	r2, r3
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800492e:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	691b      	ldr	r3, [r3, #16]
 8004934:	2b00      	cmp	r3, #0
 8004936:	d105      	bne.n	8004944 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	6a1b      	ldr	r3, [r3, #32]
 800493c:	1c9a      	adds	r2, r3, #2
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	621a      	str	r2, [r3, #32]
 8004942:	e00e      	b.n	8004962 <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	6a1b      	ldr	r3, [r3, #32]
 8004948:	1c5a      	adds	r2, r3, #1
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	621a      	str	r2, [r3, #32]
 800494e:	e008      	b.n	8004962 <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	6a1b      	ldr	r3, [r3, #32]
 8004954:	1c59      	adds	r1, r3, #1
 8004956:	687a      	ldr	r2, [r7, #4]
 8004958:	6211      	str	r1, [r2, #32]
 800495a:	781a      	ldrb	r2, [r3, #0]
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004966:	b29b      	uxth	r3, r3
 8004968:	3b01      	subs	r3, #1
 800496a:	b29b      	uxth	r3, r3
 800496c:	687a      	ldr	r2, [r7, #4]
 800496e:	4619      	mov	r1, r3
 8004970:	84d1      	strh	r1, [r2, #38]	; 0x26
 8004972:	2b00      	cmp	r3, #0
 8004974:	d10f      	bne.n	8004996 <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	68da      	ldr	r2, [r3, #12]
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004984:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	68da      	ldr	r2, [r3, #12]
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004994:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004996:	2300      	movs	r3, #0
 8004998:	e000      	b.n	800499c <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 800499a:	2302      	movs	r3, #2
  }
}
 800499c:	4618      	mov	r0, r3
 800499e:	3714      	adds	r7, #20
 80049a0:	46bd      	mov	sp, r7
 80049a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049a6:	4770      	bx	lr

080049a8 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80049a8:	b580      	push	{r7, lr}
 80049aa:	b082      	sub	sp, #8
 80049ac:	af00      	add	r7, sp, #0
 80049ae:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	68da      	ldr	r2, [r3, #12]
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80049be:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	2220      	movs	r2, #32
 80049c4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80049c8:	6878      	ldr	r0, [r7, #4]
 80049ca:	f7ff fe65 	bl	8004698 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80049ce:	2300      	movs	r3, #0
}
 80049d0:	4618      	mov	r0, r3
 80049d2:	3708      	adds	r7, #8
 80049d4:	46bd      	mov	sp, r7
 80049d6:	bd80      	pop	{r7, pc}

080049d8 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80049d8:	b580      	push	{r7, lr}
 80049da:	b084      	sub	sp, #16
 80049dc:	af00      	add	r7, sp, #0
 80049de:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80049e6:	b2db      	uxtb	r3, r3
 80049e8:	2b22      	cmp	r3, #34	; 0x22
 80049ea:	d171      	bne.n	8004ad0 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	689b      	ldr	r3, [r3, #8]
 80049f0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80049f4:	d123      	bne.n	8004a3e <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049fa:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	691b      	ldr	r3, [r3, #16]
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d10e      	bne.n	8004a22 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	685b      	ldr	r3, [r3, #4]
 8004a0a:	b29b      	uxth	r3, r3
 8004a0c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004a10:	b29a      	uxth	r2, r3
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a1a:	1c9a      	adds	r2, r3, #2
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	629a      	str	r2, [r3, #40]	; 0x28
 8004a20:	e029      	b.n	8004a76 <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	685b      	ldr	r3, [r3, #4]
 8004a28:	b29b      	uxth	r3, r3
 8004a2a:	b2db      	uxtb	r3, r3
 8004a2c:	b29a      	uxth	r2, r3
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a36:	1c5a      	adds	r2, r3, #1
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	629a      	str	r2, [r3, #40]	; 0x28
 8004a3c:	e01b      	b.n	8004a76 <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	691b      	ldr	r3, [r3, #16]
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d10a      	bne.n	8004a5c <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	6858      	ldr	r0, [r3, #4]
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a50:	1c59      	adds	r1, r3, #1
 8004a52:	687a      	ldr	r2, [r7, #4]
 8004a54:	6291      	str	r1, [r2, #40]	; 0x28
 8004a56:	b2c2      	uxtb	r2, r0
 8004a58:	701a      	strb	r2, [r3, #0]
 8004a5a:	e00c      	b.n	8004a76 <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	685b      	ldr	r3, [r3, #4]
 8004a62:	b2da      	uxtb	r2, r3
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a68:	1c58      	adds	r0, r3, #1
 8004a6a:	6879      	ldr	r1, [r7, #4]
 8004a6c:	6288      	str	r0, [r1, #40]	; 0x28
 8004a6e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004a72:	b2d2      	uxtb	r2, r2
 8004a74:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004a7a:	b29b      	uxth	r3, r3
 8004a7c:	3b01      	subs	r3, #1
 8004a7e:	b29b      	uxth	r3, r3
 8004a80:	687a      	ldr	r2, [r7, #4]
 8004a82:	4619      	mov	r1, r3
 8004a84:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d120      	bne.n	8004acc <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	68da      	ldr	r2, [r3, #12]
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	f022 0220 	bic.w	r2, r2, #32
 8004a98:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	68da      	ldr	r2, [r3, #12]
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004aa8:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	695a      	ldr	r2, [r3, #20]
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	f022 0201 	bic.w	r2, r2, #1
 8004ab8:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	2220      	movs	r2, #32
 8004abe:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8004ac2:	6878      	ldr	r0, [r7, #4]
 8004ac4:	f7fc f9e2 	bl	8000e8c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8004ac8:	2300      	movs	r3, #0
 8004aca:	e002      	b.n	8004ad2 <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8004acc:	2300      	movs	r3, #0
 8004ace:	e000      	b.n	8004ad2 <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8004ad0:	2302      	movs	r3, #2
  }
}
 8004ad2:	4618      	mov	r0, r3
 8004ad4:	3710      	adds	r7, #16
 8004ad6:	46bd      	mov	sp, r7
 8004ad8:	bd80      	pop	{r7, pc}
	...

08004adc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004adc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004ae0:	b085      	sub	sp, #20
 8004ae2:	af00      	add	r7, sp, #0
 8004ae4:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	691b      	ldr	r3, [r3, #16]
 8004aec:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	68da      	ldr	r2, [r3, #12]
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	430a      	orrs	r2, r1
 8004afa:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	689a      	ldr	r2, [r3, #8]
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	691b      	ldr	r3, [r3, #16]
 8004b04:	431a      	orrs	r2, r3
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	695b      	ldr	r3, [r3, #20]
 8004b0a:	431a      	orrs	r2, r3
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	69db      	ldr	r3, [r3, #28]
 8004b10:	4313      	orrs	r3, r2
 8004b12:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	68db      	ldr	r3, [r3, #12]
 8004b1a:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8004b1e:	f023 030c 	bic.w	r3, r3, #12
 8004b22:	687a      	ldr	r2, [r7, #4]
 8004b24:	6812      	ldr	r2, [r2, #0]
 8004b26:	68f9      	ldr	r1, [r7, #12]
 8004b28:	430b      	orrs	r3, r1
 8004b2a:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	695b      	ldr	r3, [r3, #20]
 8004b32:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	699a      	ldr	r2, [r3, #24]
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	430a      	orrs	r2, r1
 8004b40:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	69db      	ldr	r3, [r3, #28]
 8004b46:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004b4a:	f040 818b 	bne.w	8004e64 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	4ac1      	ldr	r2, [pc, #772]	; (8004e58 <UART_SetConfig+0x37c>)
 8004b54:	4293      	cmp	r3, r2
 8004b56:	d005      	beq.n	8004b64 <UART_SetConfig+0x88>
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	4abf      	ldr	r2, [pc, #764]	; (8004e5c <UART_SetConfig+0x380>)
 8004b5e:	4293      	cmp	r3, r2
 8004b60:	f040 80bd 	bne.w	8004cde <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004b64:	f7ff f8f8 	bl	8003d58 <HAL_RCC_GetPCLK2Freq>
 8004b68:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004b6a:	68bb      	ldr	r3, [r7, #8]
 8004b6c:	461d      	mov	r5, r3
 8004b6e:	f04f 0600 	mov.w	r6, #0
 8004b72:	46a8      	mov	r8, r5
 8004b74:	46b1      	mov	r9, r6
 8004b76:	eb18 0308 	adds.w	r3, r8, r8
 8004b7a:	eb49 0409 	adc.w	r4, r9, r9
 8004b7e:	4698      	mov	r8, r3
 8004b80:	46a1      	mov	r9, r4
 8004b82:	eb18 0805 	adds.w	r8, r8, r5
 8004b86:	eb49 0906 	adc.w	r9, r9, r6
 8004b8a:	f04f 0100 	mov.w	r1, #0
 8004b8e:	f04f 0200 	mov.w	r2, #0
 8004b92:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8004b96:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8004b9a:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8004b9e:	4688      	mov	r8, r1
 8004ba0:	4691      	mov	r9, r2
 8004ba2:	eb18 0005 	adds.w	r0, r8, r5
 8004ba6:	eb49 0106 	adc.w	r1, r9, r6
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	685b      	ldr	r3, [r3, #4]
 8004bae:	461d      	mov	r5, r3
 8004bb0:	f04f 0600 	mov.w	r6, #0
 8004bb4:	196b      	adds	r3, r5, r5
 8004bb6:	eb46 0406 	adc.w	r4, r6, r6
 8004bba:	461a      	mov	r2, r3
 8004bbc:	4623      	mov	r3, r4
 8004bbe:	f7fb fb57 	bl	8000270 <__aeabi_uldivmod>
 8004bc2:	4603      	mov	r3, r0
 8004bc4:	460c      	mov	r4, r1
 8004bc6:	461a      	mov	r2, r3
 8004bc8:	4ba5      	ldr	r3, [pc, #660]	; (8004e60 <UART_SetConfig+0x384>)
 8004bca:	fba3 2302 	umull	r2, r3, r3, r2
 8004bce:	095b      	lsrs	r3, r3, #5
 8004bd0:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8004bd4:	68bb      	ldr	r3, [r7, #8]
 8004bd6:	461d      	mov	r5, r3
 8004bd8:	f04f 0600 	mov.w	r6, #0
 8004bdc:	46a9      	mov	r9, r5
 8004bde:	46b2      	mov	sl, r6
 8004be0:	eb19 0309 	adds.w	r3, r9, r9
 8004be4:	eb4a 040a 	adc.w	r4, sl, sl
 8004be8:	4699      	mov	r9, r3
 8004bea:	46a2      	mov	sl, r4
 8004bec:	eb19 0905 	adds.w	r9, r9, r5
 8004bf0:	eb4a 0a06 	adc.w	sl, sl, r6
 8004bf4:	f04f 0100 	mov.w	r1, #0
 8004bf8:	f04f 0200 	mov.w	r2, #0
 8004bfc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004c00:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004c04:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004c08:	4689      	mov	r9, r1
 8004c0a:	4692      	mov	sl, r2
 8004c0c:	eb19 0005 	adds.w	r0, r9, r5
 8004c10:	eb4a 0106 	adc.w	r1, sl, r6
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	685b      	ldr	r3, [r3, #4]
 8004c18:	461d      	mov	r5, r3
 8004c1a:	f04f 0600 	mov.w	r6, #0
 8004c1e:	196b      	adds	r3, r5, r5
 8004c20:	eb46 0406 	adc.w	r4, r6, r6
 8004c24:	461a      	mov	r2, r3
 8004c26:	4623      	mov	r3, r4
 8004c28:	f7fb fb22 	bl	8000270 <__aeabi_uldivmod>
 8004c2c:	4603      	mov	r3, r0
 8004c2e:	460c      	mov	r4, r1
 8004c30:	461a      	mov	r2, r3
 8004c32:	4b8b      	ldr	r3, [pc, #556]	; (8004e60 <UART_SetConfig+0x384>)
 8004c34:	fba3 1302 	umull	r1, r3, r3, r2
 8004c38:	095b      	lsrs	r3, r3, #5
 8004c3a:	2164      	movs	r1, #100	; 0x64
 8004c3c:	fb01 f303 	mul.w	r3, r1, r3
 8004c40:	1ad3      	subs	r3, r2, r3
 8004c42:	00db      	lsls	r3, r3, #3
 8004c44:	3332      	adds	r3, #50	; 0x32
 8004c46:	4a86      	ldr	r2, [pc, #536]	; (8004e60 <UART_SetConfig+0x384>)
 8004c48:	fba2 2303 	umull	r2, r3, r2, r3
 8004c4c:	095b      	lsrs	r3, r3, #5
 8004c4e:	005b      	lsls	r3, r3, #1
 8004c50:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004c54:	4498      	add	r8, r3
 8004c56:	68bb      	ldr	r3, [r7, #8]
 8004c58:	461d      	mov	r5, r3
 8004c5a:	f04f 0600 	mov.w	r6, #0
 8004c5e:	46a9      	mov	r9, r5
 8004c60:	46b2      	mov	sl, r6
 8004c62:	eb19 0309 	adds.w	r3, r9, r9
 8004c66:	eb4a 040a 	adc.w	r4, sl, sl
 8004c6a:	4699      	mov	r9, r3
 8004c6c:	46a2      	mov	sl, r4
 8004c6e:	eb19 0905 	adds.w	r9, r9, r5
 8004c72:	eb4a 0a06 	adc.w	sl, sl, r6
 8004c76:	f04f 0100 	mov.w	r1, #0
 8004c7a:	f04f 0200 	mov.w	r2, #0
 8004c7e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004c82:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004c86:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004c8a:	4689      	mov	r9, r1
 8004c8c:	4692      	mov	sl, r2
 8004c8e:	eb19 0005 	adds.w	r0, r9, r5
 8004c92:	eb4a 0106 	adc.w	r1, sl, r6
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	685b      	ldr	r3, [r3, #4]
 8004c9a:	461d      	mov	r5, r3
 8004c9c:	f04f 0600 	mov.w	r6, #0
 8004ca0:	196b      	adds	r3, r5, r5
 8004ca2:	eb46 0406 	adc.w	r4, r6, r6
 8004ca6:	461a      	mov	r2, r3
 8004ca8:	4623      	mov	r3, r4
 8004caa:	f7fb fae1 	bl	8000270 <__aeabi_uldivmod>
 8004cae:	4603      	mov	r3, r0
 8004cb0:	460c      	mov	r4, r1
 8004cb2:	461a      	mov	r2, r3
 8004cb4:	4b6a      	ldr	r3, [pc, #424]	; (8004e60 <UART_SetConfig+0x384>)
 8004cb6:	fba3 1302 	umull	r1, r3, r3, r2
 8004cba:	095b      	lsrs	r3, r3, #5
 8004cbc:	2164      	movs	r1, #100	; 0x64
 8004cbe:	fb01 f303 	mul.w	r3, r1, r3
 8004cc2:	1ad3      	subs	r3, r2, r3
 8004cc4:	00db      	lsls	r3, r3, #3
 8004cc6:	3332      	adds	r3, #50	; 0x32
 8004cc8:	4a65      	ldr	r2, [pc, #404]	; (8004e60 <UART_SetConfig+0x384>)
 8004cca:	fba2 2303 	umull	r2, r3, r2, r3
 8004cce:	095b      	lsrs	r3, r3, #5
 8004cd0:	f003 0207 	and.w	r2, r3, #7
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	4442      	add	r2, r8
 8004cda:	609a      	str	r2, [r3, #8]
 8004cdc:	e26f      	b.n	80051be <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004cde:	f7ff f827 	bl	8003d30 <HAL_RCC_GetPCLK1Freq>
 8004ce2:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004ce4:	68bb      	ldr	r3, [r7, #8]
 8004ce6:	461d      	mov	r5, r3
 8004ce8:	f04f 0600 	mov.w	r6, #0
 8004cec:	46a8      	mov	r8, r5
 8004cee:	46b1      	mov	r9, r6
 8004cf0:	eb18 0308 	adds.w	r3, r8, r8
 8004cf4:	eb49 0409 	adc.w	r4, r9, r9
 8004cf8:	4698      	mov	r8, r3
 8004cfa:	46a1      	mov	r9, r4
 8004cfc:	eb18 0805 	adds.w	r8, r8, r5
 8004d00:	eb49 0906 	adc.w	r9, r9, r6
 8004d04:	f04f 0100 	mov.w	r1, #0
 8004d08:	f04f 0200 	mov.w	r2, #0
 8004d0c:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8004d10:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8004d14:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8004d18:	4688      	mov	r8, r1
 8004d1a:	4691      	mov	r9, r2
 8004d1c:	eb18 0005 	adds.w	r0, r8, r5
 8004d20:	eb49 0106 	adc.w	r1, r9, r6
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	685b      	ldr	r3, [r3, #4]
 8004d28:	461d      	mov	r5, r3
 8004d2a:	f04f 0600 	mov.w	r6, #0
 8004d2e:	196b      	adds	r3, r5, r5
 8004d30:	eb46 0406 	adc.w	r4, r6, r6
 8004d34:	461a      	mov	r2, r3
 8004d36:	4623      	mov	r3, r4
 8004d38:	f7fb fa9a 	bl	8000270 <__aeabi_uldivmod>
 8004d3c:	4603      	mov	r3, r0
 8004d3e:	460c      	mov	r4, r1
 8004d40:	461a      	mov	r2, r3
 8004d42:	4b47      	ldr	r3, [pc, #284]	; (8004e60 <UART_SetConfig+0x384>)
 8004d44:	fba3 2302 	umull	r2, r3, r3, r2
 8004d48:	095b      	lsrs	r3, r3, #5
 8004d4a:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8004d4e:	68bb      	ldr	r3, [r7, #8]
 8004d50:	461d      	mov	r5, r3
 8004d52:	f04f 0600 	mov.w	r6, #0
 8004d56:	46a9      	mov	r9, r5
 8004d58:	46b2      	mov	sl, r6
 8004d5a:	eb19 0309 	adds.w	r3, r9, r9
 8004d5e:	eb4a 040a 	adc.w	r4, sl, sl
 8004d62:	4699      	mov	r9, r3
 8004d64:	46a2      	mov	sl, r4
 8004d66:	eb19 0905 	adds.w	r9, r9, r5
 8004d6a:	eb4a 0a06 	adc.w	sl, sl, r6
 8004d6e:	f04f 0100 	mov.w	r1, #0
 8004d72:	f04f 0200 	mov.w	r2, #0
 8004d76:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004d7a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004d7e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004d82:	4689      	mov	r9, r1
 8004d84:	4692      	mov	sl, r2
 8004d86:	eb19 0005 	adds.w	r0, r9, r5
 8004d8a:	eb4a 0106 	adc.w	r1, sl, r6
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	685b      	ldr	r3, [r3, #4]
 8004d92:	461d      	mov	r5, r3
 8004d94:	f04f 0600 	mov.w	r6, #0
 8004d98:	196b      	adds	r3, r5, r5
 8004d9a:	eb46 0406 	adc.w	r4, r6, r6
 8004d9e:	461a      	mov	r2, r3
 8004da0:	4623      	mov	r3, r4
 8004da2:	f7fb fa65 	bl	8000270 <__aeabi_uldivmod>
 8004da6:	4603      	mov	r3, r0
 8004da8:	460c      	mov	r4, r1
 8004daa:	461a      	mov	r2, r3
 8004dac:	4b2c      	ldr	r3, [pc, #176]	; (8004e60 <UART_SetConfig+0x384>)
 8004dae:	fba3 1302 	umull	r1, r3, r3, r2
 8004db2:	095b      	lsrs	r3, r3, #5
 8004db4:	2164      	movs	r1, #100	; 0x64
 8004db6:	fb01 f303 	mul.w	r3, r1, r3
 8004dba:	1ad3      	subs	r3, r2, r3
 8004dbc:	00db      	lsls	r3, r3, #3
 8004dbe:	3332      	adds	r3, #50	; 0x32
 8004dc0:	4a27      	ldr	r2, [pc, #156]	; (8004e60 <UART_SetConfig+0x384>)
 8004dc2:	fba2 2303 	umull	r2, r3, r2, r3
 8004dc6:	095b      	lsrs	r3, r3, #5
 8004dc8:	005b      	lsls	r3, r3, #1
 8004dca:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004dce:	4498      	add	r8, r3
 8004dd0:	68bb      	ldr	r3, [r7, #8]
 8004dd2:	461d      	mov	r5, r3
 8004dd4:	f04f 0600 	mov.w	r6, #0
 8004dd8:	46a9      	mov	r9, r5
 8004dda:	46b2      	mov	sl, r6
 8004ddc:	eb19 0309 	adds.w	r3, r9, r9
 8004de0:	eb4a 040a 	adc.w	r4, sl, sl
 8004de4:	4699      	mov	r9, r3
 8004de6:	46a2      	mov	sl, r4
 8004de8:	eb19 0905 	adds.w	r9, r9, r5
 8004dec:	eb4a 0a06 	adc.w	sl, sl, r6
 8004df0:	f04f 0100 	mov.w	r1, #0
 8004df4:	f04f 0200 	mov.w	r2, #0
 8004df8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004dfc:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004e00:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004e04:	4689      	mov	r9, r1
 8004e06:	4692      	mov	sl, r2
 8004e08:	eb19 0005 	adds.w	r0, r9, r5
 8004e0c:	eb4a 0106 	adc.w	r1, sl, r6
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	685b      	ldr	r3, [r3, #4]
 8004e14:	461d      	mov	r5, r3
 8004e16:	f04f 0600 	mov.w	r6, #0
 8004e1a:	196b      	adds	r3, r5, r5
 8004e1c:	eb46 0406 	adc.w	r4, r6, r6
 8004e20:	461a      	mov	r2, r3
 8004e22:	4623      	mov	r3, r4
 8004e24:	f7fb fa24 	bl	8000270 <__aeabi_uldivmod>
 8004e28:	4603      	mov	r3, r0
 8004e2a:	460c      	mov	r4, r1
 8004e2c:	461a      	mov	r2, r3
 8004e2e:	4b0c      	ldr	r3, [pc, #48]	; (8004e60 <UART_SetConfig+0x384>)
 8004e30:	fba3 1302 	umull	r1, r3, r3, r2
 8004e34:	095b      	lsrs	r3, r3, #5
 8004e36:	2164      	movs	r1, #100	; 0x64
 8004e38:	fb01 f303 	mul.w	r3, r1, r3
 8004e3c:	1ad3      	subs	r3, r2, r3
 8004e3e:	00db      	lsls	r3, r3, #3
 8004e40:	3332      	adds	r3, #50	; 0x32
 8004e42:	4a07      	ldr	r2, [pc, #28]	; (8004e60 <UART_SetConfig+0x384>)
 8004e44:	fba2 2303 	umull	r2, r3, r2, r3
 8004e48:	095b      	lsrs	r3, r3, #5
 8004e4a:	f003 0207 	and.w	r2, r3, #7
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	4442      	add	r2, r8
 8004e54:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8004e56:	e1b2      	b.n	80051be <UART_SetConfig+0x6e2>
 8004e58:	40011000 	.word	0x40011000
 8004e5c:	40011400 	.word	0x40011400
 8004e60:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	4ad7      	ldr	r2, [pc, #860]	; (80051c8 <UART_SetConfig+0x6ec>)
 8004e6a:	4293      	cmp	r3, r2
 8004e6c:	d005      	beq.n	8004e7a <UART_SetConfig+0x39e>
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	4ad6      	ldr	r2, [pc, #856]	; (80051cc <UART_SetConfig+0x6f0>)
 8004e74:	4293      	cmp	r3, r2
 8004e76:	f040 80d1 	bne.w	800501c <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8004e7a:	f7fe ff6d 	bl	8003d58 <HAL_RCC_GetPCLK2Freq>
 8004e7e:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004e80:	68bb      	ldr	r3, [r7, #8]
 8004e82:	469a      	mov	sl, r3
 8004e84:	f04f 0b00 	mov.w	fp, #0
 8004e88:	46d0      	mov	r8, sl
 8004e8a:	46d9      	mov	r9, fp
 8004e8c:	eb18 0308 	adds.w	r3, r8, r8
 8004e90:	eb49 0409 	adc.w	r4, r9, r9
 8004e94:	4698      	mov	r8, r3
 8004e96:	46a1      	mov	r9, r4
 8004e98:	eb18 080a 	adds.w	r8, r8, sl
 8004e9c:	eb49 090b 	adc.w	r9, r9, fp
 8004ea0:	f04f 0100 	mov.w	r1, #0
 8004ea4:	f04f 0200 	mov.w	r2, #0
 8004ea8:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8004eac:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8004eb0:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8004eb4:	4688      	mov	r8, r1
 8004eb6:	4691      	mov	r9, r2
 8004eb8:	eb1a 0508 	adds.w	r5, sl, r8
 8004ebc:	eb4b 0609 	adc.w	r6, fp, r9
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	685b      	ldr	r3, [r3, #4]
 8004ec4:	4619      	mov	r1, r3
 8004ec6:	f04f 0200 	mov.w	r2, #0
 8004eca:	f04f 0300 	mov.w	r3, #0
 8004ece:	f04f 0400 	mov.w	r4, #0
 8004ed2:	0094      	lsls	r4, r2, #2
 8004ed4:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004ed8:	008b      	lsls	r3, r1, #2
 8004eda:	461a      	mov	r2, r3
 8004edc:	4623      	mov	r3, r4
 8004ede:	4628      	mov	r0, r5
 8004ee0:	4631      	mov	r1, r6
 8004ee2:	f7fb f9c5 	bl	8000270 <__aeabi_uldivmod>
 8004ee6:	4603      	mov	r3, r0
 8004ee8:	460c      	mov	r4, r1
 8004eea:	461a      	mov	r2, r3
 8004eec:	4bb8      	ldr	r3, [pc, #736]	; (80051d0 <UART_SetConfig+0x6f4>)
 8004eee:	fba3 2302 	umull	r2, r3, r3, r2
 8004ef2:	095b      	lsrs	r3, r3, #5
 8004ef4:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8004ef8:	68bb      	ldr	r3, [r7, #8]
 8004efa:	469b      	mov	fp, r3
 8004efc:	f04f 0c00 	mov.w	ip, #0
 8004f00:	46d9      	mov	r9, fp
 8004f02:	46e2      	mov	sl, ip
 8004f04:	eb19 0309 	adds.w	r3, r9, r9
 8004f08:	eb4a 040a 	adc.w	r4, sl, sl
 8004f0c:	4699      	mov	r9, r3
 8004f0e:	46a2      	mov	sl, r4
 8004f10:	eb19 090b 	adds.w	r9, r9, fp
 8004f14:	eb4a 0a0c 	adc.w	sl, sl, ip
 8004f18:	f04f 0100 	mov.w	r1, #0
 8004f1c:	f04f 0200 	mov.w	r2, #0
 8004f20:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004f24:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004f28:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004f2c:	4689      	mov	r9, r1
 8004f2e:	4692      	mov	sl, r2
 8004f30:	eb1b 0509 	adds.w	r5, fp, r9
 8004f34:	eb4c 060a 	adc.w	r6, ip, sl
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	685b      	ldr	r3, [r3, #4]
 8004f3c:	4619      	mov	r1, r3
 8004f3e:	f04f 0200 	mov.w	r2, #0
 8004f42:	f04f 0300 	mov.w	r3, #0
 8004f46:	f04f 0400 	mov.w	r4, #0
 8004f4a:	0094      	lsls	r4, r2, #2
 8004f4c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004f50:	008b      	lsls	r3, r1, #2
 8004f52:	461a      	mov	r2, r3
 8004f54:	4623      	mov	r3, r4
 8004f56:	4628      	mov	r0, r5
 8004f58:	4631      	mov	r1, r6
 8004f5a:	f7fb f989 	bl	8000270 <__aeabi_uldivmod>
 8004f5e:	4603      	mov	r3, r0
 8004f60:	460c      	mov	r4, r1
 8004f62:	461a      	mov	r2, r3
 8004f64:	4b9a      	ldr	r3, [pc, #616]	; (80051d0 <UART_SetConfig+0x6f4>)
 8004f66:	fba3 1302 	umull	r1, r3, r3, r2
 8004f6a:	095b      	lsrs	r3, r3, #5
 8004f6c:	2164      	movs	r1, #100	; 0x64
 8004f6e:	fb01 f303 	mul.w	r3, r1, r3
 8004f72:	1ad3      	subs	r3, r2, r3
 8004f74:	011b      	lsls	r3, r3, #4
 8004f76:	3332      	adds	r3, #50	; 0x32
 8004f78:	4a95      	ldr	r2, [pc, #596]	; (80051d0 <UART_SetConfig+0x6f4>)
 8004f7a:	fba2 2303 	umull	r2, r3, r2, r3
 8004f7e:	095b      	lsrs	r3, r3, #5
 8004f80:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004f84:	4498      	add	r8, r3
 8004f86:	68bb      	ldr	r3, [r7, #8]
 8004f88:	469b      	mov	fp, r3
 8004f8a:	f04f 0c00 	mov.w	ip, #0
 8004f8e:	46d9      	mov	r9, fp
 8004f90:	46e2      	mov	sl, ip
 8004f92:	eb19 0309 	adds.w	r3, r9, r9
 8004f96:	eb4a 040a 	adc.w	r4, sl, sl
 8004f9a:	4699      	mov	r9, r3
 8004f9c:	46a2      	mov	sl, r4
 8004f9e:	eb19 090b 	adds.w	r9, r9, fp
 8004fa2:	eb4a 0a0c 	adc.w	sl, sl, ip
 8004fa6:	f04f 0100 	mov.w	r1, #0
 8004faa:	f04f 0200 	mov.w	r2, #0
 8004fae:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004fb2:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004fb6:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004fba:	4689      	mov	r9, r1
 8004fbc:	4692      	mov	sl, r2
 8004fbe:	eb1b 0509 	adds.w	r5, fp, r9
 8004fc2:	eb4c 060a 	adc.w	r6, ip, sl
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	685b      	ldr	r3, [r3, #4]
 8004fca:	4619      	mov	r1, r3
 8004fcc:	f04f 0200 	mov.w	r2, #0
 8004fd0:	f04f 0300 	mov.w	r3, #0
 8004fd4:	f04f 0400 	mov.w	r4, #0
 8004fd8:	0094      	lsls	r4, r2, #2
 8004fda:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004fde:	008b      	lsls	r3, r1, #2
 8004fe0:	461a      	mov	r2, r3
 8004fe2:	4623      	mov	r3, r4
 8004fe4:	4628      	mov	r0, r5
 8004fe6:	4631      	mov	r1, r6
 8004fe8:	f7fb f942 	bl	8000270 <__aeabi_uldivmod>
 8004fec:	4603      	mov	r3, r0
 8004fee:	460c      	mov	r4, r1
 8004ff0:	461a      	mov	r2, r3
 8004ff2:	4b77      	ldr	r3, [pc, #476]	; (80051d0 <UART_SetConfig+0x6f4>)
 8004ff4:	fba3 1302 	umull	r1, r3, r3, r2
 8004ff8:	095b      	lsrs	r3, r3, #5
 8004ffa:	2164      	movs	r1, #100	; 0x64
 8004ffc:	fb01 f303 	mul.w	r3, r1, r3
 8005000:	1ad3      	subs	r3, r2, r3
 8005002:	011b      	lsls	r3, r3, #4
 8005004:	3332      	adds	r3, #50	; 0x32
 8005006:	4a72      	ldr	r2, [pc, #456]	; (80051d0 <UART_SetConfig+0x6f4>)
 8005008:	fba2 2303 	umull	r2, r3, r2, r3
 800500c:	095b      	lsrs	r3, r3, #5
 800500e:	f003 020f 	and.w	r2, r3, #15
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	4442      	add	r2, r8
 8005018:	609a      	str	r2, [r3, #8]
 800501a:	e0d0      	b.n	80051be <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 800501c:	f7fe fe88 	bl	8003d30 <HAL_RCC_GetPCLK1Freq>
 8005020:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005022:	68bb      	ldr	r3, [r7, #8]
 8005024:	469a      	mov	sl, r3
 8005026:	f04f 0b00 	mov.w	fp, #0
 800502a:	46d0      	mov	r8, sl
 800502c:	46d9      	mov	r9, fp
 800502e:	eb18 0308 	adds.w	r3, r8, r8
 8005032:	eb49 0409 	adc.w	r4, r9, r9
 8005036:	4698      	mov	r8, r3
 8005038:	46a1      	mov	r9, r4
 800503a:	eb18 080a 	adds.w	r8, r8, sl
 800503e:	eb49 090b 	adc.w	r9, r9, fp
 8005042:	f04f 0100 	mov.w	r1, #0
 8005046:	f04f 0200 	mov.w	r2, #0
 800504a:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800504e:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8005052:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8005056:	4688      	mov	r8, r1
 8005058:	4691      	mov	r9, r2
 800505a:	eb1a 0508 	adds.w	r5, sl, r8
 800505e:	eb4b 0609 	adc.w	r6, fp, r9
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	685b      	ldr	r3, [r3, #4]
 8005066:	4619      	mov	r1, r3
 8005068:	f04f 0200 	mov.w	r2, #0
 800506c:	f04f 0300 	mov.w	r3, #0
 8005070:	f04f 0400 	mov.w	r4, #0
 8005074:	0094      	lsls	r4, r2, #2
 8005076:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800507a:	008b      	lsls	r3, r1, #2
 800507c:	461a      	mov	r2, r3
 800507e:	4623      	mov	r3, r4
 8005080:	4628      	mov	r0, r5
 8005082:	4631      	mov	r1, r6
 8005084:	f7fb f8f4 	bl	8000270 <__aeabi_uldivmod>
 8005088:	4603      	mov	r3, r0
 800508a:	460c      	mov	r4, r1
 800508c:	461a      	mov	r2, r3
 800508e:	4b50      	ldr	r3, [pc, #320]	; (80051d0 <UART_SetConfig+0x6f4>)
 8005090:	fba3 2302 	umull	r2, r3, r3, r2
 8005094:	095b      	lsrs	r3, r3, #5
 8005096:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800509a:	68bb      	ldr	r3, [r7, #8]
 800509c:	469b      	mov	fp, r3
 800509e:	f04f 0c00 	mov.w	ip, #0
 80050a2:	46d9      	mov	r9, fp
 80050a4:	46e2      	mov	sl, ip
 80050a6:	eb19 0309 	adds.w	r3, r9, r9
 80050aa:	eb4a 040a 	adc.w	r4, sl, sl
 80050ae:	4699      	mov	r9, r3
 80050b0:	46a2      	mov	sl, r4
 80050b2:	eb19 090b 	adds.w	r9, r9, fp
 80050b6:	eb4a 0a0c 	adc.w	sl, sl, ip
 80050ba:	f04f 0100 	mov.w	r1, #0
 80050be:	f04f 0200 	mov.w	r2, #0
 80050c2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80050c6:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80050ca:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80050ce:	4689      	mov	r9, r1
 80050d0:	4692      	mov	sl, r2
 80050d2:	eb1b 0509 	adds.w	r5, fp, r9
 80050d6:	eb4c 060a 	adc.w	r6, ip, sl
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	685b      	ldr	r3, [r3, #4]
 80050de:	4619      	mov	r1, r3
 80050e0:	f04f 0200 	mov.w	r2, #0
 80050e4:	f04f 0300 	mov.w	r3, #0
 80050e8:	f04f 0400 	mov.w	r4, #0
 80050ec:	0094      	lsls	r4, r2, #2
 80050ee:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80050f2:	008b      	lsls	r3, r1, #2
 80050f4:	461a      	mov	r2, r3
 80050f6:	4623      	mov	r3, r4
 80050f8:	4628      	mov	r0, r5
 80050fa:	4631      	mov	r1, r6
 80050fc:	f7fb f8b8 	bl	8000270 <__aeabi_uldivmod>
 8005100:	4603      	mov	r3, r0
 8005102:	460c      	mov	r4, r1
 8005104:	461a      	mov	r2, r3
 8005106:	4b32      	ldr	r3, [pc, #200]	; (80051d0 <UART_SetConfig+0x6f4>)
 8005108:	fba3 1302 	umull	r1, r3, r3, r2
 800510c:	095b      	lsrs	r3, r3, #5
 800510e:	2164      	movs	r1, #100	; 0x64
 8005110:	fb01 f303 	mul.w	r3, r1, r3
 8005114:	1ad3      	subs	r3, r2, r3
 8005116:	011b      	lsls	r3, r3, #4
 8005118:	3332      	adds	r3, #50	; 0x32
 800511a:	4a2d      	ldr	r2, [pc, #180]	; (80051d0 <UART_SetConfig+0x6f4>)
 800511c:	fba2 2303 	umull	r2, r3, r2, r3
 8005120:	095b      	lsrs	r3, r3, #5
 8005122:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005126:	4498      	add	r8, r3
 8005128:	68bb      	ldr	r3, [r7, #8]
 800512a:	469b      	mov	fp, r3
 800512c:	f04f 0c00 	mov.w	ip, #0
 8005130:	46d9      	mov	r9, fp
 8005132:	46e2      	mov	sl, ip
 8005134:	eb19 0309 	adds.w	r3, r9, r9
 8005138:	eb4a 040a 	adc.w	r4, sl, sl
 800513c:	4699      	mov	r9, r3
 800513e:	46a2      	mov	sl, r4
 8005140:	eb19 090b 	adds.w	r9, r9, fp
 8005144:	eb4a 0a0c 	adc.w	sl, sl, ip
 8005148:	f04f 0100 	mov.w	r1, #0
 800514c:	f04f 0200 	mov.w	r2, #0
 8005150:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005154:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005158:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800515c:	4689      	mov	r9, r1
 800515e:	4692      	mov	sl, r2
 8005160:	eb1b 0509 	adds.w	r5, fp, r9
 8005164:	eb4c 060a 	adc.w	r6, ip, sl
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	685b      	ldr	r3, [r3, #4]
 800516c:	4619      	mov	r1, r3
 800516e:	f04f 0200 	mov.w	r2, #0
 8005172:	f04f 0300 	mov.w	r3, #0
 8005176:	f04f 0400 	mov.w	r4, #0
 800517a:	0094      	lsls	r4, r2, #2
 800517c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8005180:	008b      	lsls	r3, r1, #2
 8005182:	461a      	mov	r2, r3
 8005184:	4623      	mov	r3, r4
 8005186:	4628      	mov	r0, r5
 8005188:	4631      	mov	r1, r6
 800518a:	f7fb f871 	bl	8000270 <__aeabi_uldivmod>
 800518e:	4603      	mov	r3, r0
 8005190:	460c      	mov	r4, r1
 8005192:	461a      	mov	r2, r3
 8005194:	4b0e      	ldr	r3, [pc, #56]	; (80051d0 <UART_SetConfig+0x6f4>)
 8005196:	fba3 1302 	umull	r1, r3, r3, r2
 800519a:	095b      	lsrs	r3, r3, #5
 800519c:	2164      	movs	r1, #100	; 0x64
 800519e:	fb01 f303 	mul.w	r3, r1, r3
 80051a2:	1ad3      	subs	r3, r2, r3
 80051a4:	011b      	lsls	r3, r3, #4
 80051a6:	3332      	adds	r3, #50	; 0x32
 80051a8:	4a09      	ldr	r2, [pc, #36]	; (80051d0 <UART_SetConfig+0x6f4>)
 80051aa:	fba2 2303 	umull	r2, r3, r2, r3
 80051ae:	095b      	lsrs	r3, r3, #5
 80051b0:	f003 020f 	and.w	r2, r3, #15
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	4442      	add	r2, r8
 80051ba:	609a      	str	r2, [r3, #8]
}
 80051bc:	e7ff      	b.n	80051be <UART_SetConfig+0x6e2>
 80051be:	bf00      	nop
 80051c0:	3714      	adds	r7, #20
 80051c2:	46bd      	mov	sp, r7
 80051c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80051c8:	40011000 	.word	0x40011000
 80051cc:	40011400 	.word	0x40011400
 80051d0:	51eb851f 	.word	0x51eb851f

080051d4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80051d4:	b084      	sub	sp, #16
 80051d6:	b580      	push	{r7, lr}
 80051d8:	b084      	sub	sp, #16
 80051da:	af00      	add	r7, sp, #0
 80051dc:	6078      	str	r0, [r7, #4]
 80051de:	f107 001c 	add.w	r0, r7, #28
 80051e2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80051e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051e8:	2b01      	cmp	r3, #1
 80051ea:	d122      	bne.n	8005232 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051f0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	68db      	ldr	r3, [r3, #12]
 80051fc:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8005200:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005204:	687a      	ldr	r2, [r7, #4]
 8005206:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	68db      	ldr	r3, [r3, #12]
 800520c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8005214:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005216:	2b01      	cmp	r3, #1
 8005218:	d105      	bne.n	8005226 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	68db      	ldr	r3, [r3, #12]
 800521e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8005226:	6878      	ldr	r0, [r7, #4]
 8005228:	f001 fac6 	bl	80067b8 <USB_CoreReset>
 800522c:	4603      	mov	r3, r0
 800522e:	73fb      	strb	r3, [r7, #15]
 8005230:	e01a      	b.n	8005268 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	68db      	ldr	r3, [r3, #12]
 8005236:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800523e:	6878      	ldr	r0, [r7, #4]
 8005240:	f001 faba 	bl	80067b8 <USB_CoreReset>
 8005244:	4603      	mov	r3, r0
 8005246:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8005248:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800524a:	2b00      	cmp	r3, #0
 800524c:	d106      	bne.n	800525c <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005252:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	639a      	str	r2, [r3, #56]	; 0x38
 800525a:	e005      	b.n	8005268 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005260:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8005268:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800526a:	2b01      	cmp	r3, #1
 800526c:	d10b      	bne.n	8005286 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	689b      	ldr	r3, [r3, #8]
 8005272:	f043 0206 	orr.w	r2, r3, #6
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	689b      	ldr	r3, [r3, #8]
 800527e:	f043 0220 	orr.w	r2, r3, #32
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8005286:	7bfb      	ldrb	r3, [r7, #15]
}
 8005288:	4618      	mov	r0, r3
 800528a:	3710      	adds	r7, #16
 800528c:	46bd      	mov	sp, r7
 800528e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005292:	b004      	add	sp, #16
 8005294:	4770      	bx	lr
	...

08005298 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8005298:	b480      	push	{r7}
 800529a:	b087      	sub	sp, #28
 800529c:	af00      	add	r7, sp, #0
 800529e:	60f8      	str	r0, [r7, #12]
 80052a0:	60b9      	str	r1, [r7, #8]
 80052a2:	4613      	mov	r3, r2
 80052a4:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 80052a6:	79fb      	ldrb	r3, [r7, #7]
 80052a8:	2b02      	cmp	r3, #2
 80052aa:	d165      	bne.n	8005378 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 80052ac:	68bb      	ldr	r3, [r7, #8]
 80052ae:	4a41      	ldr	r2, [pc, #260]	; (80053b4 <USB_SetTurnaroundTime+0x11c>)
 80052b0:	4293      	cmp	r3, r2
 80052b2:	d906      	bls.n	80052c2 <USB_SetTurnaroundTime+0x2a>
 80052b4:	68bb      	ldr	r3, [r7, #8]
 80052b6:	4a40      	ldr	r2, [pc, #256]	; (80053b8 <USB_SetTurnaroundTime+0x120>)
 80052b8:	4293      	cmp	r3, r2
 80052ba:	d802      	bhi.n	80052c2 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 80052bc:	230f      	movs	r3, #15
 80052be:	617b      	str	r3, [r7, #20]
 80052c0:	e062      	b.n	8005388 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80052c2:	68bb      	ldr	r3, [r7, #8]
 80052c4:	4a3c      	ldr	r2, [pc, #240]	; (80053b8 <USB_SetTurnaroundTime+0x120>)
 80052c6:	4293      	cmp	r3, r2
 80052c8:	d906      	bls.n	80052d8 <USB_SetTurnaroundTime+0x40>
 80052ca:	68bb      	ldr	r3, [r7, #8]
 80052cc:	4a3b      	ldr	r2, [pc, #236]	; (80053bc <USB_SetTurnaroundTime+0x124>)
 80052ce:	4293      	cmp	r3, r2
 80052d0:	d802      	bhi.n	80052d8 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 80052d2:	230e      	movs	r3, #14
 80052d4:	617b      	str	r3, [r7, #20]
 80052d6:	e057      	b.n	8005388 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80052d8:	68bb      	ldr	r3, [r7, #8]
 80052da:	4a38      	ldr	r2, [pc, #224]	; (80053bc <USB_SetTurnaroundTime+0x124>)
 80052dc:	4293      	cmp	r3, r2
 80052de:	d906      	bls.n	80052ee <USB_SetTurnaroundTime+0x56>
 80052e0:	68bb      	ldr	r3, [r7, #8]
 80052e2:	4a37      	ldr	r2, [pc, #220]	; (80053c0 <USB_SetTurnaroundTime+0x128>)
 80052e4:	4293      	cmp	r3, r2
 80052e6:	d802      	bhi.n	80052ee <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80052e8:	230d      	movs	r3, #13
 80052ea:	617b      	str	r3, [r7, #20]
 80052ec:	e04c      	b.n	8005388 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80052ee:	68bb      	ldr	r3, [r7, #8]
 80052f0:	4a33      	ldr	r2, [pc, #204]	; (80053c0 <USB_SetTurnaroundTime+0x128>)
 80052f2:	4293      	cmp	r3, r2
 80052f4:	d906      	bls.n	8005304 <USB_SetTurnaroundTime+0x6c>
 80052f6:	68bb      	ldr	r3, [r7, #8]
 80052f8:	4a32      	ldr	r2, [pc, #200]	; (80053c4 <USB_SetTurnaroundTime+0x12c>)
 80052fa:	4293      	cmp	r3, r2
 80052fc:	d802      	bhi.n	8005304 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80052fe:	230c      	movs	r3, #12
 8005300:	617b      	str	r3, [r7, #20]
 8005302:	e041      	b.n	8005388 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8005304:	68bb      	ldr	r3, [r7, #8]
 8005306:	4a2f      	ldr	r2, [pc, #188]	; (80053c4 <USB_SetTurnaroundTime+0x12c>)
 8005308:	4293      	cmp	r3, r2
 800530a:	d906      	bls.n	800531a <USB_SetTurnaroundTime+0x82>
 800530c:	68bb      	ldr	r3, [r7, #8]
 800530e:	4a2e      	ldr	r2, [pc, #184]	; (80053c8 <USB_SetTurnaroundTime+0x130>)
 8005310:	4293      	cmp	r3, r2
 8005312:	d802      	bhi.n	800531a <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8005314:	230b      	movs	r3, #11
 8005316:	617b      	str	r3, [r7, #20]
 8005318:	e036      	b.n	8005388 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800531a:	68bb      	ldr	r3, [r7, #8]
 800531c:	4a2a      	ldr	r2, [pc, #168]	; (80053c8 <USB_SetTurnaroundTime+0x130>)
 800531e:	4293      	cmp	r3, r2
 8005320:	d906      	bls.n	8005330 <USB_SetTurnaroundTime+0x98>
 8005322:	68bb      	ldr	r3, [r7, #8]
 8005324:	4a29      	ldr	r2, [pc, #164]	; (80053cc <USB_SetTurnaroundTime+0x134>)
 8005326:	4293      	cmp	r3, r2
 8005328:	d802      	bhi.n	8005330 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800532a:	230a      	movs	r3, #10
 800532c:	617b      	str	r3, [r7, #20]
 800532e:	e02b      	b.n	8005388 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8005330:	68bb      	ldr	r3, [r7, #8]
 8005332:	4a26      	ldr	r2, [pc, #152]	; (80053cc <USB_SetTurnaroundTime+0x134>)
 8005334:	4293      	cmp	r3, r2
 8005336:	d906      	bls.n	8005346 <USB_SetTurnaroundTime+0xae>
 8005338:	68bb      	ldr	r3, [r7, #8]
 800533a:	4a25      	ldr	r2, [pc, #148]	; (80053d0 <USB_SetTurnaroundTime+0x138>)
 800533c:	4293      	cmp	r3, r2
 800533e:	d802      	bhi.n	8005346 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8005340:	2309      	movs	r3, #9
 8005342:	617b      	str	r3, [r7, #20]
 8005344:	e020      	b.n	8005388 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8005346:	68bb      	ldr	r3, [r7, #8]
 8005348:	4a21      	ldr	r2, [pc, #132]	; (80053d0 <USB_SetTurnaroundTime+0x138>)
 800534a:	4293      	cmp	r3, r2
 800534c:	d906      	bls.n	800535c <USB_SetTurnaroundTime+0xc4>
 800534e:	68bb      	ldr	r3, [r7, #8]
 8005350:	4a20      	ldr	r2, [pc, #128]	; (80053d4 <USB_SetTurnaroundTime+0x13c>)
 8005352:	4293      	cmp	r3, r2
 8005354:	d802      	bhi.n	800535c <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8005356:	2308      	movs	r3, #8
 8005358:	617b      	str	r3, [r7, #20]
 800535a:	e015      	b.n	8005388 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800535c:	68bb      	ldr	r3, [r7, #8]
 800535e:	4a1d      	ldr	r2, [pc, #116]	; (80053d4 <USB_SetTurnaroundTime+0x13c>)
 8005360:	4293      	cmp	r3, r2
 8005362:	d906      	bls.n	8005372 <USB_SetTurnaroundTime+0xda>
 8005364:	68bb      	ldr	r3, [r7, #8]
 8005366:	4a1c      	ldr	r2, [pc, #112]	; (80053d8 <USB_SetTurnaroundTime+0x140>)
 8005368:	4293      	cmp	r3, r2
 800536a:	d802      	bhi.n	8005372 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800536c:	2307      	movs	r3, #7
 800536e:	617b      	str	r3, [r7, #20]
 8005370:	e00a      	b.n	8005388 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8005372:	2306      	movs	r3, #6
 8005374:	617b      	str	r3, [r7, #20]
 8005376:	e007      	b.n	8005388 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8005378:	79fb      	ldrb	r3, [r7, #7]
 800537a:	2b00      	cmp	r3, #0
 800537c:	d102      	bne.n	8005384 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800537e:	2309      	movs	r3, #9
 8005380:	617b      	str	r3, [r7, #20]
 8005382:	e001      	b.n	8005388 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8005384:	2309      	movs	r3, #9
 8005386:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	68db      	ldr	r3, [r3, #12]
 800538c:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	68da      	ldr	r2, [r3, #12]
 8005398:	697b      	ldr	r3, [r7, #20]
 800539a:	029b      	lsls	r3, r3, #10
 800539c:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 80053a0:	431a      	orrs	r2, r3
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80053a6:	2300      	movs	r3, #0
}
 80053a8:	4618      	mov	r0, r3
 80053aa:	371c      	adds	r7, #28
 80053ac:	46bd      	mov	sp, r7
 80053ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053b2:	4770      	bx	lr
 80053b4:	00d8acbf 	.word	0x00d8acbf
 80053b8:	00e4e1bf 	.word	0x00e4e1bf
 80053bc:	00f423ff 	.word	0x00f423ff
 80053c0:	0106737f 	.word	0x0106737f
 80053c4:	011a499f 	.word	0x011a499f
 80053c8:	01312cff 	.word	0x01312cff
 80053cc:	014ca43f 	.word	0x014ca43f
 80053d0:	016e35ff 	.word	0x016e35ff
 80053d4:	01a6ab1f 	.word	0x01a6ab1f
 80053d8:	01e847ff 	.word	0x01e847ff

080053dc <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80053dc:	b480      	push	{r7}
 80053de:	b083      	sub	sp, #12
 80053e0:	af00      	add	r7, sp, #0
 80053e2:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	689b      	ldr	r3, [r3, #8]
 80053e8:	f043 0201 	orr.w	r2, r3, #1
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80053f0:	2300      	movs	r3, #0
}
 80053f2:	4618      	mov	r0, r3
 80053f4:	370c      	adds	r7, #12
 80053f6:	46bd      	mov	sp, r7
 80053f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053fc:	4770      	bx	lr

080053fe <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80053fe:	b480      	push	{r7}
 8005400:	b083      	sub	sp, #12
 8005402:	af00      	add	r7, sp, #0
 8005404:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	689b      	ldr	r3, [r3, #8]
 800540a:	f023 0201 	bic.w	r2, r3, #1
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005412:	2300      	movs	r3, #0
}
 8005414:	4618      	mov	r0, r3
 8005416:	370c      	adds	r7, #12
 8005418:	46bd      	mov	sp, r7
 800541a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800541e:	4770      	bx	lr

08005420 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8005420:	b580      	push	{r7, lr}
 8005422:	b082      	sub	sp, #8
 8005424:	af00      	add	r7, sp, #0
 8005426:	6078      	str	r0, [r7, #4]
 8005428:	460b      	mov	r3, r1
 800542a:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	68db      	ldr	r3, [r3, #12]
 8005430:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005438:	78fb      	ldrb	r3, [r7, #3]
 800543a:	2b01      	cmp	r3, #1
 800543c:	d106      	bne.n	800544c <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	68db      	ldr	r3, [r3, #12]
 8005442:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	60da      	str	r2, [r3, #12]
 800544a:	e00b      	b.n	8005464 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 800544c:	78fb      	ldrb	r3, [r7, #3]
 800544e:	2b00      	cmp	r3, #0
 8005450:	d106      	bne.n	8005460 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	68db      	ldr	r3, [r3, #12]
 8005456:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	60da      	str	r2, [r3, #12]
 800545e:	e001      	b.n	8005464 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8005460:	2301      	movs	r3, #1
 8005462:	e003      	b.n	800546c <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8005464:	2032      	movs	r0, #50	; 0x32
 8005466:	f7fb fe8b 	bl	8001180 <HAL_Delay>

  return HAL_OK;
 800546a:	2300      	movs	r3, #0
}
 800546c:	4618      	mov	r0, r3
 800546e:	3708      	adds	r7, #8
 8005470:	46bd      	mov	sp, r7
 8005472:	bd80      	pop	{r7, pc}

08005474 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005474:	b084      	sub	sp, #16
 8005476:	b580      	push	{r7, lr}
 8005478:	b086      	sub	sp, #24
 800547a:	af00      	add	r7, sp, #0
 800547c:	6078      	str	r0, [r7, #4]
 800547e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8005482:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8005486:	2300      	movs	r3, #0
 8005488:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800548e:	2300      	movs	r3, #0
 8005490:	613b      	str	r3, [r7, #16]
 8005492:	e009      	b.n	80054a8 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8005494:	687a      	ldr	r2, [r7, #4]
 8005496:	693b      	ldr	r3, [r7, #16]
 8005498:	3340      	adds	r3, #64	; 0x40
 800549a:	009b      	lsls	r3, r3, #2
 800549c:	4413      	add	r3, r2
 800549e:	2200      	movs	r2, #0
 80054a0:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80054a2:	693b      	ldr	r3, [r7, #16]
 80054a4:	3301      	adds	r3, #1
 80054a6:	613b      	str	r3, [r7, #16]
 80054a8:	693b      	ldr	r3, [r7, #16]
 80054aa:	2b0e      	cmp	r3, #14
 80054ac:	d9f2      	bls.n	8005494 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80054ae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	d11c      	bne.n	80054ee <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80054ba:	685b      	ldr	r3, [r3, #4]
 80054bc:	68fa      	ldr	r2, [r7, #12]
 80054be:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80054c2:	f043 0302 	orr.w	r3, r3, #2
 80054c6:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054cc:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054d8:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054e4:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	639a      	str	r2, [r3, #56]	; 0x38
 80054ec:	e00b      	b.n	8005506 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054f2:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054fe:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800550c:	461a      	mov	r2, r3
 800550e:	2300      	movs	r3, #0
 8005510:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005518:	4619      	mov	r1, r3
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005520:	461a      	mov	r2, r3
 8005522:	680b      	ldr	r3, [r1, #0]
 8005524:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005526:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005528:	2b01      	cmp	r3, #1
 800552a:	d10c      	bne.n	8005546 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800552c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800552e:	2b00      	cmp	r3, #0
 8005530:	d104      	bne.n	800553c <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8005532:	2100      	movs	r1, #0
 8005534:	6878      	ldr	r0, [r7, #4]
 8005536:	f000 f949 	bl	80057cc <USB_SetDevSpeed>
 800553a:	e008      	b.n	800554e <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800553c:	2101      	movs	r1, #1
 800553e:	6878      	ldr	r0, [r7, #4]
 8005540:	f000 f944 	bl	80057cc <USB_SetDevSpeed>
 8005544:	e003      	b.n	800554e <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8005546:	2103      	movs	r1, #3
 8005548:	6878      	ldr	r0, [r7, #4]
 800554a:	f000 f93f 	bl	80057cc <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800554e:	2110      	movs	r1, #16
 8005550:	6878      	ldr	r0, [r7, #4]
 8005552:	f000 f8f3 	bl	800573c <USB_FlushTxFifo>
 8005556:	4603      	mov	r3, r0
 8005558:	2b00      	cmp	r3, #0
 800555a:	d001      	beq.n	8005560 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 800555c:	2301      	movs	r3, #1
 800555e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005560:	6878      	ldr	r0, [r7, #4]
 8005562:	f000 f911 	bl	8005788 <USB_FlushRxFifo>
 8005566:	4603      	mov	r3, r0
 8005568:	2b00      	cmp	r3, #0
 800556a:	d001      	beq.n	8005570 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 800556c:	2301      	movs	r3, #1
 800556e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005576:	461a      	mov	r2, r3
 8005578:	2300      	movs	r3, #0
 800557a:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005582:	461a      	mov	r2, r3
 8005584:	2300      	movs	r3, #0
 8005586:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800558e:	461a      	mov	r2, r3
 8005590:	2300      	movs	r3, #0
 8005592:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005594:	2300      	movs	r3, #0
 8005596:	613b      	str	r3, [r7, #16]
 8005598:	e043      	b.n	8005622 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800559a:	693b      	ldr	r3, [r7, #16]
 800559c:	015a      	lsls	r2, r3, #5
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	4413      	add	r3, r2
 80055a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80055ac:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80055b0:	d118      	bne.n	80055e4 <USB_DevInit+0x170>
    {
      if (i == 0U)
 80055b2:	693b      	ldr	r3, [r7, #16]
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	d10a      	bne.n	80055ce <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80055b8:	693b      	ldr	r3, [r7, #16]
 80055ba:	015a      	lsls	r2, r3, #5
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	4413      	add	r3, r2
 80055c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80055c4:	461a      	mov	r2, r3
 80055c6:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80055ca:	6013      	str	r3, [r2, #0]
 80055cc:	e013      	b.n	80055f6 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80055ce:	693b      	ldr	r3, [r7, #16]
 80055d0:	015a      	lsls	r2, r3, #5
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	4413      	add	r3, r2
 80055d6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80055da:	461a      	mov	r2, r3
 80055dc:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80055e0:	6013      	str	r3, [r2, #0]
 80055e2:	e008      	b.n	80055f6 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80055e4:	693b      	ldr	r3, [r7, #16]
 80055e6:	015a      	lsls	r2, r3, #5
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	4413      	add	r3, r2
 80055ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80055f0:	461a      	mov	r2, r3
 80055f2:	2300      	movs	r3, #0
 80055f4:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80055f6:	693b      	ldr	r3, [r7, #16]
 80055f8:	015a      	lsls	r2, r3, #5
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	4413      	add	r3, r2
 80055fe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005602:	461a      	mov	r2, r3
 8005604:	2300      	movs	r3, #0
 8005606:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8005608:	693b      	ldr	r3, [r7, #16]
 800560a:	015a      	lsls	r2, r3, #5
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	4413      	add	r3, r2
 8005610:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005614:	461a      	mov	r2, r3
 8005616:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800561a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800561c:	693b      	ldr	r3, [r7, #16]
 800561e:	3301      	adds	r3, #1
 8005620:	613b      	str	r3, [r7, #16]
 8005622:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005624:	693a      	ldr	r2, [r7, #16]
 8005626:	429a      	cmp	r2, r3
 8005628:	d3b7      	bcc.n	800559a <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800562a:	2300      	movs	r3, #0
 800562c:	613b      	str	r3, [r7, #16]
 800562e:	e043      	b.n	80056b8 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005630:	693b      	ldr	r3, [r7, #16]
 8005632:	015a      	lsls	r2, r3, #5
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	4413      	add	r3, r2
 8005638:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005642:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005646:	d118      	bne.n	800567a <USB_DevInit+0x206>
    {
      if (i == 0U)
 8005648:	693b      	ldr	r3, [r7, #16]
 800564a:	2b00      	cmp	r3, #0
 800564c:	d10a      	bne.n	8005664 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800564e:	693b      	ldr	r3, [r7, #16]
 8005650:	015a      	lsls	r2, r3, #5
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	4413      	add	r3, r2
 8005656:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800565a:	461a      	mov	r2, r3
 800565c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005660:	6013      	str	r3, [r2, #0]
 8005662:	e013      	b.n	800568c <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8005664:	693b      	ldr	r3, [r7, #16]
 8005666:	015a      	lsls	r2, r3, #5
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	4413      	add	r3, r2
 800566c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005670:	461a      	mov	r2, r3
 8005672:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005676:	6013      	str	r3, [r2, #0]
 8005678:	e008      	b.n	800568c <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800567a:	693b      	ldr	r3, [r7, #16]
 800567c:	015a      	lsls	r2, r3, #5
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	4413      	add	r3, r2
 8005682:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005686:	461a      	mov	r2, r3
 8005688:	2300      	movs	r3, #0
 800568a:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800568c:	693b      	ldr	r3, [r7, #16]
 800568e:	015a      	lsls	r2, r3, #5
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	4413      	add	r3, r2
 8005694:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005698:	461a      	mov	r2, r3
 800569a:	2300      	movs	r3, #0
 800569c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800569e:	693b      	ldr	r3, [r7, #16]
 80056a0:	015a      	lsls	r2, r3, #5
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	4413      	add	r3, r2
 80056a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80056aa:	461a      	mov	r2, r3
 80056ac:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80056b0:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80056b2:	693b      	ldr	r3, [r7, #16]
 80056b4:	3301      	adds	r3, #1
 80056b6:	613b      	str	r3, [r7, #16]
 80056b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056ba:	693a      	ldr	r2, [r7, #16]
 80056bc:	429a      	cmp	r2, r3
 80056be:	d3b7      	bcc.n	8005630 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80056c6:	691b      	ldr	r3, [r3, #16]
 80056c8:	68fa      	ldr	r2, [r7, #12]
 80056ca:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80056ce:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80056d2:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	2200      	movs	r2, #0
 80056d8:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80056e0:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80056e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	d105      	bne.n	80056f4 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	699b      	ldr	r3, [r3, #24]
 80056ec:	f043 0210 	orr.w	r2, r3, #16
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	699a      	ldr	r2, [r3, #24]
 80056f8:	4b0f      	ldr	r3, [pc, #60]	; (8005738 <USB_DevInit+0x2c4>)
 80056fa:	4313      	orrs	r3, r2
 80056fc:	687a      	ldr	r2, [r7, #4]
 80056fe:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8005700:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005702:	2b00      	cmp	r3, #0
 8005704:	d005      	beq.n	8005712 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	699b      	ldr	r3, [r3, #24]
 800570a:	f043 0208 	orr.w	r2, r3, #8
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8005712:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005714:	2b01      	cmp	r3, #1
 8005716:	d107      	bne.n	8005728 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	699b      	ldr	r3, [r3, #24]
 800571c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005720:	f043 0304 	orr.w	r3, r3, #4
 8005724:	687a      	ldr	r2, [r7, #4]
 8005726:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8005728:	7dfb      	ldrb	r3, [r7, #23]
}
 800572a:	4618      	mov	r0, r3
 800572c:	3718      	adds	r7, #24
 800572e:	46bd      	mov	sp, r7
 8005730:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005734:	b004      	add	sp, #16
 8005736:	4770      	bx	lr
 8005738:	803c3800 	.word	0x803c3800

0800573c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800573c:	b480      	push	{r7}
 800573e:	b085      	sub	sp, #20
 8005740:	af00      	add	r7, sp, #0
 8005742:	6078      	str	r0, [r7, #4]
 8005744:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8005746:	2300      	movs	r3, #0
 8005748:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800574a:	683b      	ldr	r3, [r7, #0]
 800574c:	019b      	lsls	r3, r3, #6
 800574e:	f043 0220 	orr.w	r2, r3, #32
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	3301      	adds	r3, #1
 800575a:	60fb      	str	r3, [r7, #12]
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	4a09      	ldr	r2, [pc, #36]	; (8005784 <USB_FlushTxFifo+0x48>)
 8005760:	4293      	cmp	r3, r2
 8005762:	d901      	bls.n	8005768 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8005764:	2303      	movs	r3, #3
 8005766:	e006      	b.n	8005776 <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	691b      	ldr	r3, [r3, #16]
 800576c:	f003 0320 	and.w	r3, r3, #32
 8005770:	2b20      	cmp	r3, #32
 8005772:	d0f0      	beq.n	8005756 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8005774:	2300      	movs	r3, #0
}
 8005776:	4618      	mov	r0, r3
 8005778:	3714      	adds	r7, #20
 800577a:	46bd      	mov	sp, r7
 800577c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005780:	4770      	bx	lr
 8005782:	bf00      	nop
 8005784:	00030d40 	.word	0x00030d40

08005788 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005788:	b480      	push	{r7}
 800578a:	b085      	sub	sp, #20
 800578c:	af00      	add	r7, sp, #0
 800578e:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8005790:	2300      	movs	r3, #0
 8005792:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	2210      	movs	r2, #16
 8005798:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	3301      	adds	r3, #1
 800579e:	60fb      	str	r3, [r7, #12]
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	4a09      	ldr	r2, [pc, #36]	; (80057c8 <USB_FlushRxFifo+0x40>)
 80057a4:	4293      	cmp	r3, r2
 80057a6:	d901      	bls.n	80057ac <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 80057a8:	2303      	movs	r3, #3
 80057aa:	e006      	b.n	80057ba <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	691b      	ldr	r3, [r3, #16]
 80057b0:	f003 0310 	and.w	r3, r3, #16
 80057b4:	2b10      	cmp	r3, #16
 80057b6:	d0f0      	beq.n	800579a <USB_FlushRxFifo+0x12>

  return HAL_OK;
 80057b8:	2300      	movs	r3, #0
}
 80057ba:	4618      	mov	r0, r3
 80057bc:	3714      	adds	r7, #20
 80057be:	46bd      	mov	sp, r7
 80057c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057c4:	4770      	bx	lr
 80057c6:	bf00      	nop
 80057c8:	00030d40 	.word	0x00030d40

080057cc <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80057cc:	b480      	push	{r7}
 80057ce:	b085      	sub	sp, #20
 80057d0:	af00      	add	r7, sp, #0
 80057d2:	6078      	str	r0, [r7, #4]
 80057d4:	460b      	mov	r3, r1
 80057d6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80057e2:	681a      	ldr	r2, [r3, #0]
 80057e4:	78fb      	ldrb	r3, [r7, #3]
 80057e6:	68f9      	ldr	r1, [r7, #12]
 80057e8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80057ec:	4313      	orrs	r3, r2
 80057ee:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80057f0:	2300      	movs	r3, #0
}
 80057f2:	4618      	mov	r0, r3
 80057f4:	3714      	adds	r7, #20
 80057f6:	46bd      	mov	sp, r7
 80057f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057fc:	4770      	bx	lr

080057fe <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg PCD_SPEED_HIGH: High speed mode
  *            @arg PCD_SPEED_FULL: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 80057fe:	b480      	push	{r7}
 8005800:	b087      	sub	sp, #28
 8005802:	af00      	add	r7, sp, #0
 8005804:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800580a:	693b      	ldr	r3, [r7, #16]
 800580c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005810:	689b      	ldr	r3, [r3, #8]
 8005812:	f003 0306 	and.w	r3, r3, #6
 8005816:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	2b00      	cmp	r3, #0
 800581c:	d102      	bne.n	8005824 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800581e:	2300      	movs	r3, #0
 8005820:	75fb      	strb	r3, [r7, #23]
 8005822:	e00a      	b.n	800583a <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	2b02      	cmp	r3, #2
 8005828:	d002      	beq.n	8005830 <USB_GetDevSpeed+0x32>
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	2b06      	cmp	r3, #6
 800582e:	d102      	bne.n	8005836 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8005830:	2302      	movs	r3, #2
 8005832:	75fb      	strb	r3, [r7, #23]
 8005834:	e001      	b.n	800583a <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8005836:	230f      	movs	r3, #15
 8005838:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800583a:	7dfb      	ldrb	r3, [r7, #23]
}
 800583c:	4618      	mov	r0, r3
 800583e:	371c      	adds	r7, #28
 8005840:	46bd      	mov	sp, r7
 8005842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005846:	4770      	bx	lr

08005848 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005848:	b480      	push	{r7}
 800584a:	b085      	sub	sp, #20
 800584c:	af00      	add	r7, sp, #0
 800584e:	6078      	str	r0, [r7, #4]
 8005850:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005856:	683b      	ldr	r3, [r7, #0]
 8005858:	781b      	ldrb	r3, [r3, #0]
 800585a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800585c:	683b      	ldr	r3, [r7, #0]
 800585e:	785b      	ldrb	r3, [r3, #1]
 8005860:	2b01      	cmp	r3, #1
 8005862:	d13a      	bne.n	80058da <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800586a:	69da      	ldr	r2, [r3, #28]
 800586c:	683b      	ldr	r3, [r7, #0]
 800586e:	781b      	ldrb	r3, [r3, #0]
 8005870:	f003 030f 	and.w	r3, r3, #15
 8005874:	2101      	movs	r1, #1
 8005876:	fa01 f303 	lsl.w	r3, r1, r3
 800587a:	b29b      	uxth	r3, r3
 800587c:	68f9      	ldr	r1, [r7, #12]
 800587e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005882:	4313      	orrs	r3, r2
 8005884:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8005886:	68bb      	ldr	r3, [r7, #8]
 8005888:	015a      	lsls	r2, r3, #5
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	4413      	add	r3, r2
 800588e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005898:	2b00      	cmp	r3, #0
 800589a:	d155      	bne.n	8005948 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800589c:	68bb      	ldr	r3, [r7, #8]
 800589e:	015a      	lsls	r2, r3, #5
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	4413      	add	r3, r2
 80058a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80058a8:	681a      	ldr	r2, [r3, #0]
 80058aa:	683b      	ldr	r3, [r7, #0]
 80058ac:	689b      	ldr	r3, [r3, #8]
 80058ae:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80058b2:	683b      	ldr	r3, [r7, #0]
 80058b4:	78db      	ldrb	r3, [r3, #3]
 80058b6:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80058b8:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80058ba:	68bb      	ldr	r3, [r7, #8]
 80058bc:	059b      	lsls	r3, r3, #22
 80058be:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80058c0:	4313      	orrs	r3, r2
 80058c2:	68ba      	ldr	r2, [r7, #8]
 80058c4:	0151      	lsls	r1, r2, #5
 80058c6:	68fa      	ldr	r2, [r7, #12]
 80058c8:	440a      	add	r2, r1
 80058ca:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80058ce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80058d2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80058d6:	6013      	str	r3, [r2, #0]
 80058d8:	e036      	b.n	8005948 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80058e0:	69da      	ldr	r2, [r3, #28]
 80058e2:	683b      	ldr	r3, [r7, #0]
 80058e4:	781b      	ldrb	r3, [r3, #0]
 80058e6:	f003 030f 	and.w	r3, r3, #15
 80058ea:	2101      	movs	r1, #1
 80058ec:	fa01 f303 	lsl.w	r3, r1, r3
 80058f0:	041b      	lsls	r3, r3, #16
 80058f2:	68f9      	ldr	r1, [r7, #12]
 80058f4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80058f8:	4313      	orrs	r3, r2
 80058fa:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80058fc:	68bb      	ldr	r3, [r7, #8]
 80058fe:	015a      	lsls	r2, r3, #5
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	4413      	add	r3, r2
 8005904:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800590e:	2b00      	cmp	r3, #0
 8005910:	d11a      	bne.n	8005948 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8005912:	68bb      	ldr	r3, [r7, #8]
 8005914:	015a      	lsls	r2, r3, #5
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	4413      	add	r3, r2
 800591a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800591e:	681a      	ldr	r2, [r3, #0]
 8005920:	683b      	ldr	r3, [r7, #0]
 8005922:	689b      	ldr	r3, [r3, #8]
 8005924:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8005928:	683b      	ldr	r3, [r7, #0]
 800592a:	78db      	ldrb	r3, [r3, #3]
 800592c:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800592e:	430b      	orrs	r3, r1
 8005930:	4313      	orrs	r3, r2
 8005932:	68ba      	ldr	r2, [r7, #8]
 8005934:	0151      	lsls	r1, r2, #5
 8005936:	68fa      	ldr	r2, [r7, #12]
 8005938:	440a      	add	r2, r1
 800593a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800593e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005942:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005946:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8005948:	2300      	movs	r3, #0
}
 800594a:	4618      	mov	r0, r3
 800594c:	3714      	adds	r7, #20
 800594e:	46bd      	mov	sp, r7
 8005950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005954:	4770      	bx	lr
	...

08005958 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005958:	b480      	push	{r7}
 800595a:	b085      	sub	sp, #20
 800595c:	af00      	add	r7, sp, #0
 800595e:	6078      	str	r0, [r7, #4]
 8005960:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005966:	683b      	ldr	r3, [r7, #0]
 8005968:	781b      	ldrb	r3, [r3, #0]
 800596a:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800596c:	683b      	ldr	r3, [r7, #0]
 800596e:	785b      	ldrb	r3, [r3, #1]
 8005970:	2b01      	cmp	r3, #1
 8005972:	d161      	bne.n	8005a38 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005974:	68bb      	ldr	r3, [r7, #8]
 8005976:	015a      	lsls	r2, r3, #5
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	4413      	add	r3, r2
 800597c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005986:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800598a:	d11f      	bne.n	80059cc <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800598c:	68bb      	ldr	r3, [r7, #8]
 800598e:	015a      	lsls	r2, r3, #5
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	4413      	add	r3, r2
 8005994:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	68ba      	ldr	r2, [r7, #8]
 800599c:	0151      	lsls	r1, r2, #5
 800599e:	68fa      	ldr	r2, [r7, #12]
 80059a0:	440a      	add	r2, r1
 80059a2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80059a6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80059aa:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 80059ac:	68bb      	ldr	r3, [r7, #8]
 80059ae:	015a      	lsls	r2, r3, #5
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	4413      	add	r3, r2
 80059b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	68ba      	ldr	r2, [r7, #8]
 80059bc:	0151      	lsls	r1, r2, #5
 80059be:	68fa      	ldr	r2, [r7, #12]
 80059c0:	440a      	add	r2, r1
 80059c2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80059c6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80059ca:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80059d2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80059d4:	683b      	ldr	r3, [r7, #0]
 80059d6:	781b      	ldrb	r3, [r3, #0]
 80059d8:	f003 030f 	and.w	r3, r3, #15
 80059dc:	2101      	movs	r1, #1
 80059de:	fa01 f303 	lsl.w	r3, r1, r3
 80059e2:	b29b      	uxth	r3, r3
 80059e4:	43db      	mvns	r3, r3
 80059e6:	68f9      	ldr	r1, [r7, #12]
 80059e8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80059ec:	4013      	ands	r3, r2
 80059ee:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80059f6:	69da      	ldr	r2, [r3, #28]
 80059f8:	683b      	ldr	r3, [r7, #0]
 80059fa:	781b      	ldrb	r3, [r3, #0]
 80059fc:	f003 030f 	and.w	r3, r3, #15
 8005a00:	2101      	movs	r1, #1
 8005a02:	fa01 f303 	lsl.w	r3, r1, r3
 8005a06:	b29b      	uxth	r3, r3
 8005a08:	43db      	mvns	r3, r3
 8005a0a:	68f9      	ldr	r1, [r7, #12]
 8005a0c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005a10:	4013      	ands	r3, r2
 8005a12:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8005a14:	68bb      	ldr	r3, [r7, #8]
 8005a16:	015a      	lsls	r2, r3, #5
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	4413      	add	r3, r2
 8005a1c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a20:	681a      	ldr	r2, [r3, #0]
 8005a22:	68bb      	ldr	r3, [r7, #8]
 8005a24:	0159      	lsls	r1, r3, #5
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	440b      	add	r3, r1
 8005a2a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a2e:	4619      	mov	r1, r3
 8005a30:	4b35      	ldr	r3, [pc, #212]	; (8005b08 <USB_DeactivateEndpoint+0x1b0>)
 8005a32:	4013      	ands	r3, r2
 8005a34:	600b      	str	r3, [r1, #0]
 8005a36:	e060      	b.n	8005afa <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005a38:	68bb      	ldr	r3, [r7, #8]
 8005a3a:	015a      	lsls	r2, r3, #5
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	4413      	add	r3, r2
 8005a40:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005a4a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005a4e:	d11f      	bne.n	8005a90 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8005a50:	68bb      	ldr	r3, [r7, #8]
 8005a52:	015a      	lsls	r2, r3, #5
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	4413      	add	r3, r2
 8005a58:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	68ba      	ldr	r2, [r7, #8]
 8005a60:	0151      	lsls	r1, r2, #5
 8005a62:	68fa      	ldr	r2, [r7, #12]
 8005a64:	440a      	add	r2, r1
 8005a66:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005a6a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005a6e:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8005a70:	68bb      	ldr	r3, [r7, #8]
 8005a72:	015a      	lsls	r2, r3, #5
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	4413      	add	r3, r2
 8005a78:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	68ba      	ldr	r2, [r7, #8]
 8005a80:	0151      	lsls	r1, r2, #5
 8005a82:	68fa      	ldr	r2, [r7, #12]
 8005a84:	440a      	add	r2, r1
 8005a86:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005a8a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005a8e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005a96:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005a98:	683b      	ldr	r3, [r7, #0]
 8005a9a:	781b      	ldrb	r3, [r3, #0]
 8005a9c:	f003 030f 	and.w	r3, r3, #15
 8005aa0:	2101      	movs	r1, #1
 8005aa2:	fa01 f303 	lsl.w	r3, r1, r3
 8005aa6:	041b      	lsls	r3, r3, #16
 8005aa8:	43db      	mvns	r3, r3
 8005aaa:	68f9      	ldr	r1, [r7, #12]
 8005aac:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005ab0:	4013      	ands	r3, r2
 8005ab2:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005aba:	69da      	ldr	r2, [r3, #28]
 8005abc:	683b      	ldr	r3, [r7, #0]
 8005abe:	781b      	ldrb	r3, [r3, #0]
 8005ac0:	f003 030f 	and.w	r3, r3, #15
 8005ac4:	2101      	movs	r1, #1
 8005ac6:	fa01 f303 	lsl.w	r3, r1, r3
 8005aca:	041b      	lsls	r3, r3, #16
 8005acc:	43db      	mvns	r3, r3
 8005ace:	68f9      	ldr	r1, [r7, #12]
 8005ad0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005ad4:	4013      	ands	r3, r2
 8005ad6:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8005ad8:	68bb      	ldr	r3, [r7, #8]
 8005ada:	015a      	lsls	r2, r3, #5
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	4413      	add	r3, r2
 8005ae0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ae4:	681a      	ldr	r2, [r3, #0]
 8005ae6:	68bb      	ldr	r3, [r7, #8]
 8005ae8:	0159      	lsls	r1, r3, #5
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	440b      	add	r3, r1
 8005aee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005af2:	4619      	mov	r1, r3
 8005af4:	4b05      	ldr	r3, [pc, #20]	; (8005b0c <USB_DeactivateEndpoint+0x1b4>)
 8005af6:	4013      	ands	r3, r2
 8005af8:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8005afa:	2300      	movs	r3, #0
}
 8005afc:	4618      	mov	r0, r3
 8005afe:	3714      	adds	r7, #20
 8005b00:	46bd      	mov	sp, r7
 8005b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b06:	4770      	bx	lr
 8005b08:	ec337800 	.word	0xec337800
 8005b0c:	eff37800 	.word	0xeff37800

08005b10 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8005b10:	b580      	push	{r7, lr}
 8005b12:	b08a      	sub	sp, #40	; 0x28
 8005b14:	af02      	add	r7, sp, #8
 8005b16:	60f8      	str	r0, [r7, #12]
 8005b18:	60b9      	str	r1, [r7, #8]
 8005b1a:	4613      	mov	r3, r2
 8005b1c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8005b22:	68bb      	ldr	r3, [r7, #8]
 8005b24:	781b      	ldrb	r3, [r3, #0]
 8005b26:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005b28:	68bb      	ldr	r3, [r7, #8]
 8005b2a:	785b      	ldrb	r3, [r3, #1]
 8005b2c:	2b01      	cmp	r3, #1
 8005b2e:	f040 815c 	bne.w	8005dea <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8005b32:	68bb      	ldr	r3, [r7, #8]
 8005b34:	695b      	ldr	r3, [r3, #20]
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	d132      	bne.n	8005ba0 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005b3a:	69bb      	ldr	r3, [r7, #24]
 8005b3c:	015a      	lsls	r2, r3, #5
 8005b3e:	69fb      	ldr	r3, [r7, #28]
 8005b40:	4413      	add	r3, r2
 8005b42:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b46:	691b      	ldr	r3, [r3, #16]
 8005b48:	69ba      	ldr	r2, [r7, #24]
 8005b4a:	0151      	lsls	r1, r2, #5
 8005b4c:	69fa      	ldr	r2, [r7, #28]
 8005b4e:	440a      	add	r2, r1
 8005b50:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005b54:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005b58:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005b5c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005b5e:	69bb      	ldr	r3, [r7, #24]
 8005b60:	015a      	lsls	r2, r3, #5
 8005b62:	69fb      	ldr	r3, [r7, #28]
 8005b64:	4413      	add	r3, r2
 8005b66:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b6a:	691b      	ldr	r3, [r3, #16]
 8005b6c:	69ba      	ldr	r2, [r7, #24]
 8005b6e:	0151      	lsls	r1, r2, #5
 8005b70:	69fa      	ldr	r2, [r7, #28]
 8005b72:	440a      	add	r2, r1
 8005b74:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005b78:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005b7c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005b7e:	69bb      	ldr	r3, [r7, #24]
 8005b80:	015a      	lsls	r2, r3, #5
 8005b82:	69fb      	ldr	r3, [r7, #28]
 8005b84:	4413      	add	r3, r2
 8005b86:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b8a:	691b      	ldr	r3, [r3, #16]
 8005b8c:	69ba      	ldr	r2, [r7, #24]
 8005b8e:	0151      	lsls	r1, r2, #5
 8005b90:	69fa      	ldr	r2, [r7, #28]
 8005b92:	440a      	add	r2, r1
 8005b94:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005b98:	0cdb      	lsrs	r3, r3, #19
 8005b9a:	04db      	lsls	r3, r3, #19
 8005b9c:	6113      	str	r3, [r2, #16]
 8005b9e:	e074      	b.n	8005c8a <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005ba0:	69bb      	ldr	r3, [r7, #24]
 8005ba2:	015a      	lsls	r2, r3, #5
 8005ba4:	69fb      	ldr	r3, [r7, #28]
 8005ba6:	4413      	add	r3, r2
 8005ba8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005bac:	691b      	ldr	r3, [r3, #16]
 8005bae:	69ba      	ldr	r2, [r7, #24]
 8005bb0:	0151      	lsls	r1, r2, #5
 8005bb2:	69fa      	ldr	r2, [r7, #28]
 8005bb4:	440a      	add	r2, r1
 8005bb6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005bba:	0cdb      	lsrs	r3, r3, #19
 8005bbc:	04db      	lsls	r3, r3, #19
 8005bbe:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005bc0:	69bb      	ldr	r3, [r7, #24]
 8005bc2:	015a      	lsls	r2, r3, #5
 8005bc4:	69fb      	ldr	r3, [r7, #28]
 8005bc6:	4413      	add	r3, r2
 8005bc8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005bcc:	691b      	ldr	r3, [r3, #16]
 8005bce:	69ba      	ldr	r2, [r7, #24]
 8005bd0:	0151      	lsls	r1, r2, #5
 8005bd2:	69fa      	ldr	r2, [r7, #28]
 8005bd4:	440a      	add	r2, r1
 8005bd6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005bda:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005bde:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005be2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8005be4:	69bb      	ldr	r3, [r7, #24]
 8005be6:	015a      	lsls	r2, r3, #5
 8005be8:	69fb      	ldr	r3, [r7, #28]
 8005bea:	4413      	add	r3, r2
 8005bec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005bf0:	691a      	ldr	r2, [r3, #16]
 8005bf2:	68bb      	ldr	r3, [r7, #8]
 8005bf4:	6959      	ldr	r1, [r3, #20]
 8005bf6:	68bb      	ldr	r3, [r7, #8]
 8005bf8:	689b      	ldr	r3, [r3, #8]
 8005bfa:	440b      	add	r3, r1
 8005bfc:	1e59      	subs	r1, r3, #1
 8005bfe:	68bb      	ldr	r3, [r7, #8]
 8005c00:	689b      	ldr	r3, [r3, #8]
 8005c02:	fbb1 f3f3 	udiv	r3, r1, r3
 8005c06:	04d9      	lsls	r1, r3, #19
 8005c08:	4b9d      	ldr	r3, [pc, #628]	; (8005e80 <USB_EPStartXfer+0x370>)
 8005c0a:	400b      	ands	r3, r1
 8005c0c:	69b9      	ldr	r1, [r7, #24]
 8005c0e:	0148      	lsls	r0, r1, #5
 8005c10:	69f9      	ldr	r1, [r7, #28]
 8005c12:	4401      	add	r1, r0
 8005c14:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005c18:	4313      	orrs	r3, r2
 8005c1a:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8005c1c:	69bb      	ldr	r3, [r7, #24]
 8005c1e:	015a      	lsls	r2, r3, #5
 8005c20:	69fb      	ldr	r3, [r7, #28]
 8005c22:	4413      	add	r3, r2
 8005c24:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c28:	691a      	ldr	r2, [r3, #16]
 8005c2a:	68bb      	ldr	r3, [r7, #8]
 8005c2c:	695b      	ldr	r3, [r3, #20]
 8005c2e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005c32:	69b9      	ldr	r1, [r7, #24]
 8005c34:	0148      	lsls	r0, r1, #5
 8005c36:	69f9      	ldr	r1, [r7, #28]
 8005c38:	4401      	add	r1, r0
 8005c3a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005c3e:	4313      	orrs	r3, r2
 8005c40:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8005c42:	68bb      	ldr	r3, [r7, #8]
 8005c44:	78db      	ldrb	r3, [r3, #3]
 8005c46:	2b01      	cmp	r3, #1
 8005c48:	d11f      	bne.n	8005c8a <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8005c4a:	69bb      	ldr	r3, [r7, #24]
 8005c4c:	015a      	lsls	r2, r3, #5
 8005c4e:	69fb      	ldr	r3, [r7, #28]
 8005c50:	4413      	add	r3, r2
 8005c52:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c56:	691b      	ldr	r3, [r3, #16]
 8005c58:	69ba      	ldr	r2, [r7, #24]
 8005c5a:	0151      	lsls	r1, r2, #5
 8005c5c:	69fa      	ldr	r2, [r7, #28]
 8005c5e:	440a      	add	r2, r1
 8005c60:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005c64:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8005c68:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8005c6a:	69bb      	ldr	r3, [r7, #24]
 8005c6c:	015a      	lsls	r2, r3, #5
 8005c6e:	69fb      	ldr	r3, [r7, #28]
 8005c70:	4413      	add	r3, r2
 8005c72:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c76:	691b      	ldr	r3, [r3, #16]
 8005c78:	69ba      	ldr	r2, [r7, #24]
 8005c7a:	0151      	lsls	r1, r2, #5
 8005c7c:	69fa      	ldr	r2, [r7, #28]
 8005c7e:	440a      	add	r2, r1
 8005c80:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005c84:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005c88:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8005c8a:	79fb      	ldrb	r3, [r7, #7]
 8005c8c:	2b01      	cmp	r3, #1
 8005c8e:	d14b      	bne.n	8005d28 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8005c90:	68bb      	ldr	r3, [r7, #8]
 8005c92:	691b      	ldr	r3, [r3, #16]
 8005c94:	2b00      	cmp	r3, #0
 8005c96:	d009      	beq.n	8005cac <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8005c98:	69bb      	ldr	r3, [r7, #24]
 8005c9a:	015a      	lsls	r2, r3, #5
 8005c9c:	69fb      	ldr	r3, [r7, #28]
 8005c9e:	4413      	add	r3, r2
 8005ca0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ca4:	461a      	mov	r2, r3
 8005ca6:	68bb      	ldr	r3, [r7, #8]
 8005ca8:	691b      	ldr	r3, [r3, #16]
 8005caa:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8005cac:	68bb      	ldr	r3, [r7, #8]
 8005cae:	78db      	ldrb	r3, [r3, #3]
 8005cb0:	2b01      	cmp	r3, #1
 8005cb2:	d128      	bne.n	8005d06 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005cb4:	69fb      	ldr	r3, [r7, #28]
 8005cb6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005cba:	689b      	ldr	r3, [r3, #8]
 8005cbc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005cc0:	2b00      	cmp	r3, #0
 8005cc2:	d110      	bne.n	8005ce6 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8005cc4:	69bb      	ldr	r3, [r7, #24]
 8005cc6:	015a      	lsls	r2, r3, #5
 8005cc8:	69fb      	ldr	r3, [r7, #28]
 8005cca:	4413      	add	r3, r2
 8005ccc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	69ba      	ldr	r2, [r7, #24]
 8005cd4:	0151      	lsls	r1, r2, #5
 8005cd6:	69fa      	ldr	r2, [r7, #28]
 8005cd8:	440a      	add	r2, r1
 8005cda:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005cde:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005ce2:	6013      	str	r3, [r2, #0]
 8005ce4:	e00f      	b.n	8005d06 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8005ce6:	69bb      	ldr	r3, [r7, #24]
 8005ce8:	015a      	lsls	r2, r3, #5
 8005cea:	69fb      	ldr	r3, [r7, #28]
 8005cec:	4413      	add	r3, r2
 8005cee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	69ba      	ldr	r2, [r7, #24]
 8005cf6:	0151      	lsls	r1, r2, #5
 8005cf8:	69fa      	ldr	r2, [r7, #28]
 8005cfa:	440a      	add	r2, r1
 8005cfc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005d00:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005d04:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005d06:	69bb      	ldr	r3, [r7, #24]
 8005d08:	015a      	lsls	r2, r3, #5
 8005d0a:	69fb      	ldr	r3, [r7, #28]
 8005d0c:	4413      	add	r3, r2
 8005d0e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	69ba      	ldr	r2, [r7, #24]
 8005d16:	0151      	lsls	r1, r2, #5
 8005d18:	69fa      	ldr	r2, [r7, #28]
 8005d1a:	440a      	add	r2, r1
 8005d1c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005d20:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005d24:	6013      	str	r3, [r2, #0]
 8005d26:	e12f      	b.n	8005f88 <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005d28:	69bb      	ldr	r3, [r7, #24]
 8005d2a:	015a      	lsls	r2, r3, #5
 8005d2c:	69fb      	ldr	r3, [r7, #28]
 8005d2e:	4413      	add	r3, r2
 8005d30:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	69ba      	ldr	r2, [r7, #24]
 8005d38:	0151      	lsls	r1, r2, #5
 8005d3a:	69fa      	ldr	r2, [r7, #28]
 8005d3c:	440a      	add	r2, r1
 8005d3e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005d42:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005d46:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005d48:	68bb      	ldr	r3, [r7, #8]
 8005d4a:	78db      	ldrb	r3, [r3, #3]
 8005d4c:	2b01      	cmp	r3, #1
 8005d4e:	d015      	beq.n	8005d7c <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8005d50:	68bb      	ldr	r3, [r7, #8]
 8005d52:	695b      	ldr	r3, [r3, #20]
 8005d54:	2b00      	cmp	r3, #0
 8005d56:	f000 8117 	beq.w	8005f88 <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8005d5a:	69fb      	ldr	r3, [r7, #28]
 8005d5c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005d60:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005d62:	68bb      	ldr	r3, [r7, #8]
 8005d64:	781b      	ldrb	r3, [r3, #0]
 8005d66:	f003 030f 	and.w	r3, r3, #15
 8005d6a:	2101      	movs	r1, #1
 8005d6c:	fa01 f303 	lsl.w	r3, r1, r3
 8005d70:	69f9      	ldr	r1, [r7, #28]
 8005d72:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005d76:	4313      	orrs	r3, r2
 8005d78:	634b      	str	r3, [r1, #52]	; 0x34
 8005d7a:	e105      	b.n	8005f88 <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005d7c:	69fb      	ldr	r3, [r7, #28]
 8005d7e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005d82:	689b      	ldr	r3, [r3, #8]
 8005d84:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	d110      	bne.n	8005dae <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8005d8c:	69bb      	ldr	r3, [r7, #24]
 8005d8e:	015a      	lsls	r2, r3, #5
 8005d90:	69fb      	ldr	r3, [r7, #28]
 8005d92:	4413      	add	r3, r2
 8005d94:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	69ba      	ldr	r2, [r7, #24]
 8005d9c:	0151      	lsls	r1, r2, #5
 8005d9e:	69fa      	ldr	r2, [r7, #28]
 8005da0:	440a      	add	r2, r1
 8005da2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005da6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005daa:	6013      	str	r3, [r2, #0]
 8005dac:	e00f      	b.n	8005dce <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8005dae:	69bb      	ldr	r3, [r7, #24]
 8005db0:	015a      	lsls	r2, r3, #5
 8005db2:	69fb      	ldr	r3, [r7, #28]
 8005db4:	4413      	add	r3, r2
 8005db6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	69ba      	ldr	r2, [r7, #24]
 8005dbe:	0151      	lsls	r1, r2, #5
 8005dc0:	69fa      	ldr	r2, [r7, #28]
 8005dc2:	440a      	add	r2, r1
 8005dc4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005dc8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005dcc:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8005dce:	68bb      	ldr	r3, [r7, #8]
 8005dd0:	68d9      	ldr	r1, [r3, #12]
 8005dd2:	68bb      	ldr	r3, [r7, #8]
 8005dd4:	781a      	ldrb	r2, [r3, #0]
 8005dd6:	68bb      	ldr	r3, [r7, #8]
 8005dd8:	695b      	ldr	r3, [r3, #20]
 8005dda:	b298      	uxth	r0, r3
 8005ddc:	79fb      	ldrb	r3, [r7, #7]
 8005dde:	9300      	str	r3, [sp, #0]
 8005de0:	4603      	mov	r3, r0
 8005de2:	68f8      	ldr	r0, [r7, #12]
 8005de4:	f000 fa2b 	bl	800623e <USB_WritePacket>
 8005de8:	e0ce      	b.n	8005f88 <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8005dea:	69bb      	ldr	r3, [r7, #24]
 8005dec:	015a      	lsls	r2, r3, #5
 8005dee:	69fb      	ldr	r3, [r7, #28]
 8005df0:	4413      	add	r3, r2
 8005df2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005df6:	691b      	ldr	r3, [r3, #16]
 8005df8:	69ba      	ldr	r2, [r7, #24]
 8005dfa:	0151      	lsls	r1, r2, #5
 8005dfc:	69fa      	ldr	r2, [r7, #28]
 8005dfe:	440a      	add	r2, r1
 8005e00:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005e04:	0cdb      	lsrs	r3, r3, #19
 8005e06:	04db      	lsls	r3, r3, #19
 8005e08:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8005e0a:	69bb      	ldr	r3, [r7, #24]
 8005e0c:	015a      	lsls	r2, r3, #5
 8005e0e:	69fb      	ldr	r3, [r7, #28]
 8005e10:	4413      	add	r3, r2
 8005e12:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e16:	691b      	ldr	r3, [r3, #16]
 8005e18:	69ba      	ldr	r2, [r7, #24]
 8005e1a:	0151      	lsls	r1, r2, #5
 8005e1c:	69fa      	ldr	r2, [r7, #28]
 8005e1e:	440a      	add	r2, r1
 8005e20:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005e24:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005e28:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005e2c:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8005e2e:	68bb      	ldr	r3, [r7, #8]
 8005e30:	695b      	ldr	r3, [r3, #20]
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	d126      	bne.n	8005e84 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8005e36:	69bb      	ldr	r3, [r7, #24]
 8005e38:	015a      	lsls	r2, r3, #5
 8005e3a:	69fb      	ldr	r3, [r7, #28]
 8005e3c:	4413      	add	r3, r2
 8005e3e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e42:	691a      	ldr	r2, [r3, #16]
 8005e44:	68bb      	ldr	r3, [r7, #8]
 8005e46:	689b      	ldr	r3, [r3, #8]
 8005e48:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005e4c:	69b9      	ldr	r1, [r7, #24]
 8005e4e:	0148      	lsls	r0, r1, #5
 8005e50:	69f9      	ldr	r1, [r7, #28]
 8005e52:	4401      	add	r1, r0
 8005e54:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005e58:	4313      	orrs	r3, r2
 8005e5a:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005e5c:	69bb      	ldr	r3, [r7, #24]
 8005e5e:	015a      	lsls	r2, r3, #5
 8005e60:	69fb      	ldr	r3, [r7, #28]
 8005e62:	4413      	add	r3, r2
 8005e64:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e68:	691b      	ldr	r3, [r3, #16]
 8005e6a:	69ba      	ldr	r2, [r7, #24]
 8005e6c:	0151      	lsls	r1, r2, #5
 8005e6e:	69fa      	ldr	r2, [r7, #28]
 8005e70:	440a      	add	r2, r1
 8005e72:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005e76:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005e7a:	6113      	str	r3, [r2, #16]
 8005e7c:	e036      	b.n	8005eec <USB_EPStartXfer+0x3dc>
 8005e7e:	bf00      	nop
 8005e80:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8005e84:	68bb      	ldr	r3, [r7, #8]
 8005e86:	695a      	ldr	r2, [r3, #20]
 8005e88:	68bb      	ldr	r3, [r7, #8]
 8005e8a:	689b      	ldr	r3, [r3, #8]
 8005e8c:	4413      	add	r3, r2
 8005e8e:	1e5a      	subs	r2, r3, #1
 8005e90:	68bb      	ldr	r3, [r7, #8]
 8005e92:	689b      	ldr	r3, [r3, #8]
 8005e94:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e98:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8005e9a:	69bb      	ldr	r3, [r7, #24]
 8005e9c:	015a      	lsls	r2, r3, #5
 8005e9e:	69fb      	ldr	r3, [r7, #28]
 8005ea0:	4413      	add	r3, r2
 8005ea2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ea6:	691a      	ldr	r2, [r3, #16]
 8005ea8:	8afb      	ldrh	r3, [r7, #22]
 8005eaa:	04d9      	lsls	r1, r3, #19
 8005eac:	4b39      	ldr	r3, [pc, #228]	; (8005f94 <USB_EPStartXfer+0x484>)
 8005eae:	400b      	ands	r3, r1
 8005eb0:	69b9      	ldr	r1, [r7, #24]
 8005eb2:	0148      	lsls	r0, r1, #5
 8005eb4:	69f9      	ldr	r1, [r7, #28]
 8005eb6:	4401      	add	r1, r0
 8005eb8:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005ebc:	4313      	orrs	r3, r2
 8005ebe:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 8005ec0:	69bb      	ldr	r3, [r7, #24]
 8005ec2:	015a      	lsls	r2, r3, #5
 8005ec4:	69fb      	ldr	r3, [r7, #28]
 8005ec6:	4413      	add	r3, r2
 8005ec8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ecc:	691a      	ldr	r2, [r3, #16]
 8005ece:	68bb      	ldr	r3, [r7, #8]
 8005ed0:	689b      	ldr	r3, [r3, #8]
 8005ed2:	8af9      	ldrh	r1, [r7, #22]
 8005ed4:	fb01 f303 	mul.w	r3, r1, r3
 8005ed8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005edc:	69b9      	ldr	r1, [r7, #24]
 8005ede:	0148      	lsls	r0, r1, #5
 8005ee0:	69f9      	ldr	r1, [r7, #28]
 8005ee2:	4401      	add	r1, r0
 8005ee4:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005ee8:	4313      	orrs	r3, r2
 8005eea:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8005eec:	79fb      	ldrb	r3, [r7, #7]
 8005eee:	2b01      	cmp	r3, #1
 8005ef0:	d10d      	bne.n	8005f0e <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8005ef2:	68bb      	ldr	r3, [r7, #8]
 8005ef4:	68db      	ldr	r3, [r3, #12]
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	d009      	beq.n	8005f0e <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8005efa:	68bb      	ldr	r3, [r7, #8]
 8005efc:	68d9      	ldr	r1, [r3, #12]
 8005efe:	69bb      	ldr	r3, [r7, #24]
 8005f00:	015a      	lsls	r2, r3, #5
 8005f02:	69fb      	ldr	r3, [r7, #28]
 8005f04:	4413      	add	r3, r2
 8005f06:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f0a:	460a      	mov	r2, r1
 8005f0c:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8005f0e:	68bb      	ldr	r3, [r7, #8]
 8005f10:	78db      	ldrb	r3, [r3, #3]
 8005f12:	2b01      	cmp	r3, #1
 8005f14:	d128      	bne.n	8005f68 <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005f16:	69fb      	ldr	r3, [r7, #28]
 8005f18:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005f1c:	689b      	ldr	r3, [r3, #8]
 8005f1e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	d110      	bne.n	8005f48 <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8005f26:	69bb      	ldr	r3, [r7, #24]
 8005f28:	015a      	lsls	r2, r3, #5
 8005f2a:	69fb      	ldr	r3, [r7, #28]
 8005f2c:	4413      	add	r3, r2
 8005f2e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	69ba      	ldr	r2, [r7, #24]
 8005f36:	0151      	lsls	r1, r2, #5
 8005f38:	69fa      	ldr	r2, [r7, #28]
 8005f3a:	440a      	add	r2, r1
 8005f3c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005f40:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005f44:	6013      	str	r3, [r2, #0]
 8005f46:	e00f      	b.n	8005f68 <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8005f48:	69bb      	ldr	r3, [r7, #24]
 8005f4a:	015a      	lsls	r2, r3, #5
 8005f4c:	69fb      	ldr	r3, [r7, #28]
 8005f4e:	4413      	add	r3, r2
 8005f50:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	69ba      	ldr	r2, [r7, #24]
 8005f58:	0151      	lsls	r1, r2, #5
 8005f5a:	69fa      	ldr	r2, [r7, #28]
 8005f5c:	440a      	add	r2, r1
 8005f5e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005f62:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005f66:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8005f68:	69bb      	ldr	r3, [r7, #24]
 8005f6a:	015a      	lsls	r2, r3, #5
 8005f6c:	69fb      	ldr	r3, [r7, #28]
 8005f6e:	4413      	add	r3, r2
 8005f70:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	69ba      	ldr	r2, [r7, #24]
 8005f78:	0151      	lsls	r1, r2, #5
 8005f7a:	69fa      	ldr	r2, [r7, #28]
 8005f7c:	440a      	add	r2, r1
 8005f7e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005f82:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005f86:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005f88:	2300      	movs	r3, #0
}
 8005f8a:	4618      	mov	r0, r3
 8005f8c:	3720      	adds	r7, #32
 8005f8e:	46bd      	mov	sp, r7
 8005f90:	bd80      	pop	{r7, pc}
 8005f92:	bf00      	nop
 8005f94:	1ff80000 	.word	0x1ff80000

08005f98 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8005f98:	b480      	push	{r7}
 8005f9a:	b087      	sub	sp, #28
 8005f9c:	af00      	add	r7, sp, #0
 8005f9e:	60f8      	str	r0, [r7, #12]
 8005fa0:	60b9      	str	r1, [r7, #8]
 8005fa2:	4613      	mov	r3, r2
 8005fa4:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8005faa:	68bb      	ldr	r3, [r7, #8]
 8005fac:	781b      	ldrb	r3, [r3, #0]
 8005fae:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005fb0:	68bb      	ldr	r3, [r7, #8]
 8005fb2:	785b      	ldrb	r3, [r3, #1]
 8005fb4:	2b01      	cmp	r3, #1
 8005fb6:	f040 80cd 	bne.w	8006154 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8005fba:	68bb      	ldr	r3, [r7, #8]
 8005fbc:	695b      	ldr	r3, [r3, #20]
 8005fbe:	2b00      	cmp	r3, #0
 8005fc0:	d132      	bne.n	8006028 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005fc2:	693b      	ldr	r3, [r7, #16]
 8005fc4:	015a      	lsls	r2, r3, #5
 8005fc6:	697b      	ldr	r3, [r7, #20]
 8005fc8:	4413      	add	r3, r2
 8005fca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005fce:	691b      	ldr	r3, [r3, #16]
 8005fd0:	693a      	ldr	r2, [r7, #16]
 8005fd2:	0151      	lsls	r1, r2, #5
 8005fd4:	697a      	ldr	r2, [r7, #20]
 8005fd6:	440a      	add	r2, r1
 8005fd8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005fdc:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005fe0:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005fe4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005fe6:	693b      	ldr	r3, [r7, #16]
 8005fe8:	015a      	lsls	r2, r3, #5
 8005fea:	697b      	ldr	r3, [r7, #20]
 8005fec:	4413      	add	r3, r2
 8005fee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ff2:	691b      	ldr	r3, [r3, #16]
 8005ff4:	693a      	ldr	r2, [r7, #16]
 8005ff6:	0151      	lsls	r1, r2, #5
 8005ff8:	697a      	ldr	r2, [r7, #20]
 8005ffa:	440a      	add	r2, r1
 8005ffc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006000:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006004:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006006:	693b      	ldr	r3, [r7, #16]
 8006008:	015a      	lsls	r2, r3, #5
 800600a:	697b      	ldr	r3, [r7, #20]
 800600c:	4413      	add	r3, r2
 800600e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006012:	691b      	ldr	r3, [r3, #16]
 8006014:	693a      	ldr	r2, [r7, #16]
 8006016:	0151      	lsls	r1, r2, #5
 8006018:	697a      	ldr	r2, [r7, #20]
 800601a:	440a      	add	r2, r1
 800601c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006020:	0cdb      	lsrs	r3, r3, #19
 8006022:	04db      	lsls	r3, r3, #19
 8006024:	6113      	str	r3, [r2, #16]
 8006026:	e04e      	b.n	80060c6 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006028:	693b      	ldr	r3, [r7, #16]
 800602a:	015a      	lsls	r2, r3, #5
 800602c:	697b      	ldr	r3, [r7, #20]
 800602e:	4413      	add	r3, r2
 8006030:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006034:	691b      	ldr	r3, [r3, #16]
 8006036:	693a      	ldr	r2, [r7, #16]
 8006038:	0151      	lsls	r1, r2, #5
 800603a:	697a      	ldr	r2, [r7, #20]
 800603c:	440a      	add	r2, r1
 800603e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006042:	0cdb      	lsrs	r3, r3, #19
 8006044:	04db      	lsls	r3, r3, #19
 8006046:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006048:	693b      	ldr	r3, [r7, #16]
 800604a:	015a      	lsls	r2, r3, #5
 800604c:	697b      	ldr	r3, [r7, #20]
 800604e:	4413      	add	r3, r2
 8006050:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006054:	691b      	ldr	r3, [r3, #16]
 8006056:	693a      	ldr	r2, [r7, #16]
 8006058:	0151      	lsls	r1, r2, #5
 800605a:	697a      	ldr	r2, [r7, #20]
 800605c:	440a      	add	r2, r1
 800605e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006062:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006066:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800606a:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 800606c:	68bb      	ldr	r3, [r7, #8]
 800606e:	695a      	ldr	r2, [r3, #20]
 8006070:	68bb      	ldr	r3, [r7, #8]
 8006072:	689b      	ldr	r3, [r3, #8]
 8006074:	429a      	cmp	r2, r3
 8006076:	d903      	bls.n	8006080 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8006078:	68bb      	ldr	r3, [r7, #8]
 800607a:	689a      	ldr	r2, [r3, #8]
 800607c:	68bb      	ldr	r3, [r7, #8]
 800607e:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006080:	693b      	ldr	r3, [r7, #16]
 8006082:	015a      	lsls	r2, r3, #5
 8006084:	697b      	ldr	r3, [r7, #20]
 8006086:	4413      	add	r3, r2
 8006088:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800608c:	691b      	ldr	r3, [r3, #16]
 800608e:	693a      	ldr	r2, [r7, #16]
 8006090:	0151      	lsls	r1, r2, #5
 8006092:	697a      	ldr	r2, [r7, #20]
 8006094:	440a      	add	r2, r1
 8006096:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800609a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800609e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80060a0:	693b      	ldr	r3, [r7, #16]
 80060a2:	015a      	lsls	r2, r3, #5
 80060a4:	697b      	ldr	r3, [r7, #20]
 80060a6:	4413      	add	r3, r2
 80060a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80060ac:	691a      	ldr	r2, [r3, #16]
 80060ae:	68bb      	ldr	r3, [r7, #8]
 80060b0:	695b      	ldr	r3, [r3, #20]
 80060b2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80060b6:	6939      	ldr	r1, [r7, #16]
 80060b8:	0148      	lsls	r0, r1, #5
 80060ba:	6979      	ldr	r1, [r7, #20]
 80060bc:	4401      	add	r1, r0
 80060be:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80060c2:	4313      	orrs	r3, r2
 80060c4:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80060c6:	79fb      	ldrb	r3, [r7, #7]
 80060c8:	2b01      	cmp	r3, #1
 80060ca:	d11e      	bne.n	800610a <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80060cc:	68bb      	ldr	r3, [r7, #8]
 80060ce:	691b      	ldr	r3, [r3, #16]
 80060d0:	2b00      	cmp	r3, #0
 80060d2:	d009      	beq.n	80060e8 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80060d4:	693b      	ldr	r3, [r7, #16]
 80060d6:	015a      	lsls	r2, r3, #5
 80060d8:	697b      	ldr	r3, [r7, #20]
 80060da:	4413      	add	r3, r2
 80060dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80060e0:	461a      	mov	r2, r3
 80060e2:	68bb      	ldr	r3, [r7, #8]
 80060e4:	691b      	ldr	r3, [r3, #16]
 80060e6:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80060e8:	693b      	ldr	r3, [r7, #16]
 80060ea:	015a      	lsls	r2, r3, #5
 80060ec:	697b      	ldr	r3, [r7, #20]
 80060ee:	4413      	add	r3, r2
 80060f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	693a      	ldr	r2, [r7, #16]
 80060f8:	0151      	lsls	r1, r2, #5
 80060fa:	697a      	ldr	r2, [r7, #20]
 80060fc:	440a      	add	r2, r1
 80060fe:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006102:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006106:	6013      	str	r3, [r2, #0]
 8006108:	e092      	b.n	8006230 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800610a:	693b      	ldr	r3, [r7, #16]
 800610c:	015a      	lsls	r2, r3, #5
 800610e:	697b      	ldr	r3, [r7, #20]
 8006110:	4413      	add	r3, r2
 8006112:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	693a      	ldr	r2, [r7, #16]
 800611a:	0151      	lsls	r1, r2, #5
 800611c:	697a      	ldr	r2, [r7, #20]
 800611e:	440a      	add	r2, r1
 8006120:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006124:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006128:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800612a:	68bb      	ldr	r3, [r7, #8]
 800612c:	695b      	ldr	r3, [r3, #20]
 800612e:	2b00      	cmp	r3, #0
 8006130:	d07e      	beq.n	8006230 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8006132:	697b      	ldr	r3, [r7, #20]
 8006134:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006138:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800613a:	68bb      	ldr	r3, [r7, #8]
 800613c:	781b      	ldrb	r3, [r3, #0]
 800613e:	f003 030f 	and.w	r3, r3, #15
 8006142:	2101      	movs	r1, #1
 8006144:	fa01 f303 	lsl.w	r3, r1, r3
 8006148:	6979      	ldr	r1, [r7, #20]
 800614a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800614e:	4313      	orrs	r3, r2
 8006150:	634b      	str	r3, [r1, #52]	; 0x34
 8006152:	e06d      	b.n	8006230 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8006154:	693b      	ldr	r3, [r7, #16]
 8006156:	015a      	lsls	r2, r3, #5
 8006158:	697b      	ldr	r3, [r7, #20]
 800615a:	4413      	add	r3, r2
 800615c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006160:	691b      	ldr	r3, [r3, #16]
 8006162:	693a      	ldr	r2, [r7, #16]
 8006164:	0151      	lsls	r1, r2, #5
 8006166:	697a      	ldr	r2, [r7, #20]
 8006168:	440a      	add	r2, r1
 800616a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800616e:	0cdb      	lsrs	r3, r3, #19
 8006170:	04db      	lsls	r3, r3, #19
 8006172:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8006174:	693b      	ldr	r3, [r7, #16]
 8006176:	015a      	lsls	r2, r3, #5
 8006178:	697b      	ldr	r3, [r7, #20]
 800617a:	4413      	add	r3, r2
 800617c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006180:	691b      	ldr	r3, [r3, #16]
 8006182:	693a      	ldr	r2, [r7, #16]
 8006184:	0151      	lsls	r1, r2, #5
 8006186:	697a      	ldr	r2, [r7, #20]
 8006188:	440a      	add	r2, r1
 800618a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800618e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006192:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006196:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8006198:	68bb      	ldr	r3, [r7, #8]
 800619a:	695b      	ldr	r3, [r3, #20]
 800619c:	2b00      	cmp	r3, #0
 800619e:	d003      	beq.n	80061a8 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 80061a0:	68bb      	ldr	r3, [r7, #8]
 80061a2:	689a      	ldr	r2, [r3, #8]
 80061a4:	68bb      	ldr	r3, [r7, #8]
 80061a6:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80061a8:	693b      	ldr	r3, [r7, #16]
 80061aa:	015a      	lsls	r2, r3, #5
 80061ac:	697b      	ldr	r3, [r7, #20]
 80061ae:	4413      	add	r3, r2
 80061b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80061b4:	691b      	ldr	r3, [r3, #16]
 80061b6:	693a      	ldr	r2, [r7, #16]
 80061b8:	0151      	lsls	r1, r2, #5
 80061ba:	697a      	ldr	r2, [r7, #20]
 80061bc:	440a      	add	r2, r1
 80061be:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80061c2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80061c6:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 80061c8:	693b      	ldr	r3, [r7, #16]
 80061ca:	015a      	lsls	r2, r3, #5
 80061cc:	697b      	ldr	r3, [r7, #20]
 80061ce:	4413      	add	r3, r2
 80061d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80061d4:	691a      	ldr	r2, [r3, #16]
 80061d6:	68bb      	ldr	r3, [r7, #8]
 80061d8:	689b      	ldr	r3, [r3, #8]
 80061da:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80061de:	6939      	ldr	r1, [r7, #16]
 80061e0:	0148      	lsls	r0, r1, #5
 80061e2:	6979      	ldr	r1, [r7, #20]
 80061e4:	4401      	add	r1, r0
 80061e6:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80061ea:	4313      	orrs	r3, r2
 80061ec:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 80061ee:	79fb      	ldrb	r3, [r7, #7]
 80061f0:	2b01      	cmp	r3, #1
 80061f2:	d10d      	bne.n	8006210 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80061f4:	68bb      	ldr	r3, [r7, #8]
 80061f6:	68db      	ldr	r3, [r3, #12]
 80061f8:	2b00      	cmp	r3, #0
 80061fa:	d009      	beq.n	8006210 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80061fc:	68bb      	ldr	r3, [r7, #8]
 80061fe:	68d9      	ldr	r1, [r3, #12]
 8006200:	693b      	ldr	r3, [r7, #16]
 8006202:	015a      	lsls	r2, r3, #5
 8006204:	697b      	ldr	r3, [r7, #20]
 8006206:	4413      	add	r3, r2
 8006208:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800620c:	460a      	mov	r2, r1
 800620e:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8006210:	693b      	ldr	r3, [r7, #16]
 8006212:	015a      	lsls	r2, r3, #5
 8006214:	697b      	ldr	r3, [r7, #20]
 8006216:	4413      	add	r3, r2
 8006218:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	693a      	ldr	r2, [r7, #16]
 8006220:	0151      	lsls	r1, r2, #5
 8006222:	697a      	ldr	r2, [r7, #20]
 8006224:	440a      	add	r2, r1
 8006226:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800622a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800622e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006230:	2300      	movs	r3, #0
}
 8006232:	4618      	mov	r0, r3
 8006234:	371c      	adds	r7, #28
 8006236:	46bd      	mov	sp, r7
 8006238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800623c:	4770      	bx	lr

0800623e <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800623e:	b480      	push	{r7}
 8006240:	b089      	sub	sp, #36	; 0x24
 8006242:	af00      	add	r7, sp, #0
 8006244:	60f8      	str	r0, [r7, #12]
 8006246:	60b9      	str	r1, [r7, #8]
 8006248:	4611      	mov	r1, r2
 800624a:	461a      	mov	r2, r3
 800624c:	460b      	mov	r3, r1
 800624e:	71fb      	strb	r3, [r7, #7]
 8006250:	4613      	mov	r3, r2
 8006252:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 8006258:	68bb      	ldr	r3, [r7, #8]
 800625a:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 800625c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8006260:	2b00      	cmp	r3, #0
 8006262:	d11a      	bne.n	800629a <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8006264:	88bb      	ldrh	r3, [r7, #4]
 8006266:	3303      	adds	r3, #3
 8006268:	089b      	lsrs	r3, r3, #2
 800626a:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800626c:	2300      	movs	r3, #0
 800626e:	61bb      	str	r3, [r7, #24]
 8006270:	e00f      	b.n	8006292 <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8006272:	79fb      	ldrb	r3, [r7, #7]
 8006274:	031a      	lsls	r2, r3, #12
 8006276:	697b      	ldr	r3, [r7, #20]
 8006278:	4413      	add	r3, r2
 800627a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800627e:	461a      	mov	r2, r3
 8006280:	69fb      	ldr	r3, [r7, #28]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	6013      	str	r3, [r2, #0]
      pSrc++;
 8006286:	69fb      	ldr	r3, [r7, #28]
 8006288:	3304      	adds	r3, #4
 800628a:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800628c:	69bb      	ldr	r3, [r7, #24]
 800628e:	3301      	adds	r3, #1
 8006290:	61bb      	str	r3, [r7, #24]
 8006292:	69ba      	ldr	r2, [r7, #24]
 8006294:	693b      	ldr	r3, [r7, #16]
 8006296:	429a      	cmp	r2, r3
 8006298:	d3eb      	bcc.n	8006272 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800629a:	2300      	movs	r3, #0
}
 800629c:	4618      	mov	r0, r3
 800629e:	3724      	adds	r7, #36	; 0x24
 80062a0:	46bd      	mov	sp, r7
 80062a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062a6:	4770      	bx	lr

080062a8 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80062a8:	b480      	push	{r7}
 80062aa:	b089      	sub	sp, #36	; 0x24
 80062ac:	af00      	add	r7, sp, #0
 80062ae:	60f8      	str	r0, [r7, #12]
 80062b0:	60b9      	str	r1, [r7, #8]
 80062b2:	4613      	mov	r3, r2
 80062b4:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 80062ba:	68bb      	ldr	r3, [r7, #8]
 80062bc:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 80062be:	88fb      	ldrh	r3, [r7, #6]
 80062c0:	3303      	adds	r3, #3
 80062c2:	089b      	lsrs	r3, r3, #2
 80062c4:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 80062c6:	2300      	movs	r3, #0
 80062c8:	61bb      	str	r3, [r7, #24]
 80062ca:	e00b      	b.n	80062e4 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80062cc:	697b      	ldr	r3, [r7, #20]
 80062ce:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80062d2:	681a      	ldr	r2, [r3, #0]
 80062d4:	69fb      	ldr	r3, [r7, #28]
 80062d6:	601a      	str	r2, [r3, #0]
    pDest++;
 80062d8:	69fb      	ldr	r3, [r7, #28]
 80062da:	3304      	adds	r3, #4
 80062dc:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 80062de:	69bb      	ldr	r3, [r7, #24]
 80062e0:	3301      	adds	r3, #1
 80062e2:	61bb      	str	r3, [r7, #24]
 80062e4:	69ba      	ldr	r2, [r7, #24]
 80062e6:	693b      	ldr	r3, [r7, #16]
 80062e8:	429a      	cmp	r2, r3
 80062ea:	d3ef      	bcc.n	80062cc <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 80062ec:	69fb      	ldr	r3, [r7, #28]
}
 80062ee:	4618      	mov	r0, r3
 80062f0:	3724      	adds	r7, #36	; 0x24
 80062f2:	46bd      	mov	sp, r7
 80062f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062f8:	4770      	bx	lr

080062fa <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80062fa:	b480      	push	{r7}
 80062fc:	b085      	sub	sp, #20
 80062fe:	af00      	add	r7, sp, #0
 8006300:	6078      	str	r0, [r7, #4]
 8006302:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006308:	683b      	ldr	r3, [r7, #0]
 800630a:	781b      	ldrb	r3, [r3, #0]
 800630c:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800630e:	683b      	ldr	r3, [r7, #0]
 8006310:	785b      	ldrb	r3, [r3, #1]
 8006312:	2b01      	cmp	r3, #1
 8006314:	d12c      	bne.n	8006370 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8006316:	68bb      	ldr	r3, [r7, #8]
 8006318:	015a      	lsls	r2, r3, #5
 800631a:	68fb      	ldr	r3, [r7, #12]
 800631c:	4413      	add	r3, r2
 800631e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	2b00      	cmp	r3, #0
 8006326:	db12      	blt.n	800634e <USB_EPSetStall+0x54>
 8006328:	68bb      	ldr	r3, [r7, #8]
 800632a:	2b00      	cmp	r3, #0
 800632c:	d00f      	beq.n	800634e <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800632e:	68bb      	ldr	r3, [r7, #8]
 8006330:	015a      	lsls	r2, r3, #5
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	4413      	add	r3, r2
 8006336:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	68ba      	ldr	r2, [r7, #8]
 800633e:	0151      	lsls	r1, r2, #5
 8006340:	68fa      	ldr	r2, [r7, #12]
 8006342:	440a      	add	r2, r1
 8006344:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006348:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800634c:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800634e:	68bb      	ldr	r3, [r7, #8]
 8006350:	015a      	lsls	r2, r3, #5
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	4413      	add	r3, r2
 8006356:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	68ba      	ldr	r2, [r7, #8]
 800635e:	0151      	lsls	r1, r2, #5
 8006360:	68fa      	ldr	r2, [r7, #12]
 8006362:	440a      	add	r2, r1
 8006364:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006368:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800636c:	6013      	str	r3, [r2, #0]
 800636e:	e02b      	b.n	80063c8 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8006370:	68bb      	ldr	r3, [r7, #8]
 8006372:	015a      	lsls	r2, r3, #5
 8006374:	68fb      	ldr	r3, [r7, #12]
 8006376:	4413      	add	r3, r2
 8006378:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	2b00      	cmp	r3, #0
 8006380:	db12      	blt.n	80063a8 <USB_EPSetStall+0xae>
 8006382:	68bb      	ldr	r3, [r7, #8]
 8006384:	2b00      	cmp	r3, #0
 8006386:	d00f      	beq.n	80063a8 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8006388:	68bb      	ldr	r3, [r7, #8]
 800638a:	015a      	lsls	r2, r3, #5
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	4413      	add	r3, r2
 8006390:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	68ba      	ldr	r2, [r7, #8]
 8006398:	0151      	lsls	r1, r2, #5
 800639a:	68fa      	ldr	r2, [r7, #12]
 800639c:	440a      	add	r2, r1
 800639e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80063a2:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80063a6:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 80063a8:	68bb      	ldr	r3, [r7, #8]
 80063aa:	015a      	lsls	r2, r3, #5
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	4413      	add	r3, r2
 80063b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	68ba      	ldr	r2, [r7, #8]
 80063b8:	0151      	lsls	r1, r2, #5
 80063ba:	68fa      	ldr	r2, [r7, #12]
 80063bc:	440a      	add	r2, r1
 80063be:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80063c2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80063c6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80063c8:	2300      	movs	r3, #0
}
 80063ca:	4618      	mov	r0, r3
 80063cc:	3714      	adds	r7, #20
 80063ce:	46bd      	mov	sp, r7
 80063d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063d4:	4770      	bx	lr

080063d6 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80063d6:	b480      	push	{r7}
 80063d8:	b085      	sub	sp, #20
 80063da:	af00      	add	r7, sp, #0
 80063dc:	6078      	str	r0, [r7, #4]
 80063de:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80063e4:	683b      	ldr	r3, [r7, #0]
 80063e6:	781b      	ldrb	r3, [r3, #0]
 80063e8:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80063ea:	683b      	ldr	r3, [r7, #0]
 80063ec:	785b      	ldrb	r3, [r3, #1]
 80063ee:	2b01      	cmp	r3, #1
 80063f0:	d128      	bne.n	8006444 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80063f2:	68bb      	ldr	r3, [r7, #8]
 80063f4:	015a      	lsls	r2, r3, #5
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	4413      	add	r3, r2
 80063fa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	68ba      	ldr	r2, [r7, #8]
 8006402:	0151      	lsls	r1, r2, #5
 8006404:	68fa      	ldr	r2, [r7, #12]
 8006406:	440a      	add	r2, r1
 8006408:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800640c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006410:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8006412:	683b      	ldr	r3, [r7, #0]
 8006414:	78db      	ldrb	r3, [r3, #3]
 8006416:	2b03      	cmp	r3, #3
 8006418:	d003      	beq.n	8006422 <USB_EPClearStall+0x4c>
 800641a:	683b      	ldr	r3, [r7, #0]
 800641c:	78db      	ldrb	r3, [r3, #3]
 800641e:	2b02      	cmp	r3, #2
 8006420:	d138      	bne.n	8006494 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8006422:	68bb      	ldr	r3, [r7, #8]
 8006424:	015a      	lsls	r2, r3, #5
 8006426:	68fb      	ldr	r3, [r7, #12]
 8006428:	4413      	add	r3, r2
 800642a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	68ba      	ldr	r2, [r7, #8]
 8006432:	0151      	lsls	r1, r2, #5
 8006434:	68fa      	ldr	r2, [r7, #12]
 8006436:	440a      	add	r2, r1
 8006438:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800643c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006440:	6013      	str	r3, [r2, #0]
 8006442:	e027      	b.n	8006494 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8006444:	68bb      	ldr	r3, [r7, #8]
 8006446:	015a      	lsls	r2, r3, #5
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	4413      	add	r3, r2
 800644c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	68ba      	ldr	r2, [r7, #8]
 8006454:	0151      	lsls	r1, r2, #5
 8006456:	68fa      	ldr	r2, [r7, #12]
 8006458:	440a      	add	r2, r1
 800645a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800645e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006462:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8006464:	683b      	ldr	r3, [r7, #0]
 8006466:	78db      	ldrb	r3, [r3, #3]
 8006468:	2b03      	cmp	r3, #3
 800646a:	d003      	beq.n	8006474 <USB_EPClearStall+0x9e>
 800646c:	683b      	ldr	r3, [r7, #0]
 800646e:	78db      	ldrb	r3, [r3, #3]
 8006470:	2b02      	cmp	r3, #2
 8006472:	d10f      	bne.n	8006494 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8006474:	68bb      	ldr	r3, [r7, #8]
 8006476:	015a      	lsls	r2, r3, #5
 8006478:	68fb      	ldr	r3, [r7, #12]
 800647a:	4413      	add	r3, r2
 800647c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	68ba      	ldr	r2, [r7, #8]
 8006484:	0151      	lsls	r1, r2, #5
 8006486:	68fa      	ldr	r2, [r7, #12]
 8006488:	440a      	add	r2, r1
 800648a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800648e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006492:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8006494:	2300      	movs	r3, #0
}
 8006496:	4618      	mov	r0, r3
 8006498:	3714      	adds	r7, #20
 800649a:	46bd      	mov	sp, r7
 800649c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064a0:	4770      	bx	lr

080064a2 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 80064a2:	b480      	push	{r7}
 80064a4:	b085      	sub	sp, #20
 80064a6:	af00      	add	r7, sp, #0
 80064a8:	6078      	str	r0, [r7, #4]
 80064aa:	460b      	mov	r3, r1
 80064ac:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	68fa      	ldr	r2, [r7, #12]
 80064bc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80064c0:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80064c4:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 80064c6:	68fb      	ldr	r3, [r7, #12]
 80064c8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80064cc:	681a      	ldr	r2, [r3, #0]
 80064ce:	78fb      	ldrb	r3, [r7, #3]
 80064d0:	011b      	lsls	r3, r3, #4
 80064d2:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 80064d6:	68f9      	ldr	r1, [r7, #12]
 80064d8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80064dc:	4313      	orrs	r3, r2
 80064de:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 80064e0:	2300      	movs	r3, #0
}
 80064e2:	4618      	mov	r0, r3
 80064e4:	3714      	adds	r7, #20
 80064e6:	46bd      	mov	sp, r7
 80064e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ec:	4770      	bx	lr

080064ee <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 80064ee:	b480      	push	{r7}
 80064f0:	b085      	sub	sp, #20
 80064f2:	af00      	add	r7, sp, #0
 80064f4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80064fa:	68fb      	ldr	r3, [r7, #12]
 80064fc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	68fa      	ldr	r2, [r7, #12]
 8006504:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8006508:	f023 0303 	bic.w	r3, r3, #3
 800650c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800650e:	68fb      	ldr	r3, [r7, #12]
 8006510:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006514:	685b      	ldr	r3, [r3, #4]
 8006516:	68fa      	ldr	r2, [r7, #12]
 8006518:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800651c:	f023 0302 	bic.w	r3, r3, #2
 8006520:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006522:	2300      	movs	r3, #0
}
 8006524:	4618      	mov	r0, r3
 8006526:	3714      	adds	r7, #20
 8006528:	46bd      	mov	sp, r7
 800652a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800652e:	4770      	bx	lr

08006530 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8006530:	b480      	push	{r7}
 8006532:	b085      	sub	sp, #20
 8006534:	af00      	add	r7, sp, #0
 8006536:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	68fa      	ldr	r2, [r7, #12]
 8006546:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800654a:	f023 0303 	bic.w	r3, r3, #3
 800654e:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006556:	685b      	ldr	r3, [r3, #4]
 8006558:	68fa      	ldr	r2, [r7, #12]
 800655a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800655e:	f043 0302 	orr.w	r3, r3, #2
 8006562:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006564:	2300      	movs	r3, #0
}
 8006566:	4618      	mov	r0, r3
 8006568:	3714      	adds	r7, #20
 800656a:	46bd      	mov	sp, r7
 800656c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006570:	4770      	bx	lr

08006572 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8006572:	b480      	push	{r7}
 8006574:	b085      	sub	sp, #20
 8006576:	af00      	add	r7, sp, #0
 8006578:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	695b      	ldr	r3, [r3, #20]
 800657e:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	699b      	ldr	r3, [r3, #24]
 8006584:	68fa      	ldr	r2, [r7, #12]
 8006586:	4013      	ands	r3, r2
 8006588:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800658a:	68fb      	ldr	r3, [r7, #12]
}
 800658c:	4618      	mov	r0, r3
 800658e:	3714      	adds	r7, #20
 8006590:	46bd      	mov	sp, r7
 8006592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006596:	4770      	bx	lr

08006598 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8006598:	b480      	push	{r7}
 800659a:	b085      	sub	sp, #20
 800659c:	af00      	add	r7, sp, #0
 800659e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80065a4:	68fb      	ldr	r3, [r7, #12]
 80065a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80065aa:	699b      	ldr	r3, [r3, #24]
 80065ac:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80065ae:	68fb      	ldr	r3, [r7, #12]
 80065b0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80065b4:	69db      	ldr	r3, [r3, #28]
 80065b6:	68ba      	ldr	r2, [r7, #8]
 80065b8:	4013      	ands	r3, r2
 80065ba:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 80065bc:	68bb      	ldr	r3, [r7, #8]
 80065be:	0c1b      	lsrs	r3, r3, #16
}
 80065c0:	4618      	mov	r0, r3
 80065c2:	3714      	adds	r7, #20
 80065c4:	46bd      	mov	sp, r7
 80065c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ca:	4770      	bx	lr

080065cc <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80065cc:	b480      	push	{r7}
 80065ce:	b085      	sub	sp, #20
 80065d0:	af00      	add	r7, sp, #0
 80065d2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80065d8:	68fb      	ldr	r3, [r7, #12]
 80065da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80065de:	699b      	ldr	r3, [r3, #24]
 80065e0:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80065e2:	68fb      	ldr	r3, [r7, #12]
 80065e4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80065e8:	69db      	ldr	r3, [r3, #28]
 80065ea:	68ba      	ldr	r2, [r7, #8]
 80065ec:	4013      	ands	r3, r2
 80065ee:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 80065f0:	68bb      	ldr	r3, [r7, #8]
 80065f2:	b29b      	uxth	r3, r3
}
 80065f4:	4618      	mov	r0, r3
 80065f6:	3714      	adds	r7, #20
 80065f8:	46bd      	mov	sp, r7
 80065fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065fe:	4770      	bx	lr

08006600 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8006600:	b480      	push	{r7}
 8006602:	b085      	sub	sp, #20
 8006604:	af00      	add	r7, sp, #0
 8006606:	6078      	str	r0, [r7, #4]
 8006608:	460b      	mov	r3, r1
 800660a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8006610:	78fb      	ldrb	r3, [r7, #3]
 8006612:	015a      	lsls	r2, r3, #5
 8006614:	68fb      	ldr	r3, [r7, #12]
 8006616:	4413      	add	r3, r2
 8006618:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800661c:	689b      	ldr	r3, [r3, #8]
 800661e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8006620:	68fb      	ldr	r3, [r7, #12]
 8006622:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006626:	695b      	ldr	r3, [r3, #20]
 8006628:	68ba      	ldr	r2, [r7, #8]
 800662a:	4013      	ands	r3, r2
 800662c:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800662e:	68bb      	ldr	r3, [r7, #8]
}
 8006630:	4618      	mov	r0, r3
 8006632:	3714      	adds	r7, #20
 8006634:	46bd      	mov	sp, r7
 8006636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800663a:	4770      	bx	lr

0800663c <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800663c:	b480      	push	{r7}
 800663e:	b087      	sub	sp, #28
 8006640:	af00      	add	r7, sp, #0
 8006642:	6078      	str	r0, [r7, #4]
 8006644:	460b      	mov	r3, r1
 8006646:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 800664c:	697b      	ldr	r3, [r7, #20]
 800664e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006652:	691b      	ldr	r3, [r3, #16]
 8006654:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8006656:	697b      	ldr	r3, [r7, #20]
 8006658:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800665c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800665e:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8006660:	78fb      	ldrb	r3, [r7, #3]
 8006662:	f003 030f 	and.w	r3, r3, #15
 8006666:	68fa      	ldr	r2, [r7, #12]
 8006668:	fa22 f303 	lsr.w	r3, r2, r3
 800666c:	01db      	lsls	r3, r3, #7
 800666e:	b2db      	uxtb	r3, r3
 8006670:	693a      	ldr	r2, [r7, #16]
 8006672:	4313      	orrs	r3, r2
 8006674:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8006676:	78fb      	ldrb	r3, [r7, #3]
 8006678:	015a      	lsls	r2, r3, #5
 800667a:	697b      	ldr	r3, [r7, #20]
 800667c:	4413      	add	r3, r2
 800667e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006682:	689b      	ldr	r3, [r3, #8]
 8006684:	693a      	ldr	r2, [r7, #16]
 8006686:	4013      	ands	r3, r2
 8006688:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800668a:	68bb      	ldr	r3, [r7, #8]
}
 800668c:	4618      	mov	r0, r3
 800668e:	371c      	adds	r7, #28
 8006690:	46bd      	mov	sp, r7
 8006692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006696:	4770      	bx	lr

08006698 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8006698:	b480      	push	{r7}
 800669a:	b083      	sub	sp, #12
 800669c:	af00      	add	r7, sp, #0
 800669e:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	695b      	ldr	r3, [r3, #20]
 80066a4:	f003 0301 	and.w	r3, r3, #1
}
 80066a8:	4618      	mov	r0, r3
 80066aa:	370c      	adds	r7, #12
 80066ac:	46bd      	mov	sp, r7
 80066ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066b2:	4770      	bx	lr

080066b4 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 80066b4:	b480      	push	{r7}
 80066b6:	b085      	sub	sp, #20
 80066b8:	af00      	add	r7, sp, #0
 80066ba:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	68fa      	ldr	r2, [r7, #12]
 80066ca:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80066ce:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80066d2:	f023 0307 	bic.w	r3, r3, #7
 80066d6:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80066de:	685b      	ldr	r3, [r3, #4]
 80066e0:	68fa      	ldr	r2, [r7, #12]
 80066e2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80066e6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80066ea:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80066ec:	2300      	movs	r3, #0
}
 80066ee:	4618      	mov	r0, r3
 80066f0:	3714      	adds	r7, #20
 80066f2:	46bd      	mov	sp, r7
 80066f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066f8:	4770      	bx	lr
	...

080066fc <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 80066fc:	b480      	push	{r7}
 80066fe:	b087      	sub	sp, #28
 8006700:	af00      	add	r7, sp, #0
 8006702:	60f8      	str	r0, [r7, #12]
 8006704:	460b      	mov	r3, r1
 8006706:	607a      	str	r2, [r7, #4]
 8006708:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800670a:	68fb      	ldr	r3, [r7, #12]
 800670c:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800670e:	68fb      	ldr	r3, [r7, #12]
 8006710:	333c      	adds	r3, #60	; 0x3c
 8006712:	3304      	adds	r3, #4
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8006718:	693b      	ldr	r3, [r7, #16]
 800671a:	4a26      	ldr	r2, [pc, #152]	; (80067b4 <USB_EP0_OutStart+0xb8>)
 800671c:	4293      	cmp	r3, r2
 800671e:	d90a      	bls.n	8006736 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006720:	697b      	ldr	r3, [r7, #20]
 8006722:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800672c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006730:	d101      	bne.n	8006736 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8006732:	2300      	movs	r3, #0
 8006734:	e037      	b.n	80067a6 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8006736:	697b      	ldr	r3, [r7, #20]
 8006738:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800673c:	461a      	mov	r2, r3
 800673e:	2300      	movs	r3, #0
 8006740:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006742:	697b      	ldr	r3, [r7, #20]
 8006744:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006748:	691b      	ldr	r3, [r3, #16]
 800674a:	697a      	ldr	r2, [r7, #20]
 800674c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006750:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006754:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8006756:	697b      	ldr	r3, [r7, #20]
 8006758:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800675c:	691b      	ldr	r3, [r3, #16]
 800675e:	697a      	ldr	r2, [r7, #20]
 8006760:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006764:	f043 0318 	orr.w	r3, r3, #24
 8006768:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800676a:	697b      	ldr	r3, [r7, #20]
 800676c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006770:	691b      	ldr	r3, [r3, #16]
 8006772:	697a      	ldr	r2, [r7, #20]
 8006774:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006778:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800677c:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800677e:	7afb      	ldrb	r3, [r7, #11]
 8006780:	2b01      	cmp	r3, #1
 8006782:	d10f      	bne.n	80067a4 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8006784:	697b      	ldr	r3, [r7, #20]
 8006786:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800678a:	461a      	mov	r2, r3
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8006790:	697b      	ldr	r3, [r7, #20]
 8006792:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	697a      	ldr	r2, [r7, #20]
 800679a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800679e:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 80067a2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80067a4:	2300      	movs	r3, #0
}
 80067a6:	4618      	mov	r0, r3
 80067a8:	371c      	adds	r7, #28
 80067aa:	46bd      	mov	sp, r7
 80067ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067b0:	4770      	bx	lr
 80067b2:	bf00      	nop
 80067b4:	4f54300a 	.word	0x4f54300a

080067b8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80067b8:	b480      	push	{r7}
 80067ba:	b085      	sub	sp, #20
 80067bc:	af00      	add	r7, sp, #0
 80067be:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 80067c0:	2300      	movs	r3, #0
 80067c2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 80067c4:	68fb      	ldr	r3, [r7, #12]
 80067c6:	3301      	adds	r3, #1
 80067c8:	60fb      	str	r3, [r7, #12]
 80067ca:	68fb      	ldr	r3, [r7, #12]
 80067cc:	4a13      	ldr	r2, [pc, #76]	; (800681c <USB_CoreReset+0x64>)
 80067ce:	4293      	cmp	r3, r2
 80067d0:	d901      	bls.n	80067d6 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80067d2:	2303      	movs	r3, #3
 80067d4:	e01b      	b.n	800680e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	691b      	ldr	r3, [r3, #16]
 80067da:	2b00      	cmp	r3, #0
 80067dc:	daf2      	bge.n	80067c4 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80067de:	2300      	movs	r3, #0
 80067e0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	691b      	ldr	r3, [r3, #16]
 80067e6:	f043 0201 	orr.w	r2, r3, #1
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80067ee:	68fb      	ldr	r3, [r7, #12]
 80067f0:	3301      	adds	r3, #1
 80067f2:	60fb      	str	r3, [r7, #12]
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	4a09      	ldr	r2, [pc, #36]	; (800681c <USB_CoreReset+0x64>)
 80067f8:	4293      	cmp	r3, r2
 80067fa:	d901      	bls.n	8006800 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80067fc:	2303      	movs	r3, #3
 80067fe:	e006      	b.n	800680e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	691b      	ldr	r3, [r3, #16]
 8006804:	f003 0301 	and.w	r3, r3, #1
 8006808:	2b01      	cmp	r3, #1
 800680a:	d0f0      	beq.n	80067ee <USB_CoreReset+0x36>

  return HAL_OK;
 800680c:	2300      	movs	r3, #0
}
 800680e:	4618      	mov	r0, r3
 8006810:	3714      	adds	r7, #20
 8006812:	46bd      	mov	sp, r7
 8006814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006818:	4770      	bx	lr
 800681a:	bf00      	nop
 800681c:	00030d40 	.word	0x00030d40

08006820 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006820:	b580      	push	{r7, lr}
 8006822:	b084      	sub	sp, #16
 8006824:	af00      	add	r7, sp, #0
 8006826:	6078      	str	r0, [r7, #4]
 8006828:	460b      	mov	r3, r1
 800682a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800682c:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8006830:	f002 fa4c 	bl	8008ccc <malloc>
 8006834:	4603      	mov	r3, r0
 8006836:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8006838:	68fb      	ldr	r3, [r7, #12]
 800683a:	2b00      	cmp	r3, #0
 800683c:	d105      	bne.n	800684a <USBD_CDC_Init+0x2a>
  {
    pdev->pClassData = NULL;
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	2200      	movs	r2, #0
 8006842:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 8006846:	2302      	movs	r3, #2
 8006848:	e066      	b.n	8006918 <USBD_CDC_Init+0xf8>
  }

  pdev->pClassData = (void *)hcdc;
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	68fa      	ldr	r2, [r7, #12]
 800684e:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	7c1b      	ldrb	r3, [r3, #16]
 8006856:	2b00      	cmp	r3, #0
 8006858:	d119      	bne.n	800688e <USBD_CDC_Init+0x6e>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800685a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800685e:	2202      	movs	r2, #2
 8006860:	2181      	movs	r1, #129	; 0x81
 8006862:	6878      	ldr	r0, [r7, #4]
 8006864:	f002 f8ad 	bl	80089c2 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

     pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	2201      	movs	r2, #1
 800686c:	871a      	strh	r2, [r3, #56]	; 0x38

     /* Open EP OUT */
     (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800686e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006872:	2202      	movs	r2, #2
 8006874:	2101      	movs	r1, #1
 8006876:	6878      	ldr	r0, [r7, #4]
 8006878:	f002 f8a3 	bl	80089c2 <USBD_LL_OpenEP>
                          CDC_DATA_HS_OUT_PACKET_SIZE);

      pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	2201      	movs	r2, #1
 8006880:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

      /* Set bInterval for CDC CMD Endpoint */
      pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	2210      	movs	r2, #16
 8006888:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 800688c:	e016      	b.n	80068bc <USBD_CDC_Init+0x9c>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800688e:	2340      	movs	r3, #64	; 0x40
 8006890:	2202      	movs	r2, #2
 8006892:	2181      	movs	r1, #129	; 0x81
 8006894:	6878      	ldr	r0, [r7, #4]
 8006896:	f002 f894 	bl	80089c2 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

     pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	2201      	movs	r2, #1
 800689e:	871a      	strh	r2, [r3, #56]	; 0x38

     /* Open EP OUT */
     (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80068a0:	2340      	movs	r3, #64	; 0x40
 80068a2:	2202      	movs	r2, #2
 80068a4:	2101      	movs	r1, #1
 80068a6:	6878      	ldr	r0, [r7, #4]
 80068a8:	f002 f88b 	bl	80089c2 <USBD_LL_OpenEP>
                          CDC_DATA_FS_OUT_PACKET_SIZE);

      pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	2201      	movs	r2, #1
 80068b0:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

      /* Set bInterval for CMD Endpoint */
      pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	2210      	movs	r2, #16
 80068b8:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80068bc:	2308      	movs	r3, #8
 80068be:	2203      	movs	r2, #3
 80068c0:	2182      	movs	r1, #130	; 0x82
 80068c2:	6878      	ldr	r0, [r7, #4]
 80068c4:	f002 f87d 	bl	80089c2 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	2201      	movs	r2, #1
 80068cc:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 80068da:	68fb      	ldr	r3, [r7, #12]
 80068dc:	2200      	movs	r2, #0
 80068de:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 80068e2:	68fb      	ldr	r3, [r7, #12]
 80068e4:	2200      	movs	r2, #0
 80068e6:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	7c1b      	ldrb	r3, [r3, #16]
 80068ee:	2b00      	cmp	r3, #0
 80068f0:	d109      	bne.n	8006906 <USBD_CDC_Init+0xe6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80068f2:	68fb      	ldr	r3, [r7, #12]
 80068f4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80068f8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80068fc:	2101      	movs	r1, #1
 80068fe:	6878      	ldr	r0, [r7, #4]
 8006900:	f002 f94e 	bl	8008ba0 <USBD_LL_PrepareReceive>
 8006904:	e007      	b.n	8006916 <USBD_CDC_Init+0xf6>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8006906:	68fb      	ldr	r3, [r7, #12]
 8006908:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800690c:	2340      	movs	r3, #64	; 0x40
 800690e:	2101      	movs	r1, #1
 8006910:	6878      	ldr	r0, [r7, #4]
 8006912:	f002 f945 	bl	8008ba0 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8006916:	2300      	movs	r3, #0
}
 8006918:	4618      	mov	r0, r3
 800691a:	3710      	adds	r7, #16
 800691c:	46bd      	mov	sp, r7
 800691e:	bd80      	pop	{r7, pc}

08006920 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006920:	b580      	push	{r7, lr}
 8006922:	b084      	sub	sp, #16
 8006924:	af00      	add	r7, sp, #0
 8006926:	6078      	str	r0, [r7, #4]
 8006928:	460b      	mov	r3, r1
 800692a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  uint8_t ret = 0U;
 800692c:	2300      	movs	r3, #0
 800692e:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8006930:	2181      	movs	r1, #129	; 0x81
 8006932:	6878      	ldr	r0, [r7, #4]
 8006934:	f002 f86b 	bl	8008a0e <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	2200      	movs	r2, #0
 800693c:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800693e:	2101      	movs	r1, #1
 8006940:	6878      	ldr	r0, [r7, #4]
 8006942:	f002 f864 	bl	8008a0e <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	2200      	movs	r2, #0
 800694a:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800694e:	2182      	movs	r1, #130	; 0x82
 8006950:	6878      	ldr	r0, [r7, #4]
 8006952:	f002 f85c 	bl	8008a0e <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	2200      	movs	r2, #0
 800695a:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	2200      	movs	r2, #0
 8006962:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800696c:	2b00      	cmp	r3, #0
 800696e:	d00e      	beq.n	800698e <USBD_CDC_DeInit+0x6e>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006976:	685b      	ldr	r3, [r3, #4]
 8006978:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006980:	4618      	mov	r0, r3
 8006982:	f002 f9ab 	bl	8008cdc <free>
    pdev->pClassData = NULL;
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	2200      	movs	r2, #0
 800698a:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return ret;
 800698e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006990:	4618      	mov	r0, r3
 8006992:	3710      	adds	r7, #16
 8006994:	46bd      	mov	sp, r7
 8006996:	bd80      	pop	{r7, pc}

08006998 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8006998:	b580      	push	{r7, lr}
 800699a:	b086      	sub	sp, #24
 800699c:	af00      	add	r7, sp, #0
 800699e:	6078      	str	r0, [r7, #4]
 80069a0:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80069a8:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 80069aa:	2300      	movs	r3, #0
 80069ac:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 80069ae:	2300      	movs	r3, #0
 80069b0:	81bb      	strh	r3, [r7, #12]
  USBD_StatusTypeDef ret = USBD_OK;
 80069b2:	2300      	movs	r3, #0
 80069b4:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80069b6:	683b      	ldr	r3, [r7, #0]
 80069b8:	781b      	ldrb	r3, [r3, #0]
 80069ba:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80069be:	2b00      	cmp	r3, #0
 80069c0:	d03a      	beq.n	8006a38 <USBD_CDC_Setup+0xa0>
 80069c2:	2b20      	cmp	r3, #32
 80069c4:	f040 8097 	bne.w	8006af6 <USBD_CDC_Setup+0x15e>
  {
  case USB_REQ_TYPE_CLASS:
    if (req->wLength != 0U)
 80069c8:	683b      	ldr	r3, [r7, #0]
 80069ca:	88db      	ldrh	r3, [r3, #6]
 80069cc:	2b00      	cmp	r3, #0
 80069ce:	d029      	beq.n	8006a24 <USBD_CDC_Setup+0x8c>
    {
      if ((req->bmRequest & 0x80U) != 0U)
 80069d0:	683b      	ldr	r3, [r7, #0]
 80069d2:	781b      	ldrb	r3, [r3, #0]
 80069d4:	b25b      	sxtb	r3, r3
 80069d6:	2b00      	cmp	r3, #0
 80069d8:	da11      	bge.n	80069fe <USBD_CDC_Setup+0x66>
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80069e0:	689b      	ldr	r3, [r3, #8]
 80069e2:	683a      	ldr	r2, [r7, #0]
 80069e4:	7850      	ldrb	r0, [r2, #1]
                                                          (uint8_t *)hcdc->data,
 80069e6:	6939      	ldr	r1, [r7, #16]
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80069e8:	683a      	ldr	r2, [r7, #0]
 80069ea:	88d2      	ldrh	r2, [r2, #6]
 80069ec:	4798      	blx	r3
                                                          req->wLength);

          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, req->wLength);
 80069ee:	6939      	ldr	r1, [r7, #16]
 80069f0:	683b      	ldr	r3, [r7, #0]
 80069f2:	88db      	ldrh	r3, [r3, #6]
 80069f4:	461a      	mov	r2, r3
 80069f6:	6878      	ldr	r0, [r7, #4]
 80069f8:	f001 fa9d 	bl	8007f36 <USBD_CtlSendData>
    else
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                        (uint8_t *)req, 0U);
    }
    break;
 80069fc:	e082      	b.n	8006b04 <USBD_CDC_Setup+0x16c>
        hcdc->CmdOpCode = req->bRequest;
 80069fe:	683b      	ldr	r3, [r7, #0]
 8006a00:	785a      	ldrb	r2, [r3, #1]
 8006a02:	693b      	ldr	r3, [r7, #16]
 8006a04:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
        hcdc->CmdLength = (uint8_t)req->wLength;
 8006a08:	683b      	ldr	r3, [r7, #0]
 8006a0a:	88db      	ldrh	r3, [r3, #6]
 8006a0c:	b2da      	uxtb	r2, r3
 8006a0e:	693b      	ldr	r3, [r7, #16]
 8006a10:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
        (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 8006a14:	6939      	ldr	r1, [r7, #16]
 8006a16:	683b      	ldr	r3, [r7, #0]
 8006a18:	88db      	ldrh	r3, [r3, #6]
 8006a1a:	461a      	mov	r2, r3
 8006a1c:	6878      	ldr	r0, [r7, #4]
 8006a1e:	f001 fab6 	bl	8007f8e <USBD_CtlPrepareRx>
    break;
 8006a22:	e06f      	b.n	8006b04 <USBD_CDC_Setup+0x16c>
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006a2a:	689b      	ldr	r3, [r3, #8]
 8006a2c:	683a      	ldr	r2, [r7, #0]
 8006a2e:	7850      	ldrb	r0, [r2, #1]
 8006a30:	2200      	movs	r2, #0
 8006a32:	6839      	ldr	r1, [r7, #0]
 8006a34:	4798      	blx	r3
    break;
 8006a36:	e065      	b.n	8006b04 <USBD_CDC_Setup+0x16c>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8006a38:	683b      	ldr	r3, [r7, #0]
 8006a3a:	785b      	ldrb	r3, [r3, #1]
 8006a3c:	2b0b      	cmp	r3, #11
 8006a3e:	d84f      	bhi.n	8006ae0 <USBD_CDC_Setup+0x148>
 8006a40:	a201      	add	r2, pc, #4	; (adr r2, 8006a48 <USBD_CDC_Setup+0xb0>)
 8006a42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a46:	bf00      	nop
 8006a48:	08006a79 	.word	0x08006a79
 8006a4c:	08006aef 	.word	0x08006aef
 8006a50:	08006ae1 	.word	0x08006ae1
 8006a54:	08006ae1 	.word	0x08006ae1
 8006a58:	08006ae1 	.word	0x08006ae1
 8006a5c:	08006ae1 	.word	0x08006ae1
 8006a60:	08006ae1 	.word	0x08006ae1
 8006a64:	08006ae1 	.word	0x08006ae1
 8006a68:	08006ae1 	.word	0x08006ae1
 8006a6c:	08006ae1 	.word	0x08006ae1
 8006a70:	08006aa1 	.word	0x08006aa1
 8006a74:	08006ac9 	.word	0x08006ac9
    {
    case USB_REQ_GET_STATUS:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006a7e:	2b03      	cmp	r3, #3
 8006a80:	d107      	bne.n	8006a92 <USBD_CDC_Setup+0xfa>
      {
        (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8006a82:	f107 030c 	add.w	r3, r7, #12
 8006a86:	2202      	movs	r2, #2
 8006a88:	4619      	mov	r1, r3
 8006a8a:	6878      	ldr	r0, [r7, #4]
 8006a8c:	f001 fa53 	bl	8007f36 <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 8006a90:	e030      	b.n	8006af4 <USBD_CDC_Setup+0x15c>
        USBD_CtlError(pdev, req);
 8006a92:	6839      	ldr	r1, [r7, #0]
 8006a94:	6878      	ldr	r0, [r7, #4]
 8006a96:	f001 f9dd 	bl	8007e54 <USBD_CtlError>
        ret = USBD_FAIL;
 8006a9a:	2303      	movs	r3, #3
 8006a9c:	75fb      	strb	r3, [r7, #23]
      break;
 8006a9e:	e029      	b.n	8006af4 <USBD_CDC_Setup+0x15c>

    case USB_REQ_GET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006aa6:	2b03      	cmp	r3, #3
 8006aa8:	d107      	bne.n	8006aba <USBD_CDC_Setup+0x122>
      {
        (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8006aaa:	f107 030f 	add.w	r3, r7, #15
 8006aae:	2201      	movs	r2, #1
 8006ab0:	4619      	mov	r1, r3
 8006ab2:	6878      	ldr	r0, [r7, #4]
 8006ab4:	f001 fa3f 	bl	8007f36 <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 8006ab8:	e01c      	b.n	8006af4 <USBD_CDC_Setup+0x15c>
        USBD_CtlError(pdev, req);
 8006aba:	6839      	ldr	r1, [r7, #0]
 8006abc:	6878      	ldr	r0, [r7, #4]
 8006abe:	f001 f9c9 	bl	8007e54 <USBD_CtlError>
        ret = USBD_FAIL;
 8006ac2:	2303      	movs	r3, #3
 8006ac4:	75fb      	strb	r3, [r7, #23]
      break;
 8006ac6:	e015      	b.n	8006af4 <USBD_CDC_Setup+0x15c>

    case USB_REQ_SET_INTERFACE:
      if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006ace:	2b03      	cmp	r3, #3
 8006ad0:	d00f      	beq.n	8006af2 <USBD_CDC_Setup+0x15a>
      {
        USBD_CtlError(pdev, req);
 8006ad2:	6839      	ldr	r1, [r7, #0]
 8006ad4:	6878      	ldr	r0, [r7, #4]
 8006ad6:	f001 f9bd 	bl	8007e54 <USBD_CtlError>
        ret = USBD_FAIL;
 8006ada:	2303      	movs	r3, #3
 8006adc:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8006ade:	e008      	b.n	8006af2 <USBD_CDC_Setup+0x15a>

    case USB_REQ_CLEAR_FEATURE:
      break;

    default:
      USBD_CtlError(pdev, req);
 8006ae0:	6839      	ldr	r1, [r7, #0]
 8006ae2:	6878      	ldr	r0, [r7, #4]
 8006ae4:	f001 f9b6 	bl	8007e54 <USBD_CtlError>
      ret = USBD_FAIL;
 8006ae8:	2303      	movs	r3, #3
 8006aea:	75fb      	strb	r3, [r7, #23]
      break;
 8006aec:	e002      	b.n	8006af4 <USBD_CDC_Setup+0x15c>
      break;
 8006aee:	bf00      	nop
 8006af0:	e008      	b.n	8006b04 <USBD_CDC_Setup+0x16c>
      break;
 8006af2:	bf00      	nop
    }
    break;
 8006af4:	e006      	b.n	8006b04 <USBD_CDC_Setup+0x16c>

  default:
    USBD_CtlError(pdev, req);
 8006af6:	6839      	ldr	r1, [r7, #0]
 8006af8:	6878      	ldr	r0, [r7, #4]
 8006afa:	f001 f9ab 	bl	8007e54 <USBD_CtlError>
    ret = USBD_FAIL;
 8006afe:	2303      	movs	r3, #3
 8006b00:	75fb      	strb	r3, [r7, #23]
    break;
 8006b02:	bf00      	nop
  }

  return (uint8_t)ret;
 8006b04:	7dfb      	ldrb	r3, [r7, #23]
}
 8006b06:	4618      	mov	r0, r3
 8006b08:	3718      	adds	r7, #24
 8006b0a:	46bd      	mov	sp, r7
 8006b0c:	bd80      	pop	{r7, pc}
 8006b0e:	bf00      	nop

08006b10 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006b10:	b580      	push	{r7, lr}
 8006b12:	b084      	sub	sp, #16
 8006b14:	af00      	add	r7, sp, #0
 8006b16:	6078      	str	r0, [r7, #4]
 8006b18:	460b      	mov	r3, r1
 8006b1a:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8006b22:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006b2a:	2b00      	cmp	r3, #0
 8006b2c:	d101      	bne.n	8006b32 <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8006b2e:	2303      	movs	r3, #3
 8006b30:	e049      	b.n	8006bc6 <USBD_CDC_DataIn+0xb6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006b38:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8006b3a:	78fa      	ldrb	r2, [r7, #3]
 8006b3c:	6879      	ldr	r1, [r7, #4]
 8006b3e:	4613      	mov	r3, r2
 8006b40:	009b      	lsls	r3, r3, #2
 8006b42:	4413      	add	r3, r2
 8006b44:	009b      	lsls	r3, r3, #2
 8006b46:	440b      	add	r3, r1
 8006b48:	3318      	adds	r3, #24
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	2b00      	cmp	r3, #0
 8006b4e:	d029      	beq.n	8006ba4 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8006b50:	78fa      	ldrb	r2, [r7, #3]
 8006b52:	6879      	ldr	r1, [r7, #4]
 8006b54:	4613      	mov	r3, r2
 8006b56:	009b      	lsls	r3, r3, #2
 8006b58:	4413      	add	r3, r2
 8006b5a:	009b      	lsls	r3, r3, #2
 8006b5c:	440b      	add	r3, r1
 8006b5e:	3318      	adds	r3, #24
 8006b60:	681a      	ldr	r2, [r3, #0]
 8006b62:	78f9      	ldrb	r1, [r7, #3]
 8006b64:	68f8      	ldr	r0, [r7, #12]
 8006b66:	460b      	mov	r3, r1
 8006b68:	00db      	lsls	r3, r3, #3
 8006b6a:	1a5b      	subs	r3, r3, r1
 8006b6c:	009b      	lsls	r3, r3, #2
 8006b6e:	4403      	add	r3, r0
 8006b70:	3344      	adds	r3, #68	; 0x44
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	fbb2 f1f3 	udiv	r1, r2, r3
 8006b78:	fb03 f301 	mul.w	r3, r3, r1
 8006b7c:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8006b7e:	2b00      	cmp	r3, #0
 8006b80:	d110      	bne.n	8006ba4 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 8006b82:	78fa      	ldrb	r2, [r7, #3]
 8006b84:	6879      	ldr	r1, [r7, #4]
 8006b86:	4613      	mov	r3, r2
 8006b88:	009b      	lsls	r3, r3, #2
 8006b8a:	4413      	add	r3, r2
 8006b8c:	009b      	lsls	r3, r3, #2
 8006b8e:	440b      	add	r3, r1
 8006b90:	3318      	adds	r3, #24
 8006b92:	2200      	movs	r2, #0
 8006b94:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8006b96:	78f9      	ldrb	r1, [r7, #3]
 8006b98:	2300      	movs	r3, #0
 8006b9a:	2200      	movs	r2, #0
 8006b9c:	6878      	ldr	r0, [r7, #4]
 8006b9e:	f001 ffde 	bl	8008b5e <USBD_LL_Transmit>
 8006ba2:	e00f      	b.n	8006bc4 <USBD_CDC_DataIn+0xb4>
  }
  else
  {
    hcdc->TxState = 0U;
 8006ba4:	68bb      	ldr	r3, [r7, #8]
 8006ba6:	2200      	movs	r2, #0
 8006ba8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006bb2:	691b      	ldr	r3, [r3, #16]
 8006bb4:	68ba      	ldr	r2, [r7, #8]
 8006bb6:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8006bba:	68ba      	ldr	r2, [r7, #8]
 8006bbc:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8006bc0:	78fa      	ldrb	r2, [r7, #3]
 8006bc2:	4798      	blx	r3
  }

  return (uint8_t)USBD_OK;
 8006bc4:	2300      	movs	r3, #0
}
 8006bc6:	4618      	mov	r0, r3
 8006bc8:	3710      	adds	r7, #16
 8006bca:	46bd      	mov	sp, r7
 8006bcc:	bd80      	pop	{r7, pc}

08006bce <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006bce:	b580      	push	{r7, lr}
 8006bd0:	b084      	sub	sp, #16
 8006bd2:	af00      	add	r7, sp, #0
 8006bd4:	6078      	str	r0, [r7, #4]
 8006bd6:	460b      	mov	r3, r1
 8006bd8:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006be0:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006be8:	2b00      	cmp	r3, #0
 8006bea:	d101      	bne.n	8006bf0 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8006bec:	2303      	movs	r3, #3
 8006bee:	e015      	b.n	8006c1c <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8006bf0:	78fb      	ldrb	r3, [r7, #3]
 8006bf2:	4619      	mov	r1, r3
 8006bf4:	6878      	ldr	r0, [r7, #4]
 8006bf6:	f001 fff4 	bl	8008be2 <USBD_LL_GetRxDataSize>
 8006bfa:	4602      	mov	r2, r0
 8006bfc:	68fb      	ldr	r3, [r7, #12]
 8006bfe:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006c08:	68db      	ldr	r3, [r3, #12]
 8006c0a:	68fa      	ldr	r2, [r7, #12]
 8006c0c:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8006c10:	68fa      	ldr	r2, [r7, #12]
 8006c12:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8006c16:	4611      	mov	r1, r2
 8006c18:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8006c1a:	2300      	movs	r3, #0
}
 8006c1c:	4618      	mov	r0, r3
 8006c1e:	3710      	adds	r7, #16
 8006c20:	46bd      	mov	sp, r7
 8006c22:	bd80      	pop	{r7, pc}

08006c24 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8006c24:	b580      	push	{r7, lr}
 8006c26:	b084      	sub	sp, #16
 8006c28:	af00      	add	r7, sp, #0
 8006c2a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006c32:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006c3a:	2b00      	cmp	r3, #0
 8006c3c:	d015      	beq.n	8006c6a <USBD_CDC_EP0_RxReady+0x46>
 8006c3e:	68fb      	ldr	r3, [r7, #12]
 8006c40:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8006c44:	2bff      	cmp	r3, #255	; 0xff
 8006c46:	d010      	beq.n	8006c6a <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006c4e:	689b      	ldr	r3, [r3, #8]
 8006c50:	68fa      	ldr	r2, [r7, #12]
 8006c52:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 8006c56:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8006c58:	68fa      	ldr	r2, [r7, #12]
 8006c5a:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8006c5e:	b292      	uxth	r2, r2
 8006c60:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8006c62:	68fb      	ldr	r3, [r7, #12]
 8006c64:	22ff      	movs	r2, #255	; 0xff
 8006c66:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }

  return (uint8_t)USBD_OK;
 8006c6a:	2300      	movs	r3, #0
}
 8006c6c:	4618      	mov	r0, r3
 8006c6e:	3710      	adds	r7, #16
 8006c70:	46bd      	mov	sp, r7
 8006c72:	bd80      	pop	{r7, pc}

08006c74 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8006c74:	b480      	push	{r7}
 8006c76:	b083      	sub	sp, #12
 8006c78:	af00      	add	r7, sp, #0
 8006c7a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	2243      	movs	r2, #67	; 0x43
 8006c80:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 8006c82:	4b03      	ldr	r3, [pc, #12]	; (8006c90 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8006c84:	4618      	mov	r0, r3
 8006c86:	370c      	adds	r7, #12
 8006c88:	46bd      	mov	sp, r7
 8006c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c8e:	4770      	bx	lr
 8006c90:	200000ac 	.word	0x200000ac

08006c94 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8006c94:	b480      	push	{r7}
 8006c96:	b083      	sub	sp, #12
 8006c98:	af00      	add	r7, sp, #0
 8006c9a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	2243      	movs	r2, #67	; 0x43
 8006ca0:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 8006ca2:	4b03      	ldr	r3, [pc, #12]	; (8006cb0 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8006ca4:	4618      	mov	r0, r3
 8006ca6:	370c      	adds	r7, #12
 8006ca8:	46bd      	mov	sp, r7
 8006caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cae:	4770      	bx	lr
 8006cb0:	20000068 	.word	0x20000068

08006cb4 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8006cb4:	b480      	push	{r7}
 8006cb6:	b083      	sub	sp, #12
 8006cb8:	af00      	add	r7, sp, #0
 8006cba:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	2243      	movs	r2, #67	; 0x43
 8006cc0:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 8006cc2:	4b03      	ldr	r3, [pc, #12]	; (8006cd0 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8006cc4:	4618      	mov	r0, r3
 8006cc6:	370c      	adds	r7, #12
 8006cc8:	46bd      	mov	sp, r7
 8006cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cce:	4770      	bx	lr
 8006cd0:	200000f0 	.word	0x200000f0

08006cd4 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8006cd4:	b480      	push	{r7}
 8006cd6:	b083      	sub	sp, #12
 8006cd8:	af00      	add	r7, sp, #0
 8006cda:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	220a      	movs	r2, #10
 8006ce0:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8006ce2:	4b03      	ldr	r3, [pc, #12]	; (8006cf0 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8006ce4:	4618      	mov	r0, r3
 8006ce6:	370c      	adds	r7, #12
 8006ce8:	46bd      	mov	sp, r7
 8006cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cee:	4770      	bx	lr
 8006cf0:	20000024 	.word	0x20000024

08006cf4 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8006cf4:	b480      	push	{r7}
 8006cf6:	b083      	sub	sp, #12
 8006cf8:	af00      	add	r7, sp, #0
 8006cfa:	6078      	str	r0, [r7, #4]
 8006cfc:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8006cfe:	683b      	ldr	r3, [r7, #0]
 8006d00:	2b00      	cmp	r3, #0
 8006d02:	d101      	bne.n	8006d08 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8006d04:	2303      	movs	r3, #3
 8006d06:	e004      	b.n	8006d12 <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	683a      	ldr	r2, [r7, #0]
 8006d0c:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 8006d10:	2300      	movs	r3, #0
}
 8006d12:	4618      	mov	r0, r3
 8006d14:	370c      	adds	r7, #12
 8006d16:	46bd      	mov	sp, r7
 8006d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d1c:	4770      	bx	lr

08006d1e <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8006d1e:	b480      	push	{r7}
 8006d20:	b087      	sub	sp, #28
 8006d22:	af00      	add	r7, sp, #0
 8006d24:	60f8      	str	r0, [r7, #12]
 8006d26:	60b9      	str	r1, [r7, #8]
 8006d28:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006d2a:	68fb      	ldr	r3, [r7, #12]
 8006d2c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006d30:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8006d32:	697b      	ldr	r3, [r7, #20]
 8006d34:	68ba      	ldr	r2, [r7, #8]
 8006d36:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8006d3a:	697b      	ldr	r3, [r7, #20]
 8006d3c:	687a      	ldr	r2, [r7, #4]
 8006d3e:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8006d42:	2300      	movs	r3, #0
}
 8006d44:	4618      	mov	r0, r3
 8006d46:	371c      	adds	r7, #28
 8006d48:	46bd      	mov	sp, r7
 8006d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d4e:	4770      	bx	lr

08006d50 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8006d50:	b480      	push	{r7}
 8006d52:	b085      	sub	sp, #20
 8006d54:	af00      	add	r7, sp, #0
 8006d56:	6078      	str	r0, [r7, #4]
 8006d58:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006d60:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8006d62:	68fb      	ldr	r3, [r7, #12]
 8006d64:	683a      	ldr	r2, [r7, #0]
 8006d66:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8006d6a:	2300      	movs	r3, #0
}
 8006d6c:	4618      	mov	r0, r3
 8006d6e:	3714      	adds	r7, #20
 8006d70:	46bd      	mov	sp, r7
 8006d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d76:	4770      	bx	lr

08006d78 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8006d78:	b580      	push	{r7, lr}
 8006d7a:	b084      	sub	sp, #16
 8006d7c:	af00      	add	r7, sp, #0
 8006d7e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006d86:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 8006d88:	2301      	movs	r3, #1
 8006d8a:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006d92:	2b00      	cmp	r3, #0
 8006d94:	d101      	bne.n	8006d9a <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8006d96:	2303      	movs	r3, #3
 8006d98:	e01a      	b.n	8006dd0 <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 8006d9a:	68bb      	ldr	r3, [r7, #8]
 8006d9c:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8006da0:	2b00      	cmp	r3, #0
 8006da2:	d114      	bne.n	8006dce <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8006da4:	68bb      	ldr	r3, [r7, #8]
 8006da6:	2201      	movs	r2, #1
 8006da8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8006dac:	68bb      	ldr	r3, [r7, #8]
 8006dae:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 8006db6:	68bb      	ldr	r3, [r7, #8]
 8006db8:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8006dbc:	68bb      	ldr	r3, [r7, #8]
 8006dbe:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8006dc2:	2181      	movs	r1, #129	; 0x81
 8006dc4:	6878      	ldr	r0, [r7, #4]
 8006dc6:	f001 feca 	bl	8008b5e <USBD_LL_Transmit>

    ret = USBD_OK;
 8006dca:	2300      	movs	r3, #0
 8006dcc:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8006dce:	7bfb      	ldrb	r3, [r7, #15]
}
 8006dd0:	4618      	mov	r0, r3
 8006dd2:	3710      	adds	r7, #16
 8006dd4:	46bd      	mov	sp, r7
 8006dd6:	bd80      	pop	{r7, pc}

08006dd8 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8006dd8:	b580      	push	{r7, lr}
 8006dda:	b084      	sub	sp, #16
 8006ddc:	af00      	add	r7, sp, #0
 8006dde:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006de6:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006dee:	2b00      	cmp	r3, #0
 8006df0:	d101      	bne.n	8006df6 <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8006df2:	2303      	movs	r3, #3
 8006df4:	e016      	b.n	8006e24 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	7c1b      	ldrb	r3, [r3, #16]
 8006dfa:	2b00      	cmp	r3, #0
 8006dfc:	d109      	bne.n	8006e12 <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8006dfe:	68fb      	ldr	r3, [r7, #12]
 8006e00:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006e04:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006e08:	2101      	movs	r1, #1
 8006e0a:	6878      	ldr	r0, [r7, #4]
 8006e0c:	f001 fec8 	bl	8008ba0 <USBD_LL_PrepareReceive>
 8006e10:	e007      	b.n	8006e22 <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8006e12:	68fb      	ldr	r3, [r7, #12]
 8006e14:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006e18:	2340      	movs	r3, #64	; 0x40
 8006e1a:	2101      	movs	r1, #1
 8006e1c:	6878      	ldr	r0, [r7, #4]
 8006e1e:	f001 febf 	bl	8008ba0 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8006e22:	2300      	movs	r3, #0
}
 8006e24:	4618      	mov	r0, r3
 8006e26:	3710      	adds	r7, #16
 8006e28:	46bd      	mov	sp, r7
 8006e2a:	bd80      	pop	{r7, pc}

08006e2c <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8006e2c:	b580      	push	{r7, lr}
 8006e2e:	b086      	sub	sp, #24
 8006e30:	af00      	add	r7, sp, #0
 8006e32:	60f8      	str	r0, [r7, #12]
 8006e34:	60b9      	str	r1, [r7, #8]
 8006e36:	4613      	mov	r3, r2
 8006e38:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8006e3a:	68fb      	ldr	r3, [r7, #12]
 8006e3c:	2b00      	cmp	r3, #0
 8006e3e:	d101      	bne.n	8006e44 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8006e40:	2303      	movs	r3, #3
 8006e42:	e025      	b.n	8006e90 <USBD_Init+0x64>
  }

  /* Unlink previous class */
  if (pdev->pClass != NULL)
 8006e44:	68fb      	ldr	r3, [r7, #12]
 8006e46:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006e4a:	2b00      	cmp	r3, #0
 8006e4c:	d003      	beq.n	8006e56 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8006e4e:	68fb      	ldr	r3, [r7, #12]
 8006e50:	2200      	movs	r2, #0
 8006e52:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  if (pdev->pConfDesc != NULL)
 8006e56:	68fb      	ldr	r3, [r7, #12]
 8006e58:	f8d3 32cc 	ldr.w	r3, [r3, #716]	; 0x2cc
 8006e5c:	2b00      	cmp	r3, #0
 8006e5e:	d003      	beq.n	8006e68 <USBD_Init+0x3c>
  {
    pdev->pConfDesc = NULL;
 8006e60:	68fb      	ldr	r3, [r7, #12]
 8006e62:	2200      	movs	r2, #0
 8006e64:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8006e68:	68bb      	ldr	r3, [r7, #8]
 8006e6a:	2b00      	cmp	r3, #0
 8006e6c:	d003      	beq.n	8006e76 <USBD_Init+0x4a>
  {
    pdev->pDesc = pdesc;
 8006e6e:	68fb      	ldr	r3, [r7, #12]
 8006e70:	68ba      	ldr	r2, [r7, #8]
 8006e72:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006e76:	68fb      	ldr	r3, [r7, #12]
 8006e78:	2201      	movs	r2, #1
 8006e7a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8006e7e:	68fb      	ldr	r3, [r7, #12]
 8006e80:	79fa      	ldrb	r2, [r7, #7]
 8006e82:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8006e84:	68f8      	ldr	r0, [r7, #12]
 8006e86:	f001 fd35 	bl	80088f4 <USBD_LL_Init>
 8006e8a:	4603      	mov	r3, r0
 8006e8c:	75fb      	strb	r3, [r7, #23]

  return ret;
 8006e8e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006e90:	4618      	mov	r0, r3
 8006e92:	3718      	adds	r7, #24
 8006e94:	46bd      	mov	sp, r7
 8006e96:	bd80      	pop	{r7, pc}

08006e98 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8006e98:	b580      	push	{r7, lr}
 8006e9a:	b084      	sub	sp, #16
 8006e9c:	af00      	add	r7, sp, #0
 8006e9e:	6078      	str	r0, [r7, #4]
 8006ea0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8006ea2:	2300      	movs	r3, #0
 8006ea4:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8006ea6:	683b      	ldr	r3, [r7, #0]
 8006ea8:	2b00      	cmp	r3, #0
 8006eaa:	d101      	bne.n	8006eb0 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 8006eac:	2303      	movs	r3, #3
 8006eae:	e010      	b.n	8006ed2 <USBD_RegisterClass+0x3a>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	683a      	ldr	r2, [r7, #0]
 8006eb4:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  /* Get Device Configuration Descriptor */
#ifdef USE_USB_FS
  pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
#else /* USE_USB_HS */
  pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006ebe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ec0:	f107 020e 	add.w	r2, r7, #14
 8006ec4:	4610      	mov	r0, r2
 8006ec6:	4798      	blx	r3
 8006ec8:	4602      	mov	r2, r0
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
#endif /* USE_USB_FS */


  return USBD_OK;
 8006ed0:	2300      	movs	r3, #0
}
 8006ed2:	4618      	mov	r0, r3
 8006ed4:	3710      	adds	r7, #16
 8006ed6:	46bd      	mov	sp, r7
 8006ed8:	bd80      	pop	{r7, pc}

08006eda <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8006eda:	b580      	push	{r7, lr}
 8006edc:	b082      	sub	sp, #8
 8006ede:	af00      	add	r7, sp, #0
 8006ee0:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8006ee2:	6878      	ldr	r0, [r7, #4]
 8006ee4:	f001 fd52 	bl	800898c <USBD_LL_Start>
 8006ee8:	4603      	mov	r3, r0
}
 8006eea:	4618      	mov	r0, r3
 8006eec:	3708      	adds	r7, #8
 8006eee:	46bd      	mov	sp, r7
 8006ef0:	bd80      	pop	{r7, pc}

08006ef2 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8006ef2:	b480      	push	{r7}
 8006ef4:	b083      	sub	sp, #12
 8006ef6:	af00      	add	r7, sp, #0
 8006ef8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006efa:	2300      	movs	r3, #0
}
 8006efc:	4618      	mov	r0, r3
 8006efe:	370c      	adds	r7, #12
 8006f00:	46bd      	mov	sp, r7
 8006f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f06:	4770      	bx	lr

08006f08 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006f08:	b580      	push	{r7, lr}
 8006f0a:	b084      	sub	sp, #16
 8006f0c:	af00      	add	r7, sp, #0
 8006f0e:	6078      	str	r0, [r7, #4]
 8006f10:	460b      	mov	r3, r1
 8006f12:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8006f14:	2303      	movs	r3, #3
 8006f16:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006f1e:	2b00      	cmp	r3, #0
 8006f20:	d009      	beq.n	8006f36 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	78fa      	ldrb	r2, [r7, #3]
 8006f2c:	4611      	mov	r1, r2
 8006f2e:	6878      	ldr	r0, [r7, #4]
 8006f30:	4798      	blx	r3
 8006f32:	4603      	mov	r3, r0
 8006f34:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8006f36:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f38:	4618      	mov	r0, r3
 8006f3a:	3710      	adds	r7, #16
 8006f3c:	46bd      	mov	sp, r7
 8006f3e:	bd80      	pop	{r7, pc}

08006f40 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006f40:	b580      	push	{r7, lr}
 8006f42:	b082      	sub	sp, #8
 8006f44:	af00      	add	r7, sp, #0
 8006f46:	6078      	str	r0, [r7, #4]
 8006f48:	460b      	mov	r3, r1
 8006f4a:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006f52:	2b00      	cmp	r3, #0
 8006f54:	d007      	beq.n	8006f66 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006f5c:	685b      	ldr	r3, [r3, #4]
 8006f5e:	78fa      	ldrb	r2, [r7, #3]
 8006f60:	4611      	mov	r1, r2
 8006f62:	6878      	ldr	r0, [r7, #4]
 8006f64:	4798      	blx	r3
  }

  return USBD_OK;
 8006f66:	2300      	movs	r3, #0
}
 8006f68:	4618      	mov	r0, r3
 8006f6a:	3708      	adds	r7, #8
 8006f6c:	46bd      	mov	sp, r7
 8006f6e:	bd80      	pop	{r7, pc}

08006f70 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8006f70:	b580      	push	{r7, lr}
 8006f72:	b084      	sub	sp, #16
 8006f74:	af00      	add	r7, sp, #0
 8006f76:	6078      	str	r0, [r7, #4]
 8006f78:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006f80:	6839      	ldr	r1, [r7, #0]
 8006f82:	4618      	mov	r0, r3
 8006f84:	f000 ff2c 	bl	8007de0 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	2201      	movs	r2, #1
 8006f8c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8006f96:	461a      	mov	r2, r3
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8006fa4:	f003 031f 	and.w	r3, r3, #31
 8006fa8:	2b01      	cmp	r3, #1
 8006faa:	d00e      	beq.n	8006fca <USBD_LL_SetupStage+0x5a>
 8006fac:	2b01      	cmp	r3, #1
 8006fae:	d302      	bcc.n	8006fb6 <USBD_LL_SetupStage+0x46>
 8006fb0:	2b02      	cmp	r3, #2
 8006fb2:	d014      	beq.n	8006fde <USBD_LL_SetupStage+0x6e>
 8006fb4:	e01d      	b.n	8006ff2 <USBD_LL_SetupStage+0x82>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006fbc:	4619      	mov	r1, r3
 8006fbe:	6878      	ldr	r0, [r7, #4]
 8006fc0:	f000 fa18 	bl	80073f4 <USBD_StdDevReq>
 8006fc4:	4603      	mov	r3, r0
 8006fc6:	73fb      	strb	r3, [r7, #15]
      break;
 8006fc8:	e020      	b.n	800700c <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006fd0:	4619      	mov	r1, r3
 8006fd2:	6878      	ldr	r0, [r7, #4]
 8006fd4:	f000 fa7c 	bl	80074d0 <USBD_StdItfReq>
 8006fd8:	4603      	mov	r3, r0
 8006fda:	73fb      	strb	r3, [r7, #15]
      break;
 8006fdc:	e016      	b.n	800700c <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006fe4:	4619      	mov	r1, r3
 8006fe6:	6878      	ldr	r0, [r7, #4]
 8006fe8:	f000 fab8 	bl	800755c <USBD_StdEPReq>
 8006fec:	4603      	mov	r3, r0
 8006fee:	73fb      	strb	r3, [r7, #15]
      break;
 8006ff0:	e00c      	b.n	800700c <USBD_LL_SetupStage+0x9c>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8006ff8:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8006ffc:	b2db      	uxtb	r3, r3
 8006ffe:	4619      	mov	r1, r3
 8007000:	6878      	ldr	r0, [r7, #4]
 8007002:	f001 fd23 	bl	8008a4c <USBD_LL_StallEP>
 8007006:	4603      	mov	r3, r0
 8007008:	73fb      	strb	r3, [r7, #15]
      break;
 800700a:	bf00      	nop
  }

  return ret;
 800700c:	7bfb      	ldrb	r3, [r7, #15]
}
 800700e:	4618      	mov	r0, r3
 8007010:	3710      	adds	r7, #16
 8007012:	46bd      	mov	sp, r7
 8007014:	bd80      	pop	{r7, pc}

08007016 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8007016:	b580      	push	{r7, lr}
 8007018:	b086      	sub	sp, #24
 800701a:	af00      	add	r7, sp, #0
 800701c:	60f8      	str	r0, [r7, #12]
 800701e:	460b      	mov	r3, r1
 8007020:	607a      	str	r2, [r7, #4]
 8007022:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8007024:	7afb      	ldrb	r3, [r7, #11]
 8007026:	2b00      	cmp	r3, #0
 8007028:	d137      	bne.n	800709a <USBD_LL_DataOutStage+0x84>
  {
    pep = &pdev->ep_out[0];
 800702a:	68fb      	ldr	r3, [r7, #12]
 800702c:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8007030:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8007032:	68fb      	ldr	r3, [r7, #12]
 8007034:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007038:	2b03      	cmp	r3, #3
 800703a:	d14a      	bne.n	80070d2 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 800703c:	693b      	ldr	r3, [r7, #16]
 800703e:	689a      	ldr	r2, [r3, #8]
 8007040:	693b      	ldr	r3, [r7, #16]
 8007042:	68db      	ldr	r3, [r3, #12]
 8007044:	429a      	cmp	r2, r3
 8007046:	d913      	bls.n	8007070 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8007048:	693b      	ldr	r3, [r7, #16]
 800704a:	689a      	ldr	r2, [r3, #8]
 800704c:	693b      	ldr	r3, [r7, #16]
 800704e:	68db      	ldr	r3, [r3, #12]
 8007050:	1ad2      	subs	r2, r2, r3
 8007052:	693b      	ldr	r3, [r7, #16]
 8007054:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8007056:	693b      	ldr	r3, [r7, #16]
 8007058:	68da      	ldr	r2, [r3, #12]
 800705a:	693b      	ldr	r3, [r7, #16]
 800705c:	689b      	ldr	r3, [r3, #8]
 800705e:	4293      	cmp	r3, r2
 8007060:	bf28      	it	cs
 8007062:	4613      	movcs	r3, r2
 8007064:	461a      	mov	r2, r3
 8007066:	6879      	ldr	r1, [r7, #4]
 8007068:	68f8      	ldr	r0, [r7, #12]
 800706a:	f000 ffad 	bl	8007fc8 <USBD_CtlContinueRx>
 800706e:	e030      	b.n	80070d2 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8007070:	68fb      	ldr	r3, [r7, #12]
 8007072:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007076:	691b      	ldr	r3, [r3, #16]
 8007078:	2b00      	cmp	r3, #0
 800707a:	d00a      	beq.n	8007092 <USBD_LL_DataOutStage+0x7c>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 800707c:	68fb      	ldr	r3, [r7, #12]
 800707e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8007082:	2b03      	cmp	r3, #3
 8007084:	d105      	bne.n	8007092 <USBD_LL_DataOutStage+0x7c>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8007086:	68fb      	ldr	r3, [r7, #12]
 8007088:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800708c:	691b      	ldr	r3, [r3, #16]
 800708e:	68f8      	ldr	r0, [r7, #12]
 8007090:	4798      	blx	r3
        }
        (void)USBD_CtlSendStatus(pdev);
 8007092:	68f8      	ldr	r0, [r7, #12]
 8007094:	f000 ffa9 	bl	8007fea <USBD_CtlSendStatus>
 8007098:	e01b      	b.n	80070d2 <USBD_LL_DataOutStage+0xbc>
        (void)USBD_LL_StallEP(pdev, 0U);
      }
#endif
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 800709a:	68fb      	ldr	r3, [r7, #12]
 800709c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80070a0:	699b      	ldr	r3, [r3, #24]
 80070a2:	2b00      	cmp	r3, #0
 80070a4:	d013      	beq.n	80070ce <USBD_LL_DataOutStage+0xb8>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80070a6:	68fb      	ldr	r3, [r7, #12]
 80070a8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 80070ac:	2b03      	cmp	r3, #3
 80070ae:	d10e      	bne.n	80070ce <USBD_LL_DataOutStage+0xb8>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 80070b0:	68fb      	ldr	r3, [r7, #12]
 80070b2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80070b6:	699b      	ldr	r3, [r3, #24]
 80070b8:	7afa      	ldrb	r2, [r7, #11]
 80070ba:	4611      	mov	r1, r2
 80070bc:	68f8      	ldr	r0, [r7, #12]
 80070be:	4798      	blx	r3
 80070c0:	4603      	mov	r3, r0
 80070c2:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 80070c4:	7dfb      	ldrb	r3, [r7, #23]
 80070c6:	2b00      	cmp	r3, #0
 80070c8:	d003      	beq.n	80070d2 <USBD_LL_DataOutStage+0xbc>
    {
      return ret;
 80070ca:	7dfb      	ldrb	r3, [r7, #23]
 80070cc:	e002      	b.n	80070d4 <USBD_LL_DataOutStage+0xbe>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80070ce:	2303      	movs	r3, #3
 80070d0:	e000      	b.n	80070d4 <USBD_LL_DataOutStage+0xbe>
  }

  return USBD_OK;
 80070d2:	2300      	movs	r3, #0
}
 80070d4:	4618      	mov	r0, r3
 80070d6:	3718      	adds	r7, #24
 80070d8:	46bd      	mov	sp, r7
 80070da:	bd80      	pop	{r7, pc}

080070dc <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80070dc:	b580      	push	{r7, lr}
 80070de:	b086      	sub	sp, #24
 80070e0:	af00      	add	r7, sp, #0
 80070e2:	60f8      	str	r0, [r7, #12]
 80070e4:	460b      	mov	r3, r1
 80070e6:	607a      	str	r2, [r7, #4]
 80070e8:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 80070ea:	7afb      	ldrb	r3, [r7, #11]
 80070ec:	2b00      	cmp	r3, #0
 80070ee:	d16a      	bne.n	80071c6 <USBD_LL_DataInStage+0xea>
  {
    pep = &pdev->ep_in[0];
 80070f0:	68fb      	ldr	r3, [r7, #12]
 80070f2:	3314      	adds	r3, #20
 80070f4:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80070f6:	68fb      	ldr	r3, [r7, #12]
 80070f8:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80070fc:	2b02      	cmp	r3, #2
 80070fe:	d155      	bne.n	80071ac <USBD_LL_DataInStage+0xd0>
    {
      if (pep->rem_length > pep->maxpacket)
 8007100:	693b      	ldr	r3, [r7, #16]
 8007102:	689a      	ldr	r2, [r3, #8]
 8007104:	693b      	ldr	r3, [r7, #16]
 8007106:	68db      	ldr	r3, [r3, #12]
 8007108:	429a      	cmp	r2, r3
 800710a:	d914      	bls.n	8007136 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800710c:	693b      	ldr	r3, [r7, #16]
 800710e:	689a      	ldr	r2, [r3, #8]
 8007110:	693b      	ldr	r3, [r7, #16]
 8007112:	68db      	ldr	r3, [r3, #12]
 8007114:	1ad2      	subs	r2, r2, r3
 8007116:	693b      	ldr	r3, [r7, #16]
 8007118:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800711a:	693b      	ldr	r3, [r7, #16]
 800711c:	689b      	ldr	r3, [r3, #8]
 800711e:	461a      	mov	r2, r3
 8007120:	6879      	ldr	r1, [r7, #4]
 8007122:	68f8      	ldr	r0, [r7, #12]
 8007124:	f000 ff22 	bl	8007f6c <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
       (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007128:	2300      	movs	r3, #0
 800712a:	2200      	movs	r2, #0
 800712c:	2100      	movs	r1, #0
 800712e:	68f8      	ldr	r0, [r7, #12]
 8007130:	f001 fd36 	bl	8008ba0 <USBD_LL_PrepareReceive>
 8007134:	e03a      	b.n	80071ac <USBD_LL_DataInStage+0xd0>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8007136:	693b      	ldr	r3, [r7, #16]
 8007138:	68da      	ldr	r2, [r3, #12]
 800713a:	693b      	ldr	r3, [r7, #16]
 800713c:	689b      	ldr	r3, [r3, #8]
 800713e:	429a      	cmp	r2, r3
 8007140:	d11c      	bne.n	800717c <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8007142:	693b      	ldr	r3, [r7, #16]
 8007144:	685a      	ldr	r2, [r3, #4]
 8007146:	693b      	ldr	r3, [r7, #16]
 8007148:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800714a:	429a      	cmp	r2, r3
 800714c:	d316      	bcc.n	800717c <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800714e:	693b      	ldr	r3, [r7, #16]
 8007150:	685a      	ldr	r2, [r3, #4]
 8007152:	68fb      	ldr	r3, [r7, #12]
 8007154:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8007158:	429a      	cmp	r2, r3
 800715a:	d20f      	bcs.n	800717c <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800715c:	2200      	movs	r2, #0
 800715e:	2100      	movs	r1, #0
 8007160:	68f8      	ldr	r0, [r7, #12]
 8007162:	f000 ff03 	bl	8007f6c <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8007166:	68fb      	ldr	r3, [r7, #12]
 8007168:	2200      	movs	r2, #0
 800716a:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800716e:	2300      	movs	r3, #0
 8007170:	2200      	movs	r2, #0
 8007172:	2100      	movs	r1, #0
 8007174:	68f8      	ldr	r0, [r7, #12]
 8007176:	f001 fd13 	bl	8008ba0 <USBD_LL_PrepareReceive>
 800717a:	e017      	b.n	80071ac <USBD_LL_DataInStage+0xd0>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800717c:	68fb      	ldr	r3, [r7, #12]
 800717e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007182:	68db      	ldr	r3, [r3, #12]
 8007184:	2b00      	cmp	r3, #0
 8007186:	d00a      	beq.n	800719e <USBD_LL_DataInStage+0xc2>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007188:	68fb      	ldr	r3, [r7, #12]
 800718a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800718e:	2b03      	cmp	r3, #3
 8007190:	d105      	bne.n	800719e <USBD_LL_DataInStage+0xc2>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8007192:	68fb      	ldr	r3, [r7, #12]
 8007194:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007198:	68db      	ldr	r3, [r3, #12]
 800719a:	68f8      	ldr	r0, [r7, #12]
 800719c:	4798      	blx	r3
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800719e:	2180      	movs	r1, #128	; 0x80
 80071a0:	68f8      	ldr	r0, [r7, #12]
 80071a2:	f001 fc53 	bl	8008a4c <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 80071a6:	68f8      	ldr	r0, [r7, #12]
 80071a8:	f000 ff32 	bl	8008010 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 80071ac:	68fb      	ldr	r3, [r7, #12]
 80071ae:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 80071b2:	2b01      	cmp	r3, #1
 80071b4:	d123      	bne.n	80071fe <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 80071b6:	68f8      	ldr	r0, [r7, #12]
 80071b8:	f7ff fe9b 	bl	8006ef2 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80071bc:	68fb      	ldr	r3, [r7, #12]
 80071be:	2200      	movs	r2, #0
 80071c0:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 80071c4:	e01b      	b.n	80071fe <USBD_LL_DataInStage+0x122>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 80071c6:	68fb      	ldr	r3, [r7, #12]
 80071c8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80071cc:	695b      	ldr	r3, [r3, #20]
 80071ce:	2b00      	cmp	r3, #0
 80071d0:	d013      	beq.n	80071fa <USBD_LL_DataInStage+0x11e>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80071d2:	68fb      	ldr	r3, [r7, #12]
 80071d4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 80071d8:	2b03      	cmp	r3, #3
 80071da:	d10e      	bne.n	80071fa <USBD_LL_DataInStage+0x11e>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 80071dc:	68fb      	ldr	r3, [r7, #12]
 80071de:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80071e2:	695b      	ldr	r3, [r3, #20]
 80071e4:	7afa      	ldrb	r2, [r7, #11]
 80071e6:	4611      	mov	r1, r2
 80071e8:	68f8      	ldr	r0, [r7, #12]
 80071ea:	4798      	blx	r3
 80071ec:	4603      	mov	r3, r0
 80071ee:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 80071f0:	7dfb      	ldrb	r3, [r7, #23]
 80071f2:	2b00      	cmp	r3, #0
 80071f4:	d003      	beq.n	80071fe <USBD_LL_DataInStage+0x122>
    {
      return ret;
 80071f6:	7dfb      	ldrb	r3, [r7, #23]
 80071f8:	e002      	b.n	8007200 <USBD_LL_DataInStage+0x124>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80071fa:	2303      	movs	r3, #3
 80071fc:	e000      	b.n	8007200 <USBD_LL_DataInStage+0x124>
  }

  return USBD_OK;
 80071fe:	2300      	movs	r3, #0
}
 8007200:	4618      	mov	r0, r3
 8007202:	3718      	adds	r7, #24
 8007204:	46bd      	mov	sp, r7
 8007206:	bd80      	pop	{r7, pc}

08007208 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8007208:	b580      	push	{r7, lr}
 800720a:	b082      	sub	sp, #8
 800720c:	af00      	add	r7, sp, #0
 800720e:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	2201      	movs	r2, #1
 8007214:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	2200      	movs	r2, #0
 800721c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	2200      	movs	r2, #0
 8007224:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	2200      	movs	r2, #0
 800722a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData != NULL)
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007234:	2b00      	cmp	r3, #0
 8007236:	d009      	beq.n	800724c <USBD_LL_Reset+0x44>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800723e:	685b      	ldr	r3, [r3, #4]
 8007240:	687a      	ldr	r2, [r7, #4]
 8007242:	6852      	ldr	r2, [r2, #4]
 8007244:	b2d2      	uxtb	r2, r2
 8007246:	4611      	mov	r1, r2
 8007248:	6878      	ldr	r0, [r7, #4]
 800724a:	4798      	blx	r3
  }

    /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800724c:	2340      	movs	r3, #64	; 0x40
 800724e:	2200      	movs	r2, #0
 8007250:	2100      	movs	r1, #0
 8007252:	6878      	ldr	r0, [r7, #4]
 8007254:	f001 fbb5 	bl	80089c2 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	2201      	movs	r2, #1
 800725c:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	2240      	movs	r2, #64	; 0x40
 8007264:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007268:	2340      	movs	r3, #64	; 0x40
 800726a:	2200      	movs	r2, #0
 800726c:	2180      	movs	r1, #128	; 0x80
 800726e:	6878      	ldr	r0, [r7, #4]
 8007270:	f001 fba7 	bl	80089c2 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	2201      	movs	r2, #1
 8007278:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	2240      	movs	r2, #64	; 0x40
 800727e:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 8007280:	2300      	movs	r3, #0
}
 8007282:	4618      	mov	r0, r3
 8007284:	3708      	adds	r7, #8
 8007286:	46bd      	mov	sp, r7
 8007288:	bd80      	pop	{r7, pc}

0800728a <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800728a:	b480      	push	{r7}
 800728c:	b083      	sub	sp, #12
 800728e:	af00      	add	r7, sp, #0
 8007290:	6078      	str	r0, [r7, #4]
 8007292:	460b      	mov	r3, r1
 8007294:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	78fa      	ldrb	r2, [r7, #3]
 800729a:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800729c:	2300      	movs	r3, #0
}
 800729e:	4618      	mov	r0, r3
 80072a0:	370c      	adds	r7, #12
 80072a2:	46bd      	mov	sp, r7
 80072a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072a8:	4770      	bx	lr

080072aa <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80072aa:	b480      	push	{r7}
 80072ac:	b083      	sub	sp, #12
 80072ae:	af00      	add	r7, sp, #0
 80072b0:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	2204      	movs	r2, #4
 80072c2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 80072c6:	2300      	movs	r3, #0
}
 80072c8:	4618      	mov	r0, r3
 80072ca:	370c      	adds	r7, #12
 80072cc:	46bd      	mov	sp, r7
 80072ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072d2:	4770      	bx	lr

080072d4 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80072d4:	b480      	push	{r7}
 80072d6:	b083      	sub	sp, #12
 80072d8:	af00      	add	r7, sp, #0
 80072da:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80072e2:	2b04      	cmp	r3, #4
 80072e4:	d105      	bne.n	80072f2 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 80072f2:	2300      	movs	r3, #0
}
 80072f4:	4618      	mov	r0, r3
 80072f6:	370c      	adds	r7, #12
 80072f8:	46bd      	mov	sp, r7
 80072fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072fe:	4770      	bx	lr

08007300 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8007300:	b580      	push	{r7, lr}
 8007302:	b082      	sub	sp, #8
 8007304:	af00      	add	r7, sp, #0
 8007306:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800730e:	2b03      	cmp	r3, #3
 8007310:	d10b      	bne.n	800732a <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007318:	69db      	ldr	r3, [r3, #28]
 800731a:	2b00      	cmp	r3, #0
 800731c:	d005      	beq.n	800732a <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007324:	69db      	ldr	r3, [r3, #28]
 8007326:	6878      	ldr	r0, [r7, #4]
 8007328:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800732a:	2300      	movs	r3, #0
}
 800732c:	4618      	mov	r0, r3
 800732e:	3708      	adds	r7, #8
 8007330:	46bd      	mov	sp, r7
 8007332:	bd80      	pop	{r7, pc}

08007334 <USBD_LL_IsoINIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8007334:	b480      	push	{r7}
 8007336:	b083      	sub	sp, #12
 8007338:	af00      	add	r7, sp, #0
 800733a:	6078      	str	r0, [r7, #4]
 800733c:	460b      	mov	r3, r1
 800733e:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 8007340:	2300      	movs	r3, #0
}
 8007342:	4618      	mov	r0, r3
 8007344:	370c      	adds	r7, #12
 8007346:	46bd      	mov	sp, r7
 8007348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800734c:	4770      	bx	lr

0800734e <USBD_LL_IsoOUTIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800734e:	b480      	push	{r7}
 8007350:	b083      	sub	sp, #12
 8007352:	af00      	add	r7, sp, #0
 8007354:	6078      	str	r0, [r7, #4]
 8007356:	460b      	mov	r3, r1
 8007358:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 800735a:	2300      	movs	r3, #0
}
 800735c:	4618      	mov	r0, r3
 800735e:	370c      	adds	r7, #12
 8007360:	46bd      	mov	sp, r7
 8007362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007366:	4770      	bx	lr

08007368 <USBD_LL_DevConnected>:
*         Handle device connection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8007368:	b480      	push	{r7}
 800736a:	b083      	sub	sp, #12
 800736c:	af00      	add	r7, sp, #0
 800736e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007370:	2300      	movs	r3, #0
}
 8007372:	4618      	mov	r0, r3
 8007374:	370c      	adds	r7, #12
 8007376:	46bd      	mov	sp, r7
 8007378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800737c:	4770      	bx	lr

0800737e <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800737e:	b580      	push	{r7, lr}
 8007380:	b082      	sub	sp, #8
 8007382:	af00      	add	r7, sp, #0
 8007384:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	2201      	movs	r2, #1
 800738a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007394:	2b00      	cmp	r3, #0
 8007396:	d009      	beq.n	80073ac <USBD_LL_DevDisconnected+0x2e>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800739e:	685b      	ldr	r3, [r3, #4]
 80073a0:	687a      	ldr	r2, [r7, #4]
 80073a2:	6852      	ldr	r2, [r2, #4]
 80073a4:	b2d2      	uxtb	r2, r2
 80073a6:	4611      	mov	r1, r2
 80073a8:	6878      	ldr	r0, [r7, #4]
 80073aa:	4798      	blx	r3
  }

  return USBD_OK;
 80073ac:	2300      	movs	r3, #0
}
 80073ae:	4618      	mov	r0, r3
 80073b0:	3708      	adds	r7, #8
 80073b2:	46bd      	mov	sp, r7
 80073b4:	bd80      	pop	{r7, pc}

080073b6 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 80073b6:	b480      	push	{r7}
 80073b8:	b087      	sub	sp, #28
 80073ba:	af00      	add	r7, sp, #0
 80073bc:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 80073c2:	697b      	ldr	r3, [r7, #20]
 80073c4:	781b      	ldrb	r3, [r3, #0]
 80073c6:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 80073c8:	697b      	ldr	r3, [r7, #20]
 80073ca:	3301      	adds	r3, #1
 80073cc:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 80073ce:	697b      	ldr	r3, [r7, #20]
 80073d0:	781b      	ldrb	r3, [r3, #0]
 80073d2:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 80073d4:	8a3b      	ldrh	r3, [r7, #16]
 80073d6:	021b      	lsls	r3, r3, #8
 80073d8:	b21a      	sxth	r2, r3
 80073da:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80073de:	4313      	orrs	r3, r2
 80073e0:	b21b      	sxth	r3, r3
 80073e2:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 80073e4:	89fb      	ldrh	r3, [r7, #14]
}
 80073e6:	4618      	mov	r0, r3
 80073e8:	371c      	adds	r7, #28
 80073ea:	46bd      	mov	sp, r7
 80073ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073f0:	4770      	bx	lr
	...

080073f4 <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80073f4:	b580      	push	{r7, lr}
 80073f6:	b084      	sub	sp, #16
 80073f8:	af00      	add	r7, sp, #0
 80073fa:	6078      	str	r0, [r7, #4]
 80073fc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80073fe:	2300      	movs	r3, #0
 8007400:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007402:	683b      	ldr	r3, [r7, #0]
 8007404:	781b      	ldrb	r3, [r3, #0]
 8007406:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800740a:	2b20      	cmp	r3, #32
 800740c:	d004      	beq.n	8007418 <USBD_StdDevReq+0x24>
 800740e:	2b40      	cmp	r3, #64	; 0x40
 8007410:	d002      	beq.n	8007418 <USBD_StdDevReq+0x24>
 8007412:	2b00      	cmp	r3, #0
 8007414:	d00a      	beq.n	800742c <USBD_StdDevReq+0x38>
 8007416:	e050      	b.n	80074ba <USBD_StdDevReq+0xc6>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800741e:	689b      	ldr	r3, [r3, #8]
 8007420:	6839      	ldr	r1, [r7, #0]
 8007422:	6878      	ldr	r0, [r7, #4]
 8007424:	4798      	blx	r3
 8007426:	4603      	mov	r3, r0
 8007428:	73fb      	strb	r3, [r7, #15]
    break;
 800742a:	e04b      	b.n	80074c4 <USBD_StdDevReq+0xd0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 800742c:	683b      	ldr	r3, [r7, #0]
 800742e:	785b      	ldrb	r3, [r3, #1]
 8007430:	2b09      	cmp	r3, #9
 8007432:	d83c      	bhi.n	80074ae <USBD_StdDevReq+0xba>
 8007434:	a201      	add	r2, pc, #4	; (adr r2, 800743c <USBD_StdDevReq+0x48>)
 8007436:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800743a:	bf00      	nop
 800743c:	08007491 	.word	0x08007491
 8007440:	080074a5 	.word	0x080074a5
 8007444:	080074af 	.word	0x080074af
 8007448:	0800749b 	.word	0x0800749b
 800744c:	080074af 	.word	0x080074af
 8007450:	0800746f 	.word	0x0800746f
 8007454:	08007465 	.word	0x08007465
 8007458:	080074af 	.word	0x080074af
 800745c:	08007487 	.word	0x08007487
 8007460:	08007479 	.word	0x08007479
    {
    case USB_REQ_GET_DESCRIPTOR:
      USBD_GetDescriptor(pdev, req);
 8007464:	6839      	ldr	r1, [r7, #0]
 8007466:	6878      	ldr	r0, [r7, #4]
 8007468:	f000 f9ce 	bl	8007808 <USBD_GetDescriptor>
      break;
 800746c:	e024      	b.n	80074b8 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_ADDRESS:
      USBD_SetAddress(pdev, req);
 800746e:	6839      	ldr	r1, [r7, #0]
 8007470:	6878      	ldr	r0, [r7, #4]
 8007472:	f000 fb33 	bl	8007adc <USBD_SetAddress>
      break;
 8007476:	e01f      	b.n	80074b8 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_CONFIGURATION:
      ret = USBD_SetConfig(pdev, req);
 8007478:	6839      	ldr	r1, [r7, #0]
 800747a:	6878      	ldr	r0, [r7, #4]
 800747c:	f000 fb70 	bl	8007b60 <USBD_SetConfig>
 8007480:	4603      	mov	r3, r0
 8007482:	73fb      	strb	r3, [r7, #15]
      break;
 8007484:	e018      	b.n	80074b8 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_CONFIGURATION:
      USBD_GetConfig(pdev, req);
 8007486:	6839      	ldr	r1, [r7, #0]
 8007488:	6878      	ldr	r0, [r7, #4]
 800748a:	f000 fc0d 	bl	8007ca8 <USBD_GetConfig>
      break;
 800748e:	e013      	b.n	80074b8 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_STATUS:
      USBD_GetStatus(pdev, req);
 8007490:	6839      	ldr	r1, [r7, #0]
 8007492:	6878      	ldr	r0, [r7, #4]
 8007494:	f000 fc3c 	bl	8007d10 <USBD_GetStatus>
      break;
 8007498:	e00e      	b.n	80074b8 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_FEATURE:
      USBD_SetFeature(pdev, req);
 800749a:	6839      	ldr	r1, [r7, #0]
 800749c:	6878      	ldr	r0, [r7, #4]
 800749e:	f000 fc6a 	bl	8007d76 <USBD_SetFeature>
      break;
 80074a2:	e009      	b.n	80074b8 <USBD_StdDevReq+0xc4>

    case USB_REQ_CLEAR_FEATURE:
      USBD_ClrFeature(pdev, req);
 80074a4:	6839      	ldr	r1, [r7, #0]
 80074a6:	6878      	ldr	r0, [r7, #4]
 80074a8:	f000 fc79 	bl	8007d9e <USBD_ClrFeature>
      break;
 80074ac:	e004      	b.n	80074b8 <USBD_StdDevReq+0xc4>

    default:
      USBD_CtlError(pdev, req);
 80074ae:	6839      	ldr	r1, [r7, #0]
 80074b0:	6878      	ldr	r0, [r7, #4]
 80074b2:	f000 fccf 	bl	8007e54 <USBD_CtlError>
      break;
 80074b6:	bf00      	nop
    }
    break;
 80074b8:	e004      	b.n	80074c4 <USBD_StdDevReq+0xd0>

  default:
    USBD_CtlError(pdev, req);
 80074ba:	6839      	ldr	r1, [r7, #0]
 80074bc:	6878      	ldr	r0, [r7, #4]
 80074be:	f000 fcc9 	bl	8007e54 <USBD_CtlError>
    break;
 80074c2:	bf00      	nop
  }

  return ret;
 80074c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80074c6:	4618      	mov	r0, r3
 80074c8:	3710      	adds	r7, #16
 80074ca:	46bd      	mov	sp, r7
 80074cc:	bd80      	pop	{r7, pc}
 80074ce:	bf00      	nop

080074d0 <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80074d0:	b580      	push	{r7, lr}
 80074d2:	b084      	sub	sp, #16
 80074d4:	af00      	add	r7, sp, #0
 80074d6:	6078      	str	r0, [r7, #4]
 80074d8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80074da:	2300      	movs	r3, #0
 80074dc:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80074de:	683b      	ldr	r3, [r7, #0]
 80074e0:	781b      	ldrb	r3, [r3, #0]
 80074e2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80074e6:	2b20      	cmp	r3, #32
 80074e8:	d003      	beq.n	80074f2 <USBD_StdItfReq+0x22>
 80074ea:	2b40      	cmp	r3, #64	; 0x40
 80074ec:	d001      	beq.n	80074f2 <USBD_StdItfReq+0x22>
 80074ee:	2b00      	cmp	r3, #0
 80074f0:	d12a      	bne.n	8007548 <USBD_StdItfReq+0x78>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
  case USB_REQ_TYPE_STANDARD:
    switch (pdev->dev_state)
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80074f8:	3b01      	subs	r3, #1
 80074fa:	2b02      	cmp	r3, #2
 80074fc:	d81d      	bhi.n	800753a <USBD_StdItfReq+0x6a>
    {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:

      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80074fe:	683b      	ldr	r3, [r7, #0]
 8007500:	889b      	ldrh	r3, [r3, #4]
 8007502:	b2db      	uxtb	r3, r3
 8007504:	2b01      	cmp	r3, #1
 8007506:	d813      	bhi.n	8007530 <USBD_StdItfReq+0x60>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800750e:	689b      	ldr	r3, [r3, #8]
 8007510:	6839      	ldr	r1, [r7, #0]
 8007512:	6878      	ldr	r0, [r7, #4]
 8007514:	4798      	blx	r3
 8007516:	4603      	mov	r3, r0
 8007518:	73fb      	strb	r3, [r7, #15]

        if ((req->wLength == 0U) && (ret == USBD_OK))
 800751a:	683b      	ldr	r3, [r7, #0]
 800751c:	88db      	ldrh	r3, [r3, #6]
 800751e:	2b00      	cmp	r3, #0
 8007520:	d110      	bne.n	8007544 <USBD_StdItfReq+0x74>
 8007522:	7bfb      	ldrb	r3, [r7, #15]
 8007524:	2b00      	cmp	r3, #0
 8007526:	d10d      	bne.n	8007544 <USBD_StdItfReq+0x74>
        {
          (void)USBD_CtlSendStatus(pdev);
 8007528:	6878      	ldr	r0, [r7, #4]
 800752a:	f000 fd5e 	bl	8007fea <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlError(pdev, req);
      }
      break;
 800752e:	e009      	b.n	8007544 <USBD_StdItfReq+0x74>
        USBD_CtlError(pdev, req);
 8007530:	6839      	ldr	r1, [r7, #0]
 8007532:	6878      	ldr	r0, [r7, #4]
 8007534:	f000 fc8e 	bl	8007e54 <USBD_CtlError>
      break;
 8007538:	e004      	b.n	8007544 <USBD_StdItfReq+0x74>

    default:
      USBD_CtlError(pdev, req);
 800753a:	6839      	ldr	r1, [r7, #0]
 800753c:	6878      	ldr	r0, [r7, #4]
 800753e:	f000 fc89 	bl	8007e54 <USBD_CtlError>
      break;
 8007542:	e000      	b.n	8007546 <USBD_StdItfReq+0x76>
      break;
 8007544:	bf00      	nop
    }
    break;
 8007546:	e004      	b.n	8007552 <USBD_StdItfReq+0x82>

  default:
    USBD_CtlError(pdev, req);
 8007548:	6839      	ldr	r1, [r7, #0]
 800754a:	6878      	ldr	r0, [r7, #4]
 800754c:	f000 fc82 	bl	8007e54 <USBD_CtlError>
    break;
 8007550:	bf00      	nop
  }

  return ret;
 8007552:	7bfb      	ldrb	r3, [r7, #15]
}
 8007554:	4618      	mov	r0, r3
 8007556:	3710      	adds	r7, #16
 8007558:	46bd      	mov	sp, r7
 800755a:	bd80      	pop	{r7, pc}

0800755c <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800755c:	b580      	push	{r7, lr}
 800755e:	b084      	sub	sp, #16
 8007560:	af00      	add	r7, sp, #0
 8007562:	6078      	str	r0, [r7, #4]
 8007564:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8007566:	2300      	movs	r3, #0
 8007568:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 800756a:	683b      	ldr	r3, [r7, #0]
 800756c:	889b      	ldrh	r3, [r3, #4]
 800756e:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007570:	683b      	ldr	r3, [r7, #0]
 8007572:	781b      	ldrb	r3, [r3, #0]
 8007574:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007578:	2b20      	cmp	r3, #32
 800757a:	d004      	beq.n	8007586 <USBD_StdEPReq+0x2a>
 800757c:	2b40      	cmp	r3, #64	; 0x40
 800757e:	d002      	beq.n	8007586 <USBD_StdEPReq+0x2a>
 8007580:	2b00      	cmp	r3, #0
 8007582:	d00a      	beq.n	800759a <USBD_StdEPReq+0x3e>
 8007584:	e135      	b.n	80077f2 <USBD_StdEPReq+0x296>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800758c:	689b      	ldr	r3, [r3, #8]
 800758e:	6839      	ldr	r1, [r7, #0]
 8007590:	6878      	ldr	r0, [r7, #4]
 8007592:	4798      	blx	r3
 8007594:	4603      	mov	r3, r0
 8007596:	73fb      	strb	r3, [r7, #15]
    break;
 8007598:	e130      	b.n	80077fc <USBD_StdEPReq+0x2a0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 800759a:	683b      	ldr	r3, [r7, #0]
 800759c:	785b      	ldrb	r3, [r3, #1]
 800759e:	2b01      	cmp	r3, #1
 80075a0:	d03e      	beq.n	8007620 <USBD_StdEPReq+0xc4>
 80075a2:	2b03      	cmp	r3, #3
 80075a4:	d002      	beq.n	80075ac <USBD_StdEPReq+0x50>
 80075a6:	2b00      	cmp	r3, #0
 80075a8:	d077      	beq.n	800769a <USBD_StdEPReq+0x13e>
 80075aa:	e11c      	b.n	80077e6 <USBD_StdEPReq+0x28a>
    {
    case USB_REQ_SET_FEATURE:
      switch (pdev->dev_state)
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80075b2:	2b02      	cmp	r3, #2
 80075b4:	d002      	beq.n	80075bc <USBD_StdEPReq+0x60>
 80075b6:	2b03      	cmp	r3, #3
 80075b8:	d015      	beq.n	80075e6 <USBD_StdEPReq+0x8a>
 80075ba:	e02b      	b.n	8007614 <USBD_StdEPReq+0xb8>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80075bc:	7bbb      	ldrb	r3, [r7, #14]
 80075be:	2b00      	cmp	r3, #0
 80075c0:	d00c      	beq.n	80075dc <USBD_StdEPReq+0x80>
 80075c2:	7bbb      	ldrb	r3, [r7, #14]
 80075c4:	2b80      	cmp	r3, #128	; 0x80
 80075c6:	d009      	beq.n	80075dc <USBD_StdEPReq+0x80>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 80075c8:	7bbb      	ldrb	r3, [r7, #14]
 80075ca:	4619      	mov	r1, r3
 80075cc:	6878      	ldr	r0, [r7, #4]
 80075ce:	f001 fa3d 	bl	8008a4c <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80075d2:	2180      	movs	r1, #128	; 0x80
 80075d4:	6878      	ldr	r0, [r7, #4]
 80075d6:	f001 fa39 	bl	8008a4c <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 80075da:	e020      	b.n	800761e <USBD_StdEPReq+0xc2>
          USBD_CtlError(pdev, req);
 80075dc:	6839      	ldr	r1, [r7, #0]
 80075de:	6878      	ldr	r0, [r7, #4]
 80075e0:	f000 fc38 	bl	8007e54 <USBD_CtlError>
        break;
 80075e4:	e01b      	b.n	800761e <USBD_StdEPReq+0xc2>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 80075e6:	683b      	ldr	r3, [r7, #0]
 80075e8:	885b      	ldrh	r3, [r3, #2]
 80075ea:	2b00      	cmp	r3, #0
 80075ec:	d10e      	bne.n	800760c <USBD_StdEPReq+0xb0>
        {
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80075ee:	7bbb      	ldrb	r3, [r7, #14]
 80075f0:	2b00      	cmp	r3, #0
 80075f2:	d00b      	beq.n	800760c <USBD_StdEPReq+0xb0>
 80075f4:	7bbb      	ldrb	r3, [r7, #14]
 80075f6:	2b80      	cmp	r3, #128	; 0x80
 80075f8:	d008      	beq.n	800760c <USBD_StdEPReq+0xb0>
 80075fa:	683b      	ldr	r3, [r7, #0]
 80075fc:	88db      	ldrh	r3, [r3, #6]
 80075fe:	2b00      	cmp	r3, #0
 8007600:	d104      	bne.n	800760c <USBD_StdEPReq+0xb0>
          {
            (void)USBD_LL_StallEP(pdev, ep_addr);
 8007602:	7bbb      	ldrb	r3, [r7, #14]
 8007604:	4619      	mov	r1, r3
 8007606:	6878      	ldr	r0, [r7, #4]
 8007608:	f001 fa20 	bl	8008a4c <USBD_LL_StallEP>
          }
        }
        (void)USBD_CtlSendStatus(pdev);
 800760c:	6878      	ldr	r0, [r7, #4]
 800760e:	f000 fcec 	bl	8007fea <USBD_CtlSendStatus>

        break;
 8007612:	e004      	b.n	800761e <USBD_StdEPReq+0xc2>

      default:
        USBD_CtlError(pdev, req);
 8007614:	6839      	ldr	r1, [r7, #0]
 8007616:	6878      	ldr	r0, [r7, #4]
 8007618:	f000 fc1c 	bl	8007e54 <USBD_CtlError>
        break;
 800761c:	bf00      	nop
      }
      break;
 800761e:	e0e7      	b.n	80077f0 <USBD_StdEPReq+0x294>

    case USB_REQ_CLEAR_FEATURE:

      switch (pdev->dev_state)
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007626:	2b02      	cmp	r3, #2
 8007628:	d002      	beq.n	8007630 <USBD_StdEPReq+0xd4>
 800762a:	2b03      	cmp	r3, #3
 800762c:	d015      	beq.n	800765a <USBD_StdEPReq+0xfe>
 800762e:	e02d      	b.n	800768c <USBD_StdEPReq+0x130>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007630:	7bbb      	ldrb	r3, [r7, #14]
 8007632:	2b00      	cmp	r3, #0
 8007634:	d00c      	beq.n	8007650 <USBD_StdEPReq+0xf4>
 8007636:	7bbb      	ldrb	r3, [r7, #14]
 8007638:	2b80      	cmp	r3, #128	; 0x80
 800763a:	d009      	beq.n	8007650 <USBD_StdEPReq+0xf4>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 800763c:	7bbb      	ldrb	r3, [r7, #14]
 800763e:	4619      	mov	r1, r3
 8007640:	6878      	ldr	r0, [r7, #4]
 8007642:	f001 fa03 	bl	8008a4c <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8007646:	2180      	movs	r1, #128	; 0x80
 8007648:	6878      	ldr	r0, [r7, #4]
 800764a:	f001 f9ff 	bl	8008a4c <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 800764e:	e023      	b.n	8007698 <USBD_StdEPReq+0x13c>
          USBD_CtlError(pdev, req);
 8007650:	6839      	ldr	r1, [r7, #0]
 8007652:	6878      	ldr	r0, [r7, #4]
 8007654:	f000 fbfe 	bl	8007e54 <USBD_CtlError>
        break;
 8007658:	e01e      	b.n	8007698 <USBD_StdEPReq+0x13c>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 800765a:	683b      	ldr	r3, [r7, #0]
 800765c:	885b      	ldrh	r3, [r3, #2]
 800765e:	2b00      	cmp	r3, #0
 8007660:	d119      	bne.n	8007696 <USBD_StdEPReq+0x13a>
        {
          if ((ep_addr & 0x7FU) != 0x00U)
 8007662:	7bbb      	ldrb	r3, [r7, #14]
 8007664:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007668:	2b00      	cmp	r3, #0
 800766a:	d004      	beq.n	8007676 <USBD_StdEPReq+0x11a>
          {
            (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800766c:	7bbb      	ldrb	r3, [r7, #14]
 800766e:	4619      	mov	r1, r3
 8007670:	6878      	ldr	r0, [r7, #4]
 8007672:	f001 fa0a 	bl	8008a8a <USBD_LL_ClearStallEP>
          }
          (void)USBD_CtlSendStatus(pdev);
 8007676:	6878      	ldr	r0, [r7, #4]
 8007678:	f000 fcb7 	bl	8007fea <USBD_CtlSendStatus>
          (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007682:	689b      	ldr	r3, [r3, #8]
 8007684:	6839      	ldr	r1, [r7, #0]
 8007686:	6878      	ldr	r0, [r7, #4]
 8007688:	4798      	blx	r3
        }
        break;
 800768a:	e004      	b.n	8007696 <USBD_StdEPReq+0x13a>

      default:
        USBD_CtlError(pdev, req);
 800768c:	6839      	ldr	r1, [r7, #0]
 800768e:	6878      	ldr	r0, [r7, #4]
 8007690:	f000 fbe0 	bl	8007e54 <USBD_CtlError>
        break;
 8007694:	e000      	b.n	8007698 <USBD_StdEPReq+0x13c>
        break;
 8007696:	bf00      	nop
      }
      break;
 8007698:	e0aa      	b.n	80077f0 <USBD_StdEPReq+0x294>

    case USB_REQ_GET_STATUS:
      switch (pdev->dev_state)
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80076a0:	2b02      	cmp	r3, #2
 80076a2:	d002      	beq.n	80076aa <USBD_StdEPReq+0x14e>
 80076a4:	2b03      	cmp	r3, #3
 80076a6:	d032      	beq.n	800770e <USBD_StdEPReq+0x1b2>
 80076a8:	e097      	b.n	80077da <USBD_StdEPReq+0x27e>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80076aa:	7bbb      	ldrb	r3, [r7, #14]
 80076ac:	2b00      	cmp	r3, #0
 80076ae:	d007      	beq.n	80076c0 <USBD_StdEPReq+0x164>
 80076b0:	7bbb      	ldrb	r3, [r7, #14]
 80076b2:	2b80      	cmp	r3, #128	; 0x80
 80076b4:	d004      	beq.n	80076c0 <USBD_StdEPReq+0x164>
        {
          USBD_CtlError(pdev, req);
 80076b6:	6839      	ldr	r1, [r7, #0]
 80076b8:	6878      	ldr	r0, [r7, #4]
 80076ba:	f000 fbcb 	bl	8007e54 <USBD_CtlError>
          break;
 80076be:	e091      	b.n	80077e4 <USBD_StdEPReq+0x288>
        }
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80076c0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80076c4:	2b00      	cmp	r3, #0
 80076c6:	da0b      	bge.n	80076e0 <USBD_StdEPReq+0x184>
 80076c8:	7bbb      	ldrb	r3, [r7, #14]
 80076ca:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80076ce:	4613      	mov	r3, r2
 80076d0:	009b      	lsls	r3, r3, #2
 80076d2:	4413      	add	r3, r2
 80076d4:	009b      	lsls	r3, r3, #2
 80076d6:	3310      	adds	r3, #16
 80076d8:	687a      	ldr	r2, [r7, #4]
 80076da:	4413      	add	r3, r2
 80076dc:	3304      	adds	r3, #4
 80076de:	e00b      	b.n	80076f8 <USBD_StdEPReq+0x19c>
              &pdev->ep_out[ep_addr & 0x7FU];
 80076e0:	7bbb      	ldrb	r3, [r7, #14]
 80076e2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80076e6:	4613      	mov	r3, r2
 80076e8:	009b      	lsls	r3, r3, #2
 80076ea:	4413      	add	r3, r2
 80076ec:	009b      	lsls	r3, r3, #2
 80076ee:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80076f2:	687a      	ldr	r2, [r7, #4]
 80076f4:	4413      	add	r3, r2
 80076f6:	3304      	adds	r3, #4
 80076f8:	60bb      	str	r3, [r7, #8]

        pep->status = 0x0000U;
 80076fa:	68bb      	ldr	r3, [r7, #8]
 80076fc:	2200      	movs	r2, #0
 80076fe:	601a      	str	r2, [r3, #0]

        (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8007700:	68bb      	ldr	r3, [r7, #8]
 8007702:	2202      	movs	r2, #2
 8007704:	4619      	mov	r1, r3
 8007706:	6878      	ldr	r0, [r7, #4]
 8007708:	f000 fc15 	bl	8007f36 <USBD_CtlSendData>
        break;
 800770c:	e06a      	b.n	80077e4 <USBD_StdEPReq+0x288>

      case USBD_STATE_CONFIGURED:
        if ((ep_addr & 0x80U) == 0x80U)
 800770e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007712:	2b00      	cmp	r3, #0
 8007714:	da11      	bge.n	800773a <USBD_StdEPReq+0x1de>
        {
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8007716:	7bbb      	ldrb	r3, [r7, #14]
 8007718:	f003 020f 	and.w	r2, r3, #15
 800771c:	6879      	ldr	r1, [r7, #4]
 800771e:	4613      	mov	r3, r2
 8007720:	009b      	lsls	r3, r3, #2
 8007722:	4413      	add	r3, r2
 8007724:	009b      	lsls	r3, r3, #2
 8007726:	440b      	add	r3, r1
 8007728:	3324      	adds	r3, #36	; 0x24
 800772a:	881b      	ldrh	r3, [r3, #0]
 800772c:	2b00      	cmp	r3, #0
 800772e:	d117      	bne.n	8007760 <USBD_StdEPReq+0x204>
          {
            USBD_CtlError(pdev, req);
 8007730:	6839      	ldr	r1, [r7, #0]
 8007732:	6878      	ldr	r0, [r7, #4]
 8007734:	f000 fb8e 	bl	8007e54 <USBD_CtlError>
            break;
 8007738:	e054      	b.n	80077e4 <USBD_StdEPReq+0x288>
          }
        }
        else
        {
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800773a:	7bbb      	ldrb	r3, [r7, #14]
 800773c:	f003 020f 	and.w	r2, r3, #15
 8007740:	6879      	ldr	r1, [r7, #4]
 8007742:	4613      	mov	r3, r2
 8007744:	009b      	lsls	r3, r3, #2
 8007746:	4413      	add	r3, r2
 8007748:	009b      	lsls	r3, r3, #2
 800774a:	440b      	add	r3, r1
 800774c:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8007750:	881b      	ldrh	r3, [r3, #0]
 8007752:	2b00      	cmp	r3, #0
 8007754:	d104      	bne.n	8007760 <USBD_StdEPReq+0x204>
          {
            USBD_CtlError(pdev, req);
 8007756:	6839      	ldr	r1, [r7, #0]
 8007758:	6878      	ldr	r0, [r7, #4]
 800775a:	f000 fb7b 	bl	8007e54 <USBD_CtlError>
            break;
 800775e:	e041      	b.n	80077e4 <USBD_StdEPReq+0x288>
          }
        }

        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007760:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007764:	2b00      	cmp	r3, #0
 8007766:	da0b      	bge.n	8007780 <USBD_StdEPReq+0x224>
 8007768:	7bbb      	ldrb	r3, [r7, #14]
 800776a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800776e:	4613      	mov	r3, r2
 8007770:	009b      	lsls	r3, r3, #2
 8007772:	4413      	add	r3, r2
 8007774:	009b      	lsls	r3, r3, #2
 8007776:	3310      	adds	r3, #16
 8007778:	687a      	ldr	r2, [r7, #4]
 800777a:	4413      	add	r3, r2
 800777c:	3304      	adds	r3, #4
 800777e:	e00b      	b.n	8007798 <USBD_StdEPReq+0x23c>
              &pdev->ep_out[ep_addr & 0x7FU];
 8007780:	7bbb      	ldrb	r3, [r7, #14]
 8007782:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007786:	4613      	mov	r3, r2
 8007788:	009b      	lsls	r3, r3, #2
 800778a:	4413      	add	r3, r2
 800778c:	009b      	lsls	r3, r3, #2
 800778e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8007792:	687a      	ldr	r2, [r7, #4]
 8007794:	4413      	add	r3, r2
 8007796:	3304      	adds	r3, #4
 8007798:	60bb      	str	r3, [r7, #8]

          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800779a:	7bbb      	ldrb	r3, [r7, #14]
 800779c:	2b00      	cmp	r3, #0
 800779e:	d002      	beq.n	80077a6 <USBD_StdEPReq+0x24a>
 80077a0:	7bbb      	ldrb	r3, [r7, #14]
 80077a2:	2b80      	cmp	r3, #128	; 0x80
 80077a4:	d103      	bne.n	80077ae <USBD_StdEPReq+0x252>
          {
            pep->status = 0x0000U;
 80077a6:	68bb      	ldr	r3, [r7, #8]
 80077a8:	2200      	movs	r2, #0
 80077aa:	601a      	str	r2, [r3, #0]
 80077ac:	e00e      	b.n	80077cc <USBD_StdEPReq+0x270>
          }
          else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 80077ae:	7bbb      	ldrb	r3, [r7, #14]
 80077b0:	4619      	mov	r1, r3
 80077b2:	6878      	ldr	r0, [r7, #4]
 80077b4:	f001 f988 	bl	8008ac8 <USBD_LL_IsStallEP>
 80077b8:	4603      	mov	r3, r0
 80077ba:	2b00      	cmp	r3, #0
 80077bc:	d003      	beq.n	80077c6 <USBD_StdEPReq+0x26a>
          {
            pep->status = 0x0001U;
 80077be:	68bb      	ldr	r3, [r7, #8]
 80077c0:	2201      	movs	r2, #1
 80077c2:	601a      	str	r2, [r3, #0]
 80077c4:	e002      	b.n	80077cc <USBD_StdEPReq+0x270>
          }
          else
          {
            pep->status = 0x0000U;
 80077c6:	68bb      	ldr	r3, [r7, #8]
 80077c8:	2200      	movs	r2, #0
 80077ca:	601a      	str	r2, [r3, #0]
          }

          (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80077cc:	68bb      	ldr	r3, [r7, #8]
 80077ce:	2202      	movs	r2, #2
 80077d0:	4619      	mov	r1, r3
 80077d2:	6878      	ldr	r0, [r7, #4]
 80077d4:	f000 fbaf 	bl	8007f36 <USBD_CtlSendData>
          break;
 80077d8:	e004      	b.n	80077e4 <USBD_StdEPReq+0x288>

      default:
        USBD_CtlError(pdev, req);
 80077da:	6839      	ldr	r1, [r7, #0]
 80077dc:	6878      	ldr	r0, [r7, #4]
 80077de:	f000 fb39 	bl	8007e54 <USBD_CtlError>
        break;
 80077e2:	bf00      	nop
      }
      break;
 80077e4:	e004      	b.n	80077f0 <USBD_StdEPReq+0x294>

    default:
      USBD_CtlError(pdev, req);
 80077e6:	6839      	ldr	r1, [r7, #0]
 80077e8:	6878      	ldr	r0, [r7, #4]
 80077ea:	f000 fb33 	bl	8007e54 <USBD_CtlError>
      break;
 80077ee:	bf00      	nop
    }
    break;
 80077f0:	e004      	b.n	80077fc <USBD_StdEPReq+0x2a0>

  default:
    USBD_CtlError(pdev, req);
 80077f2:	6839      	ldr	r1, [r7, #0]
 80077f4:	6878      	ldr	r0, [r7, #4]
 80077f6:	f000 fb2d 	bl	8007e54 <USBD_CtlError>
    break;
 80077fa:	bf00      	nop
  }

  return ret;
 80077fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80077fe:	4618      	mov	r0, r3
 8007800:	3710      	adds	r7, #16
 8007802:	46bd      	mov	sp, r7
 8007804:	bd80      	pop	{r7, pc}
	...

08007808 <USBD_GetDescriptor>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007808:	b580      	push	{r7, lr}
 800780a:	b084      	sub	sp, #16
 800780c:	af00      	add	r7, sp, #0
 800780e:	6078      	str	r0, [r7, #4]
 8007810:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8007812:	2300      	movs	r3, #0
 8007814:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8007816:	2300      	movs	r3, #0
 8007818:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800781a:	2300      	movs	r3, #0
 800781c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800781e:	683b      	ldr	r3, [r7, #0]
 8007820:	885b      	ldrh	r3, [r3, #2]
 8007822:	0a1b      	lsrs	r3, r3, #8
 8007824:	b29b      	uxth	r3, r3
 8007826:	3b01      	subs	r3, #1
 8007828:	2b06      	cmp	r3, #6
 800782a:	f200 8128 	bhi.w	8007a7e <USBD_GetDescriptor+0x276>
 800782e:	a201      	add	r2, pc, #4	; (adr r2, 8007834 <USBD_GetDescriptor+0x2c>)
 8007830:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007834:	08007851 	.word	0x08007851
 8007838:	08007869 	.word	0x08007869
 800783c:	080078a9 	.word	0x080078a9
 8007840:	08007a7f 	.word	0x08007a7f
 8007844:	08007a7f 	.word	0x08007a7f
 8007848:	08007a1f 	.word	0x08007a1f
 800784c:	08007a4b 	.word	0x08007a4b
      err++;
    }
    break;
#endif
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007856:	681b      	ldr	r3, [r3, #0]
 8007858:	687a      	ldr	r2, [r7, #4]
 800785a:	7c12      	ldrb	r2, [r2, #16]
 800785c:	f107 0108 	add.w	r1, r7, #8
 8007860:	4610      	mov	r0, r2
 8007862:	4798      	blx	r3
 8007864:	60f8      	str	r0, [r7, #12]
    break;
 8007866:	e112      	b.n	8007a8e <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	7c1b      	ldrb	r3, [r3, #16]
 800786c:	2b00      	cmp	r3, #0
 800786e:	d10d      	bne.n	800788c <USBD_GetDescriptor+0x84>
    {
      pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007876:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007878:	f107 0208 	add.w	r2, r7, #8
 800787c:	4610      	mov	r0, r2
 800787e:	4798      	blx	r3
 8007880:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007882:	68fb      	ldr	r3, [r7, #12]
 8007884:	3301      	adds	r3, #1
 8007886:	2202      	movs	r2, #2
 8007888:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 800788a:	e100      	b.n	8007a8e <USBD_GetDescriptor+0x286>
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007892:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007894:	f107 0208 	add.w	r2, r7, #8
 8007898:	4610      	mov	r0, r2
 800789a:	4798      	blx	r3
 800789c:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800789e:	68fb      	ldr	r3, [r7, #12]
 80078a0:	3301      	adds	r3, #1
 80078a2:	2202      	movs	r2, #2
 80078a4:	701a      	strb	r2, [r3, #0]
    break;
 80078a6:	e0f2      	b.n	8007a8e <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 80078a8:	683b      	ldr	r3, [r7, #0]
 80078aa:	885b      	ldrh	r3, [r3, #2]
 80078ac:	b2db      	uxtb	r3, r3
 80078ae:	2b05      	cmp	r3, #5
 80078b0:	f200 80ac 	bhi.w	8007a0c <USBD_GetDescriptor+0x204>
 80078b4:	a201      	add	r2, pc, #4	; (adr r2, 80078bc <USBD_GetDescriptor+0xb4>)
 80078b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80078ba:	bf00      	nop
 80078bc:	080078d5 	.word	0x080078d5
 80078c0:	08007909 	.word	0x08007909
 80078c4:	0800793d 	.word	0x0800793d
 80078c8:	08007971 	.word	0x08007971
 80078cc:	080079a5 	.word	0x080079a5
 80078d0:	080079d9 	.word	0x080079d9
    {
    case USBD_IDX_LANGID_STR:
      if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80078da:	685b      	ldr	r3, [r3, #4]
 80078dc:	2b00      	cmp	r3, #0
 80078de:	d00b      	beq.n	80078f8 <USBD_GetDescriptor+0xf0>
      {
        pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80078e6:	685b      	ldr	r3, [r3, #4]
 80078e8:	687a      	ldr	r2, [r7, #4]
 80078ea:	7c12      	ldrb	r2, [r2, #16]
 80078ec:	f107 0108 	add.w	r1, r7, #8
 80078f0:	4610      	mov	r0, r2
 80078f2:	4798      	blx	r3
 80078f4:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80078f6:	e091      	b.n	8007a1c <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 80078f8:	6839      	ldr	r1, [r7, #0]
 80078fa:	6878      	ldr	r0, [r7, #4]
 80078fc:	f000 faaa 	bl	8007e54 <USBD_CtlError>
        err++;
 8007900:	7afb      	ldrb	r3, [r7, #11]
 8007902:	3301      	adds	r3, #1
 8007904:	72fb      	strb	r3, [r7, #11]
      break;
 8007906:	e089      	b.n	8007a1c <USBD_GetDescriptor+0x214>

    case USBD_IDX_MFC_STR:
      if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800790e:	689b      	ldr	r3, [r3, #8]
 8007910:	2b00      	cmp	r3, #0
 8007912:	d00b      	beq.n	800792c <USBD_GetDescriptor+0x124>
      {
        pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800791a:	689b      	ldr	r3, [r3, #8]
 800791c:	687a      	ldr	r2, [r7, #4]
 800791e:	7c12      	ldrb	r2, [r2, #16]
 8007920:	f107 0108 	add.w	r1, r7, #8
 8007924:	4610      	mov	r0, r2
 8007926:	4798      	blx	r3
 8007928:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800792a:	e077      	b.n	8007a1c <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 800792c:	6839      	ldr	r1, [r7, #0]
 800792e:	6878      	ldr	r0, [r7, #4]
 8007930:	f000 fa90 	bl	8007e54 <USBD_CtlError>
        err++;
 8007934:	7afb      	ldrb	r3, [r7, #11]
 8007936:	3301      	adds	r3, #1
 8007938:	72fb      	strb	r3, [r7, #11]
      break;
 800793a:	e06f      	b.n	8007a1c <USBD_GetDescriptor+0x214>

    case USBD_IDX_PRODUCT_STR:
      if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007942:	68db      	ldr	r3, [r3, #12]
 8007944:	2b00      	cmp	r3, #0
 8007946:	d00b      	beq.n	8007960 <USBD_GetDescriptor+0x158>
      {
        pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800794e:	68db      	ldr	r3, [r3, #12]
 8007950:	687a      	ldr	r2, [r7, #4]
 8007952:	7c12      	ldrb	r2, [r2, #16]
 8007954:	f107 0108 	add.w	r1, r7, #8
 8007958:	4610      	mov	r0, r2
 800795a:	4798      	blx	r3
 800795c:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800795e:	e05d      	b.n	8007a1c <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8007960:	6839      	ldr	r1, [r7, #0]
 8007962:	6878      	ldr	r0, [r7, #4]
 8007964:	f000 fa76 	bl	8007e54 <USBD_CtlError>
        err++;
 8007968:	7afb      	ldrb	r3, [r7, #11]
 800796a:	3301      	adds	r3, #1
 800796c:	72fb      	strb	r3, [r7, #11]
      break;
 800796e:	e055      	b.n	8007a1c <USBD_GetDescriptor+0x214>

    case USBD_IDX_SERIAL_STR:
      if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007976:	691b      	ldr	r3, [r3, #16]
 8007978:	2b00      	cmp	r3, #0
 800797a:	d00b      	beq.n	8007994 <USBD_GetDescriptor+0x18c>
      {
        pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007982:	691b      	ldr	r3, [r3, #16]
 8007984:	687a      	ldr	r2, [r7, #4]
 8007986:	7c12      	ldrb	r2, [r2, #16]
 8007988:	f107 0108 	add.w	r1, r7, #8
 800798c:	4610      	mov	r0, r2
 800798e:	4798      	blx	r3
 8007990:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007992:	e043      	b.n	8007a1c <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8007994:	6839      	ldr	r1, [r7, #0]
 8007996:	6878      	ldr	r0, [r7, #4]
 8007998:	f000 fa5c 	bl	8007e54 <USBD_CtlError>
        err++;
 800799c:	7afb      	ldrb	r3, [r7, #11]
 800799e:	3301      	adds	r3, #1
 80079a0:	72fb      	strb	r3, [r7, #11]
      break;
 80079a2:	e03b      	b.n	8007a1c <USBD_GetDescriptor+0x214>

    case USBD_IDX_CONFIG_STR:
      if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80079aa:	695b      	ldr	r3, [r3, #20]
 80079ac:	2b00      	cmp	r3, #0
 80079ae:	d00b      	beq.n	80079c8 <USBD_GetDescriptor+0x1c0>
      {
        pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80079b6:	695b      	ldr	r3, [r3, #20]
 80079b8:	687a      	ldr	r2, [r7, #4]
 80079ba:	7c12      	ldrb	r2, [r2, #16]
 80079bc:	f107 0108 	add.w	r1, r7, #8
 80079c0:	4610      	mov	r0, r2
 80079c2:	4798      	blx	r3
 80079c4:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80079c6:	e029      	b.n	8007a1c <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 80079c8:	6839      	ldr	r1, [r7, #0]
 80079ca:	6878      	ldr	r0, [r7, #4]
 80079cc:	f000 fa42 	bl	8007e54 <USBD_CtlError>
        err++;
 80079d0:	7afb      	ldrb	r3, [r7, #11]
 80079d2:	3301      	adds	r3, #1
 80079d4:	72fb      	strb	r3, [r7, #11]
      break;
 80079d6:	e021      	b.n	8007a1c <USBD_GetDescriptor+0x214>

    case USBD_IDX_INTERFACE_STR:
      if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80079de:	699b      	ldr	r3, [r3, #24]
 80079e0:	2b00      	cmp	r3, #0
 80079e2:	d00b      	beq.n	80079fc <USBD_GetDescriptor+0x1f4>
      {
        pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80079ea:	699b      	ldr	r3, [r3, #24]
 80079ec:	687a      	ldr	r2, [r7, #4]
 80079ee:	7c12      	ldrb	r2, [r2, #16]
 80079f0:	f107 0108 	add.w	r1, r7, #8
 80079f4:	4610      	mov	r0, r2
 80079f6:	4798      	blx	r3
 80079f8:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80079fa:	e00f      	b.n	8007a1c <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 80079fc:	6839      	ldr	r1, [r7, #0]
 80079fe:	6878      	ldr	r0, [r7, #4]
 8007a00:	f000 fa28 	bl	8007e54 <USBD_CtlError>
        err++;
 8007a04:	7afb      	ldrb	r3, [r7, #11]
 8007a06:	3301      	adds	r3, #1
 8007a08:	72fb      	strb	r3, [r7, #11]
      break;
 8007a0a:	e007      	b.n	8007a1c <USBD_GetDescriptor+0x214>
      {
        USBD_CtlError(pdev, req);
        err++;
      }
#else
      USBD_CtlError(pdev, req);
 8007a0c:	6839      	ldr	r1, [r7, #0]
 8007a0e:	6878      	ldr	r0, [r7, #4]
 8007a10:	f000 fa20 	bl	8007e54 <USBD_CtlError>
      err++;
 8007a14:	7afb      	ldrb	r3, [r7, #11]
 8007a16:	3301      	adds	r3, #1
 8007a18:	72fb      	strb	r3, [r7, #11]
#endif
      break;
 8007a1a:	bf00      	nop
    }
    break;
 8007a1c:	e037      	b.n	8007a8e <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_DEVICE_QUALIFIER:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	7c1b      	ldrb	r3, [r3, #16]
 8007a22:	2b00      	cmp	r3, #0
 8007a24:	d109      	bne.n	8007a3a <USBD_GetDescriptor+0x232>
    {
      pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007a2c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007a2e:	f107 0208 	add.w	r2, r7, #8
 8007a32:	4610      	mov	r0, r2
 8007a34:	4798      	blx	r3
 8007a36:	60f8      	str	r0, [r7, #12]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 8007a38:	e029      	b.n	8007a8e <USBD_GetDescriptor+0x286>
      USBD_CtlError(pdev, req);
 8007a3a:	6839      	ldr	r1, [r7, #0]
 8007a3c:	6878      	ldr	r0, [r7, #4]
 8007a3e:	f000 fa09 	bl	8007e54 <USBD_CtlError>
      err++;
 8007a42:	7afb      	ldrb	r3, [r7, #11]
 8007a44:	3301      	adds	r3, #1
 8007a46:	72fb      	strb	r3, [r7, #11]
    break;
 8007a48:	e021      	b.n	8007a8e <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	7c1b      	ldrb	r3, [r3, #16]
 8007a4e:	2b00      	cmp	r3, #0
 8007a50:	d10d      	bne.n	8007a6e <USBD_GetDescriptor+0x266>
    {
      pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007a58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a5a:	f107 0208 	add.w	r2, r7, #8
 8007a5e:	4610      	mov	r0, r2
 8007a60:	4798      	blx	r3
 8007a62:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8007a64:	68fb      	ldr	r3, [r7, #12]
 8007a66:	3301      	adds	r3, #1
 8007a68:	2207      	movs	r2, #7
 8007a6a:	701a      	strb	r2, [r3, #0]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 8007a6c:	e00f      	b.n	8007a8e <USBD_GetDescriptor+0x286>
      USBD_CtlError(pdev, req);
 8007a6e:	6839      	ldr	r1, [r7, #0]
 8007a70:	6878      	ldr	r0, [r7, #4]
 8007a72:	f000 f9ef 	bl	8007e54 <USBD_CtlError>
      err++;
 8007a76:	7afb      	ldrb	r3, [r7, #11]
 8007a78:	3301      	adds	r3, #1
 8007a7a:	72fb      	strb	r3, [r7, #11]
    break;
 8007a7c:	e007      	b.n	8007a8e <USBD_GetDescriptor+0x286>

  default:
    USBD_CtlError(pdev, req);
 8007a7e:	6839      	ldr	r1, [r7, #0]
 8007a80:	6878      	ldr	r0, [r7, #4]
 8007a82:	f000 f9e7 	bl	8007e54 <USBD_CtlError>
    err++;
 8007a86:	7afb      	ldrb	r3, [r7, #11]
 8007a88:	3301      	adds	r3, #1
 8007a8a:	72fb      	strb	r3, [r7, #11]
    break;
 8007a8c:	bf00      	nop
  }

  if (err != 0U)
 8007a8e:	7afb      	ldrb	r3, [r7, #11]
 8007a90:	2b00      	cmp	r3, #0
 8007a92:	d11e      	bne.n	8007ad2 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }
  else
  {
    if (req->wLength != 0U)
 8007a94:	683b      	ldr	r3, [r7, #0]
 8007a96:	88db      	ldrh	r3, [r3, #6]
 8007a98:	2b00      	cmp	r3, #0
 8007a9a:	d016      	beq.n	8007aca <USBD_GetDescriptor+0x2c2>
    {
      if (len != 0U)
 8007a9c:	893b      	ldrh	r3, [r7, #8]
 8007a9e:	2b00      	cmp	r3, #0
 8007aa0:	d00e      	beq.n	8007ac0 <USBD_GetDescriptor+0x2b8>
      {
        len = MIN(len, req->wLength);
 8007aa2:	683b      	ldr	r3, [r7, #0]
 8007aa4:	88da      	ldrh	r2, [r3, #6]
 8007aa6:	893b      	ldrh	r3, [r7, #8]
 8007aa8:	4293      	cmp	r3, r2
 8007aaa:	bf28      	it	cs
 8007aac:	4613      	movcs	r3, r2
 8007aae:	b29b      	uxth	r3, r3
 8007ab0:	813b      	strh	r3, [r7, #8]
        (void)USBD_CtlSendData(pdev, pbuf, len);
 8007ab2:	893b      	ldrh	r3, [r7, #8]
 8007ab4:	461a      	mov	r2, r3
 8007ab6:	68f9      	ldr	r1, [r7, #12]
 8007ab8:	6878      	ldr	r0, [r7, #4]
 8007aba:	f000 fa3c 	bl	8007f36 <USBD_CtlSendData>
 8007abe:	e009      	b.n	8007ad4 <USBD_GetDescriptor+0x2cc>
      }
      else
      {
        USBD_CtlError(pdev, req);
 8007ac0:	6839      	ldr	r1, [r7, #0]
 8007ac2:	6878      	ldr	r0, [r7, #4]
 8007ac4:	f000 f9c6 	bl	8007e54 <USBD_CtlError>
 8007ac8:	e004      	b.n	8007ad4 <USBD_GetDescriptor+0x2cc>
      }
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
 8007aca:	6878      	ldr	r0, [r7, #4]
 8007acc:	f000 fa8d 	bl	8007fea <USBD_CtlSendStatus>
 8007ad0:	e000      	b.n	8007ad4 <USBD_GetDescriptor+0x2cc>
    return;
 8007ad2:	bf00      	nop
    }
  }
}
 8007ad4:	3710      	adds	r7, #16
 8007ad6:	46bd      	mov	sp, r7
 8007ad8:	bd80      	pop	{r7, pc}
 8007ada:	bf00      	nop

08007adc <USBD_SetAddress>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007adc:	b580      	push	{r7, lr}
 8007ade:	b084      	sub	sp, #16
 8007ae0:	af00      	add	r7, sp, #0
 8007ae2:	6078      	str	r0, [r7, #4]
 8007ae4:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8007ae6:	683b      	ldr	r3, [r7, #0]
 8007ae8:	889b      	ldrh	r3, [r3, #4]
 8007aea:	2b00      	cmp	r3, #0
 8007aec:	d130      	bne.n	8007b50 <USBD_SetAddress+0x74>
 8007aee:	683b      	ldr	r3, [r7, #0]
 8007af0:	88db      	ldrh	r3, [r3, #6]
 8007af2:	2b00      	cmp	r3, #0
 8007af4:	d12c      	bne.n	8007b50 <USBD_SetAddress+0x74>
 8007af6:	683b      	ldr	r3, [r7, #0]
 8007af8:	885b      	ldrh	r3, [r3, #2]
 8007afa:	2b7f      	cmp	r3, #127	; 0x7f
 8007afc:	d828      	bhi.n	8007b50 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8007afe:	683b      	ldr	r3, [r7, #0]
 8007b00:	885b      	ldrh	r3, [r3, #2]
 8007b02:	b2db      	uxtb	r3, r3
 8007b04:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007b08:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007b10:	2b03      	cmp	r3, #3
 8007b12:	d104      	bne.n	8007b1e <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8007b14:	6839      	ldr	r1, [r7, #0]
 8007b16:	6878      	ldr	r0, [r7, #4]
 8007b18:	f000 f99c 	bl	8007e54 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007b1c:	e01c      	b.n	8007b58 <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	7bfa      	ldrb	r2, [r7, #15]
 8007b22:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8007b26:	7bfb      	ldrb	r3, [r7, #15]
 8007b28:	4619      	mov	r1, r3
 8007b2a:	6878      	ldr	r0, [r7, #4]
 8007b2c:	f000 fff8 	bl	8008b20 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8007b30:	6878      	ldr	r0, [r7, #4]
 8007b32:	f000 fa5a 	bl	8007fea <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8007b36:	7bfb      	ldrb	r3, [r7, #15]
 8007b38:	2b00      	cmp	r3, #0
 8007b3a:	d004      	beq.n	8007b46 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	2202      	movs	r2, #2
 8007b40:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007b44:	e008      	b.n	8007b58 <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	2201      	movs	r2, #1
 8007b4a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007b4e:	e003      	b.n	8007b58 <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8007b50:	6839      	ldr	r1, [r7, #0]
 8007b52:	6878      	ldr	r0, [r7, #4]
 8007b54:	f000 f97e 	bl	8007e54 <USBD_CtlError>
  }
}
 8007b58:	bf00      	nop
 8007b5a:	3710      	adds	r7, #16
 8007b5c:	46bd      	mov	sp, r7
 8007b5e:	bd80      	pop	{r7, pc}

08007b60 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007b60:	b580      	push	{r7, lr}
 8007b62:	b084      	sub	sp, #16
 8007b64:	af00      	add	r7, sp, #0
 8007b66:	6078      	str	r0, [r7, #4]
 8007b68:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007b6a:	2300      	movs	r3, #0
 8007b6c:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8007b6e:	683b      	ldr	r3, [r7, #0]
 8007b70:	885b      	ldrh	r3, [r3, #2]
 8007b72:	b2da      	uxtb	r2, r3
 8007b74:	4b4b      	ldr	r3, [pc, #300]	; (8007ca4 <USBD_SetConfig+0x144>)
 8007b76:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8007b78:	4b4a      	ldr	r3, [pc, #296]	; (8007ca4 <USBD_SetConfig+0x144>)
 8007b7a:	781b      	ldrb	r3, [r3, #0]
 8007b7c:	2b01      	cmp	r3, #1
 8007b7e:	d905      	bls.n	8007b8c <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8007b80:	6839      	ldr	r1, [r7, #0]
 8007b82:	6878      	ldr	r0, [r7, #4]
 8007b84:	f000 f966 	bl	8007e54 <USBD_CtlError>
    return USBD_FAIL;
 8007b88:	2303      	movs	r3, #3
 8007b8a:	e087      	b.n	8007c9c <USBD_SetConfig+0x13c>
  }

  switch (pdev->dev_state)
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007b92:	2b02      	cmp	r3, #2
 8007b94:	d002      	beq.n	8007b9c <USBD_SetConfig+0x3c>
 8007b96:	2b03      	cmp	r3, #3
 8007b98:	d025      	beq.n	8007be6 <USBD_SetConfig+0x86>
 8007b9a:	e071      	b.n	8007c80 <USBD_SetConfig+0x120>
  {
  case USBD_STATE_ADDRESSED:
    if (cfgidx != 0U)
 8007b9c:	4b41      	ldr	r3, [pc, #260]	; (8007ca4 <USBD_SetConfig+0x144>)
 8007b9e:	781b      	ldrb	r3, [r3, #0]
 8007ba0:	2b00      	cmp	r3, #0
 8007ba2:	d01c      	beq.n	8007bde <USBD_SetConfig+0x7e>
    {
      pdev->dev_config = cfgidx;
 8007ba4:	4b3f      	ldr	r3, [pc, #252]	; (8007ca4 <USBD_SetConfig+0x144>)
 8007ba6:	781b      	ldrb	r3, [r3, #0]
 8007ba8:	461a      	mov	r2, r3
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	605a      	str	r2, [r3, #4]

      ret = USBD_SetClassConfig(pdev, cfgidx);
 8007bae:	4b3d      	ldr	r3, [pc, #244]	; (8007ca4 <USBD_SetConfig+0x144>)
 8007bb0:	781b      	ldrb	r3, [r3, #0]
 8007bb2:	4619      	mov	r1, r3
 8007bb4:	6878      	ldr	r0, [r7, #4]
 8007bb6:	f7ff f9a7 	bl	8006f08 <USBD_SetClassConfig>
 8007bba:	4603      	mov	r3, r0
 8007bbc:	73fb      	strb	r3, [r7, #15]

      if (ret != USBD_OK)
 8007bbe:	7bfb      	ldrb	r3, [r7, #15]
 8007bc0:	2b00      	cmp	r3, #0
 8007bc2:	d004      	beq.n	8007bce <USBD_SetConfig+0x6e>
      {
        USBD_CtlError(pdev, req);
 8007bc4:	6839      	ldr	r1, [r7, #0]
 8007bc6:	6878      	ldr	r0, [r7, #4]
 8007bc8:	f000 f944 	bl	8007e54 <USBD_CtlError>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 8007bcc:	e065      	b.n	8007c9a <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 8007bce:	6878      	ldr	r0, [r7, #4]
 8007bd0:	f000 fa0b 	bl	8007fea <USBD_CtlSendStatus>
        pdev->dev_state = USBD_STATE_CONFIGURED;
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	2203      	movs	r2, #3
 8007bd8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 8007bdc:	e05d      	b.n	8007c9a <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 8007bde:	6878      	ldr	r0, [r7, #4]
 8007be0:	f000 fa03 	bl	8007fea <USBD_CtlSendStatus>
    break;
 8007be4:	e059      	b.n	8007c9a <USBD_SetConfig+0x13a>

  case USBD_STATE_CONFIGURED:
    if (cfgidx == 0U)
 8007be6:	4b2f      	ldr	r3, [pc, #188]	; (8007ca4 <USBD_SetConfig+0x144>)
 8007be8:	781b      	ldrb	r3, [r3, #0]
 8007bea:	2b00      	cmp	r3, #0
 8007bec:	d112      	bne.n	8007c14 <USBD_SetConfig+0xb4>
    {
      pdev->dev_state = USBD_STATE_ADDRESSED;
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	2202      	movs	r2, #2
 8007bf2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      pdev->dev_config = cfgidx;
 8007bf6:	4b2b      	ldr	r3, [pc, #172]	; (8007ca4 <USBD_SetConfig+0x144>)
 8007bf8:	781b      	ldrb	r3, [r3, #0]
 8007bfa:	461a      	mov	r2, r3
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	605a      	str	r2, [r3, #4]
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8007c00:	4b28      	ldr	r3, [pc, #160]	; (8007ca4 <USBD_SetConfig+0x144>)
 8007c02:	781b      	ldrb	r3, [r3, #0]
 8007c04:	4619      	mov	r1, r3
 8007c06:	6878      	ldr	r0, [r7, #4]
 8007c08:	f7ff f99a 	bl	8006f40 <USBD_ClrClassConfig>
      (void)USBD_CtlSendStatus(pdev);
 8007c0c:	6878      	ldr	r0, [r7, #4]
 8007c0e:	f000 f9ec 	bl	8007fea <USBD_CtlSendStatus>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 8007c12:	e042      	b.n	8007c9a <USBD_SetConfig+0x13a>
    else if (cfgidx != pdev->dev_config)
 8007c14:	4b23      	ldr	r3, [pc, #140]	; (8007ca4 <USBD_SetConfig+0x144>)
 8007c16:	781b      	ldrb	r3, [r3, #0]
 8007c18:	461a      	mov	r2, r3
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	685b      	ldr	r3, [r3, #4]
 8007c1e:	429a      	cmp	r2, r3
 8007c20:	d02a      	beq.n	8007c78 <USBD_SetConfig+0x118>
      (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	685b      	ldr	r3, [r3, #4]
 8007c26:	b2db      	uxtb	r3, r3
 8007c28:	4619      	mov	r1, r3
 8007c2a:	6878      	ldr	r0, [r7, #4]
 8007c2c:	f7ff f988 	bl	8006f40 <USBD_ClrClassConfig>
      pdev->dev_config = cfgidx;
 8007c30:	4b1c      	ldr	r3, [pc, #112]	; (8007ca4 <USBD_SetConfig+0x144>)
 8007c32:	781b      	ldrb	r3, [r3, #0]
 8007c34:	461a      	mov	r2, r3
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	605a      	str	r2, [r3, #4]
      ret = USBD_SetClassConfig(pdev, cfgidx);
 8007c3a:	4b1a      	ldr	r3, [pc, #104]	; (8007ca4 <USBD_SetConfig+0x144>)
 8007c3c:	781b      	ldrb	r3, [r3, #0]
 8007c3e:	4619      	mov	r1, r3
 8007c40:	6878      	ldr	r0, [r7, #4]
 8007c42:	f7ff f961 	bl	8006f08 <USBD_SetClassConfig>
 8007c46:	4603      	mov	r3, r0
 8007c48:	73fb      	strb	r3, [r7, #15]
      if (ret != USBD_OK)
 8007c4a:	7bfb      	ldrb	r3, [r7, #15]
 8007c4c:	2b00      	cmp	r3, #0
 8007c4e:	d00f      	beq.n	8007c70 <USBD_SetConfig+0x110>
        USBD_CtlError(pdev, req);
 8007c50:	6839      	ldr	r1, [r7, #0]
 8007c52:	6878      	ldr	r0, [r7, #4]
 8007c54:	f000 f8fe 	bl	8007e54 <USBD_CtlError>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	685b      	ldr	r3, [r3, #4]
 8007c5c:	b2db      	uxtb	r3, r3
 8007c5e:	4619      	mov	r1, r3
 8007c60:	6878      	ldr	r0, [r7, #4]
 8007c62:	f7ff f96d 	bl	8006f40 <USBD_ClrClassConfig>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	2202      	movs	r2, #2
 8007c6a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 8007c6e:	e014      	b.n	8007c9a <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 8007c70:	6878      	ldr	r0, [r7, #4]
 8007c72:	f000 f9ba 	bl	8007fea <USBD_CtlSendStatus>
    break;
 8007c76:	e010      	b.n	8007c9a <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 8007c78:	6878      	ldr	r0, [r7, #4]
 8007c7a:	f000 f9b6 	bl	8007fea <USBD_CtlSendStatus>
    break;
 8007c7e:	e00c      	b.n	8007c9a <USBD_SetConfig+0x13a>

  default:
    USBD_CtlError(pdev, req);
 8007c80:	6839      	ldr	r1, [r7, #0]
 8007c82:	6878      	ldr	r0, [r7, #4]
 8007c84:	f000 f8e6 	bl	8007e54 <USBD_CtlError>
    (void)USBD_ClrClassConfig(pdev, cfgidx);
 8007c88:	4b06      	ldr	r3, [pc, #24]	; (8007ca4 <USBD_SetConfig+0x144>)
 8007c8a:	781b      	ldrb	r3, [r3, #0]
 8007c8c:	4619      	mov	r1, r3
 8007c8e:	6878      	ldr	r0, [r7, #4]
 8007c90:	f7ff f956 	bl	8006f40 <USBD_ClrClassConfig>
    ret = USBD_FAIL;
 8007c94:	2303      	movs	r3, #3
 8007c96:	73fb      	strb	r3, [r7, #15]
    break;
 8007c98:	bf00      	nop
  }

  return ret;
 8007c9a:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c9c:	4618      	mov	r0, r3
 8007c9e:	3710      	adds	r7, #16
 8007ca0:	46bd      	mov	sp, r7
 8007ca2:	bd80      	pop	{r7, pc}
 8007ca4:	20000370 	.word	0x20000370

08007ca8 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007ca8:	b580      	push	{r7, lr}
 8007caa:	b082      	sub	sp, #8
 8007cac:	af00      	add	r7, sp, #0
 8007cae:	6078      	str	r0, [r7, #4]
 8007cb0:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8007cb2:	683b      	ldr	r3, [r7, #0]
 8007cb4:	88db      	ldrh	r3, [r3, #6]
 8007cb6:	2b01      	cmp	r3, #1
 8007cb8:	d004      	beq.n	8007cc4 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8007cba:	6839      	ldr	r1, [r7, #0]
 8007cbc:	6878      	ldr	r0, [r7, #4]
 8007cbe:	f000 f8c9 	bl	8007e54 <USBD_CtlError>
    default:
      USBD_CtlError(pdev, req);
      break;
    }
  }
}
 8007cc2:	e021      	b.n	8007d08 <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007cca:	2b01      	cmp	r3, #1
 8007ccc:	db17      	blt.n	8007cfe <USBD_GetConfig+0x56>
 8007cce:	2b02      	cmp	r3, #2
 8007cd0:	dd02      	ble.n	8007cd8 <USBD_GetConfig+0x30>
 8007cd2:	2b03      	cmp	r3, #3
 8007cd4:	d00b      	beq.n	8007cee <USBD_GetConfig+0x46>
 8007cd6:	e012      	b.n	8007cfe <USBD_GetConfig+0x56>
      pdev->dev_default_config = 0U;
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	2200      	movs	r2, #0
 8007cdc:	609a      	str	r2, [r3, #8]
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	3308      	adds	r3, #8
 8007ce2:	2201      	movs	r2, #1
 8007ce4:	4619      	mov	r1, r3
 8007ce6:	6878      	ldr	r0, [r7, #4]
 8007ce8:	f000 f925 	bl	8007f36 <USBD_CtlSendData>
      break;
 8007cec:	e00c      	b.n	8007d08 <USBD_GetConfig+0x60>
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	3304      	adds	r3, #4
 8007cf2:	2201      	movs	r2, #1
 8007cf4:	4619      	mov	r1, r3
 8007cf6:	6878      	ldr	r0, [r7, #4]
 8007cf8:	f000 f91d 	bl	8007f36 <USBD_CtlSendData>
      break;
 8007cfc:	e004      	b.n	8007d08 <USBD_GetConfig+0x60>
      USBD_CtlError(pdev, req);
 8007cfe:	6839      	ldr	r1, [r7, #0]
 8007d00:	6878      	ldr	r0, [r7, #4]
 8007d02:	f000 f8a7 	bl	8007e54 <USBD_CtlError>
      break;
 8007d06:	bf00      	nop
}
 8007d08:	bf00      	nop
 8007d0a:	3708      	adds	r7, #8
 8007d0c:	46bd      	mov	sp, r7
 8007d0e:	bd80      	pop	{r7, pc}

08007d10 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007d10:	b580      	push	{r7, lr}
 8007d12:	b082      	sub	sp, #8
 8007d14:	af00      	add	r7, sp, #0
 8007d16:	6078      	str	r0, [r7, #4]
 8007d18:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007d20:	3b01      	subs	r3, #1
 8007d22:	2b02      	cmp	r3, #2
 8007d24:	d81e      	bhi.n	8007d64 <USBD_GetStatus+0x54>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wLength != 0x2U)
 8007d26:	683b      	ldr	r3, [r7, #0]
 8007d28:	88db      	ldrh	r3, [r3, #6]
 8007d2a:	2b02      	cmp	r3, #2
 8007d2c:	d004      	beq.n	8007d38 <USBD_GetStatus+0x28>
    {
      USBD_CtlError(pdev, req);
 8007d2e:	6839      	ldr	r1, [r7, #0]
 8007d30:	6878      	ldr	r0, [r7, #4]
 8007d32:	f000 f88f 	bl	8007e54 <USBD_CtlError>
      break;
 8007d36:	e01a      	b.n	8007d6e <USBD_GetStatus+0x5e>
    }

#if (USBD_SELF_POWERED == 1U)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	2201      	movs	r2, #1
 8007d3c:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0U;
#endif

    if (pdev->dev_remote_wakeup != 0U)
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8007d44:	2b00      	cmp	r3, #0
 8007d46:	d005      	beq.n	8007d54 <USBD_GetStatus+0x44>
    {
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	68db      	ldr	r3, [r3, #12]
 8007d4c:	f043 0202 	orr.w	r2, r3, #2
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	60da      	str	r2, [r3, #12]
    }

    (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	330c      	adds	r3, #12
 8007d58:	2202      	movs	r2, #2
 8007d5a:	4619      	mov	r1, r3
 8007d5c:	6878      	ldr	r0, [r7, #4]
 8007d5e:	f000 f8ea 	bl	8007f36 <USBD_CtlSendData>
    break;
 8007d62:	e004      	b.n	8007d6e <USBD_GetStatus+0x5e>

  default:
    USBD_CtlError(pdev, req);
 8007d64:	6839      	ldr	r1, [r7, #0]
 8007d66:	6878      	ldr	r0, [r7, #4]
 8007d68:	f000 f874 	bl	8007e54 <USBD_CtlError>
    break;
 8007d6c:	bf00      	nop
  }
}
 8007d6e:	bf00      	nop
 8007d70:	3708      	adds	r7, #8
 8007d72:	46bd      	mov	sp, r7
 8007d74:	bd80      	pop	{r7, pc}

08007d76 <USBD_SetFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007d76:	b580      	push	{r7, lr}
 8007d78:	b082      	sub	sp, #8
 8007d7a:	af00      	add	r7, sp, #0
 8007d7c:	6078      	str	r0, [r7, #4]
 8007d7e:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007d80:	683b      	ldr	r3, [r7, #0]
 8007d82:	885b      	ldrh	r3, [r3, #2]
 8007d84:	2b01      	cmp	r3, #1
 8007d86:	d106      	bne.n	8007d96 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	2201      	movs	r2, #1
 8007d8c:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8007d90:	6878      	ldr	r0, [r7, #4]
 8007d92:	f000 f92a 	bl	8007fea <USBD_CtlSendStatus>
  }
}
 8007d96:	bf00      	nop
 8007d98:	3708      	adds	r7, #8
 8007d9a:	46bd      	mov	sp, r7
 8007d9c:	bd80      	pop	{r7, pc}

08007d9e <USBD_ClrFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007d9e:	b580      	push	{r7, lr}
 8007da0:	b082      	sub	sp, #8
 8007da2:	af00      	add	r7, sp, #0
 8007da4:	6078      	str	r0, [r7, #4]
 8007da6:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007dae:	3b01      	subs	r3, #1
 8007db0:	2b02      	cmp	r3, #2
 8007db2:	d80b      	bhi.n	8007dcc <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007db4:	683b      	ldr	r3, [r7, #0]
 8007db6:	885b      	ldrh	r3, [r3, #2]
 8007db8:	2b01      	cmp	r3, #1
 8007dba:	d10c      	bne.n	8007dd6 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	2200      	movs	r2, #0
 8007dc0:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8007dc4:	6878      	ldr	r0, [r7, #4]
 8007dc6:	f000 f910 	bl	8007fea <USBD_CtlSendStatus>
      }
      break;
 8007dca:	e004      	b.n	8007dd6 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8007dcc:	6839      	ldr	r1, [r7, #0]
 8007dce:	6878      	ldr	r0, [r7, #4]
 8007dd0:	f000 f840 	bl	8007e54 <USBD_CtlError>
      break;
 8007dd4:	e000      	b.n	8007dd8 <USBD_ClrFeature+0x3a>
      break;
 8007dd6:	bf00      	nop
  }
}
 8007dd8:	bf00      	nop
 8007dda:	3708      	adds	r7, #8
 8007ddc:	46bd      	mov	sp, r7
 8007dde:	bd80      	pop	{r7, pc}

08007de0 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8007de0:	b580      	push	{r7, lr}
 8007de2:	b084      	sub	sp, #16
 8007de4:	af00      	add	r7, sp, #0
 8007de6:	6078      	str	r0, [r7, #4]
 8007de8:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8007dea:	683b      	ldr	r3, [r7, #0]
 8007dec:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8007dee:	68fb      	ldr	r3, [r7, #12]
 8007df0:	781a      	ldrb	r2, [r3, #0]
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8007df6:	68fb      	ldr	r3, [r7, #12]
 8007df8:	3301      	adds	r3, #1
 8007dfa:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8007dfc:	68fb      	ldr	r3, [r7, #12]
 8007dfe:	781a      	ldrb	r2, [r3, #0]
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8007e04:	68fb      	ldr	r3, [r7, #12]
 8007e06:	3301      	adds	r3, #1
 8007e08:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8007e0a:	68f8      	ldr	r0, [r7, #12]
 8007e0c:	f7ff fad3 	bl	80073b6 <SWAPBYTE>
 8007e10:	4603      	mov	r3, r0
 8007e12:	461a      	mov	r2, r3
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8007e18:	68fb      	ldr	r3, [r7, #12]
 8007e1a:	3301      	adds	r3, #1
 8007e1c:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8007e1e:	68fb      	ldr	r3, [r7, #12]
 8007e20:	3301      	adds	r3, #1
 8007e22:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8007e24:	68f8      	ldr	r0, [r7, #12]
 8007e26:	f7ff fac6 	bl	80073b6 <SWAPBYTE>
 8007e2a:	4603      	mov	r3, r0
 8007e2c:	461a      	mov	r2, r3
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8007e32:	68fb      	ldr	r3, [r7, #12]
 8007e34:	3301      	adds	r3, #1
 8007e36:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8007e38:	68fb      	ldr	r3, [r7, #12]
 8007e3a:	3301      	adds	r3, #1
 8007e3c:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8007e3e:	68f8      	ldr	r0, [r7, #12]
 8007e40:	f7ff fab9 	bl	80073b6 <SWAPBYTE>
 8007e44:	4603      	mov	r3, r0
 8007e46:	461a      	mov	r2, r3
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	80da      	strh	r2, [r3, #6]
}
 8007e4c:	bf00      	nop
 8007e4e:	3710      	adds	r7, #16
 8007e50:	46bd      	mov	sp, r7
 8007e52:	bd80      	pop	{r7, pc}

08007e54 <USBD_CtlError>:
* @param  req: usb request
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007e54:	b580      	push	{r7, lr}
 8007e56:	b082      	sub	sp, #8
 8007e58:	af00      	add	r7, sp, #0
 8007e5a:	6078      	str	r0, [r7, #4]
 8007e5c:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8007e5e:	2180      	movs	r1, #128	; 0x80
 8007e60:	6878      	ldr	r0, [r7, #4]
 8007e62:	f000 fdf3 	bl	8008a4c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8007e66:	2100      	movs	r1, #0
 8007e68:	6878      	ldr	r0, [r7, #4]
 8007e6a:	f000 fdef 	bl	8008a4c <USBD_LL_StallEP>
}
 8007e6e:	bf00      	nop
 8007e70:	3708      	adds	r7, #8
 8007e72:	46bd      	mov	sp, r7
 8007e74:	bd80      	pop	{r7, pc}

08007e76 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8007e76:	b580      	push	{r7, lr}
 8007e78:	b086      	sub	sp, #24
 8007e7a:	af00      	add	r7, sp, #0
 8007e7c:	60f8      	str	r0, [r7, #12]
 8007e7e:	60b9      	str	r1, [r7, #8]
 8007e80:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8007e82:	2300      	movs	r3, #0
 8007e84:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8007e86:	68fb      	ldr	r3, [r7, #12]
 8007e88:	2b00      	cmp	r3, #0
 8007e8a:	d036      	beq.n	8007efa <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8007e8c:	68fb      	ldr	r3, [r7, #12]
 8007e8e:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8007e90:	6938      	ldr	r0, [r7, #16]
 8007e92:	f000 f836 	bl	8007f02 <USBD_GetLen>
 8007e96:	4603      	mov	r3, r0
 8007e98:	3301      	adds	r3, #1
 8007e9a:	b29b      	uxth	r3, r3
 8007e9c:	005b      	lsls	r3, r3, #1
 8007e9e:	b29a      	uxth	r2, r3
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8007ea4:	7dfb      	ldrb	r3, [r7, #23]
 8007ea6:	68ba      	ldr	r2, [r7, #8]
 8007ea8:	4413      	add	r3, r2
 8007eaa:	687a      	ldr	r2, [r7, #4]
 8007eac:	7812      	ldrb	r2, [r2, #0]
 8007eae:	701a      	strb	r2, [r3, #0]
  idx++;
 8007eb0:	7dfb      	ldrb	r3, [r7, #23]
 8007eb2:	3301      	adds	r3, #1
 8007eb4:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8007eb6:	7dfb      	ldrb	r3, [r7, #23]
 8007eb8:	68ba      	ldr	r2, [r7, #8]
 8007eba:	4413      	add	r3, r2
 8007ebc:	2203      	movs	r2, #3
 8007ebe:	701a      	strb	r2, [r3, #0]
  idx++;
 8007ec0:	7dfb      	ldrb	r3, [r7, #23]
 8007ec2:	3301      	adds	r3, #1
 8007ec4:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8007ec6:	e013      	b.n	8007ef0 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8007ec8:	7dfb      	ldrb	r3, [r7, #23]
 8007eca:	68ba      	ldr	r2, [r7, #8]
 8007ecc:	4413      	add	r3, r2
 8007ece:	693a      	ldr	r2, [r7, #16]
 8007ed0:	7812      	ldrb	r2, [r2, #0]
 8007ed2:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8007ed4:	693b      	ldr	r3, [r7, #16]
 8007ed6:	3301      	adds	r3, #1
 8007ed8:	613b      	str	r3, [r7, #16]
    idx++;
 8007eda:	7dfb      	ldrb	r3, [r7, #23]
 8007edc:	3301      	adds	r3, #1
 8007ede:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8007ee0:	7dfb      	ldrb	r3, [r7, #23]
 8007ee2:	68ba      	ldr	r2, [r7, #8]
 8007ee4:	4413      	add	r3, r2
 8007ee6:	2200      	movs	r2, #0
 8007ee8:	701a      	strb	r2, [r3, #0]
    idx++;
 8007eea:	7dfb      	ldrb	r3, [r7, #23]
 8007eec:	3301      	adds	r3, #1
 8007eee:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8007ef0:	693b      	ldr	r3, [r7, #16]
 8007ef2:	781b      	ldrb	r3, [r3, #0]
 8007ef4:	2b00      	cmp	r3, #0
 8007ef6:	d1e7      	bne.n	8007ec8 <USBD_GetString+0x52>
 8007ef8:	e000      	b.n	8007efc <USBD_GetString+0x86>
    return;
 8007efa:	bf00      	nop
  }
}
 8007efc:	3718      	adds	r7, #24
 8007efe:	46bd      	mov	sp, r7
 8007f00:	bd80      	pop	{r7, pc}

08007f02 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8007f02:	b480      	push	{r7}
 8007f04:	b085      	sub	sp, #20
 8007f06:	af00      	add	r7, sp, #0
 8007f08:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8007f0a:	2300      	movs	r3, #0
 8007f0c:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8007f12:	e005      	b.n	8007f20 <USBD_GetLen+0x1e>
  {
    len++;
 8007f14:	7bfb      	ldrb	r3, [r7, #15]
 8007f16:	3301      	adds	r3, #1
 8007f18:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8007f1a:	68bb      	ldr	r3, [r7, #8]
 8007f1c:	3301      	adds	r3, #1
 8007f1e:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8007f20:	68bb      	ldr	r3, [r7, #8]
 8007f22:	781b      	ldrb	r3, [r3, #0]
 8007f24:	2b00      	cmp	r3, #0
 8007f26:	d1f5      	bne.n	8007f14 <USBD_GetLen+0x12>
  }

  return len;
 8007f28:	7bfb      	ldrb	r3, [r7, #15]
}
 8007f2a:	4618      	mov	r0, r3
 8007f2c:	3714      	adds	r7, #20
 8007f2e:	46bd      	mov	sp, r7
 8007f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f34:	4770      	bx	lr

08007f36 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8007f36:	b580      	push	{r7, lr}
 8007f38:	b084      	sub	sp, #16
 8007f3a:	af00      	add	r7, sp, #0
 8007f3c:	60f8      	str	r0, [r7, #12]
 8007f3e:	60b9      	str	r1, [r7, #8]
 8007f40:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8007f42:	68fb      	ldr	r3, [r7, #12]
 8007f44:	2202      	movs	r2, #2
 8007f46:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8007f4a:	68fb      	ldr	r3, [r7, #12]
 8007f4c:	687a      	ldr	r2, [r7, #4]
 8007f4e:	619a      	str	r2, [r3, #24]
  pdev->ep_in[0].rem_length = len;
 8007f50:	68fb      	ldr	r3, [r7, #12]
 8007f52:	687a      	ldr	r2, [r7, #4]
 8007f54:	61da      	str	r2, [r3, #28]

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	68ba      	ldr	r2, [r7, #8]
 8007f5a:	2100      	movs	r1, #0
 8007f5c:	68f8      	ldr	r0, [r7, #12]
 8007f5e:	f000 fdfe 	bl	8008b5e <USBD_LL_Transmit>

  return USBD_OK;
 8007f62:	2300      	movs	r3, #0
}
 8007f64:	4618      	mov	r0, r3
 8007f66:	3710      	adds	r7, #16
 8007f68:	46bd      	mov	sp, r7
 8007f6a:	bd80      	pop	{r7, pc}

08007f6c <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8007f6c:	b580      	push	{r7, lr}
 8007f6e:	b084      	sub	sp, #16
 8007f70:	af00      	add	r7, sp, #0
 8007f72:	60f8      	str	r0, [r7, #12]
 8007f74:	60b9      	str	r1, [r7, #8]
 8007f76:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	68ba      	ldr	r2, [r7, #8]
 8007f7c:	2100      	movs	r1, #0
 8007f7e:	68f8      	ldr	r0, [r7, #12]
 8007f80:	f000 fded 	bl	8008b5e <USBD_LL_Transmit>

  return USBD_OK;
 8007f84:	2300      	movs	r3, #0
}
 8007f86:	4618      	mov	r0, r3
 8007f88:	3710      	adds	r7, #16
 8007f8a:	46bd      	mov	sp, r7
 8007f8c:	bd80      	pop	{r7, pc}

08007f8e <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8007f8e:	b580      	push	{r7, lr}
 8007f90:	b084      	sub	sp, #16
 8007f92:	af00      	add	r7, sp, #0
 8007f94:	60f8      	str	r0, [r7, #12]
 8007f96:	60b9      	str	r1, [r7, #8]
 8007f98:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8007f9a:	68fb      	ldr	r3, [r7, #12]
 8007f9c:	2203      	movs	r2, #3
 8007f9e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8007fa2:	68fb      	ldr	r3, [r7, #12]
 8007fa4:	687a      	ldr	r2, [r7, #4]
 8007fa6:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
  pdev->ep_out[0].rem_length = len;
 8007faa:	68fb      	ldr	r3, [r7, #12]
 8007fac:	687a      	ldr	r2, [r7, #4]
 8007fae:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	68ba      	ldr	r2, [r7, #8]
 8007fb6:	2100      	movs	r1, #0
 8007fb8:	68f8      	ldr	r0, [r7, #12]
 8007fba:	f000 fdf1 	bl	8008ba0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007fbe:	2300      	movs	r3, #0
}
 8007fc0:	4618      	mov	r0, r3
 8007fc2:	3710      	adds	r7, #16
 8007fc4:	46bd      	mov	sp, r7
 8007fc6:	bd80      	pop	{r7, pc}

08007fc8 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8007fc8:	b580      	push	{r7, lr}
 8007fca:	b084      	sub	sp, #16
 8007fcc:	af00      	add	r7, sp, #0
 8007fce:	60f8      	str	r0, [r7, #12]
 8007fd0:	60b9      	str	r1, [r7, #8]
 8007fd2:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	68ba      	ldr	r2, [r7, #8]
 8007fd8:	2100      	movs	r1, #0
 8007fda:	68f8      	ldr	r0, [r7, #12]
 8007fdc:	f000 fde0 	bl	8008ba0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007fe0:	2300      	movs	r3, #0
}
 8007fe2:	4618      	mov	r0, r3
 8007fe4:	3710      	adds	r7, #16
 8007fe6:	46bd      	mov	sp, r7
 8007fe8:	bd80      	pop	{r7, pc}

08007fea <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8007fea:	b580      	push	{r7, lr}
 8007fec:	b082      	sub	sp, #8
 8007fee:	af00      	add	r7, sp, #0
 8007ff0:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	2204      	movs	r2, #4
 8007ff6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8007ffa:	2300      	movs	r3, #0
 8007ffc:	2200      	movs	r2, #0
 8007ffe:	2100      	movs	r1, #0
 8008000:	6878      	ldr	r0, [r7, #4]
 8008002:	f000 fdac 	bl	8008b5e <USBD_LL_Transmit>

  return USBD_OK;
 8008006:	2300      	movs	r3, #0
}
 8008008:	4618      	mov	r0, r3
 800800a:	3708      	adds	r7, #8
 800800c:	46bd      	mov	sp, r7
 800800e:	bd80      	pop	{r7, pc}

08008010 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8008010:	b580      	push	{r7, lr}
 8008012:	b082      	sub	sp, #8
 8008014:	af00      	add	r7, sp, #0
 8008016:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	2205      	movs	r2, #5
 800801c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008020:	2300      	movs	r3, #0
 8008022:	2200      	movs	r2, #0
 8008024:	2100      	movs	r1, #0
 8008026:	6878      	ldr	r0, [r7, #4]
 8008028:	f000 fdba 	bl	8008ba0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800802c:	2300      	movs	r3, #0
}
 800802e:	4618      	mov	r0, r3
 8008030:	3708      	adds	r7, #8
 8008032:	46bd      	mov	sp, r7
 8008034:	bd80      	pop	{r7, pc}
	...

08008038 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8008038:	b580      	push	{r7, lr}
 800803a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800803c:	2200      	movs	r2, #0
 800803e:	4912      	ldr	r1, [pc, #72]	; (8008088 <MX_USB_DEVICE_Init+0x50>)
 8008040:	4812      	ldr	r0, [pc, #72]	; (800808c <MX_USB_DEVICE_Init+0x54>)
 8008042:	f7fe fef3 	bl	8006e2c <USBD_Init>
 8008046:	4603      	mov	r3, r0
 8008048:	2b00      	cmp	r3, #0
 800804a:	d001      	beq.n	8008050 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800804c:	f7f8 fb80 	bl	8000750 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8008050:	490f      	ldr	r1, [pc, #60]	; (8008090 <MX_USB_DEVICE_Init+0x58>)
 8008052:	480e      	ldr	r0, [pc, #56]	; (800808c <MX_USB_DEVICE_Init+0x54>)
 8008054:	f7fe ff20 	bl	8006e98 <USBD_RegisterClass>
 8008058:	4603      	mov	r3, r0
 800805a:	2b00      	cmp	r3, #0
 800805c:	d001      	beq.n	8008062 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800805e:	f7f8 fb77 	bl	8000750 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8008062:	490c      	ldr	r1, [pc, #48]	; (8008094 <MX_USB_DEVICE_Init+0x5c>)
 8008064:	4809      	ldr	r0, [pc, #36]	; (800808c <MX_USB_DEVICE_Init+0x54>)
 8008066:	f7fe fe45 	bl	8006cf4 <USBD_CDC_RegisterInterface>
 800806a:	4603      	mov	r3, r0
 800806c:	2b00      	cmp	r3, #0
 800806e:	d001      	beq.n	8008074 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8008070:	f7f8 fb6e 	bl	8000750 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8008074:	4805      	ldr	r0, [pc, #20]	; (800808c <MX_USB_DEVICE_Init+0x54>)
 8008076:	f7fe ff30 	bl	8006eda <USBD_Start>
 800807a:	4603      	mov	r3, r0
 800807c:	2b00      	cmp	r3, #0
 800807e:	d001      	beq.n	8008084 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8008080:	f7f8 fb66 	bl	8000750 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8008084:	bf00      	nop
 8008086:	bd80      	pop	{r7, pc}
 8008088:	20000154 	.word	0x20000154
 800808c:	2000042c 	.word	0x2000042c
 8008090:	20000030 	.word	0x20000030
 8008094:	20000140 	.word	0x20000140

08008098 <cdcAvailable>:
uint8_t rx_buf[512];
bool rx_full = false;

// Data count
uint32_t cdcAvailable(void)
{
 8008098:	b480      	push	{r7}
 800809a:	b083      	sub	sp, #12
 800809c:	af00      	add	r7, sp, #0
  uint32_t ret;

  ret = (rx_in - rx_out) % rx_len;
 800809e:	4b0a      	ldr	r3, [pc, #40]	; (80080c8 <cdcAvailable+0x30>)
 80080a0:	681a      	ldr	r2, [r3, #0]
 80080a2:	4b0a      	ldr	r3, [pc, #40]	; (80080cc <cdcAvailable+0x34>)
 80080a4:	681b      	ldr	r3, [r3, #0]
 80080a6:	1ad3      	subs	r3, r2, r3
 80080a8:	4a09      	ldr	r2, [pc, #36]	; (80080d0 <cdcAvailable+0x38>)
 80080aa:	6812      	ldr	r2, [r2, #0]
 80080ac:	fbb3 f1f2 	udiv	r1, r3, r2
 80080b0:	fb02 f201 	mul.w	r2, r2, r1
 80080b4:	1a9b      	subs	r3, r3, r2
 80080b6:	607b      	str	r3, [r7, #4]

  return ret;
 80080b8:	687b      	ldr	r3, [r7, #4]
}
 80080ba:	4618      	mov	r0, r3
 80080bc:	370c      	adds	r7, #12
 80080be:	46bd      	mov	sp, r7
 80080c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080c4:	4770      	bx	lr
 80080c6:	bf00      	nop
 80080c8:	20000374 	.word	0x20000374
 80080cc:	20000378 	.word	0x20000378
 80080d0:	2000013c 	.word	0x2000013c

080080d4 <cdcDataIn>:

  return ret;
}

void cdcDataIn(uint8_t rx_data)
{
 80080d4:	b480      	push	{r7}
 80080d6:	b085      	sub	sp, #20
 80080d8:	af00      	add	r7, sp, #0
 80080da:	4603      	mov	r3, r0
 80080dc:	71fb      	strb	r3, [r7, #7]
  uint32_t next_rx_in;

  rx_buf[rx_in] = rx_data;
 80080de:	4b0f      	ldr	r3, [pc, #60]	; (800811c <cdcDataIn+0x48>)
 80080e0:	681b      	ldr	r3, [r3, #0]
 80080e2:	490f      	ldr	r1, [pc, #60]	; (8008120 <cdcDataIn+0x4c>)
 80080e4:	79fa      	ldrb	r2, [r7, #7]
 80080e6:	54ca      	strb	r2, [r1, r3]

  next_rx_in = (rx_in + 1) % rx_len;
 80080e8:	4b0c      	ldr	r3, [pc, #48]	; (800811c <cdcDataIn+0x48>)
 80080ea:	681b      	ldr	r3, [r3, #0]
 80080ec:	3301      	adds	r3, #1
 80080ee:	4a0d      	ldr	r2, [pc, #52]	; (8008124 <cdcDataIn+0x50>)
 80080f0:	6812      	ldr	r2, [r2, #0]
 80080f2:	fbb3 f1f2 	udiv	r1, r3, r2
 80080f6:	fb02 f201 	mul.w	r2, r2, r1
 80080fa:	1a9b      	subs	r3, r3, r2
 80080fc:	60fb      	str	r3, [r7, #12]

  if(next_rx_in != rx_out)
 80080fe:	4b0a      	ldr	r3, [pc, #40]	; (8008128 <cdcDataIn+0x54>)
 8008100:	681b      	ldr	r3, [r3, #0]
 8008102:	68fa      	ldr	r2, [r7, #12]
 8008104:	429a      	cmp	r2, r3
 8008106:	d002      	beq.n	800810e <cdcDataIn+0x3a>
  {
    rx_in = next_rx_in;
 8008108:	4a04      	ldr	r2, [pc, #16]	; (800811c <cdcDataIn+0x48>)
 800810a:	68fb      	ldr	r3, [r7, #12]
 800810c:	6013      	str	r3, [r2, #0]
  }

}
 800810e:	bf00      	nop
 8008110:	3714      	adds	r7, #20
 8008112:	46bd      	mov	sp, r7
 8008114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008118:	4770      	bx	lr
 800811a:	bf00      	nop
 800811c:	20000374 	.word	0x20000374
 8008120:	20000afc 	.word	0x20000afc
 8008124:	2000013c 	.word	0x2000013c
 8008128:	20000378 	.word	0x20000378

0800812c <cdcWrite>:

uint32_t cdcWrite(uint8_t *p_data, uint32_t length)
{
 800812c:	b580      	push	{r7, lr}
 800812e:	b084      	sub	sp, #16
 8008130:	af00      	add	r7, sp, #0
 8008132:	6078      	str	r0, [r7, #4]
 8008134:	6039      	str	r1, [r7, #0]
  uint32_t pre_time;
  uint8_t ret;

  pre_time = millis();
 8008136:	f7f8 fa74 	bl	8000622 <millis>
 800813a:	60f8      	str	r0, [r7, #12]
  while(1)
  {
    ret = CDC_Transmit_FS(p_data, length);
 800813c:	683b      	ldr	r3, [r7, #0]
 800813e:	b29b      	uxth	r3, r3
 8008140:	4619      	mov	r1, r3
 8008142:	6878      	ldr	r0, [r7, #4]
 8008144:	f000 f94a 	bl	80083dc <CDC_Transmit_FS>
 8008148:	4603      	mov	r3, r0
 800814a:	72fb      	strb	r3, [r7, #11]

    if(ret == USBD_OK)
 800814c:	7afb      	ldrb	r3, [r7, #11]
 800814e:	2b00      	cmp	r3, #0
 8008150:	d101      	bne.n	8008156 <cdcWrite+0x2a>
    {
      return length;
 8008152:	683b      	ldr	r3, [r7, #0]
 8008154:	e00e      	b.n	8008174 <cdcWrite+0x48>
    }
    else if(ret == USBD_FAIL)
 8008156:	7afb      	ldrb	r3, [r7, #11]
 8008158:	2b03      	cmp	r3, #3
 800815a:	d101      	bne.n	8008160 <cdcWrite+0x34>
    {
      return 0;
 800815c:	2300      	movs	r3, #0
 800815e:	e009      	b.n	8008174 <cdcWrite+0x48>
    }

    if(millis()-pre_time >= 100)
 8008160:	f7f8 fa5f 	bl	8000622 <millis>
 8008164:	4602      	mov	r2, r0
 8008166:	68fb      	ldr	r3, [r7, #12]
 8008168:	1ad3      	subs	r3, r2, r3
 800816a:	2b63      	cmp	r3, #99	; 0x63
 800816c:	d800      	bhi.n	8008170 <cdcWrite+0x44>
    ret = CDC_Transmit_FS(p_data, length);
 800816e:	e7e5      	b.n	800813c <cdcWrite+0x10>
    {
      break;
 8008170:	bf00      	nop
    }
  }

  return 0;
 8008172:	2300      	movs	r3, #0
}
 8008174:	4618      	mov	r0, r3
 8008176:	3710      	adds	r7, #16
 8008178:	46bd      	mov	sp, r7
 800817a:	bd80      	pop	{r7, pc}

0800817c <USBD_CDC_SOF>:
  return LineCoding.bitrate;

}

uint8_t USBD_CDC_SOF(struct _USBD_HandleTypeDef *pdev)
{
 800817c:	b590      	push	{r4, r7, lr}
 800817e:	b085      	sub	sp, #20
 8008180:	af00      	add	r7, sp, #0
 8008182:	6078      	str	r0, [r7, #4]
  if(rx_full == true)
 8008184:	4b0c      	ldr	r3, [pc, #48]	; (80081b8 <USBD_CDC_SOF+0x3c>)
 8008186:	781b      	ldrb	r3, [r3, #0]
 8008188:	2b00      	cmp	r3, #0
 800818a:	d010      	beq.n	80081ae <USBD_CDC_SOF+0x32>
  {
    uint32_t buf_len;

    // 수신 버퍼에서 비어있는 데이터 양
    buf_len = (rx_len - cdcAvailable()) - 1;
 800818c:	4b0b      	ldr	r3, [pc, #44]	; (80081bc <USBD_CDC_SOF+0x40>)
 800818e:	681c      	ldr	r4, [r3, #0]
 8008190:	f7ff ff82 	bl	8008098 <cdcAvailable>
 8008194:	4603      	mov	r3, r0
 8008196:	1ae3      	subs	r3, r4, r3
 8008198:	3b01      	subs	r3, #1
 800819a:	60fb      	str	r3, [r7, #12]

    if(buf_len >= USB_FS_MAX_PACKET_SIZE)
 800819c:	68fb      	ldr	r3, [r7, #12]
 800819e:	2b3f      	cmp	r3, #63	; 0x3f
 80081a0:	d905      	bls.n	80081ae <USBD_CDC_SOF+0x32>
    {
      // 다음 데이터도 보내줘
      USBD_CDC_ReceivePacket(pdev);          // alarm to PC whether data is vacant
 80081a2:	6878      	ldr	r0, [r7, #4]
 80081a4:	f7fe fe18 	bl	8006dd8 <USBD_CDC_ReceivePacket>
      rx_full = false;
 80081a8:	4b03      	ldr	r3, [pc, #12]	; (80081b8 <USBD_CDC_SOF+0x3c>)
 80081aa:	2200      	movs	r2, #0
 80081ac:	701a      	strb	r2, [r3, #0]
    }
  }

  return 0;
 80081ae:	2300      	movs	r3, #0
}
 80081b0:	4618      	mov	r0, r3
 80081b2:	3714      	adds	r7, #20
 80081b4:	46bd      	mov	sp, r7
 80081b6:	bd90      	pop	{r4, r7, pc}
 80081b8:	2000037c 	.word	0x2000037c
 80081bc:	2000013c 	.word	0x2000013c

080081c0 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 80081c0:	b580      	push	{r7, lr}
 80081c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 80081c4:	2200      	movs	r2, #0
 80081c6:	4905      	ldr	r1, [pc, #20]	; (80081dc <CDC_Init_FS+0x1c>)
 80081c8:	4805      	ldr	r0, [pc, #20]	; (80081e0 <CDC_Init_FS+0x20>)
 80081ca:	f7fe fda8 	bl	8006d1e <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 80081ce:	4905      	ldr	r1, [pc, #20]	; (80081e4 <CDC_Init_FS+0x24>)
 80081d0:	4803      	ldr	r0, [pc, #12]	; (80081e0 <CDC_Init_FS+0x20>)
 80081d2:	f7fe fdbd 	bl	8006d50 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 80081d6:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 80081d8:	4618      	mov	r0, r3
 80081da:	bd80      	pop	{r7, pc}
 80081dc:	200008fc 	.word	0x200008fc
 80081e0:	2000042c 	.word	0x2000042c
 80081e4:	200006fc 	.word	0x200006fc

080081e8 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 80081e8:	b480      	push	{r7}
 80081ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 80081ec:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 80081ee:	4618      	mov	r0, r3
 80081f0:	46bd      	mov	sp, r7
 80081f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081f6:	4770      	bx	lr

080081f8 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 80081f8:	b480      	push	{r7}
 80081fa:	b083      	sub	sp, #12
 80081fc:	af00      	add	r7, sp, #0
 80081fe:	4603      	mov	r3, r0
 8008200:	6039      	str	r1, [r7, #0]
 8008202:	71fb      	strb	r3, [r7, #7]
 8008204:	4613      	mov	r3, r2
 8008206:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8008208:	79fb      	ldrb	r3, [r7, #7]
 800820a:	2b23      	cmp	r3, #35	; 0x23
 800820c:	f200 80a3 	bhi.w	8008356 <CDC_Control_FS+0x15e>
 8008210:	a201      	add	r2, pc, #4	; (adr r2, 8008218 <CDC_Control_FS+0x20>)
 8008212:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008216:	bf00      	nop
 8008218:	08008357 	.word	0x08008357
 800821c:	08008357 	.word	0x08008357
 8008220:	08008357 	.word	0x08008357
 8008224:	08008357 	.word	0x08008357
 8008228:	08008357 	.word	0x08008357
 800822c:	08008357 	.word	0x08008357
 8008230:	08008357 	.word	0x08008357
 8008234:	08008357 	.word	0x08008357
 8008238:	08008357 	.word	0x08008357
 800823c:	08008357 	.word	0x08008357
 8008240:	08008357 	.word	0x08008357
 8008244:	08008357 	.word	0x08008357
 8008248:	08008357 	.word	0x08008357
 800824c:	08008357 	.word	0x08008357
 8008250:	08008357 	.word	0x08008357
 8008254:	08008357 	.word	0x08008357
 8008258:	08008357 	.word	0x08008357
 800825c:	08008357 	.word	0x08008357
 8008260:	08008357 	.word	0x08008357
 8008264:	08008357 	.word	0x08008357
 8008268:	08008357 	.word	0x08008357
 800826c:	08008357 	.word	0x08008357
 8008270:	08008357 	.word	0x08008357
 8008274:	08008357 	.word	0x08008357
 8008278:	08008357 	.word	0x08008357
 800827c:	08008357 	.word	0x08008357
 8008280:	08008357 	.word	0x08008357
 8008284:	08008357 	.word	0x08008357
 8008288:	08008357 	.word	0x08008357
 800828c:	08008357 	.word	0x08008357
 8008290:	08008357 	.word	0x08008357
 8008294:	08008357 	.word	0x08008357
 8008298:	080082a9 	.word	0x080082a9
 800829c:	08008303 	.word	0x08008303
 80082a0:	08008357 	.word	0x08008357
 80082a4:	08008357 	.word	0x08008357
  /*                                        4 - Space                            */
  /* 6      | bDataBits  |   1   | Number Data bits (5, 6, 7, 8 or 16).          */
  /*******************************************************************************/
    case CDC_SET_LINE_CODING:

      LineCoding.bitrate  = (uint32_t)(pbuf[0]);
 80082a8:	683b      	ldr	r3, [r7, #0]
 80082aa:	781b      	ldrb	r3, [r3, #0]
 80082ac:	461a      	mov	r2, r3
 80082ae:	4b2e      	ldr	r3, [pc, #184]	; (8008368 <CDC_Control_FS+0x170>)
 80082b0:	601a      	str	r2, [r3, #0]
      LineCoding.bitrate |= (uint32_t)(pbuf[1]<<8);
 80082b2:	4b2d      	ldr	r3, [pc, #180]	; (8008368 <CDC_Control_FS+0x170>)
 80082b4:	681b      	ldr	r3, [r3, #0]
 80082b6:	683a      	ldr	r2, [r7, #0]
 80082b8:	3201      	adds	r2, #1
 80082ba:	7812      	ldrb	r2, [r2, #0]
 80082bc:	0212      	lsls	r2, r2, #8
 80082be:	4313      	orrs	r3, r2
 80082c0:	4a29      	ldr	r2, [pc, #164]	; (8008368 <CDC_Control_FS+0x170>)
 80082c2:	6013      	str	r3, [r2, #0]
      LineCoding.bitrate |= (uint32_t)(pbuf[2]<<16);
 80082c4:	4b28      	ldr	r3, [pc, #160]	; (8008368 <CDC_Control_FS+0x170>)
 80082c6:	681b      	ldr	r3, [r3, #0]
 80082c8:	683a      	ldr	r2, [r7, #0]
 80082ca:	3202      	adds	r2, #2
 80082cc:	7812      	ldrb	r2, [r2, #0]
 80082ce:	0412      	lsls	r2, r2, #16
 80082d0:	4313      	orrs	r3, r2
 80082d2:	4a25      	ldr	r2, [pc, #148]	; (8008368 <CDC_Control_FS+0x170>)
 80082d4:	6013      	str	r3, [r2, #0]
      LineCoding.bitrate |= (uint32_t)(pbuf[3]<<24);
 80082d6:	4b24      	ldr	r3, [pc, #144]	; (8008368 <CDC_Control_FS+0x170>)
 80082d8:	681b      	ldr	r3, [r3, #0]
 80082da:	683a      	ldr	r2, [r7, #0]
 80082dc:	3203      	adds	r2, #3
 80082de:	7812      	ldrb	r2, [r2, #0]
 80082e0:	0612      	lsls	r2, r2, #24
 80082e2:	4313      	orrs	r3, r2
 80082e4:	4a20      	ldr	r2, [pc, #128]	; (8008368 <CDC_Control_FS+0x170>)
 80082e6:	6013      	str	r3, [r2, #0]
      LineCoding.format   = pbuf[4];
 80082e8:	683b      	ldr	r3, [r7, #0]
 80082ea:	791a      	ldrb	r2, [r3, #4]
 80082ec:	4b1e      	ldr	r3, [pc, #120]	; (8008368 <CDC_Control_FS+0x170>)
 80082ee:	711a      	strb	r2, [r3, #4]
      LineCoding.paritytype = pbuf[5];
 80082f0:	683b      	ldr	r3, [r7, #0]
 80082f2:	795a      	ldrb	r2, [r3, #5]
 80082f4:	4b1c      	ldr	r3, [pc, #112]	; (8008368 <CDC_Control_FS+0x170>)
 80082f6:	715a      	strb	r2, [r3, #5]
      LineCoding.datatype = pbuf[6];
 80082f8:	683b      	ldr	r3, [r7, #0]
 80082fa:	799a      	ldrb	r2, [r3, #6]
 80082fc:	4b1a      	ldr	r3, [pc, #104]	; (8008368 <CDC_Control_FS+0x170>)
 80082fe:	719a      	strb	r2, [r3, #6]

    break;
 8008300:	e02a      	b.n	8008358 <CDC_Control_FS+0x160>

    case CDC_GET_LINE_CODING:
      pbuf[0] = (uint8_t)(LineCoding.bitrate);
 8008302:	4b19      	ldr	r3, [pc, #100]	; (8008368 <CDC_Control_FS+0x170>)
 8008304:	681b      	ldr	r3, [r3, #0]
 8008306:	b2da      	uxtb	r2, r3
 8008308:	683b      	ldr	r3, [r7, #0]
 800830a:	701a      	strb	r2, [r3, #0]
      pbuf[1] = (uint8_t)(LineCoding.bitrate>>8);
 800830c:	4b16      	ldr	r3, [pc, #88]	; (8008368 <CDC_Control_FS+0x170>)
 800830e:	681b      	ldr	r3, [r3, #0]
 8008310:	0a1a      	lsrs	r2, r3, #8
 8008312:	683b      	ldr	r3, [r7, #0]
 8008314:	3301      	adds	r3, #1
 8008316:	b2d2      	uxtb	r2, r2
 8008318:	701a      	strb	r2, [r3, #0]
      pbuf[2] = (uint8_t)(LineCoding.bitrate>>16);
 800831a:	4b13      	ldr	r3, [pc, #76]	; (8008368 <CDC_Control_FS+0x170>)
 800831c:	681b      	ldr	r3, [r3, #0]
 800831e:	0c1a      	lsrs	r2, r3, #16
 8008320:	683b      	ldr	r3, [r7, #0]
 8008322:	3302      	adds	r3, #2
 8008324:	b2d2      	uxtb	r2, r2
 8008326:	701a      	strb	r2, [r3, #0]
      pbuf[3] = (uint8_t)(LineCoding.bitrate>>24);
 8008328:	4b0f      	ldr	r3, [pc, #60]	; (8008368 <CDC_Control_FS+0x170>)
 800832a:	681b      	ldr	r3, [r3, #0]
 800832c:	0e1a      	lsrs	r2, r3, #24
 800832e:	683b      	ldr	r3, [r7, #0]
 8008330:	3303      	adds	r3, #3
 8008332:	b2d2      	uxtb	r2, r2
 8008334:	701a      	strb	r2, [r3, #0]
      pbuf[4] = LineCoding.format;
 8008336:	683b      	ldr	r3, [r7, #0]
 8008338:	3304      	adds	r3, #4
 800833a:	4a0b      	ldr	r2, [pc, #44]	; (8008368 <CDC_Control_FS+0x170>)
 800833c:	7912      	ldrb	r2, [r2, #4]
 800833e:	701a      	strb	r2, [r3, #0]
      pbuf[5] = LineCoding.paritytype;
 8008340:	683b      	ldr	r3, [r7, #0]
 8008342:	3305      	adds	r3, #5
 8008344:	4a08      	ldr	r2, [pc, #32]	; (8008368 <CDC_Control_FS+0x170>)
 8008346:	7952      	ldrb	r2, [r2, #5]
 8008348:	701a      	strb	r2, [r3, #0]
      pbuf[6] = LineCoding.datatype;
 800834a:	683b      	ldr	r3, [r7, #0]
 800834c:	3306      	adds	r3, #6
 800834e:	4a06      	ldr	r2, [pc, #24]	; (8008368 <CDC_Control_FS+0x170>)
 8008350:	7992      	ldrb	r2, [r2, #6]
 8008352:	701a      	strb	r2, [r3, #0]
    break;
 8008354:	e000      	b.n	8008358 <CDC_Control_FS+0x160>
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8008356:	bf00      	nop
  }

  return (USBD_OK);
 8008358:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800835a:	4618      	mov	r0, r3
 800835c:	370c      	adds	r7, #12
 800835e:	46bd      	mov	sp, r7
 8008360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008364:	4770      	bx	lr
 8008366:	bf00      	nop
 8008368:	20000134 	.word	0x20000134

0800836c <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800836c:	b590      	push	{r4, r7, lr}
 800836e:	b085      	sub	sp, #20
 8008370:	af00      	add	r7, sp, #0
 8008372:	6078      	str	r0, [r7, #4]
 8008374:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */

  for(int i =0; i<*Len; i++)
 8008376:	2300      	movs	r3, #0
 8008378:	60fb      	str	r3, [r7, #12]
 800837a:	e009      	b.n	8008390 <CDC_Receive_FS+0x24>
  {
    cdcDataIn(Buf[i]);
 800837c:	68fb      	ldr	r3, [r7, #12]
 800837e:	687a      	ldr	r2, [r7, #4]
 8008380:	4413      	add	r3, r2
 8008382:	781b      	ldrb	r3, [r3, #0]
 8008384:	4618      	mov	r0, r3
 8008386:	f7ff fea5 	bl	80080d4 <cdcDataIn>
  for(int i =0; i<*Len; i++)
 800838a:	68fb      	ldr	r3, [r7, #12]
 800838c:	3301      	adds	r3, #1
 800838e:	60fb      	str	r3, [r7, #12]
 8008390:	683b      	ldr	r3, [r7, #0]
 8008392:	681a      	ldr	r2, [r3, #0]
 8008394:	68fb      	ldr	r3, [r7, #12]
 8008396:	429a      	cmp	r2, r3
 8008398:	d8f0      	bhi.n	800837c <CDC_Receive_FS+0x10>
  }

  uint32_t buf_len;

  // 수신 버퍼에서 비어있는 데이터 양
  buf_len = (rx_len - cdcAvailable()) - 1;
 800839a:	4b0d      	ldr	r3, [pc, #52]	; (80083d0 <CDC_Receive_FS+0x64>)
 800839c:	681c      	ldr	r4, [r3, #0]
 800839e:	f7ff fe7b 	bl	8008098 <cdcAvailable>
 80083a2:	4603      	mov	r3, r0
 80083a4:	1ae3      	subs	r3, r4, r3
 80083a6:	3b01      	subs	r3, #1
 80083a8:	60bb      	str	r3, [r7, #8]

  if(buf_len >= USB_FS_MAX_PACKET_SIZE)
 80083aa:	68bb      	ldr	r3, [r7, #8]
 80083ac:	2b3f      	cmp	r3, #63	; 0x3f
 80083ae:	d907      	bls.n	80083c0 <CDC_Receive_FS+0x54>
  {
    // 다음 데이터도 보내줘
    USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 80083b0:	6879      	ldr	r1, [r7, #4]
 80083b2:	4808      	ldr	r0, [pc, #32]	; (80083d4 <CDC_Receive_FS+0x68>)
 80083b4:	f7fe fccc 	bl	8006d50 <USBD_CDC_SetRxBuffer>
    USBD_CDC_ReceivePacket(&hUsbDeviceFS);          // alarm to PC whether data is vacant
 80083b8:	4806      	ldr	r0, [pc, #24]	; (80083d4 <CDC_Receive_FS+0x68>)
 80083ba:	f7fe fd0d 	bl	8006dd8 <USBD_CDC_ReceivePacket>
 80083be:	e002      	b.n	80083c6 <CDC_Receive_FS+0x5a>
  }
  else
  {
    // 버퍼가 용량 부족
    // USBD_CDC_ReceivePacket(&hUsbDeviceFS); 을 안보내면 PC는 기다림
    rx_full = true;
 80083c0:	4b05      	ldr	r3, [pc, #20]	; (80083d8 <CDC_Receive_FS+0x6c>)
 80083c2:	2201      	movs	r2, #1
 80083c4:	701a      	strb	r2, [r3, #0]
  }



  return (USBD_OK);
 80083c6:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 80083c8:	4618      	mov	r0, r3
 80083ca:	3714      	adds	r7, #20
 80083cc:	46bd      	mov	sp, r7
 80083ce:	bd90      	pop	{r4, r7, pc}
 80083d0:	2000013c 	.word	0x2000013c
 80083d4:	2000042c 	.word	0x2000042c
 80083d8:	2000037c 	.word	0x2000037c

080083dc <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 80083dc:	b580      	push	{r7, lr}
 80083de:	b084      	sub	sp, #16
 80083e0:	af00      	add	r7, sp, #0
 80083e2:	6078      	str	r0, [r7, #4]
 80083e4:	460b      	mov	r3, r1
 80083e6:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 80083e8:	2300      	movs	r3, #0
 80083ea:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 80083ec:	4b0d      	ldr	r3, [pc, #52]	; (8008424 <CDC_Transmit_FS+0x48>)
 80083ee:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80083f2:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 80083f4:	68bb      	ldr	r3, [r7, #8]
 80083f6:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80083fa:	2b00      	cmp	r3, #0
 80083fc:	d001      	beq.n	8008402 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 80083fe:	2301      	movs	r3, #1
 8008400:	e00b      	b.n	800841a <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8008402:	887b      	ldrh	r3, [r7, #2]
 8008404:	461a      	mov	r2, r3
 8008406:	6879      	ldr	r1, [r7, #4]
 8008408:	4806      	ldr	r0, [pc, #24]	; (8008424 <CDC_Transmit_FS+0x48>)
 800840a:	f7fe fc88 	bl	8006d1e <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800840e:	4805      	ldr	r0, [pc, #20]	; (8008424 <CDC_Transmit_FS+0x48>)
 8008410:	f7fe fcb2 	bl	8006d78 <USBD_CDC_TransmitPacket>
 8008414:	4603      	mov	r3, r0
 8008416:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8008418:	7bfb      	ldrb	r3, [r7, #15]
}
 800841a:	4618      	mov	r0, r3
 800841c:	3710      	adds	r7, #16
 800841e:	46bd      	mov	sp, r7
 8008420:	bd80      	pop	{r7, pc}
 8008422:	bf00      	nop
 8008424:	2000042c 	.word	0x2000042c

08008428 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8008428:	b480      	push	{r7}
 800842a:	b087      	sub	sp, #28
 800842c:	af00      	add	r7, sp, #0
 800842e:	60f8      	str	r0, [r7, #12]
 8008430:	60b9      	str	r1, [r7, #8]
 8008432:	4613      	mov	r3, r2
 8008434:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8008436:	2300      	movs	r3, #0
 8008438:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800843a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800843e:	4618      	mov	r0, r3
 8008440:	371c      	adds	r7, #28
 8008442:	46bd      	mov	sp, r7
 8008444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008448:	4770      	bx	lr
	...

0800844c <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800844c:	b480      	push	{r7}
 800844e:	b083      	sub	sp, #12
 8008450:	af00      	add	r7, sp, #0
 8008452:	4603      	mov	r3, r0
 8008454:	6039      	str	r1, [r7, #0]
 8008456:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8008458:	683b      	ldr	r3, [r7, #0]
 800845a:	2212      	movs	r2, #18
 800845c:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800845e:	4b03      	ldr	r3, [pc, #12]	; (800846c <USBD_FS_DeviceDescriptor+0x20>)
}
 8008460:	4618      	mov	r0, r3
 8008462:	370c      	adds	r7, #12
 8008464:	46bd      	mov	sp, r7
 8008466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800846a:	4770      	bx	lr
 800846c:	20000170 	.word	0x20000170

08008470 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008470:	b480      	push	{r7}
 8008472:	b083      	sub	sp, #12
 8008474:	af00      	add	r7, sp, #0
 8008476:	4603      	mov	r3, r0
 8008478:	6039      	str	r1, [r7, #0]
 800847a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800847c:	683b      	ldr	r3, [r7, #0]
 800847e:	2204      	movs	r2, #4
 8008480:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8008482:	4b03      	ldr	r3, [pc, #12]	; (8008490 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8008484:	4618      	mov	r0, r3
 8008486:	370c      	adds	r7, #12
 8008488:	46bd      	mov	sp, r7
 800848a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800848e:	4770      	bx	lr
 8008490:	20000184 	.word	0x20000184

08008494 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008494:	b580      	push	{r7, lr}
 8008496:	b082      	sub	sp, #8
 8008498:	af00      	add	r7, sp, #0
 800849a:	4603      	mov	r3, r0
 800849c:	6039      	str	r1, [r7, #0]
 800849e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80084a0:	79fb      	ldrb	r3, [r7, #7]
 80084a2:	2b00      	cmp	r3, #0
 80084a4:	d105      	bne.n	80084b2 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80084a6:	683a      	ldr	r2, [r7, #0]
 80084a8:	4907      	ldr	r1, [pc, #28]	; (80084c8 <USBD_FS_ProductStrDescriptor+0x34>)
 80084aa:	4808      	ldr	r0, [pc, #32]	; (80084cc <USBD_FS_ProductStrDescriptor+0x38>)
 80084ac:	f7ff fce3 	bl	8007e76 <USBD_GetString>
 80084b0:	e004      	b.n	80084bc <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80084b2:	683a      	ldr	r2, [r7, #0]
 80084b4:	4904      	ldr	r1, [pc, #16]	; (80084c8 <USBD_FS_ProductStrDescriptor+0x34>)
 80084b6:	4805      	ldr	r0, [pc, #20]	; (80084cc <USBD_FS_ProductStrDescriptor+0x38>)
 80084b8:	f7ff fcdd 	bl	8007e76 <USBD_GetString>
  }
  return USBD_StrDesc;
 80084bc:	4b02      	ldr	r3, [pc, #8]	; (80084c8 <USBD_FS_ProductStrDescriptor+0x34>)
}
 80084be:	4618      	mov	r0, r3
 80084c0:	3708      	adds	r7, #8
 80084c2:	46bd      	mov	sp, r7
 80084c4:	bd80      	pop	{r7, pc}
 80084c6:	bf00      	nop
 80084c8:	20000cfc 	.word	0x20000cfc
 80084cc:	08009af0 	.word	0x08009af0

080084d0 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80084d0:	b580      	push	{r7, lr}
 80084d2:	b082      	sub	sp, #8
 80084d4:	af00      	add	r7, sp, #0
 80084d6:	4603      	mov	r3, r0
 80084d8:	6039      	str	r1, [r7, #0]
 80084da:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80084dc:	683a      	ldr	r2, [r7, #0]
 80084de:	4904      	ldr	r1, [pc, #16]	; (80084f0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 80084e0:	4804      	ldr	r0, [pc, #16]	; (80084f4 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 80084e2:	f7ff fcc8 	bl	8007e76 <USBD_GetString>
  return USBD_StrDesc;
 80084e6:	4b02      	ldr	r3, [pc, #8]	; (80084f0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 80084e8:	4618      	mov	r0, r3
 80084ea:	3708      	adds	r7, #8
 80084ec:	46bd      	mov	sp, r7
 80084ee:	bd80      	pop	{r7, pc}
 80084f0:	20000cfc 	.word	0x20000cfc
 80084f4:	08009b08 	.word	0x08009b08

080084f8 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80084f8:	b580      	push	{r7, lr}
 80084fa:	b082      	sub	sp, #8
 80084fc:	af00      	add	r7, sp, #0
 80084fe:	4603      	mov	r3, r0
 8008500:	6039      	str	r1, [r7, #0]
 8008502:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8008504:	683b      	ldr	r3, [r7, #0]
 8008506:	221a      	movs	r2, #26
 8008508:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800850a:	f000 f843 	bl	8008594 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800850e:	4b02      	ldr	r3, [pc, #8]	; (8008518 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8008510:	4618      	mov	r0, r3
 8008512:	3708      	adds	r7, #8
 8008514:	46bd      	mov	sp, r7
 8008516:	bd80      	pop	{r7, pc}
 8008518:	20000188 	.word	0x20000188

0800851c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800851c:	b580      	push	{r7, lr}
 800851e:	b082      	sub	sp, #8
 8008520:	af00      	add	r7, sp, #0
 8008522:	4603      	mov	r3, r0
 8008524:	6039      	str	r1, [r7, #0]
 8008526:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8008528:	79fb      	ldrb	r3, [r7, #7]
 800852a:	2b00      	cmp	r3, #0
 800852c:	d105      	bne.n	800853a <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800852e:	683a      	ldr	r2, [r7, #0]
 8008530:	4907      	ldr	r1, [pc, #28]	; (8008550 <USBD_FS_ConfigStrDescriptor+0x34>)
 8008532:	4808      	ldr	r0, [pc, #32]	; (8008554 <USBD_FS_ConfigStrDescriptor+0x38>)
 8008534:	f7ff fc9f 	bl	8007e76 <USBD_GetString>
 8008538:	e004      	b.n	8008544 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800853a:	683a      	ldr	r2, [r7, #0]
 800853c:	4904      	ldr	r1, [pc, #16]	; (8008550 <USBD_FS_ConfigStrDescriptor+0x34>)
 800853e:	4805      	ldr	r0, [pc, #20]	; (8008554 <USBD_FS_ConfigStrDescriptor+0x38>)
 8008540:	f7ff fc99 	bl	8007e76 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008544:	4b02      	ldr	r3, [pc, #8]	; (8008550 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8008546:	4618      	mov	r0, r3
 8008548:	3708      	adds	r7, #8
 800854a:	46bd      	mov	sp, r7
 800854c:	bd80      	pop	{r7, pc}
 800854e:	bf00      	nop
 8008550:	20000cfc 	.word	0x20000cfc
 8008554:	08009b1c 	.word	0x08009b1c

08008558 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008558:	b580      	push	{r7, lr}
 800855a:	b082      	sub	sp, #8
 800855c:	af00      	add	r7, sp, #0
 800855e:	4603      	mov	r3, r0
 8008560:	6039      	str	r1, [r7, #0]
 8008562:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008564:	79fb      	ldrb	r3, [r7, #7]
 8008566:	2b00      	cmp	r3, #0
 8008568:	d105      	bne.n	8008576 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800856a:	683a      	ldr	r2, [r7, #0]
 800856c:	4907      	ldr	r1, [pc, #28]	; (800858c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800856e:	4808      	ldr	r0, [pc, #32]	; (8008590 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008570:	f7ff fc81 	bl	8007e76 <USBD_GetString>
 8008574:	e004      	b.n	8008580 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008576:	683a      	ldr	r2, [r7, #0]
 8008578:	4904      	ldr	r1, [pc, #16]	; (800858c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800857a:	4805      	ldr	r0, [pc, #20]	; (8008590 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800857c:	f7ff fc7b 	bl	8007e76 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008580:	4b02      	ldr	r3, [pc, #8]	; (800858c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8008582:	4618      	mov	r0, r3
 8008584:	3708      	adds	r7, #8
 8008586:	46bd      	mov	sp, r7
 8008588:	bd80      	pop	{r7, pc}
 800858a:	bf00      	nop
 800858c:	20000cfc 	.word	0x20000cfc
 8008590:	08009b28 	.word	0x08009b28

08008594 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8008594:	b580      	push	{r7, lr}
 8008596:	b084      	sub	sp, #16
 8008598:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800859a:	4b0f      	ldr	r3, [pc, #60]	; (80085d8 <Get_SerialNum+0x44>)
 800859c:	681b      	ldr	r3, [r3, #0]
 800859e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80085a0:	4b0e      	ldr	r3, [pc, #56]	; (80085dc <Get_SerialNum+0x48>)
 80085a2:	681b      	ldr	r3, [r3, #0]
 80085a4:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80085a6:	4b0e      	ldr	r3, [pc, #56]	; (80085e0 <Get_SerialNum+0x4c>)
 80085a8:	681b      	ldr	r3, [r3, #0]
 80085aa:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80085ac:	68fa      	ldr	r2, [r7, #12]
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	4413      	add	r3, r2
 80085b2:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80085b4:	68fb      	ldr	r3, [r7, #12]
 80085b6:	2b00      	cmp	r3, #0
 80085b8:	d009      	beq.n	80085ce <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80085ba:	2208      	movs	r2, #8
 80085bc:	4909      	ldr	r1, [pc, #36]	; (80085e4 <Get_SerialNum+0x50>)
 80085be:	68f8      	ldr	r0, [r7, #12]
 80085c0:	f000 f814 	bl	80085ec <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80085c4:	2204      	movs	r2, #4
 80085c6:	4908      	ldr	r1, [pc, #32]	; (80085e8 <Get_SerialNum+0x54>)
 80085c8:	68b8      	ldr	r0, [r7, #8]
 80085ca:	f000 f80f 	bl	80085ec <IntToUnicode>
  }
}
 80085ce:	bf00      	nop
 80085d0:	3710      	adds	r7, #16
 80085d2:	46bd      	mov	sp, r7
 80085d4:	bd80      	pop	{r7, pc}
 80085d6:	bf00      	nop
 80085d8:	1fff7a10 	.word	0x1fff7a10
 80085dc:	1fff7a14 	.word	0x1fff7a14
 80085e0:	1fff7a18 	.word	0x1fff7a18
 80085e4:	2000018a 	.word	0x2000018a
 80085e8:	2000019a 	.word	0x2000019a

080085ec <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80085ec:	b480      	push	{r7}
 80085ee:	b087      	sub	sp, #28
 80085f0:	af00      	add	r7, sp, #0
 80085f2:	60f8      	str	r0, [r7, #12]
 80085f4:	60b9      	str	r1, [r7, #8]
 80085f6:	4613      	mov	r3, r2
 80085f8:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80085fa:	2300      	movs	r3, #0
 80085fc:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80085fe:	2300      	movs	r3, #0
 8008600:	75fb      	strb	r3, [r7, #23]
 8008602:	e027      	b.n	8008654 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8008604:	68fb      	ldr	r3, [r7, #12]
 8008606:	0f1b      	lsrs	r3, r3, #28
 8008608:	2b09      	cmp	r3, #9
 800860a:	d80b      	bhi.n	8008624 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800860c:	68fb      	ldr	r3, [r7, #12]
 800860e:	0f1b      	lsrs	r3, r3, #28
 8008610:	b2da      	uxtb	r2, r3
 8008612:	7dfb      	ldrb	r3, [r7, #23]
 8008614:	005b      	lsls	r3, r3, #1
 8008616:	4619      	mov	r1, r3
 8008618:	68bb      	ldr	r3, [r7, #8]
 800861a:	440b      	add	r3, r1
 800861c:	3230      	adds	r2, #48	; 0x30
 800861e:	b2d2      	uxtb	r2, r2
 8008620:	701a      	strb	r2, [r3, #0]
 8008622:	e00a      	b.n	800863a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8008624:	68fb      	ldr	r3, [r7, #12]
 8008626:	0f1b      	lsrs	r3, r3, #28
 8008628:	b2da      	uxtb	r2, r3
 800862a:	7dfb      	ldrb	r3, [r7, #23]
 800862c:	005b      	lsls	r3, r3, #1
 800862e:	4619      	mov	r1, r3
 8008630:	68bb      	ldr	r3, [r7, #8]
 8008632:	440b      	add	r3, r1
 8008634:	3237      	adds	r2, #55	; 0x37
 8008636:	b2d2      	uxtb	r2, r2
 8008638:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800863a:	68fb      	ldr	r3, [r7, #12]
 800863c:	011b      	lsls	r3, r3, #4
 800863e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8008640:	7dfb      	ldrb	r3, [r7, #23]
 8008642:	005b      	lsls	r3, r3, #1
 8008644:	3301      	adds	r3, #1
 8008646:	68ba      	ldr	r2, [r7, #8]
 8008648:	4413      	add	r3, r2
 800864a:	2200      	movs	r2, #0
 800864c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800864e:	7dfb      	ldrb	r3, [r7, #23]
 8008650:	3301      	adds	r3, #1
 8008652:	75fb      	strb	r3, [r7, #23]
 8008654:	7dfa      	ldrb	r2, [r7, #23]
 8008656:	79fb      	ldrb	r3, [r7, #7]
 8008658:	429a      	cmp	r2, r3
 800865a:	d3d3      	bcc.n	8008604 <IntToUnicode+0x18>
  }
}
 800865c:	bf00      	nop
 800865e:	371c      	adds	r7, #28
 8008660:	46bd      	mov	sp, r7
 8008662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008666:	4770      	bx	lr

08008668 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8008668:	b580      	push	{r7, lr}
 800866a:	b08a      	sub	sp, #40	; 0x28
 800866c:	af00      	add	r7, sp, #0
 800866e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008670:	f107 0314 	add.w	r3, r7, #20
 8008674:	2200      	movs	r2, #0
 8008676:	601a      	str	r2, [r3, #0]
 8008678:	605a      	str	r2, [r3, #4]
 800867a:	609a      	str	r2, [r3, #8]
 800867c:	60da      	str	r2, [r3, #12]
 800867e:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	681b      	ldr	r3, [r3, #0]
 8008684:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008688:	d13a      	bne.n	8008700 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800868a:	2300      	movs	r3, #0
 800868c:	613b      	str	r3, [r7, #16]
 800868e:	4b1e      	ldr	r3, [pc, #120]	; (8008708 <HAL_PCD_MspInit+0xa0>)
 8008690:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008692:	4a1d      	ldr	r2, [pc, #116]	; (8008708 <HAL_PCD_MspInit+0xa0>)
 8008694:	f043 0301 	orr.w	r3, r3, #1
 8008698:	6313      	str	r3, [r2, #48]	; 0x30
 800869a:	4b1b      	ldr	r3, [pc, #108]	; (8008708 <HAL_PCD_MspInit+0xa0>)
 800869c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800869e:	f003 0301 	and.w	r3, r3, #1
 80086a2:	613b      	str	r3, [r7, #16]
 80086a4:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80086a6:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80086aa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80086ac:	2302      	movs	r3, #2
 80086ae:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80086b0:	2300      	movs	r3, #0
 80086b2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80086b4:	2303      	movs	r3, #3
 80086b6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80086b8:	230a      	movs	r3, #10
 80086ba:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80086bc:	f107 0314 	add.w	r3, r7, #20
 80086c0:	4619      	mov	r1, r3
 80086c2:	4812      	ldr	r0, [pc, #72]	; (800870c <HAL_PCD_MspInit+0xa4>)
 80086c4:	f7f9 faae 	bl	8001c24 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80086c8:	4b0f      	ldr	r3, [pc, #60]	; (8008708 <HAL_PCD_MspInit+0xa0>)
 80086ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80086cc:	4a0e      	ldr	r2, [pc, #56]	; (8008708 <HAL_PCD_MspInit+0xa0>)
 80086ce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80086d2:	6353      	str	r3, [r2, #52]	; 0x34
 80086d4:	2300      	movs	r3, #0
 80086d6:	60fb      	str	r3, [r7, #12]
 80086d8:	4b0b      	ldr	r3, [pc, #44]	; (8008708 <HAL_PCD_MspInit+0xa0>)
 80086da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80086dc:	4a0a      	ldr	r2, [pc, #40]	; (8008708 <HAL_PCD_MspInit+0xa0>)
 80086de:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80086e2:	6453      	str	r3, [r2, #68]	; 0x44
 80086e4:	4b08      	ldr	r3, [pc, #32]	; (8008708 <HAL_PCD_MspInit+0xa0>)
 80086e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80086e8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80086ec:	60fb      	str	r3, [r7, #12]
 80086ee:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 80086f0:	2200      	movs	r2, #0
 80086f2:	2100      	movs	r1, #0
 80086f4:	2043      	movs	r0, #67	; 0x43
 80086f6:	f7f8 fe62 	bl	80013be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80086fa:	2043      	movs	r0, #67	; 0x43
 80086fc:	f7f8 fe7b 	bl	80013f6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8008700:	bf00      	nop
 8008702:	3728      	adds	r7, #40	; 0x28
 8008704:	46bd      	mov	sp, r7
 8008706:	bd80      	pop	{r7, pc}
 8008708:	40023800 	.word	0x40023800
 800870c:	40020000 	.word	0x40020000

08008710 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008710:	b580      	push	{r7, lr}
 8008712:	b082      	sub	sp, #8
 8008714:	af00      	add	r7, sp, #0
 8008716:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8008724:	4619      	mov	r1, r3
 8008726:	4610      	mov	r0, r2
 8008728:	f7fe fc22 	bl	8006f70 <USBD_LL_SetupStage>
}
 800872c:	bf00      	nop
 800872e:	3708      	adds	r7, #8
 8008730:	46bd      	mov	sp, r7
 8008732:	bd80      	pop	{r7, pc}

08008734 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008734:	b580      	push	{r7, lr}
 8008736:	b082      	sub	sp, #8
 8008738:	af00      	add	r7, sp, #0
 800873a:	6078      	str	r0, [r7, #4]
 800873c:	460b      	mov	r3, r1
 800873e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8008746:	78fa      	ldrb	r2, [r7, #3]
 8008748:	6879      	ldr	r1, [r7, #4]
 800874a:	4613      	mov	r3, r2
 800874c:	00db      	lsls	r3, r3, #3
 800874e:	1a9b      	subs	r3, r3, r2
 8008750:	009b      	lsls	r3, r3, #2
 8008752:	440b      	add	r3, r1
 8008754:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8008758:	681a      	ldr	r2, [r3, #0]
 800875a:	78fb      	ldrb	r3, [r7, #3]
 800875c:	4619      	mov	r1, r3
 800875e:	f7fe fc5a 	bl	8007016 <USBD_LL_DataOutStage>
}
 8008762:	bf00      	nop
 8008764:	3708      	adds	r7, #8
 8008766:	46bd      	mov	sp, r7
 8008768:	bd80      	pop	{r7, pc}

0800876a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800876a:	b580      	push	{r7, lr}
 800876c:	b082      	sub	sp, #8
 800876e:	af00      	add	r7, sp, #0
 8008770:	6078      	str	r0, [r7, #4]
 8008772:	460b      	mov	r3, r1
 8008774:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 800877c:	78fa      	ldrb	r2, [r7, #3]
 800877e:	6879      	ldr	r1, [r7, #4]
 8008780:	4613      	mov	r3, r2
 8008782:	00db      	lsls	r3, r3, #3
 8008784:	1a9b      	subs	r3, r3, r2
 8008786:	009b      	lsls	r3, r3, #2
 8008788:	440b      	add	r3, r1
 800878a:	3348      	adds	r3, #72	; 0x48
 800878c:	681a      	ldr	r2, [r3, #0]
 800878e:	78fb      	ldrb	r3, [r7, #3]
 8008790:	4619      	mov	r1, r3
 8008792:	f7fe fca3 	bl	80070dc <USBD_LL_DataInStage>
}
 8008796:	bf00      	nop
 8008798:	3708      	adds	r7, #8
 800879a:	46bd      	mov	sp, r7
 800879c:	bd80      	pop	{r7, pc}

0800879e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800879e:	b580      	push	{r7, lr}
 80087a0:	b082      	sub	sp, #8
 80087a2:	af00      	add	r7, sp, #0
 80087a4:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80087ac:	4618      	mov	r0, r3
 80087ae:	f7fe fda7 	bl	8007300 <USBD_LL_SOF>
}
 80087b2:	bf00      	nop
 80087b4:	3708      	adds	r7, #8
 80087b6:	46bd      	mov	sp, r7
 80087b8:	bd80      	pop	{r7, pc}

080087ba <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80087ba:	b580      	push	{r7, lr}
 80087bc:	b084      	sub	sp, #16
 80087be:	af00      	add	r7, sp, #0
 80087c0:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80087c2:	2301      	movs	r3, #1
 80087c4:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	68db      	ldr	r3, [r3, #12]
 80087ca:	2b00      	cmp	r3, #0
 80087cc:	d102      	bne.n	80087d4 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 80087ce:	2300      	movs	r3, #0
 80087d0:	73fb      	strb	r3, [r7, #15]
 80087d2:	e008      	b.n	80087e6 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	68db      	ldr	r3, [r3, #12]
 80087d8:	2b02      	cmp	r3, #2
 80087da:	d102      	bne.n	80087e2 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 80087dc:	2301      	movs	r3, #1
 80087de:	73fb      	strb	r3, [r7, #15]
 80087e0:	e001      	b.n	80087e6 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 80087e2:	f7f7 ffb5 	bl	8000750 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80087ec:	7bfa      	ldrb	r2, [r7, #15]
 80087ee:	4611      	mov	r1, r2
 80087f0:	4618      	mov	r0, r3
 80087f2:	f7fe fd4a 	bl	800728a <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80087fc:	4618      	mov	r0, r3
 80087fe:	f7fe fd03 	bl	8007208 <USBD_LL_Reset>
}
 8008802:	bf00      	nop
 8008804:	3710      	adds	r7, #16
 8008806:	46bd      	mov	sp, r7
 8008808:	bd80      	pop	{r7, pc}
	...

0800880c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800880c:	b580      	push	{r7, lr}
 800880e:	b082      	sub	sp, #8
 8008810:	af00      	add	r7, sp, #0
 8008812:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800881a:	4618      	mov	r0, r3
 800881c:	f7fe fd45 	bl	80072aa <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	681b      	ldr	r3, [r3, #0]
 8008824:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008828:	681b      	ldr	r3, [r3, #0]
 800882a:	687a      	ldr	r2, [r7, #4]
 800882c:	6812      	ldr	r2, [r2, #0]
 800882e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8008832:	f043 0301 	orr.w	r3, r3, #1
 8008836:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	6a1b      	ldr	r3, [r3, #32]
 800883c:	2b00      	cmp	r3, #0
 800883e:	d005      	beq.n	800884c <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8008840:	4b04      	ldr	r3, [pc, #16]	; (8008854 <HAL_PCD_SuspendCallback+0x48>)
 8008842:	691b      	ldr	r3, [r3, #16]
 8008844:	4a03      	ldr	r2, [pc, #12]	; (8008854 <HAL_PCD_SuspendCallback+0x48>)
 8008846:	f043 0306 	orr.w	r3, r3, #6
 800884a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800884c:	bf00      	nop
 800884e:	3708      	adds	r7, #8
 8008850:	46bd      	mov	sp, r7
 8008852:	bd80      	pop	{r7, pc}
 8008854:	e000ed00 	.word	0xe000ed00

08008858 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008858:	b580      	push	{r7, lr}
 800885a:	b082      	sub	sp, #8
 800885c:	af00      	add	r7, sp, #0
 800885e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8008866:	4618      	mov	r0, r3
 8008868:	f7fe fd34 	bl	80072d4 <USBD_LL_Resume>
}
 800886c:	bf00      	nop
 800886e:	3708      	adds	r7, #8
 8008870:	46bd      	mov	sp, r7
 8008872:	bd80      	pop	{r7, pc}

08008874 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008874:	b580      	push	{r7, lr}
 8008876:	b082      	sub	sp, #8
 8008878:	af00      	add	r7, sp, #0
 800887a:	6078      	str	r0, [r7, #4]
 800887c:	460b      	mov	r3, r1
 800887e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8008886:	78fa      	ldrb	r2, [r7, #3]
 8008888:	4611      	mov	r1, r2
 800888a:	4618      	mov	r0, r3
 800888c:	f7fe fd5f 	bl	800734e <USBD_LL_IsoOUTIncomplete>
}
 8008890:	bf00      	nop
 8008892:	3708      	adds	r7, #8
 8008894:	46bd      	mov	sp, r7
 8008896:	bd80      	pop	{r7, pc}

08008898 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008898:	b580      	push	{r7, lr}
 800889a:	b082      	sub	sp, #8
 800889c:	af00      	add	r7, sp, #0
 800889e:	6078      	str	r0, [r7, #4]
 80088a0:	460b      	mov	r3, r1
 80088a2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80088aa:	78fa      	ldrb	r2, [r7, #3]
 80088ac:	4611      	mov	r1, r2
 80088ae:	4618      	mov	r0, r3
 80088b0:	f7fe fd40 	bl	8007334 <USBD_LL_IsoINIncomplete>
}
 80088b4:	bf00      	nop
 80088b6:	3708      	adds	r7, #8
 80088b8:	46bd      	mov	sp, r7
 80088ba:	bd80      	pop	{r7, pc}

080088bc <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80088bc:	b580      	push	{r7, lr}
 80088be:	b082      	sub	sp, #8
 80088c0:	af00      	add	r7, sp, #0
 80088c2:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80088ca:	4618      	mov	r0, r3
 80088cc:	f7fe fd4c 	bl	8007368 <USBD_LL_DevConnected>
}
 80088d0:	bf00      	nop
 80088d2:	3708      	adds	r7, #8
 80088d4:	46bd      	mov	sp, r7
 80088d6:	bd80      	pop	{r7, pc}

080088d8 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80088d8:	b580      	push	{r7, lr}
 80088da:	b082      	sub	sp, #8
 80088dc:	af00      	add	r7, sp, #0
 80088de:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80088e6:	4618      	mov	r0, r3
 80088e8:	f7fe fd49 	bl	800737e <USBD_LL_DevDisconnected>
}
 80088ec:	bf00      	nop
 80088ee:	3708      	adds	r7, #8
 80088f0:	46bd      	mov	sp, r7
 80088f2:	bd80      	pop	{r7, pc}

080088f4 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80088f4:	b580      	push	{r7, lr}
 80088f6:	b082      	sub	sp, #8
 80088f8:	af00      	add	r7, sp, #0
 80088fa:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	781b      	ldrb	r3, [r3, #0]
 8008900:	2b00      	cmp	r3, #0
 8008902:	d13c      	bne.n	800897e <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8008904:	4a20      	ldr	r2, [pc, #128]	; (8008988 <USBD_LL_Init+0x94>)
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	4a1e      	ldr	r2, [pc, #120]	; (8008988 <USBD_LL_Init+0x94>)
 8008910:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8008914:	4b1c      	ldr	r3, [pc, #112]	; (8008988 <USBD_LL_Init+0x94>)
 8008916:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800891a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800891c:	4b1a      	ldr	r3, [pc, #104]	; (8008988 <USBD_LL_Init+0x94>)
 800891e:	2204      	movs	r2, #4
 8008920:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8008922:	4b19      	ldr	r3, [pc, #100]	; (8008988 <USBD_LL_Init+0x94>)
 8008924:	2202      	movs	r2, #2
 8008926:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8008928:	4b17      	ldr	r3, [pc, #92]	; (8008988 <USBD_LL_Init+0x94>)
 800892a:	2200      	movs	r2, #0
 800892c:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800892e:	4b16      	ldr	r3, [pc, #88]	; (8008988 <USBD_LL_Init+0x94>)
 8008930:	2202      	movs	r2, #2
 8008932:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8008934:	4b14      	ldr	r3, [pc, #80]	; (8008988 <USBD_LL_Init+0x94>)
 8008936:	2200      	movs	r2, #0
 8008938:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800893a:	4b13      	ldr	r3, [pc, #76]	; (8008988 <USBD_LL_Init+0x94>)
 800893c:	2200      	movs	r2, #0
 800893e:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8008940:	4b11      	ldr	r3, [pc, #68]	; (8008988 <USBD_LL_Init+0x94>)
 8008942:	2200      	movs	r2, #0
 8008944:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8008946:	4b10      	ldr	r3, [pc, #64]	; (8008988 <USBD_LL_Init+0x94>)
 8008948:	2200      	movs	r2, #0
 800894a:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800894c:	4b0e      	ldr	r3, [pc, #56]	; (8008988 <USBD_LL_Init+0x94>)
 800894e:	2200      	movs	r2, #0
 8008950:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8008952:	480d      	ldr	r0, [pc, #52]	; (8008988 <USBD_LL_Init+0x94>)
 8008954:	f7f9 fc2e 	bl	80021b4 <HAL_PCD_Init>
 8008958:	4603      	mov	r3, r0
 800895a:	2b00      	cmp	r3, #0
 800895c:	d001      	beq.n	8008962 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800895e:	f7f7 fef7 	bl	8000750 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8008962:	2180      	movs	r1, #128	; 0x80
 8008964:	4808      	ldr	r0, [pc, #32]	; (8008988 <USBD_LL_Init+0x94>)
 8008966:	f7fa fd8c 	bl	8003482 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800896a:	2240      	movs	r2, #64	; 0x40
 800896c:	2100      	movs	r1, #0
 800896e:	4806      	ldr	r0, [pc, #24]	; (8008988 <USBD_LL_Init+0x94>)
 8008970:	f7fa fd40 	bl	80033f4 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8008974:	2280      	movs	r2, #128	; 0x80
 8008976:	2101      	movs	r1, #1
 8008978:	4803      	ldr	r0, [pc, #12]	; (8008988 <USBD_LL_Init+0x94>)
 800897a:	f7fa fd3b 	bl	80033f4 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800897e:	2300      	movs	r3, #0
}
 8008980:	4618      	mov	r0, r3
 8008982:	3708      	adds	r7, #8
 8008984:	46bd      	mov	sp, r7
 8008986:	bd80      	pop	{r7, pc}
 8008988:	20000efc 	.word	0x20000efc

0800898c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800898c:	b580      	push	{r7, lr}
 800898e:	b084      	sub	sp, #16
 8008990:	af00      	add	r7, sp, #0
 8008992:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008994:	2300      	movs	r3, #0
 8008996:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008998:	2300      	movs	r3, #0
 800899a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80089a2:	4618      	mov	r0, r3
 80089a4:	f7f9 fd23 	bl	80023ee <HAL_PCD_Start>
 80089a8:	4603      	mov	r3, r0
 80089aa:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80089ac:	7bfb      	ldrb	r3, [r7, #15]
 80089ae:	4618      	mov	r0, r3
 80089b0:	f000 f92a 	bl	8008c08 <USBD_Get_USB_Status>
 80089b4:	4603      	mov	r3, r0
 80089b6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80089b8:	7bbb      	ldrb	r3, [r7, #14]
}
 80089ba:	4618      	mov	r0, r3
 80089bc:	3710      	adds	r7, #16
 80089be:	46bd      	mov	sp, r7
 80089c0:	bd80      	pop	{r7, pc}

080089c2 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80089c2:	b580      	push	{r7, lr}
 80089c4:	b084      	sub	sp, #16
 80089c6:	af00      	add	r7, sp, #0
 80089c8:	6078      	str	r0, [r7, #4]
 80089ca:	4608      	mov	r0, r1
 80089cc:	4611      	mov	r1, r2
 80089ce:	461a      	mov	r2, r3
 80089d0:	4603      	mov	r3, r0
 80089d2:	70fb      	strb	r3, [r7, #3]
 80089d4:	460b      	mov	r3, r1
 80089d6:	70bb      	strb	r3, [r7, #2]
 80089d8:	4613      	mov	r3, r2
 80089da:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80089dc:	2300      	movs	r3, #0
 80089de:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80089e0:	2300      	movs	r3, #0
 80089e2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80089ea:	78bb      	ldrb	r3, [r7, #2]
 80089ec:	883a      	ldrh	r2, [r7, #0]
 80089ee:	78f9      	ldrb	r1, [r7, #3]
 80089f0:	f7fa f907 	bl	8002c02 <HAL_PCD_EP_Open>
 80089f4:	4603      	mov	r3, r0
 80089f6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80089f8:	7bfb      	ldrb	r3, [r7, #15]
 80089fa:	4618      	mov	r0, r3
 80089fc:	f000 f904 	bl	8008c08 <USBD_Get_USB_Status>
 8008a00:	4603      	mov	r3, r0
 8008a02:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008a04:	7bbb      	ldrb	r3, [r7, #14]
}
 8008a06:	4618      	mov	r0, r3
 8008a08:	3710      	adds	r7, #16
 8008a0a:	46bd      	mov	sp, r7
 8008a0c:	bd80      	pop	{r7, pc}

08008a0e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008a0e:	b580      	push	{r7, lr}
 8008a10:	b084      	sub	sp, #16
 8008a12:	af00      	add	r7, sp, #0
 8008a14:	6078      	str	r0, [r7, #4]
 8008a16:	460b      	mov	r3, r1
 8008a18:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008a1a:	2300      	movs	r3, #0
 8008a1c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008a1e:	2300      	movs	r3, #0
 8008a20:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8008a28:	78fa      	ldrb	r2, [r7, #3]
 8008a2a:	4611      	mov	r1, r2
 8008a2c:	4618      	mov	r0, r3
 8008a2e:	f7fa f950 	bl	8002cd2 <HAL_PCD_EP_Close>
 8008a32:	4603      	mov	r3, r0
 8008a34:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008a36:	7bfb      	ldrb	r3, [r7, #15]
 8008a38:	4618      	mov	r0, r3
 8008a3a:	f000 f8e5 	bl	8008c08 <USBD_Get_USB_Status>
 8008a3e:	4603      	mov	r3, r0
 8008a40:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008a42:	7bbb      	ldrb	r3, [r7, #14]
}
 8008a44:	4618      	mov	r0, r3
 8008a46:	3710      	adds	r7, #16
 8008a48:	46bd      	mov	sp, r7
 8008a4a:	bd80      	pop	{r7, pc}

08008a4c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008a4c:	b580      	push	{r7, lr}
 8008a4e:	b084      	sub	sp, #16
 8008a50:	af00      	add	r7, sp, #0
 8008a52:	6078      	str	r0, [r7, #4]
 8008a54:	460b      	mov	r3, r1
 8008a56:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008a58:	2300      	movs	r3, #0
 8008a5a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008a5c:	2300      	movs	r3, #0
 8008a5e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8008a66:	78fa      	ldrb	r2, [r7, #3]
 8008a68:	4611      	mov	r1, r2
 8008a6a:	4618      	mov	r0, r3
 8008a6c:	f7fa fa28 	bl	8002ec0 <HAL_PCD_EP_SetStall>
 8008a70:	4603      	mov	r3, r0
 8008a72:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008a74:	7bfb      	ldrb	r3, [r7, #15]
 8008a76:	4618      	mov	r0, r3
 8008a78:	f000 f8c6 	bl	8008c08 <USBD_Get_USB_Status>
 8008a7c:	4603      	mov	r3, r0
 8008a7e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008a80:	7bbb      	ldrb	r3, [r7, #14]
}
 8008a82:	4618      	mov	r0, r3
 8008a84:	3710      	adds	r7, #16
 8008a86:	46bd      	mov	sp, r7
 8008a88:	bd80      	pop	{r7, pc}

08008a8a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008a8a:	b580      	push	{r7, lr}
 8008a8c:	b084      	sub	sp, #16
 8008a8e:	af00      	add	r7, sp, #0
 8008a90:	6078      	str	r0, [r7, #4]
 8008a92:	460b      	mov	r3, r1
 8008a94:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008a96:	2300      	movs	r3, #0
 8008a98:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008a9a:	2300      	movs	r3, #0
 8008a9c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8008aa4:	78fa      	ldrb	r2, [r7, #3]
 8008aa6:	4611      	mov	r1, r2
 8008aa8:	4618      	mov	r0, r3
 8008aaa:	f7fa fa6d 	bl	8002f88 <HAL_PCD_EP_ClrStall>
 8008aae:	4603      	mov	r3, r0
 8008ab0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008ab2:	7bfb      	ldrb	r3, [r7, #15]
 8008ab4:	4618      	mov	r0, r3
 8008ab6:	f000 f8a7 	bl	8008c08 <USBD_Get_USB_Status>
 8008aba:	4603      	mov	r3, r0
 8008abc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008abe:	7bbb      	ldrb	r3, [r7, #14]
}
 8008ac0:	4618      	mov	r0, r3
 8008ac2:	3710      	adds	r7, #16
 8008ac4:	46bd      	mov	sp, r7
 8008ac6:	bd80      	pop	{r7, pc}

08008ac8 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008ac8:	b480      	push	{r7}
 8008aca:	b085      	sub	sp, #20
 8008acc:	af00      	add	r7, sp, #0
 8008ace:	6078      	str	r0, [r7, #4]
 8008ad0:	460b      	mov	r3, r1
 8008ad2:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8008ada:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8008adc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008ae0:	2b00      	cmp	r3, #0
 8008ae2:	da0b      	bge.n	8008afc <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8008ae4:	78fb      	ldrb	r3, [r7, #3]
 8008ae6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008aea:	68f9      	ldr	r1, [r7, #12]
 8008aec:	4613      	mov	r3, r2
 8008aee:	00db      	lsls	r3, r3, #3
 8008af0:	1a9b      	subs	r3, r3, r2
 8008af2:	009b      	lsls	r3, r3, #2
 8008af4:	440b      	add	r3, r1
 8008af6:	333e      	adds	r3, #62	; 0x3e
 8008af8:	781b      	ldrb	r3, [r3, #0]
 8008afa:	e00b      	b.n	8008b14 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8008afc:	78fb      	ldrb	r3, [r7, #3]
 8008afe:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008b02:	68f9      	ldr	r1, [r7, #12]
 8008b04:	4613      	mov	r3, r2
 8008b06:	00db      	lsls	r3, r3, #3
 8008b08:	1a9b      	subs	r3, r3, r2
 8008b0a:	009b      	lsls	r3, r3, #2
 8008b0c:	440b      	add	r3, r1
 8008b0e:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8008b12:	781b      	ldrb	r3, [r3, #0]
  }
}
 8008b14:	4618      	mov	r0, r3
 8008b16:	3714      	adds	r7, #20
 8008b18:	46bd      	mov	sp, r7
 8008b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b1e:	4770      	bx	lr

08008b20 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8008b20:	b580      	push	{r7, lr}
 8008b22:	b084      	sub	sp, #16
 8008b24:	af00      	add	r7, sp, #0
 8008b26:	6078      	str	r0, [r7, #4]
 8008b28:	460b      	mov	r3, r1
 8008b2a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008b2c:	2300      	movs	r3, #0
 8008b2e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008b30:	2300      	movs	r3, #0
 8008b32:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8008b3a:	78fa      	ldrb	r2, [r7, #3]
 8008b3c:	4611      	mov	r1, r2
 8008b3e:	4618      	mov	r0, r3
 8008b40:	f7fa f83a 	bl	8002bb8 <HAL_PCD_SetAddress>
 8008b44:	4603      	mov	r3, r0
 8008b46:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008b48:	7bfb      	ldrb	r3, [r7, #15]
 8008b4a:	4618      	mov	r0, r3
 8008b4c:	f000 f85c 	bl	8008c08 <USBD_Get_USB_Status>
 8008b50:	4603      	mov	r3, r0
 8008b52:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008b54:	7bbb      	ldrb	r3, [r7, #14]
}
 8008b56:	4618      	mov	r0, r3
 8008b58:	3710      	adds	r7, #16
 8008b5a:	46bd      	mov	sp, r7
 8008b5c:	bd80      	pop	{r7, pc}

08008b5e <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8008b5e:	b580      	push	{r7, lr}
 8008b60:	b086      	sub	sp, #24
 8008b62:	af00      	add	r7, sp, #0
 8008b64:	60f8      	str	r0, [r7, #12]
 8008b66:	607a      	str	r2, [r7, #4]
 8008b68:	603b      	str	r3, [r7, #0]
 8008b6a:	460b      	mov	r3, r1
 8008b6c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008b6e:	2300      	movs	r3, #0
 8008b70:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008b72:	2300      	movs	r3, #0
 8008b74:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8008b76:	68fb      	ldr	r3, [r7, #12]
 8008b78:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8008b7c:	7af9      	ldrb	r1, [r7, #11]
 8008b7e:	683b      	ldr	r3, [r7, #0]
 8008b80:	687a      	ldr	r2, [r7, #4]
 8008b82:	f7fa f953 	bl	8002e2c <HAL_PCD_EP_Transmit>
 8008b86:	4603      	mov	r3, r0
 8008b88:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008b8a:	7dfb      	ldrb	r3, [r7, #23]
 8008b8c:	4618      	mov	r0, r3
 8008b8e:	f000 f83b 	bl	8008c08 <USBD_Get_USB_Status>
 8008b92:	4603      	mov	r3, r0
 8008b94:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008b96:	7dbb      	ldrb	r3, [r7, #22]
}
 8008b98:	4618      	mov	r0, r3
 8008b9a:	3718      	adds	r7, #24
 8008b9c:	46bd      	mov	sp, r7
 8008b9e:	bd80      	pop	{r7, pc}

08008ba0 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8008ba0:	b580      	push	{r7, lr}
 8008ba2:	b086      	sub	sp, #24
 8008ba4:	af00      	add	r7, sp, #0
 8008ba6:	60f8      	str	r0, [r7, #12]
 8008ba8:	607a      	str	r2, [r7, #4]
 8008baa:	603b      	str	r3, [r7, #0]
 8008bac:	460b      	mov	r3, r1
 8008bae:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008bb0:	2300      	movs	r3, #0
 8008bb2:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008bb4:	2300      	movs	r3, #0
 8008bb6:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8008bb8:	68fb      	ldr	r3, [r7, #12]
 8008bba:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8008bbe:	7af9      	ldrb	r1, [r7, #11]
 8008bc0:	683b      	ldr	r3, [r7, #0]
 8008bc2:	687a      	ldr	r2, [r7, #4]
 8008bc4:	f7fa f8cf 	bl	8002d66 <HAL_PCD_EP_Receive>
 8008bc8:	4603      	mov	r3, r0
 8008bca:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008bcc:	7dfb      	ldrb	r3, [r7, #23]
 8008bce:	4618      	mov	r0, r3
 8008bd0:	f000 f81a 	bl	8008c08 <USBD_Get_USB_Status>
 8008bd4:	4603      	mov	r3, r0
 8008bd6:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008bd8:	7dbb      	ldrb	r3, [r7, #22]
}
 8008bda:	4618      	mov	r0, r3
 8008bdc:	3718      	adds	r7, #24
 8008bde:	46bd      	mov	sp, r7
 8008be0:	bd80      	pop	{r7, pc}

08008be2 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008be2:	b580      	push	{r7, lr}
 8008be4:	b082      	sub	sp, #8
 8008be6:	af00      	add	r7, sp, #0
 8008be8:	6078      	str	r0, [r7, #4]
 8008bea:	460b      	mov	r3, r1
 8008bec:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8008bf4:	78fa      	ldrb	r2, [r7, #3]
 8008bf6:	4611      	mov	r1, r2
 8008bf8:	4618      	mov	r0, r3
 8008bfa:	f7fa f8ff 	bl	8002dfc <HAL_PCD_EP_GetRxCount>
 8008bfe:	4603      	mov	r3, r0
}
 8008c00:	4618      	mov	r0, r3
 8008c02:	3708      	adds	r7, #8
 8008c04:	46bd      	mov	sp, r7
 8008c06:	bd80      	pop	{r7, pc}

08008c08 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8008c08:	b480      	push	{r7}
 8008c0a:	b085      	sub	sp, #20
 8008c0c:	af00      	add	r7, sp, #0
 8008c0e:	4603      	mov	r3, r0
 8008c10:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008c12:	2300      	movs	r3, #0
 8008c14:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8008c16:	79fb      	ldrb	r3, [r7, #7]
 8008c18:	2b03      	cmp	r3, #3
 8008c1a:	d817      	bhi.n	8008c4c <USBD_Get_USB_Status+0x44>
 8008c1c:	a201      	add	r2, pc, #4	; (adr r2, 8008c24 <USBD_Get_USB_Status+0x1c>)
 8008c1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c22:	bf00      	nop
 8008c24:	08008c35 	.word	0x08008c35
 8008c28:	08008c3b 	.word	0x08008c3b
 8008c2c:	08008c41 	.word	0x08008c41
 8008c30:	08008c47 	.word	0x08008c47
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8008c34:	2300      	movs	r3, #0
 8008c36:	73fb      	strb	r3, [r7, #15]
    break;
 8008c38:	e00b      	b.n	8008c52 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8008c3a:	2303      	movs	r3, #3
 8008c3c:	73fb      	strb	r3, [r7, #15]
    break;
 8008c3e:	e008      	b.n	8008c52 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008c40:	2301      	movs	r3, #1
 8008c42:	73fb      	strb	r3, [r7, #15]
    break;
 8008c44:	e005      	b.n	8008c52 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8008c46:	2303      	movs	r3, #3
 8008c48:	73fb      	strb	r3, [r7, #15]
    break;
 8008c4a:	e002      	b.n	8008c52 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8008c4c:	2303      	movs	r3, #3
 8008c4e:	73fb      	strb	r3, [r7, #15]
    break;
 8008c50:	bf00      	nop
  }
  return usb_status;
 8008c52:	7bfb      	ldrb	r3, [r7, #15]
}
 8008c54:	4618      	mov	r0, r3
 8008c56:	3714      	adds	r7, #20
 8008c58:	46bd      	mov	sp, r7
 8008c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c5e:	4770      	bx	lr

08008c60 <main>:


#include "main.h"

int main(void)
{
 8008c60:	b580      	push	{r7, lr}
 8008c62:	af00      	add	r7, sp, #0
  hwInit();
 8008c64:	f7f8 fa0a 	bl	800107c <hwInit>
  apInit();
 8008c68:	f7f7 fc82 	bl	8000570 <apInit>

  apMain();
 8008c6c:	f7f7 fc8e 	bl	800058c <apMain>

  return 0;
 8008c70:	2300      	movs	r3, #0
}
 8008c72:	4618      	mov	r0, r3
 8008c74:	bd80      	pop	{r7, pc}
	...

08008c78 <__errno>:
 8008c78:	4b01      	ldr	r3, [pc, #4]	; (8008c80 <__errno+0x8>)
 8008c7a:	6818      	ldr	r0, [r3, #0]
 8008c7c:	4770      	bx	lr
 8008c7e:	bf00      	nop
 8008c80:	200001a4 	.word	0x200001a4

08008c84 <__libc_init_array>:
 8008c84:	b570      	push	{r4, r5, r6, lr}
 8008c86:	4e0d      	ldr	r6, [pc, #52]	; (8008cbc <__libc_init_array+0x38>)
 8008c88:	4c0d      	ldr	r4, [pc, #52]	; (8008cc0 <__libc_init_array+0x3c>)
 8008c8a:	1ba4      	subs	r4, r4, r6
 8008c8c:	10a4      	asrs	r4, r4, #2
 8008c8e:	2500      	movs	r5, #0
 8008c90:	42a5      	cmp	r5, r4
 8008c92:	d109      	bne.n	8008ca8 <__libc_init_array+0x24>
 8008c94:	4e0b      	ldr	r6, [pc, #44]	; (8008cc4 <__libc_init_array+0x40>)
 8008c96:	4c0c      	ldr	r4, [pc, #48]	; (8008cc8 <__libc_init_array+0x44>)
 8008c98:	f000 ff14 	bl	8009ac4 <_init>
 8008c9c:	1ba4      	subs	r4, r4, r6
 8008c9e:	10a4      	asrs	r4, r4, #2
 8008ca0:	2500      	movs	r5, #0
 8008ca2:	42a5      	cmp	r5, r4
 8008ca4:	d105      	bne.n	8008cb2 <__libc_init_array+0x2e>
 8008ca6:	bd70      	pop	{r4, r5, r6, pc}
 8008ca8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8008cac:	4798      	blx	r3
 8008cae:	3501      	adds	r5, #1
 8008cb0:	e7ee      	b.n	8008c90 <__libc_init_array+0xc>
 8008cb2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8008cb6:	4798      	blx	r3
 8008cb8:	3501      	adds	r5, #1
 8008cba:	e7f2      	b.n	8008ca2 <__libc_init_array+0x1e>
 8008cbc:	08009bf8 	.word	0x08009bf8
 8008cc0:	08009bf8 	.word	0x08009bf8
 8008cc4:	08009bf8 	.word	0x08009bf8
 8008cc8:	08009bfc 	.word	0x08009bfc

08008ccc <malloc>:
 8008ccc:	4b02      	ldr	r3, [pc, #8]	; (8008cd8 <malloc+0xc>)
 8008cce:	4601      	mov	r1, r0
 8008cd0:	6818      	ldr	r0, [r3, #0]
 8008cd2:	f000 b861 	b.w	8008d98 <_malloc_r>
 8008cd6:	bf00      	nop
 8008cd8:	200001a4 	.word	0x200001a4

08008cdc <free>:
 8008cdc:	4b02      	ldr	r3, [pc, #8]	; (8008ce8 <free+0xc>)
 8008cde:	4601      	mov	r1, r0
 8008ce0:	6818      	ldr	r0, [r3, #0]
 8008ce2:	f000 b80b 	b.w	8008cfc <_free_r>
 8008ce6:	bf00      	nop
 8008ce8:	200001a4 	.word	0x200001a4

08008cec <memset>:
 8008cec:	4402      	add	r2, r0
 8008cee:	4603      	mov	r3, r0
 8008cf0:	4293      	cmp	r3, r2
 8008cf2:	d100      	bne.n	8008cf6 <memset+0xa>
 8008cf4:	4770      	bx	lr
 8008cf6:	f803 1b01 	strb.w	r1, [r3], #1
 8008cfa:	e7f9      	b.n	8008cf0 <memset+0x4>

08008cfc <_free_r>:
 8008cfc:	b538      	push	{r3, r4, r5, lr}
 8008cfe:	4605      	mov	r5, r0
 8008d00:	2900      	cmp	r1, #0
 8008d02:	d045      	beq.n	8008d90 <_free_r+0x94>
 8008d04:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008d08:	1f0c      	subs	r4, r1, #4
 8008d0a:	2b00      	cmp	r3, #0
 8008d0c:	bfb8      	it	lt
 8008d0e:	18e4      	addlt	r4, r4, r3
 8008d10:	f000 f98e 	bl	8009030 <__malloc_lock>
 8008d14:	4a1f      	ldr	r2, [pc, #124]	; (8008d94 <_free_r+0x98>)
 8008d16:	6813      	ldr	r3, [r2, #0]
 8008d18:	4610      	mov	r0, r2
 8008d1a:	b933      	cbnz	r3, 8008d2a <_free_r+0x2e>
 8008d1c:	6063      	str	r3, [r4, #4]
 8008d1e:	6014      	str	r4, [r2, #0]
 8008d20:	4628      	mov	r0, r5
 8008d22:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008d26:	f000 b984 	b.w	8009032 <__malloc_unlock>
 8008d2a:	42a3      	cmp	r3, r4
 8008d2c:	d90c      	bls.n	8008d48 <_free_r+0x4c>
 8008d2e:	6821      	ldr	r1, [r4, #0]
 8008d30:	1862      	adds	r2, r4, r1
 8008d32:	4293      	cmp	r3, r2
 8008d34:	bf04      	itt	eq
 8008d36:	681a      	ldreq	r2, [r3, #0]
 8008d38:	685b      	ldreq	r3, [r3, #4]
 8008d3a:	6063      	str	r3, [r4, #4]
 8008d3c:	bf04      	itt	eq
 8008d3e:	1852      	addeq	r2, r2, r1
 8008d40:	6022      	streq	r2, [r4, #0]
 8008d42:	6004      	str	r4, [r0, #0]
 8008d44:	e7ec      	b.n	8008d20 <_free_r+0x24>
 8008d46:	4613      	mov	r3, r2
 8008d48:	685a      	ldr	r2, [r3, #4]
 8008d4a:	b10a      	cbz	r2, 8008d50 <_free_r+0x54>
 8008d4c:	42a2      	cmp	r2, r4
 8008d4e:	d9fa      	bls.n	8008d46 <_free_r+0x4a>
 8008d50:	6819      	ldr	r1, [r3, #0]
 8008d52:	1858      	adds	r0, r3, r1
 8008d54:	42a0      	cmp	r0, r4
 8008d56:	d10b      	bne.n	8008d70 <_free_r+0x74>
 8008d58:	6820      	ldr	r0, [r4, #0]
 8008d5a:	4401      	add	r1, r0
 8008d5c:	1858      	adds	r0, r3, r1
 8008d5e:	4282      	cmp	r2, r0
 8008d60:	6019      	str	r1, [r3, #0]
 8008d62:	d1dd      	bne.n	8008d20 <_free_r+0x24>
 8008d64:	6810      	ldr	r0, [r2, #0]
 8008d66:	6852      	ldr	r2, [r2, #4]
 8008d68:	605a      	str	r2, [r3, #4]
 8008d6a:	4401      	add	r1, r0
 8008d6c:	6019      	str	r1, [r3, #0]
 8008d6e:	e7d7      	b.n	8008d20 <_free_r+0x24>
 8008d70:	d902      	bls.n	8008d78 <_free_r+0x7c>
 8008d72:	230c      	movs	r3, #12
 8008d74:	602b      	str	r3, [r5, #0]
 8008d76:	e7d3      	b.n	8008d20 <_free_r+0x24>
 8008d78:	6820      	ldr	r0, [r4, #0]
 8008d7a:	1821      	adds	r1, r4, r0
 8008d7c:	428a      	cmp	r2, r1
 8008d7e:	bf04      	itt	eq
 8008d80:	6811      	ldreq	r1, [r2, #0]
 8008d82:	6852      	ldreq	r2, [r2, #4]
 8008d84:	6062      	str	r2, [r4, #4]
 8008d86:	bf04      	itt	eq
 8008d88:	1809      	addeq	r1, r1, r0
 8008d8a:	6021      	streq	r1, [r4, #0]
 8008d8c:	605c      	str	r4, [r3, #4]
 8008d8e:	e7c7      	b.n	8008d20 <_free_r+0x24>
 8008d90:	bd38      	pop	{r3, r4, r5, pc}
 8008d92:	bf00      	nop
 8008d94:	20000380 	.word	0x20000380

08008d98 <_malloc_r>:
 8008d98:	b570      	push	{r4, r5, r6, lr}
 8008d9a:	1ccd      	adds	r5, r1, #3
 8008d9c:	f025 0503 	bic.w	r5, r5, #3
 8008da0:	3508      	adds	r5, #8
 8008da2:	2d0c      	cmp	r5, #12
 8008da4:	bf38      	it	cc
 8008da6:	250c      	movcc	r5, #12
 8008da8:	2d00      	cmp	r5, #0
 8008daa:	4606      	mov	r6, r0
 8008dac:	db01      	blt.n	8008db2 <_malloc_r+0x1a>
 8008dae:	42a9      	cmp	r1, r5
 8008db0:	d903      	bls.n	8008dba <_malloc_r+0x22>
 8008db2:	230c      	movs	r3, #12
 8008db4:	6033      	str	r3, [r6, #0]
 8008db6:	2000      	movs	r0, #0
 8008db8:	bd70      	pop	{r4, r5, r6, pc}
 8008dba:	f000 f939 	bl	8009030 <__malloc_lock>
 8008dbe:	4a21      	ldr	r2, [pc, #132]	; (8008e44 <_malloc_r+0xac>)
 8008dc0:	6814      	ldr	r4, [r2, #0]
 8008dc2:	4621      	mov	r1, r4
 8008dc4:	b991      	cbnz	r1, 8008dec <_malloc_r+0x54>
 8008dc6:	4c20      	ldr	r4, [pc, #128]	; (8008e48 <_malloc_r+0xb0>)
 8008dc8:	6823      	ldr	r3, [r4, #0]
 8008dca:	b91b      	cbnz	r3, 8008dd4 <_malloc_r+0x3c>
 8008dcc:	4630      	mov	r0, r6
 8008dce:	f000 f855 	bl	8008e7c <_sbrk_r>
 8008dd2:	6020      	str	r0, [r4, #0]
 8008dd4:	4629      	mov	r1, r5
 8008dd6:	4630      	mov	r0, r6
 8008dd8:	f000 f850 	bl	8008e7c <_sbrk_r>
 8008ddc:	1c43      	adds	r3, r0, #1
 8008dde:	d124      	bne.n	8008e2a <_malloc_r+0x92>
 8008de0:	230c      	movs	r3, #12
 8008de2:	6033      	str	r3, [r6, #0]
 8008de4:	4630      	mov	r0, r6
 8008de6:	f000 f924 	bl	8009032 <__malloc_unlock>
 8008dea:	e7e4      	b.n	8008db6 <_malloc_r+0x1e>
 8008dec:	680b      	ldr	r3, [r1, #0]
 8008dee:	1b5b      	subs	r3, r3, r5
 8008df0:	d418      	bmi.n	8008e24 <_malloc_r+0x8c>
 8008df2:	2b0b      	cmp	r3, #11
 8008df4:	d90f      	bls.n	8008e16 <_malloc_r+0x7e>
 8008df6:	600b      	str	r3, [r1, #0]
 8008df8:	50cd      	str	r5, [r1, r3]
 8008dfa:	18cc      	adds	r4, r1, r3
 8008dfc:	4630      	mov	r0, r6
 8008dfe:	f000 f918 	bl	8009032 <__malloc_unlock>
 8008e02:	f104 000b 	add.w	r0, r4, #11
 8008e06:	1d23      	adds	r3, r4, #4
 8008e08:	f020 0007 	bic.w	r0, r0, #7
 8008e0c:	1ac3      	subs	r3, r0, r3
 8008e0e:	d0d3      	beq.n	8008db8 <_malloc_r+0x20>
 8008e10:	425a      	negs	r2, r3
 8008e12:	50e2      	str	r2, [r4, r3]
 8008e14:	e7d0      	b.n	8008db8 <_malloc_r+0x20>
 8008e16:	428c      	cmp	r4, r1
 8008e18:	684b      	ldr	r3, [r1, #4]
 8008e1a:	bf16      	itet	ne
 8008e1c:	6063      	strne	r3, [r4, #4]
 8008e1e:	6013      	streq	r3, [r2, #0]
 8008e20:	460c      	movne	r4, r1
 8008e22:	e7eb      	b.n	8008dfc <_malloc_r+0x64>
 8008e24:	460c      	mov	r4, r1
 8008e26:	6849      	ldr	r1, [r1, #4]
 8008e28:	e7cc      	b.n	8008dc4 <_malloc_r+0x2c>
 8008e2a:	1cc4      	adds	r4, r0, #3
 8008e2c:	f024 0403 	bic.w	r4, r4, #3
 8008e30:	42a0      	cmp	r0, r4
 8008e32:	d005      	beq.n	8008e40 <_malloc_r+0xa8>
 8008e34:	1a21      	subs	r1, r4, r0
 8008e36:	4630      	mov	r0, r6
 8008e38:	f000 f820 	bl	8008e7c <_sbrk_r>
 8008e3c:	3001      	adds	r0, #1
 8008e3e:	d0cf      	beq.n	8008de0 <_malloc_r+0x48>
 8008e40:	6025      	str	r5, [r4, #0]
 8008e42:	e7db      	b.n	8008dfc <_malloc_r+0x64>
 8008e44:	20000380 	.word	0x20000380
 8008e48:	20000384 	.word	0x20000384

08008e4c <iprintf>:
 8008e4c:	b40f      	push	{r0, r1, r2, r3}
 8008e4e:	4b0a      	ldr	r3, [pc, #40]	; (8008e78 <iprintf+0x2c>)
 8008e50:	b513      	push	{r0, r1, r4, lr}
 8008e52:	681c      	ldr	r4, [r3, #0]
 8008e54:	b124      	cbz	r4, 8008e60 <iprintf+0x14>
 8008e56:	69a3      	ldr	r3, [r4, #24]
 8008e58:	b913      	cbnz	r3, 8008e60 <iprintf+0x14>
 8008e5a:	4620      	mov	r0, r4
 8008e5c:	f000 f85e 	bl	8008f1c <__sinit>
 8008e60:	ab05      	add	r3, sp, #20
 8008e62:	9a04      	ldr	r2, [sp, #16]
 8008e64:	68a1      	ldr	r1, [r4, #8]
 8008e66:	9301      	str	r3, [sp, #4]
 8008e68:	4620      	mov	r0, r4
 8008e6a:	f000 f90d 	bl	8009088 <_vfiprintf_r>
 8008e6e:	b002      	add	sp, #8
 8008e70:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008e74:	b004      	add	sp, #16
 8008e76:	4770      	bx	lr
 8008e78:	200001a4 	.word	0x200001a4

08008e7c <_sbrk_r>:
 8008e7c:	b538      	push	{r3, r4, r5, lr}
 8008e7e:	4c06      	ldr	r4, [pc, #24]	; (8008e98 <_sbrk_r+0x1c>)
 8008e80:	2300      	movs	r3, #0
 8008e82:	4605      	mov	r5, r0
 8008e84:	4608      	mov	r0, r1
 8008e86:	6023      	str	r3, [r4, #0]
 8008e88:	f7f7 fd44 	bl	8000914 <_sbrk>
 8008e8c:	1c43      	adds	r3, r0, #1
 8008e8e:	d102      	bne.n	8008e96 <_sbrk_r+0x1a>
 8008e90:	6823      	ldr	r3, [r4, #0]
 8008e92:	b103      	cbz	r3, 8008e96 <_sbrk_r+0x1a>
 8008e94:	602b      	str	r3, [r5, #0]
 8008e96:	bd38      	pop	{r3, r4, r5, pc}
 8008e98:	20001304 	.word	0x20001304

08008e9c <std>:
 8008e9c:	2300      	movs	r3, #0
 8008e9e:	b510      	push	{r4, lr}
 8008ea0:	4604      	mov	r4, r0
 8008ea2:	e9c0 3300 	strd	r3, r3, [r0]
 8008ea6:	6083      	str	r3, [r0, #8]
 8008ea8:	8181      	strh	r1, [r0, #12]
 8008eaa:	6643      	str	r3, [r0, #100]	; 0x64
 8008eac:	81c2      	strh	r2, [r0, #14]
 8008eae:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008eb2:	6183      	str	r3, [r0, #24]
 8008eb4:	4619      	mov	r1, r3
 8008eb6:	2208      	movs	r2, #8
 8008eb8:	305c      	adds	r0, #92	; 0x5c
 8008eba:	f7ff ff17 	bl	8008cec <memset>
 8008ebe:	4b05      	ldr	r3, [pc, #20]	; (8008ed4 <std+0x38>)
 8008ec0:	6263      	str	r3, [r4, #36]	; 0x24
 8008ec2:	4b05      	ldr	r3, [pc, #20]	; (8008ed8 <std+0x3c>)
 8008ec4:	62a3      	str	r3, [r4, #40]	; 0x28
 8008ec6:	4b05      	ldr	r3, [pc, #20]	; (8008edc <std+0x40>)
 8008ec8:	62e3      	str	r3, [r4, #44]	; 0x2c
 8008eca:	4b05      	ldr	r3, [pc, #20]	; (8008ee0 <std+0x44>)
 8008ecc:	6224      	str	r4, [r4, #32]
 8008ece:	6323      	str	r3, [r4, #48]	; 0x30
 8008ed0:	bd10      	pop	{r4, pc}
 8008ed2:	bf00      	nop
 8008ed4:	080095c5 	.word	0x080095c5
 8008ed8:	080095e7 	.word	0x080095e7
 8008edc:	0800961f 	.word	0x0800961f
 8008ee0:	08009643 	.word	0x08009643

08008ee4 <_cleanup_r>:
 8008ee4:	4901      	ldr	r1, [pc, #4]	; (8008eec <_cleanup_r+0x8>)
 8008ee6:	f000 b885 	b.w	8008ff4 <_fwalk_reent>
 8008eea:	bf00      	nop
 8008eec:	0800991d 	.word	0x0800991d

08008ef0 <__sfmoreglue>:
 8008ef0:	b570      	push	{r4, r5, r6, lr}
 8008ef2:	1e4a      	subs	r2, r1, #1
 8008ef4:	2568      	movs	r5, #104	; 0x68
 8008ef6:	4355      	muls	r5, r2
 8008ef8:	460e      	mov	r6, r1
 8008efa:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8008efe:	f7ff ff4b 	bl	8008d98 <_malloc_r>
 8008f02:	4604      	mov	r4, r0
 8008f04:	b140      	cbz	r0, 8008f18 <__sfmoreglue+0x28>
 8008f06:	2100      	movs	r1, #0
 8008f08:	e9c0 1600 	strd	r1, r6, [r0]
 8008f0c:	300c      	adds	r0, #12
 8008f0e:	60a0      	str	r0, [r4, #8]
 8008f10:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8008f14:	f7ff feea 	bl	8008cec <memset>
 8008f18:	4620      	mov	r0, r4
 8008f1a:	bd70      	pop	{r4, r5, r6, pc}

08008f1c <__sinit>:
 8008f1c:	6983      	ldr	r3, [r0, #24]
 8008f1e:	b510      	push	{r4, lr}
 8008f20:	4604      	mov	r4, r0
 8008f22:	bb33      	cbnz	r3, 8008f72 <__sinit+0x56>
 8008f24:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8008f28:	6503      	str	r3, [r0, #80]	; 0x50
 8008f2a:	4b12      	ldr	r3, [pc, #72]	; (8008f74 <__sinit+0x58>)
 8008f2c:	4a12      	ldr	r2, [pc, #72]	; (8008f78 <__sinit+0x5c>)
 8008f2e:	681b      	ldr	r3, [r3, #0]
 8008f30:	6282      	str	r2, [r0, #40]	; 0x28
 8008f32:	4298      	cmp	r0, r3
 8008f34:	bf04      	itt	eq
 8008f36:	2301      	moveq	r3, #1
 8008f38:	6183      	streq	r3, [r0, #24]
 8008f3a:	f000 f81f 	bl	8008f7c <__sfp>
 8008f3e:	6060      	str	r0, [r4, #4]
 8008f40:	4620      	mov	r0, r4
 8008f42:	f000 f81b 	bl	8008f7c <__sfp>
 8008f46:	60a0      	str	r0, [r4, #8]
 8008f48:	4620      	mov	r0, r4
 8008f4a:	f000 f817 	bl	8008f7c <__sfp>
 8008f4e:	2200      	movs	r2, #0
 8008f50:	60e0      	str	r0, [r4, #12]
 8008f52:	2104      	movs	r1, #4
 8008f54:	6860      	ldr	r0, [r4, #4]
 8008f56:	f7ff ffa1 	bl	8008e9c <std>
 8008f5a:	2201      	movs	r2, #1
 8008f5c:	2109      	movs	r1, #9
 8008f5e:	68a0      	ldr	r0, [r4, #8]
 8008f60:	f7ff ff9c 	bl	8008e9c <std>
 8008f64:	2202      	movs	r2, #2
 8008f66:	2112      	movs	r1, #18
 8008f68:	68e0      	ldr	r0, [r4, #12]
 8008f6a:	f7ff ff97 	bl	8008e9c <std>
 8008f6e:	2301      	movs	r3, #1
 8008f70:	61a3      	str	r3, [r4, #24]
 8008f72:	bd10      	pop	{r4, pc}
 8008f74:	08009b58 	.word	0x08009b58
 8008f78:	08008ee5 	.word	0x08008ee5

08008f7c <__sfp>:
 8008f7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008f7e:	4b1b      	ldr	r3, [pc, #108]	; (8008fec <__sfp+0x70>)
 8008f80:	681e      	ldr	r6, [r3, #0]
 8008f82:	69b3      	ldr	r3, [r6, #24]
 8008f84:	4607      	mov	r7, r0
 8008f86:	b913      	cbnz	r3, 8008f8e <__sfp+0x12>
 8008f88:	4630      	mov	r0, r6
 8008f8a:	f7ff ffc7 	bl	8008f1c <__sinit>
 8008f8e:	3648      	adds	r6, #72	; 0x48
 8008f90:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8008f94:	3b01      	subs	r3, #1
 8008f96:	d503      	bpl.n	8008fa0 <__sfp+0x24>
 8008f98:	6833      	ldr	r3, [r6, #0]
 8008f9a:	b133      	cbz	r3, 8008faa <__sfp+0x2e>
 8008f9c:	6836      	ldr	r6, [r6, #0]
 8008f9e:	e7f7      	b.n	8008f90 <__sfp+0x14>
 8008fa0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8008fa4:	b16d      	cbz	r5, 8008fc2 <__sfp+0x46>
 8008fa6:	3468      	adds	r4, #104	; 0x68
 8008fa8:	e7f4      	b.n	8008f94 <__sfp+0x18>
 8008faa:	2104      	movs	r1, #4
 8008fac:	4638      	mov	r0, r7
 8008fae:	f7ff ff9f 	bl	8008ef0 <__sfmoreglue>
 8008fb2:	6030      	str	r0, [r6, #0]
 8008fb4:	2800      	cmp	r0, #0
 8008fb6:	d1f1      	bne.n	8008f9c <__sfp+0x20>
 8008fb8:	230c      	movs	r3, #12
 8008fba:	603b      	str	r3, [r7, #0]
 8008fbc:	4604      	mov	r4, r0
 8008fbe:	4620      	mov	r0, r4
 8008fc0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008fc2:	4b0b      	ldr	r3, [pc, #44]	; (8008ff0 <__sfp+0x74>)
 8008fc4:	6665      	str	r5, [r4, #100]	; 0x64
 8008fc6:	e9c4 5500 	strd	r5, r5, [r4]
 8008fca:	60a5      	str	r5, [r4, #8]
 8008fcc:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8008fd0:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8008fd4:	2208      	movs	r2, #8
 8008fd6:	4629      	mov	r1, r5
 8008fd8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8008fdc:	f7ff fe86 	bl	8008cec <memset>
 8008fe0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8008fe4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8008fe8:	e7e9      	b.n	8008fbe <__sfp+0x42>
 8008fea:	bf00      	nop
 8008fec:	08009b58 	.word	0x08009b58
 8008ff0:	ffff0001 	.word	0xffff0001

08008ff4 <_fwalk_reent>:
 8008ff4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008ff8:	4680      	mov	r8, r0
 8008ffa:	4689      	mov	r9, r1
 8008ffc:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8009000:	2600      	movs	r6, #0
 8009002:	b914      	cbnz	r4, 800900a <_fwalk_reent+0x16>
 8009004:	4630      	mov	r0, r6
 8009006:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800900a:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 800900e:	3f01      	subs	r7, #1
 8009010:	d501      	bpl.n	8009016 <_fwalk_reent+0x22>
 8009012:	6824      	ldr	r4, [r4, #0]
 8009014:	e7f5      	b.n	8009002 <_fwalk_reent+0xe>
 8009016:	89ab      	ldrh	r3, [r5, #12]
 8009018:	2b01      	cmp	r3, #1
 800901a:	d907      	bls.n	800902c <_fwalk_reent+0x38>
 800901c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009020:	3301      	adds	r3, #1
 8009022:	d003      	beq.n	800902c <_fwalk_reent+0x38>
 8009024:	4629      	mov	r1, r5
 8009026:	4640      	mov	r0, r8
 8009028:	47c8      	blx	r9
 800902a:	4306      	orrs	r6, r0
 800902c:	3568      	adds	r5, #104	; 0x68
 800902e:	e7ee      	b.n	800900e <_fwalk_reent+0x1a>

08009030 <__malloc_lock>:
 8009030:	4770      	bx	lr

08009032 <__malloc_unlock>:
 8009032:	4770      	bx	lr

08009034 <__sfputc_r>:
 8009034:	6893      	ldr	r3, [r2, #8]
 8009036:	3b01      	subs	r3, #1
 8009038:	2b00      	cmp	r3, #0
 800903a:	b410      	push	{r4}
 800903c:	6093      	str	r3, [r2, #8]
 800903e:	da08      	bge.n	8009052 <__sfputc_r+0x1e>
 8009040:	6994      	ldr	r4, [r2, #24]
 8009042:	42a3      	cmp	r3, r4
 8009044:	db01      	blt.n	800904a <__sfputc_r+0x16>
 8009046:	290a      	cmp	r1, #10
 8009048:	d103      	bne.n	8009052 <__sfputc_r+0x1e>
 800904a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800904e:	f000 bafd 	b.w	800964c <__swbuf_r>
 8009052:	6813      	ldr	r3, [r2, #0]
 8009054:	1c58      	adds	r0, r3, #1
 8009056:	6010      	str	r0, [r2, #0]
 8009058:	7019      	strb	r1, [r3, #0]
 800905a:	4608      	mov	r0, r1
 800905c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009060:	4770      	bx	lr

08009062 <__sfputs_r>:
 8009062:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009064:	4606      	mov	r6, r0
 8009066:	460f      	mov	r7, r1
 8009068:	4614      	mov	r4, r2
 800906a:	18d5      	adds	r5, r2, r3
 800906c:	42ac      	cmp	r4, r5
 800906e:	d101      	bne.n	8009074 <__sfputs_r+0x12>
 8009070:	2000      	movs	r0, #0
 8009072:	e007      	b.n	8009084 <__sfputs_r+0x22>
 8009074:	463a      	mov	r2, r7
 8009076:	f814 1b01 	ldrb.w	r1, [r4], #1
 800907a:	4630      	mov	r0, r6
 800907c:	f7ff ffda 	bl	8009034 <__sfputc_r>
 8009080:	1c43      	adds	r3, r0, #1
 8009082:	d1f3      	bne.n	800906c <__sfputs_r+0xa>
 8009084:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08009088 <_vfiprintf_r>:
 8009088:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800908c:	460c      	mov	r4, r1
 800908e:	b09d      	sub	sp, #116	; 0x74
 8009090:	4617      	mov	r7, r2
 8009092:	461d      	mov	r5, r3
 8009094:	4606      	mov	r6, r0
 8009096:	b118      	cbz	r0, 80090a0 <_vfiprintf_r+0x18>
 8009098:	6983      	ldr	r3, [r0, #24]
 800909a:	b90b      	cbnz	r3, 80090a0 <_vfiprintf_r+0x18>
 800909c:	f7ff ff3e 	bl	8008f1c <__sinit>
 80090a0:	4b7c      	ldr	r3, [pc, #496]	; (8009294 <_vfiprintf_r+0x20c>)
 80090a2:	429c      	cmp	r4, r3
 80090a4:	d158      	bne.n	8009158 <_vfiprintf_r+0xd0>
 80090a6:	6874      	ldr	r4, [r6, #4]
 80090a8:	89a3      	ldrh	r3, [r4, #12]
 80090aa:	0718      	lsls	r0, r3, #28
 80090ac:	d55e      	bpl.n	800916c <_vfiprintf_r+0xe4>
 80090ae:	6923      	ldr	r3, [r4, #16]
 80090b0:	2b00      	cmp	r3, #0
 80090b2:	d05b      	beq.n	800916c <_vfiprintf_r+0xe4>
 80090b4:	2300      	movs	r3, #0
 80090b6:	9309      	str	r3, [sp, #36]	; 0x24
 80090b8:	2320      	movs	r3, #32
 80090ba:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80090be:	2330      	movs	r3, #48	; 0x30
 80090c0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80090c4:	9503      	str	r5, [sp, #12]
 80090c6:	f04f 0b01 	mov.w	fp, #1
 80090ca:	46b8      	mov	r8, r7
 80090cc:	4645      	mov	r5, r8
 80090ce:	f815 3b01 	ldrb.w	r3, [r5], #1
 80090d2:	b10b      	cbz	r3, 80090d8 <_vfiprintf_r+0x50>
 80090d4:	2b25      	cmp	r3, #37	; 0x25
 80090d6:	d154      	bne.n	8009182 <_vfiprintf_r+0xfa>
 80090d8:	ebb8 0a07 	subs.w	sl, r8, r7
 80090dc:	d00b      	beq.n	80090f6 <_vfiprintf_r+0x6e>
 80090de:	4653      	mov	r3, sl
 80090e0:	463a      	mov	r2, r7
 80090e2:	4621      	mov	r1, r4
 80090e4:	4630      	mov	r0, r6
 80090e6:	f7ff ffbc 	bl	8009062 <__sfputs_r>
 80090ea:	3001      	adds	r0, #1
 80090ec:	f000 80c2 	beq.w	8009274 <_vfiprintf_r+0x1ec>
 80090f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80090f2:	4453      	add	r3, sl
 80090f4:	9309      	str	r3, [sp, #36]	; 0x24
 80090f6:	f898 3000 	ldrb.w	r3, [r8]
 80090fa:	2b00      	cmp	r3, #0
 80090fc:	f000 80ba 	beq.w	8009274 <_vfiprintf_r+0x1ec>
 8009100:	2300      	movs	r3, #0
 8009102:	f04f 32ff 	mov.w	r2, #4294967295
 8009106:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800910a:	9304      	str	r3, [sp, #16]
 800910c:	9307      	str	r3, [sp, #28]
 800910e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009112:	931a      	str	r3, [sp, #104]	; 0x68
 8009114:	46a8      	mov	r8, r5
 8009116:	2205      	movs	r2, #5
 8009118:	f818 1b01 	ldrb.w	r1, [r8], #1
 800911c:	485e      	ldr	r0, [pc, #376]	; (8009298 <_vfiprintf_r+0x210>)
 800911e:	f7f7 f857 	bl	80001d0 <memchr>
 8009122:	9b04      	ldr	r3, [sp, #16]
 8009124:	bb78      	cbnz	r0, 8009186 <_vfiprintf_r+0xfe>
 8009126:	06d9      	lsls	r1, r3, #27
 8009128:	bf44      	itt	mi
 800912a:	2220      	movmi	r2, #32
 800912c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8009130:	071a      	lsls	r2, r3, #28
 8009132:	bf44      	itt	mi
 8009134:	222b      	movmi	r2, #43	; 0x2b
 8009136:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800913a:	782a      	ldrb	r2, [r5, #0]
 800913c:	2a2a      	cmp	r2, #42	; 0x2a
 800913e:	d02a      	beq.n	8009196 <_vfiprintf_r+0x10e>
 8009140:	9a07      	ldr	r2, [sp, #28]
 8009142:	46a8      	mov	r8, r5
 8009144:	2000      	movs	r0, #0
 8009146:	250a      	movs	r5, #10
 8009148:	4641      	mov	r1, r8
 800914a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800914e:	3b30      	subs	r3, #48	; 0x30
 8009150:	2b09      	cmp	r3, #9
 8009152:	d969      	bls.n	8009228 <_vfiprintf_r+0x1a0>
 8009154:	b360      	cbz	r0, 80091b0 <_vfiprintf_r+0x128>
 8009156:	e024      	b.n	80091a2 <_vfiprintf_r+0x11a>
 8009158:	4b50      	ldr	r3, [pc, #320]	; (800929c <_vfiprintf_r+0x214>)
 800915a:	429c      	cmp	r4, r3
 800915c:	d101      	bne.n	8009162 <_vfiprintf_r+0xda>
 800915e:	68b4      	ldr	r4, [r6, #8]
 8009160:	e7a2      	b.n	80090a8 <_vfiprintf_r+0x20>
 8009162:	4b4f      	ldr	r3, [pc, #316]	; (80092a0 <_vfiprintf_r+0x218>)
 8009164:	429c      	cmp	r4, r3
 8009166:	bf08      	it	eq
 8009168:	68f4      	ldreq	r4, [r6, #12]
 800916a:	e79d      	b.n	80090a8 <_vfiprintf_r+0x20>
 800916c:	4621      	mov	r1, r4
 800916e:	4630      	mov	r0, r6
 8009170:	f000 fad0 	bl	8009714 <__swsetup_r>
 8009174:	2800      	cmp	r0, #0
 8009176:	d09d      	beq.n	80090b4 <_vfiprintf_r+0x2c>
 8009178:	f04f 30ff 	mov.w	r0, #4294967295
 800917c:	b01d      	add	sp, #116	; 0x74
 800917e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009182:	46a8      	mov	r8, r5
 8009184:	e7a2      	b.n	80090cc <_vfiprintf_r+0x44>
 8009186:	4a44      	ldr	r2, [pc, #272]	; (8009298 <_vfiprintf_r+0x210>)
 8009188:	1a80      	subs	r0, r0, r2
 800918a:	fa0b f000 	lsl.w	r0, fp, r0
 800918e:	4318      	orrs	r0, r3
 8009190:	9004      	str	r0, [sp, #16]
 8009192:	4645      	mov	r5, r8
 8009194:	e7be      	b.n	8009114 <_vfiprintf_r+0x8c>
 8009196:	9a03      	ldr	r2, [sp, #12]
 8009198:	1d11      	adds	r1, r2, #4
 800919a:	6812      	ldr	r2, [r2, #0]
 800919c:	9103      	str	r1, [sp, #12]
 800919e:	2a00      	cmp	r2, #0
 80091a0:	db01      	blt.n	80091a6 <_vfiprintf_r+0x11e>
 80091a2:	9207      	str	r2, [sp, #28]
 80091a4:	e004      	b.n	80091b0 <_vfiprintf_r+0x128>
 80091a6:	4252      	negs	r2, r2
 80091a8:	f043 0302 	orr.w	r3, r3, #2
 80091ac:	9207      	str	r2, [sp, #28]
 80091ae:	9304      	str	r3, [sp, #16]
 80091b0:	f898 3000 	ldrb.w	r3, [r8]
 80091b4:	2b2e      	cmp	r3, #46	; 0x2e
 80091b6:	d10e      	bne.n	80091d6 <_vfiprintf_r+0x14e>
 80091b8:	f898 3001 	ldrb.w	r3, [r8, #1]
 80091bc:	2b2a      	cmp	r3, #42	; 0x2a
 80091be:	d138      	bne.n	8009232 <_vfiprintf_r+0x1aa>
 80091c0:	9b03      	ldr	r3, [sp, #12]
 80091c2:	1d1a      	adds	r2, r3, #4
 80091c4:	681b      	ldr	r3, [r3, #0]
 80091c6:	9203      	str	r2, [sp, #12]
 80091c8:	2b00      	cmp	r3, #0
 80091ca:	bfb8      	it	lt
 80091cc:	f04f 33ff 	movlt.w	r3, #4294967295
 80091d0:	f108 0802 	add.w	r8, r8, #2
 80091d4:	9305      	str	r3, [sp, #20]
 80091d6:	4d33      	ldr	r5, [pc, #204]	; (80092a4 <_vfiprintf_r+0x21c>)
 80091d8:	f898 1000 	ldrb.w	r1, [r8]
 80091dc:	2203      	movs	r2, #3
 80091de:	4628      	mov	r0, r5
 80091e0:	f7f6 fff6 	bl	80001d0 <memchr>
 80091e4:	b140      	cbz	r0, 80091f8 <_vfiprintf_r+0x170>
 80091e6:	2340      	movs	r3, #64	; 0x40
 80091e8:	1b40      	subs	r0, r0, r5
 80091ea:	fa03 f000 	lsl.w	r0, r3, r0
 80091ee:	9b04      	ldr	r3, [sp, #16]
 80091f0:	4303      	orrs	r3, r0
 80091f2:	f108 0801 	add.w	r8, r8, #1
 80091f6:	9304      	str	r3, [sp, #16]
 80091f8:	f898 1000 	ldrb.w	r1, [r8]
 80091fc:	482a      	ldr	r0, [pc, #168]	; (80092a8 <_vfiprintf_r+0x220>)
 80091fe:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009202:	2206      	movs	r2, #6
 8009204:	f108 0701 	add.w	r7, r8, #1
 8009208:	f7f6 ffe2 	bl	80001d0 <memchr>
 800920c:	2800      	cmp	r0, #0
 800920e:	d037      	beq.n	8009280 <_vfiprintf_r+0x1f8>
 8009210:	4b26      	ldr	r3, [pc, #152]	; (80092ac <_vfiprintf_r+0x224>)
 8009212:	bb1b      	cbnz	r3, 800925c <_vfiprintf_r+0x1d4>
 8009214:	9b03      	ldr	r3, [sp, #12]
 8009216:	3307      	adds	r3, #7
 8009218:	f023 0307 	bic.w	r3, r3, #7
 800921c:	3308      	adds	r3, #8
 800921e:	9303      	str	r3, [sp, #12]
 8009220:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009222:	444b      	add	r3, r9
 8009224:	9309      	str	r3, [sp, #36]	; 0x24
 8009226:	e750      	b.n	80090ca <_vfiprintf_r+0x42>
 8009228:	fb05 3202 	mla	r2, r5, r2, r3
 800922c:	2001      	movs	r0, #1
 800922e:	4688      	mov	r8, r1
 8009230:	e78a      	b.n	8009148 <_vfiprintf_r+0xc0>
 8009232:	2300      	movs	r3, #0
 8009234:	f108 0801 	add.w	r8, r8, #1
 8009238:	9305      	str	r3, [sp, #20]
 800923a:	4619      	mov	r1, r3
 800923c:	250a      	movs	r5, #10
 800923e:	4640      	mov	r0, r8
 8009240:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009244:	3a30      	subs	r2, #48	; 0x30
 8009246:	2a09      	cmp	r2, #9
 8009248:	d903      	bls.n	8009252 <_vfiprintf_r+0x1ca>
 800924a:	2b00      	cmp	r3, #0
 800924c:	d0c3      	beq.n	80091d6 <_vfiprintf_r+0x14e>
 800924e:	9105      	str	r1, [sp, #20]
 8009250:	e7c1      	b.n	80091d6 <_vfiprintf_r+0x14e>
 8009252:	fb05 2101 	mla	r1, r5, r1, r2
 8009256:	2301      	movs	r3, #1
 8009258:	4680      	mov	r8, r0
 800925a:	e7f0      	b.n	800923e <_vfiprintf_r+0x1b6>
 800925c:	ab03      	add	r3, sp, #12
 800925e:	9300      	str	r3, [sp, #0]
 8009260:	4622      	mov	r2, r4
 8009262:	4b13      	ldr	r3, [pc, #76]	; (80092b0 <_vfiprintf_r+0x228>)
 8009264:	a904      	add	r1, sp, #16
 8009266:	4630      	mov	r0, r6
 8009268:	f3af 8000 	nop.w
 800926c:	f1b0 3fff 	cmp.w	r0, #4294967295
 8009270:	4681      	mov	r9, r0
 8009272:	d1d5      	bne.n	8009220 <_vfiprintf_r+0x198>
 8009274:	89a3      	ldrh	r3, [r4, #12]
 8009276:	065b      	lsls	r3, r3, #25
 8009278:	f53f af7e 	bmi.w	8009178 <_vfiprintf_r+0xf0>
 800927c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800927e:	e77d      	b.n	800917c <_vfiprintf_r+0xf4>
 8009280:	ab03      	add	r3, sp, #12
 8009282:	9300      	str	r3, [sp, #0]
 8009284:	4622      	mov	r2, r4
 8009286:	4b0a      	ldr	r3, [pc, #40]	; (80092b0 <_vfiprintf_r+0x228>)
 8009288:	a904      	add	r1, sp, #16
 800928a:	4630      	mov	r0, r6
 800928c:	f000 f888 	bl	80093a0 <_printf_i>
 8009290:	e7ec      	b.n	800926c <_vfiprintf_r+0x1e4>
 8009292:	bf00      	nop
 8009294:	08009b7c 	.word	0x08009b7c
 8009298:	08009bbc 	.word	0x08009bbc
 800929c:	08009b9c 	.word	0x08009b9c
 80092a0:	08009b5c 	.word	0x08009b5c
 80092a4:	08009bc2 	.word	0x08009bc2
 80092a8:	08009bc6 	.word	0x08009bc6
 80092ac:	00000000 	.word	0x00000000
 80092b0:	08009063 	.word	0x08009063

080092b4 <_printf_common>:
 80092b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80092b8:	4691      	mov	r9, r2
 80092ba:	461f      	mov	r7, r3
 80092bc:	688a      	ldr	r2, [r1, #8]
 80092be:	690b      	ldr	r3, [r1, #16]
 80092c0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80092c4:	4293      	cmp	r3, r2
 80092c6:	bfb8      	it	lt
 80092c8:	4613      	movlt	r3, r2
 80092ca:	f8c9 3000 	str.w	r3, [r9]
 80092ce:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80092d2:	4606      	mov	r6, r0
 80092d4:	460c      	mov	r4, r1
 80092d6:	b112      	cbz	r2, 80092de <_printf_common+0x2a>
 80092d8:	3301      	adds	r3, #1
 80092da:	f8c9 3000 	str.w	r3, [r9]
 80092de:	6823      	ldr	r3, [r4, #0]
 80092e0:	0699      	lsls	r1, r3, #26
 80092e2:	bf42      	ittt	mi
 80092e4:	f8d9 3000 	ldrmi.w	r3, [r9]
 80092e8:	3302      	addmi	r3, #2
 80092ea:	f8c9 3000 	strmi.w	r3, [r9]
 80092ee:	6825      	ldr	r5, [r4, #0]
 80092f0:	f015 0506 	ands.w	r5, r5, #6
 80092f4:	d107      	bne.n	8009306 <_printf_common+0x52>
 80092f6:	f104 0a19 	add.w	sl, r4, #25
 80092fa:	68e3      	ldr	r3, [r4, #12]
 80092fc:	f8d9 2000 	ldr.w	r2, [r9]
 8009300:	1a9b      	subs	r3, r3, r2
 8009302:	42ab      	cmp	r3, r5
 8009304:	dc28      	bgt.n	8009358 <_printf_common+0xa4>
 8009306:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800930a:	6822      	ldr	r2, [r4, #0]
 800930c:	3300      	adds	r3, #0
 800930e:	bf18      	it	ne
 8009310:	2301      	movne	r3, #1
 8009312:	0692      	lsls	r2, r2, #26
 8009314:	d42d      	bmi.n	8009372 <_printf_common+0xbe>
 8009316:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800931a:	4639      	mov	r1, r7
 800931c:	4630      	mov	r0, r6
 800931e:	47c0      	blx	r8
 8009320:	3001      	adds	r0, #1
 8009322:	d020      	beq.n	8009366 <_printf_common+0xb2>
 8009324:	6823      	ldr	r3, [r4, #0]
 8009326:	68e5      	ldr	r5, [r4, #12]
 8009328:	f8d9 2000 	ldr.w	r2, [r9]
 800932c:	f003 0306 	and.w	r3, r3, #6
 8009330:	2b04      	cmp	r3, #4
 8009332:	bf08      	it	eq
 8009334:	1aad      	subeq	r5, r5, r2
 8009336:	68a3      	ldr	r3, [r4, #8]
 8009338:	6922      	ldr	r2, [r4, #16]
 800933a:	bf0c      	ite	eq
 800933c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009340:	2500      	movne	r5, #0
 8009342:	4293      	cmp	r3, r2
 8009344:	bfc4      	itt	gt
 8009346:	1a9b      	subgt	r3, r3, r2
 8009348:	18ed      	addgt	r5, r5, r3
 800934a:	f04f 0900 	mov.w	r9, #0
 800934e:	341a      	adds	r4, #26
 8009350:	454d      	cmp	r5, r9
 8009352:	d11a      	bne.n	800938a <_printf_common+0xd6>
 8009354:	2000      	movs	r0, #0
 8009356:	e008      	b.n	800936a <_printf_common+0xb6>
 8009358:	2301      	movs	r3, #1
 800935a:	4652      	mov	r2, sl
 800935c:	4639      	mov	r1, r7
 800935e:	4630      	mov	r0, r6
 8009360:	47c0      	blx	r8
 8009362:	3001      	adds	r0, #1
 8009364:	d103      	bne.n	800936e <_printf_common+0xba>
 8009366:	f04f 30ff 	mov.w	r0, #4294967295
 800936a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800936e:	3501      	adds	r5, #1
 8009370:	e7c3      	b.n	80092fa <_printf_common+0x46>
 8009372:	18e1      	adds	r1, r4, r3
 8009374:	1c5a      	adds	r2, r3, #1
 8009376:	2030      	movs	r0, #48	; 0x30
 8009378:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800937c:	4422      	add	r2, r4
 800937e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009382:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009386:	3302      	adds	r3, #2
 8009388:	e7c5      	b.n	8009316 <_printf_common+0x62>
 800938a:	2301      	movs	r3, #1
 800938c:	4622      	mov	r2, r4
 800938e:	4639      	mov	r1, r7
 8009390:	4630      	mov	r0, r6
 8009392:	47c0      	blx	r8
 8009394:	3001      	adds	r0, #1
 8009396:	d0e6      	beq.n	8009366 <_printf_common+0xb2>
 8009398:	f109 0901 	add.w	r9, r9, #1
 800939c:	e7d8      	b.n	8009350 <_printf_common+0x9c>
	...

080093a0 <_printf_i>:
 80093a0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80093a4:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 80093a8:	460c      	mov	r4, r1
 80093aa:	7e09      	ldrb	r1, [r1, #24]
 80093ac:	b085      	sub	sp, #20
 80093ae:	296e      	cmp	r1, #110	; 0x6e
 80093b0:	4617      	mov	r7, r2
 80093b2:	4606      	mov	r6, r0
 80093b4:	4698      	mov	r8, r3
 80093b6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80093b8:	f000 80b3 	beq.w	8009522 <_printf_i+0x182>
 80093bc:	d822      	bhi.n	8009404 <_printf_i+0x64>
 80093be:	2963      	cmp	r1, #99	; 0x63
 80093c0:	d036      	beq.n	8009430 <_printf_i+0x90>
 80093c2:	d80a      	bhi.n	80093da <_printf_i+0x3a>
 80093c4:	2900      	cmp	r1, #0
 80093c6:	f000 80b9 	beq.w	800953c <_printf_i+0x19c>
 80093ca:	2958      	cmp	r1, #88	; 0x58
 80093cc:	f000 8083 	beq.w	80094d6 <_printf_i+0x136>
 80093d0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80093d4:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 80093d8:	e032      	b.n	8009440 <_printf_i+0xa0>
 80093da:	2964      	cmp	r1, #100	; 0x64
 80093dc:	d001      	beq.n	80093e2 <_printf_i+0x42>
 80093de:	2969      	cmp	r1, #105	; 0x69
 80093e0:	d1f6      	bne.n	80093d0 <_printf_i+0x30>
 80093e2:	6820      	ldr	r0, [r4, #0]
 80093e4:	6813      	ldr	r3, [r2, #0]
 80093e6:	0605      	lsls	r5, r0, #24
 80093e8:	f103 0104 	add.w	r1, r3, #4
 80093ec:	d52a      	bpl.n	8009444 <_printf_i+0xa4>
 80093ee:	681b      	ldr	r3, [r3, #0]
 80093f0:	6011      	str	r1, [r2, #0]
 80093f2:	2b00      	cmp	r3, #0
 80093f4:	da03      	bge.n	80093fe <_printf_i+0x5e>
 80093f6:	222d      	movs	r2, #45	; 0x2d
 80093f8:	425b      	negs	r3, r3
 80093fa:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80093fe:	486f      	ldr	r0, [pc, #444]	; (80095bc <_printf_i+0x21c>)
 8009400:	220a      	movs	r2, #10
 8009402:	e039      	b.n	8009478 <_printf_i+0xd8>
 8009404:	2973      	cmp	r1, #115	; 0x73
 8009406:	f000 809d 	beq.w	8009544 <_printf_i+0x1a4>
 800940a:	d808      	bhi.n	800941e <_printf_i+0x7e>
 800940c:	296f      	cmp	r1, #111	; 0x6f
 800940e:	d020      	beq.n	8009452 <_printf_i+0xb2>
 8009410:	2970      	cmp	r1, #112	; 0x70
 8009412:	d1dd      	bne.n	80093d0 <_printf_i+0x30>
 8009414:	6823      	ldr	r3, [r4, #0]
 8009416:	f043 0320 	orr.w	r3, r3, #32
 800941a:	6023      	str	r3, [r4, #0]
 800941c:	e003      	b.n	8009426 <_printf_i+0x86>
 800941e:	2975      	cmp	r1, #117	; 0x75
 8009420:	d017      	beq.n	8009452 <_printf_i+0xb2>
 8009422:	2978      	cmp	r1, #120	; 0x78
 8009424:	d1d4      	bne.n	80093d0 <_printf_i+0x30>
 8009426:	2378      	movs	r3, #120	; 0x78
 8009428:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800942c:	4864      	ldr	r0, [pc, #400]	; (80095c0 <_printf_i+0x220>)
 800942e:	e055      	b.n	80094dc <_printf_i+0x13c>
 8009430:	6813      	ldr	r3, [r2, #0]
 8009432:	1d19      	adds	r1, r3, #4
 8009434:	681b      	ldr	r3, [r3, #0]
 8009436:	6011      	str	r1, [r2, #0]
 8009438:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800943c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009440:	2301      	movs	r3, #1
 8009442:	e08c      	b.n	800955e <_printf_i+0x1be>
 8009444:	681b      	ldr	r3, [r3, #0]
 8009446:	6011      	str	r1, [r2, #0]
 8009448:	f010 0f40 	tst.w	r0, #64	; 0x40
 800944c:	bf18      	it	ne
 800944e:	b21b      	sxthne	r3, r3
 8009450:	e7cf      	b.n	80093f2 <_printf_i+0x52>
 8009452:	6813      	ldr	r3, [r2, #0]
 8009454:	6825      	ldr	r5, [r4, #0]
 8009456:	1d18      	adds	r0, r3, #4
 8009458:	6010      	str	r0, [r2, #0]
 800945a:	0628      	lsls	r0, r5, #24
 800945c:	d501      	bpl.n	8009462 <_printf_i+0xc2>
 800945e:	681b      	ldr	r3, [r3, #0]
 8009460:	e002      	b.n	8009468 <_printf_i+0xc8>
 8009462:	0668      	lsls	r0, r5, #25
 8009464:	d5fb      	bpl.n	800945e <_printf_i+0xbe>
 8009466:	881b      	ldrh	r3, [r3, #0]
 8009468:	4854      	ldr	r0, [pc, #336]	; (80095bc <_printf_i+0x21c>)
 800946a:	296f      	cmp	r1, #111	; 0x6f
 800946c:	bf14      	ite	ne
 800946e:	220a      	movne	r2, #10
 8009470:	2208      	moveq	r2, #8
 8009472:	2100      	movs	r1, #0
 8009474:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009478:	6865      	ldr	r5, [r4, #4]
 800947a:	60a5      	str	r5, [r4, #8]
 800947c:	2d00      	cmp	r5, #0
 800947e:	f2c0 8095 	blt.w	80095ac <_printf_i+0x20c>
 8009482:	6821      	ldr	r1, [r4, #0]
 8009484:	f021 0104 	bic.w	r1, r1, #4
 8009488:	6021      	str	r1, [r4, #0]
 800948a:	2b00      	cmp	r3, #0
 800948c:	d13d      	bne.n	800950a <_printf_i+0x16a>
 800948e:	2d00      	cmp	r5, #0
 8009490:	f040 808e 	bne.w	80095b0 <_printf_i+0x210>
 8009494:	4665      	mov	r5, ip
 8009496:	2a08      	cmp	r2, #8
 8009498:	d10b      	bne.n	80094b2 <_printf_i+0x112>
 800949a:	6823      	ldr	r3, [r4, #0]
 800949c:	07db      	lsls	r3, r3, #31
 800949e:	d508      	bpl.n	80094b2 <_printf_i+0x112>
 80094a0:	6923      	ldr	r3, [r4, #16]
 80094a2:	6862      	ldr	r2, [r4, #4]
 80094a4:	429a      	cmp	r2, r3
 80094a6:	bfde      	ittt	le
 80094a8:	2330      	movle	r3, #48	; 0x30
 80094aa:	f805 3c01 	strble.w	r3, [r5, #-1]
 80094ae:	f105 35ff 	addle.w	r5, r5, #4294967295
 80094b2:	ebac 0305 	sub.w	r3, ip, r5
 80094b6:	6123      	str	r3, [r4, #16]
 80094b8:	f8cd 8000 	str.w	r8, [sp]
 80094bc:	463b      	mov	r3, r7
 80094be:	aa03      	add	r2, sp, #12
 80094c0:	4621      	mov	r1, r4
 80094c2:	4630      	mov	r0, r6
 80094c4:	f7ff fef6 	bl	80092b4 <_printf_common>
 80094c8:	3001      	adds	r0, #1
 80094ca:	d14d      	bne.n	8009568 <_printf_i+0x1c8>
 80094cc:	f04f 30ff 	mov.w	r0, #4294967295
 80094d0:	b005      	add	sp, #20
 80094d2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80094d6:	4839      	ldr	r0, [pc, #228]	; (80095bc <_printf_i+0x21c>)
 80094d8:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 80094dc:	6813      	ldr	r3, [r2, #0]
 80094de:	6821      	ldr	r1, [r4, #0]
 80094e0:	1d1d      	adds	r5, r3, #4
 80094e2:	681b      	ldr	r3, [r3, #0]
 80094e4:	6015      	str	r5, [r2, #0]
 80094e6:	060a      	lsls	r2, r1, #24
 80094e8:	d50b      	bpl.n	8009502 <_printf_i+0x162>
 80094ea:	07ca      	lsls	r2, r1, #31
 80094ec:	bf44      	itt	mi
 80094ee:	f041 0120 	orrmi.w	r1, r1, #32
 80094f2:	6021      	strmi	r1, [r4, #0]
 80094f4:	b91b      	cbnz	r3, 80094fe <_printf_i+0x15e>
 80094f6:	6822      	ldr	r2, [r4, #0]
 80094f8:	f022 0220 	bic.w	r2, r2, #32
 80094fc:	6022      	str	r2, [r4, #0]
 80094fe:	2210      	movs	r2, #16
 8009500:	e7b7      	b.n	8009472 <_printf_i+0xd2>
 8009502:	064d      	lsls	r5, r1, #25
 8009504:	bf48      	it	mi
 8009506:	b29b      	uxthmi	r3, r3
 8009508:	e7ef      	b.n	80094ea <_printf_i+0x14a>
 800950a:	4665      	mov	r5, ip
 800950c:	fbb3 f1f2 	udiv	r1, r3, r2
 8009510:	fb02 3311 	mls	r3, r2, r1, r3
 8009514:	5cc3      	ldrb	r3, [r0, r3]
 8009516:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800951a:	460b      	mov	r3, r1
 800951c:	2900      	cmp	r1, #0
 800951e:	d1f5      	bne.n	800950c <_printf_i+0x16c>
 8009520:	e7b9      	b.n	8009496 <_printf_i+0xf6>
 8009522:	6813      	ldr	r3, [r2, #0]
 8009524:	6825      	ldr	r5, [r4, #0]
 8009526:	6961      	ldr	r1, [r4, #20]
 8009528:	1d18      	adds	r0, r3, #4
 800952a:	6010      	str	r0, [r2, #0]
 800952c:	0628      	lsls	r0, r5, #24
 800952e:	681b      	ldr	r3, [r3, #0]
 8009530:	d501      	bpl.n	8009536 <_printf_i+0x196>
 8009532:	6019      	str	r1, [r3, #0]
 8009534:	e002      	b.n	800953c <_printf_i+0x19c>
 8009536:	066a      	lsls	r2, r5, #25
 8009538:	d5fb      	bpl.n	8009532 <_printf_i+0x192>
 800953a:	8019      	strh	r1, [r3, #0]
 800953c:	2300      	movs	r3, #0
 800953e:	6123      	str	r3, [r4, #16]
 8009540:	4665      	mov	r5, ip
 8009542:	e7b9      	b.n	80094b8 <_printf_i+0x118>
 8009544:	6813      	ldr	r3, [r2, #0]
 8009546:	1d19      	adds	r1, r3, #4
 8009548:	6011      	str	r1, [r2, #0]
 800954a:	681d      	ldr	r5, [r3, #0]
 800954c:	6862      	ldr	r2, [r4, #4]
 800954e:	2100      	movs	r1, #0
 8009550:	4628      	mov	r0, r5
 8009552:	f7f6 fe3d 	bl	80001d0 <memchr>
 8009556:	b108      	cbz	r0, 800955c <_printf_i+0x1bc>
 8009558:	1b40      	subs	r0, r0, r5
 800955a:	6060      	str	r0, [r4, #4]
 800955c:	6863      	ldr	r3, [r4, #4]
 800955e:	6123      	str	r3, [r4, #16]
 8009560:	2300      	movs	r3, #0
 8009562:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009566:	e7a7      	b.n	80094b8 <_printf_i+0x118>
 8009568:	6923      	ldr	r3, [r4, #16]
 800956a:	462a      	mov	r2, r5
 800956c:	4639      	mov	r1, r7
 800956e:	4630      	mov	r0, r6
 8009570:	47c0      	blx	r8
 8009572:	3001      	adds	r0, #1
 8009574:	d0aa      	beq.n	80094cc <_printf_i+0x12c>
 8009576:	6823      	ldr	r3, [r4, #0]
 8009578:	079b      	lsls	r3, r3, #30
 800957a:	d413      	bmi.n	80095a4 <_printf_i+0x204>
 800957c:	68e0      	ldr	r0, [r4, #12]
 800957e:	9b03      	ldr	r3, [sp, #12]
 8009580:	4298      	cmp	r0, r3
 8009582:	bfb8      	it	lt
 8009584:	4618      	movlt	r0, r3
 8009586:	e7a3      	b.n	80094d0 <_printf_i+0x130>
 8009588:	2301      	movs	r3, #1
 800958a:	464a      	mov	r2, r9
 800958c:	4639      	mov	r1, r7
 800958e:	4630      	mov	r0, r6
 8009590:	47c0      	blx	r8
 8009592:	3001      	adds	r0, #1
 8009594:	d09a      	beq.n	80094cc <_printf_i+0x12c>
 8009596:	3501      	adds	r5, #1
 8009598:	68e3      	ldr	r3, [r4, #12]
 800959a:	9a03      	ldr	r2, [sp, #12]
 800959c:	1a9b      	subs	r3, r3, r2
 800959e:	42ab      	cmp	r3, r5
 80095a0:	dcf2      	bgt.n	8009588 <_printf_i+0x1e8>
 80095a2:	e7eb      	b.n	800957c <_printf_i+0x1dc>
 80095a4:	2500      	movs	r5, #0
 80095a6:	f104 0919 	add.w	r9, r4, #25
 80095aa:	e7f5      	b.n	8009598 <_printf_i+0x1f8>
 80095ac:	2b00      	cmp	r3, #0
 80095ae:	d1ac      	bne.n	800950a <_printf_i+0x16a>
 80095b0:	7803      	ldrb	r3, [r0, #0]
 80095b2:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80095b6:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80095ba:	e76c      	b.n	8009496 <_printf_i+0xf6>
 80095bc:	08009bcd 	.word	0x08009bcd
 80095c0:	08009bde 	.word	0x08009bde

080095c4 <__sread>:
 80095c4:	b510      	push	{r4, lr}
 80095c6:	460c      	mov	r4, r1
 80095c8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80095cc:	f000 fa46 	bl	8009a5c <_read_r>
 80095d0:	2800      	cmp	r0, #0
 80095d2:	bfab      	itete	ge
 80095d4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80095d6:	89a3      	ldrhlt	r3, [r4, #12]
 80095d8:	181b      	addge	r3, r3, r0
 80095da:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80095de:	bfac      	ite	ge
 80095e0:	6563      	strge	r3, [r4, #84]	; 0x54
 80095e2:	81a3      	strhlt	r3, [r4, #12]
 80095e4:	bd10      	pop	{r4, pc}

080095e6 <__swrite>:
 80095e6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80095ea:	461f      	mov	r7, r3
 80095ec:	898b      	ldrh	r3, [r1, #12]
 80095ee:	05db      	lsls	r3, r3, #23
 80095f0:	4605      	mov	r5, r0
 80095f2:	460c      	mov	r4, r1
 80095f4:	4616      	mov	r6, r2
 80095f6:	d505      	bpl.n	8009604 <__swrite+0x1e>
 80095f8:	2302      	movs	r3, #2
 80095fa:	2200      	movs	r2, #0
 80095fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009600:	f000 f9b6 	bl	8009970 <_lseek_r>
 8009604:	89a3      	ldrh	r3, [r4, #12]
 8009606:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800960a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800960e:	81a3      	strh	r3, [r4, #12]
 8009610:	4632      	mov	r2, r6
 8009612:	463b      	mov	r3, r7
 8009614:	4628      	mov	r0, r5
 8009616:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800961a:	f000 b869 	b.w	80096f0 <_write_r>

0800961e <__sseek>:
 800961e:	b510      	push	{r4, lr}
 8009620:	460c      	mov	r4, r1
 8009622:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009626:	f000 f9a3 	bl	8009970 <_lseek_r>
 800962a:	1c43      	adds	r3, r0, #1
 800962c:	89a3      	ldrh	r3, [r4, #12]
 800962e:	bf15      	itete	ne
 8009630:	6560      	strne	r0, [r4, #84]	; 0x54
 8009632:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8009636:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800963a:	81a3      	strheq	r3, [r4, #12]
 800963c:	bf18      	it	ne
 800963e:	81a3      	strhne	r3, [r4, #12]
 8009640:	bd10      	pop	{r4, pc}

08009642 <__sclose>:
 8009642:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009646:	f000 b8d3 	b.w	80097f0 <_close_r>
	...

0800964c <__swbuf_r>:
 800964c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800964e:	460e      	mov	r6, r1
 8009650:	4614      	mov	r4, r2
 8009652:	4605      	mov	r5, r0
 8009654:	b118      	cbz	r0, 800965e <__swbuf_r+0x12>
 8009656:	6983      	ldr	r3, [r0, #24]
 8009658:	b90b      	cbnz	r3, 800965e <__swbuf_r+0x12>
 800965a:	f7ff fc5f 	bl	8008f1c <__sinit>
 800965e:	4b21      	ldr	r3, [pc, #132]	; (80096e4 <__swbuf_r+0x98>)
 8009660:	429c      	cmp	r4, r3
 8009662:	d12a      	bne.n	80096ba <__swbuf_r+0x6e>
 8009664:	686c      	ldr	r4, [r5, #4]
 8009666:	69a3      	ldr	r3, [r4, #24]
 8009668:	60a3      	str	r3, [r4, #8]
 800966a:	89a3      	ldrh	r3, [r4, #12]
 800966c:	071a      	lsls	r2, r3, #28
 800966e:	d52e      	bpl.n	80096ce <__swbuf_r+0x82>
 8009670:	6923      	ldr	r3, [r4, #16]
 8009672:	b363      	cbz	r3, 80096ce <__swbuf_r+0x82>
 8009674:	6923      	ldr	r3, [r4, #16]
 8009676:	6820      	ldr	r0, [r4, #0]
 8009678:	1ac0      	subs	r0, r0, r3
 800967a:	6963      	ldr	r3, [r4, #20]
 800967c:	b2f6      	uxtb	r6, r6
 800967e:	4283      	cmp	r3, r0
 8009680:	4637      	mov	r7, r6
 8009682:	dc04      	bgt.n	800968e <__swbuf_r+0x42>
 8009684:	4621      	mov	r1, r4
 8009686:	4628      	mov	r0, r5
 8009688:	f000 f948 	bl	800991c <_fflush_r>
 800968c:	bb28      	cbnz	r0, 80096da <__swbuf_r+0x8e>
 800968e:	68a3      	ldr	r3, [r4, #8]
 8009690:	3b01      	subs	r3, #1
 8009692:	60a3      	str	r3, [r4, #8]
 8009694:	6823      	ldr	r3, [r4, #0]
 8009696:	1c5a      	adds	r2, r3, #1
 8009698:	6022      	str	r2, [r4, #0]
 800969a:	701e      	strb	r6, [r3, #0]
 800969c:	6963      	ldr	r3, [r4, #20]
 800969e:	3001      	adds	r0, #1
 80096a0:	4283      	cmp	r3, r0
 80096a2:	d004      	beq.n	80096ae <__swbuf_r+0x62>
 80096a4:	89a3      	ldrh	r3, [r4, #12]
 80096a6:	07db      	lsls	r3, r3, #31
 80096a8:	d519      	bpl.n	80096de <__swbuf_r+0x92>
 80096aa:	2e0a      	cmp	r6, #10
 80096ac:	d117      	bne.n	80096de <__swbuf_r+0x92>
 80096ae:	4621      	mov	r1, r4
 80096b0:	4628      	mov	r0, r5
 80096b2:	f000 f933 	bl	800991c <_fflush_r>
 80096b6:	b190      	cbz	r0, 80096de <__swbuf_r+0x92>
 80096b8:	e00f      	b.n	80096da <__swbuf_r+0x8e>
 80096ba:	4b0b      	ldr	r3, [pc, #44]	; (80096e8 <__swbuf_r+0x9c>)
 80096bc:	429c      	cmp	r4, r3
 80096be:	d101      	bne.n	80096c4 <__swbuf_r+0x78>
 80096c0:	68ac      	ldr	r4, [r5, #8]
 80096c2:	e7d0      	b.n	8009666 <__swbuf_r+0x1a>
 80096c4:	4b09      	ldr	r3, [pc, #36]	; (80096ec <__swbuf_r+0xa0>)
 80096c6:	429c      	cmp	r4, r3
 80096c8:	bf08      	it	eq
 80096ca:	68ec      	ldreq	r4, [r5, #12]
 80096cc:	e7cb      	b.n	8009666 <__swbuf_r+0x1a>
 80096ce:	4621      	mov	r1, r4
 80096d0:	4628      	mov	r0, r5
 80096d2:	f000 f81f 	bl	8009714 <__swsetup_r>
 80096d6:	2800      	cmp	r0, #0
 80096d8:	d0cc      	beq.n	8009674 <__swbuf_r+0x28>
 80096da:	f04f 37ff 	mov.w	r7, #4294967295
 80096de:	4638      	mov	r0, r7
 80096e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80096e2:	bf00      	nop
 80096e4:	08009b7c 	.word	0x08009b7c
 80096e8:	08009b9c 	.word	0x08009b9c
 80096ec:	08009b5c 	.word	0x08009b5c

080096f0 <_write_r>:
 80096f0:	b538      	push	{r3, r4, r5, lr}
 80096f2:	4c07      	ldr	r4, [pc, #28]	; (8009710 <_write_r+0x20>)
 80096f4:	4605      	mov	r5, r0
 80096f6:	4608      	mov	r0, r1
 80096f8:	4611      	mov	r1, r2
 80096fa:	2200      	movs	r2, #0
 80096fc:	6022      	str	r2, [r4, #0]
 80096fe:	461a      	mov	r2, r3
 8009700:	f7f7 f8b7 	bl	8000872 <_write>
 8009704:	1c43      	adds	r3, r0, #1
 8009706:	d102      	bne.n	800970e <_write_r+0x1e>
 8009708:	6823      	ldr	r3, [r4, #0]
 800970a:	b103      	cbz	r3, 800970e <_write_r+0x1e>
 800970c:	602b      	str	r3, [r5, #0]
 800970e:	bd38      	pop	{r3, r4, r5, pc}
 8009710:	20001304 	.word	0x20001304

08009714 <__swsetup_r>:
 8009714:	4b32      	ldr	r3, [pc, #200]	; (80097e0 <__swsetup_r+0xcc>)
 8009716:	b570      	push	{r4, r5, r6, lr}
 8009718:	681d      	ldr	r5, [r3, #0]
 800971a:	4606      	mov	r6, r0
 800971c:	460c      	mov	r4, r1
 800971e:	b125      	cbz	r5, 800972a <__swsetup_r+0x16>
 8009720:	69ab      	ldr	r3, [r5, #24]
 8009722:	b913      	cbnz	r3, 800972a <__swsetup_r+0x16>
 8009724:	4628      	mov	r0, r5
 8009726:	f7ff fbf9 	bl	8008f1c <__sinit>
 800972a:	4b2e      	ldr	r3, [pc, #184]	; (80097e4 <__swsetup_r+0xd0>)
 800972c:	429c      	cmp	r4, r3
 800972e:	d10f      	bne.n	8009750 <__swsetup_r+0x3c>
 8009730:	686c      	ldr	r4, [r5, #4]
 8009732:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009736:	b29a      	uxth	r2, r3
 8009738:	0715      	lsls	r5, r2, #28
 800973a:	d42c      	bmi.n	8009796 <__swsetup_r+0x82>
 800973c:	06d0      	lsls	r0, r2, #27
 800973e:	d411      	bmi.n	8009764 <__swsetup_r+0x50>
 8009740:	2209      	movs	r2, #9
 8009742:	6032      	str	r2, [r6, #0]
 8009744:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009748:	81a3      	strh	r3, [r4, #12]
 800974a:	f04f 30ff 	mov.w	r0, #4294967295
 800974e:	e03e      	b.n	80097ce <__swsetup_r+0xba>
 8009750:	4b25      	ldr	r3, [pc, #148]	; (80097e8 <__swsetup_r+0xd4>)
 8009752:	429c      	cmp	r4, r3
 8009754:	d101      	bne.n	800975a <__swsetup_r+0x46>
 8009756:	68ac      	ldr	r4, [r5, #8]
 8009758:	e7eb      	b.n	8009732 <__swsetup_r+0x1e>
 800975a:	4b24      	ldr	r3, [pc, #144]	; (80097ec <__swsetup_r+0xd8>)
 800975c:	429c      	cmp	r4, r3
 800975e:	bf08      	it	eq
 8009760:	68ec      	ldreq	r4, [r5, #12]
 8009762:	e7e6      	b.n	8009732 <__swsetup_r+0x1e>
 8009764:	0751      	lsls	r1, r2, #29
 8009766:	d512      	bpl.n	800978e <__swsetup_r+0x7a>
 8009768:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800976a:	b141      	cbz	r1, 800977e <__swsetup_r+0x6a>
 800976c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009770:	4299      	cmp	r1, r3
 8009772:	d002      	beq.n	800977a <__swsetup_r+0x66>
 8009774:	4630      	mov	r0, r6
 8009776:	f7ff fac1 	bl	8008cfc <_free_r>
 800977a:	2300      	movs	r3, #0
 800977c:	6363      	str	r3, [r4, #52]	; 0x34
 800977e:	89a3      	ldrh	r3, [r4, #12]
 8009780:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8009784:	81a3      	strh	r3, [r4, #12]
 8009786:	2300      	movs	r3, #0
 8009788:	6063      	str	r3, [r4, #4]
 800978a:	6923      	ldr	r3, [r4, #16]
 800978c:	6023      	str	r3, [r4, #0]
 800978e:	89a3      	ldrh	r3, [r4, #12]
 8009790:	f043 0308 	orr.w	r3, r3, #8
 8009794:	81a3      	strh	r3, [r4, #12]
 8009796:	6923      	ldr	r3, [r4, #16]
 8009798:	b94b      	cbnz	r3, 80097ae <__swsetup_r+0x9a>
 800979a:	89a3      	ldrh	r3, [r4, #12]
 800979c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80097a0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80097a4:	d003      	beq.n	80097ae <__swsetup_r+0x9a>
 80097a6:	4621      	mov	r1, r4
 80097a8:	4630      	mov	r0, r6
 80097aa:	f000 f917 	bl	80099dc <__smakebuf_r>
 80097ae:	89a2      	ldrh	r2, [r4, #12]
 80097b0:	f012 0301 	ands.w	r3, r2, #1
 80097b4:	d00c      	beq.n	80097d0 <__swsetup_r+0xbc>
 80097b6:	2300      	movs	r3, #0
 80097b8:	60a3      	str	r3, [r4, #8]
 80097ba:	6963      	ldr	r3, [r4, #20]
 80097bc:	425b      	negs	r3, r3
 80097be:	61a3      	str	r3, [r4, #24]
 80097c0:	6923      	ldr	r3, [r4, #16]
 80097c2:	b953      	cbnz	r3, 80097da <__swsetup_r+0xc6>
 80097c4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80097c8:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 80097cc:	d1ba      	bne.n	8009744 <__swsetup_r+0x30>
 80097ce:	bd70      	pop	{r4, r5, r6, pc}
 80097d0:	0792      	lsls	r2, r2, #30
 80097d2:	bf58      	it	pl
 80097d4:	6963      	ldrpl	r3, [r4, #20]
 80097d6:	60a3      	str	r3, [r4, #8]
 80097d8:	e7f2      	b.n	80097c0 <__swsetup_r+0xac>
 80097da:	2000      	movs	r0, #0
 80097dc:	e7f7      	b.n	80097ce <__swsetup_r+0xba>
 80097de:	bf00      	nop
 80097e0:	200001a4 	.word	0x200001a4
 80097e4:	08009b7c 	.word	0x08009b7c
 80097e8:	08009b9c 	.word	0x08009b9c
 80097ec:	08009b5c 	.word	0x08009b5c

080097f0 <_close_r>:
 80097f0:	b538      	push	{r3, r4, r5, lr}
 80097f2:	4c06      	ldr	r4, [pc, #24]	; (800980c <_close_r+0x1c>)
 80097f4:	2300      	movs	r3, #0
 80097f6:	4605      	mov	r5, r0
 80097f8:	4608      	mov	r0, r1
 80097fa:	6023      	str	r3, [r4, #0]
 80097fc:	f7f7 f855 	bl	80008aa <_close>
 8009800:	1c43      	adds	r3, r0, #1
 8009802:	d102      	bne.n	800980a <_close_r+0x1a>
 8009804:	6823      	ldr	r3, [r4, #0]
 8009806:	b103      	cbz	r3, 800980a <_close_r+0x1a>
 8009808:	602b      	str	r3, [r5, #0]
 800980a:	bd38      	pop	{r3, r4, r5, pc}
 800980c:	20001304 	.word	0x20001304

08009810 <__sflush_r>:
 8009810:	898a      	ldrh	r2, [r1, #12]
 8009812:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009816:	4605      	mov	r5, r0
 8009818:	0710      	lsls	r0, r2, #28
 800981a:	460c      	mov	r4, r1
 800981c:	d458      	bmi.n	80098d0 <__sflush_r+0xc0>
 800981e:	684b      	ldr	r3, [r1, #4]
 8009820:	2b00      	cmp	r3, #0
 8009822:	dc05      	bgt.n	8009830 <__sflush_r+0x20>
 8009824:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8009826:	2b00      	cmp	r3, #0
 8009828:	dc02      	bgt.n	8009830 <__sflush_r+0x20>
 800982a:	2000      	movs	r0, #0
 800982c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009830:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009832:	2e00      	cmp	r6, #0
 8009834:	d0f9      	beq.n	800982a <__sflush_r+0x1a>
 8009836:	2300      	movs	r3, #0
 8009838:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800983c:	682f      	ldr	r7, [r5, #0]
 800983e:	6a21      	ldr	r1, [r4, #32]
 8009840:	602b      	str	r3, [r5, #0]
 8009842:	d032      	beq.n	80098aa <__sflush_r+0x9a>
 8009844:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8009846:	89a3      	ldrh	r3, [r4, #12]
 8009848:	075a      	lsls	r2, r3, #29
 800984a:	d505      	bpl.n	8009858 <__sflush_r+0x48>
 800984c:	6863      	ldr	r3, [r4, #4]
 800984e:	1ac0      	subs	r0, r0, r3
 8009850:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009852:	b10b      	cbz	r3, 8009858 <__sflush_r+0x48>
 8009854:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009856:	1ac0      	subs	r0, r0, r3
 8009858:	2300      	movs	r3, #0
 800985a:	4602      	mov	r2, r0
 800985c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800985e:	6a21      	ldr	r1, [r4, #32]
 8009860:	4628      	mov	r0, r5
 8009862:	47b0      	blx	r6
 8009864:	1c43      	adds	r3, r0, #1
 8009866:	89a3      	ldrh	r3, [r4, #12]
 8009868:	d106      	bne.n	8009878 <__sflush_r+0x68>
 800986a:	6829      	ldr	r1, [r5, #0]
 800986c:	291d      	cmp	r1, #29
 800986e:	d848      	bhi.n	8009902 <__sflush_r+0xf2>
 8009870:	4a29      	ldr	r2, [pc, #164]	; (8009918 <__sflush_r+0x108>)
 8009872:	40ca      	lsrs	r2, r1
 8009874:	07d6      	lsls	r6, r2, #31
 8009876:	d544      	bpl.n	8009902 <__sflush_r+0xf2>
 8009878:	2200      	movs	r2, #0
 800987a:	6062      	str	r2, [r4, #4]
 800987c:	04d9      	lsls	r1, r3, #19
 800987e:	6922      	ldr	r2, [r4, #16]
 8009880:	6022      	str	r2, [r4, #0]
 8009882:	d504      	bpl.n	800988e <__sflush_r+0x7e>
 8009884:	1c42      	adds	r2, r0, #1
 8009886:	d101      	bne.n	800988c <__sflush_r+0x7c>
 8009888:	682b      	ldr	r3, [r5, #0]
 800988a:	b903      	cbnz	r3, 800988e <__sflush_r+0x7e>
 800988c:	6560      	str	r0, [r4, #84]	; 0x54
 800988e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009890:	602f      	str	r7, [r5, #0]
 8009892:	2900      	cmp	r1, #0
 8009894:	d0c9      	beq.n	800982a <__sflush_r+0x1a>
 8009896:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800989a:	4299      	cmp	r1, r3
 800989c:	d002      	beq.n	80098a4 <__sflush_r+0x94>
 800989e:	4628      	mov	r0, r5
 80098a0:	f7ff fa2c 	bl	8008cfc <_free_r>
 80098a4:	2000      	movs	r0, #0
 80098a6:	6360      	str	r0, [r4, #52]	; 0x34
 80098a8:	e7c0      	b.n	800982c <__sflush_r+0x1c>
 80098aa:	2301      	movs	r3, #1
 80098ac:	4628      	mov	r0, r5
 80098ae:	47b0      	blx	r6
 80098b0:	1c41      	adds	r1, r0, #1
 80098b2:	d1c8      	bne.n	8009846 <__sflush_r+0x36>
 80098b4:	682b      	ldr	r3, [r5, #0]
 80098b6:	2b00      	cmp	r3, #0
 80098b8:	d0c5      	beq.n	8009846 <__sflush_r+0x36>
 80098ba:	2b1d      	cmp	r3, #29
 80098bc:	d001      	beq.n	80098c2 <__sflush_r+0xb2>
 80098be:	2b16      	cmp	r3, #22
 80098c0:	d101      	bne.n	80098c6 <__sflush_r+0xb6>
 80098c2:	602f      	str	r7, [r5, #0]
 80098c4:	e7b1      	b.n	800982a <__sflush_r+0x1a>
 80098c6:	89a3      	ldrh	r3, [r4, #12]
 80098c8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80098cc:	81a3      	strh	r3, [r4, #12]
 80098ce:	e7ad      	b.n	800982c <__sflush_r+0x1c>
 80098d0:	690f      	ldr	r7, [r1, #16]
 80098d2:	2f00      	cmp	r7, #0
 80098d4:	d0a9      	beq.n	800982a <__sflush_r+0x1a>
 80098d6:	0793      	lsls	r3, r2, #30
 80098d8:	680e      	ldr	r6, [r1, #0]
 80098da:	bf08      	it	eq
 80098dc:	694b      	ldreq	r3, [r1, #20]
 80098de:	600f      	str	r7, [r1, #0]
 80098e0:	bf18      	it	ne
 80098e2:	2300      	movne	r3, #0
 80098e4:	eba6 0807 	sub.w	r8, r6, r7
 80098e8:	608b      	str	r3, [r1, #8]
 80098ea:	f1b8 0f00 	cmp.w	r8, #0
 80098ee:	dd9c      	ble.n	800982a <__sflush_r+0x1a>
 80098f0:	4643      	mov	r3, r8
 80098f2:	463a      	mov	r2, r7
 80098f4:	6a21      	ldr	r1, [r4, #32]
 80098f6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80098f8:	4628      	mov	r0, r5
 80098fa:	47b0      	blx	r6
 80098fc:	2800      	cmp	r0, #0
 80098fe:	dc06      	bgt.n	800990e <__sflush_r+0xfe>
 8009900:	89a3      	ldrh	r3, [r4, #12]
 8009902:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009906:	81a3      	strh	r3, [r4, #12]
 8009908:	f04f 30ff 	mov.w	r0, #4294967295
 800990c:	e78e      	b.n	800982c <__sflush_r+0x1c>
 800990e:	4407      	add	r7, r0
 8009910:	eba8 0800 	sub.w	r8, r8, r0
 8009914:	e7e9      	b.n	80098ea <__sflush_r+0xda>
 8009916:	bf00      	nop
 8009918:	20400001 	.word	0x20400001

0800991c <_fflush_r>:
 800991c:	b538      	push	{r3, r4, r5, lr}
 800991e:	690b      	ldr	r3, [r1, #16]
 8009920:	4605      	mov	r5, r0
 8009922:	460c      	mov	r4, r1
 8009924:	b1db      	cbz	r3, 800995e <_fflush_r+0x42>
 8009926:	b118      	cbz	r0, 8009930 <_fflush_r+0x14>
 8009928:	6983      	ldr	r3, [r0, #24]
 800992a:	b90b      	cbnz	r3, 8009930 <_fflush_r+0x14>
 800992c:	f7ff faf6 	bl	8008f1c <__sinit>
 8009930:	4b0c      	ldr	r3, [pc, #48]	; (8009964 <_fflush_r+0x48>)
 8009932:	429c      	cmp	r4, r3
 8009934:	d109      	bne.n	800994a <_fflush_r+0x2e>
 8009936:	686c      	ldr	r4, [r5, #4]
 8009938:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800993c:	b17b      	cbz	r3, 800995e <_fflush_r+0x42>
 800993e:	4621      	mov	r1, r4
 8009940:	4628      	mov	r0, r5
 8009942:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009946:	f7ff bf63 	b.w	8009810 <__sflush_r>
 800994a:	4b07      	ldr	r3, [pc, #28]	; (8009968 <_fflush_r+0x4c>)
 800994c:	429c      	cmp	r4, r3
 800994e:	d101      	bne.n	8009954 <_fflush_r+0x38>
 8009950:	68ac      	ldr	r4, [r5, #8]
 8009952:	e7f1      	b.n	8009938 <_fflush_r+0x1c>
 8009954:	4b05      	ldr	r3, [pc, #20]	; (800996c <_fflush_r+0x50>)
 8009956:	429c      	cmp	r4, r3
 8009958:	bf08      	it	eq
 800995a:	68ec      	ldreq	r4, [r5, #12]
 800995c:	e7ec      	b.n	8009938 <_fflush_r+0x1c>
 800995e:	2000      	movs	r0, #0
 8009960:	bd38      	pop	{r3, r4, r5, pc}
 8009962:	bf00      	nop
 8009964:	08009b7c 	.word	0x08009b7c
 8009968:	08009b9c 	.word	0x08009b9c
 800996c:	08009b5c 	.word	0x08009b5c

08009970 <_lseek_r>:
 8009970:	b538      	push	{r3, r4, r5, lr}
 8009972:	4c07      	ldr	r4, [pc, #28]	; (8009990 <_lseek_r+0x20>)
 8009974:	4605      	mov	r5, r0
 8009976:	4608      	mov	r0, r1
 8009978:	4611      	mov	r1, r2
 800997a:	2200      	movs	r2, #0
 800997c:	6022      	str	r2, [r4, #0]
 800997e:	461a      	mov	r2, r3
 8009980:	f7f6 ffba 	bl	80008f8 <_lseek>
 8009984:	1c43      	adds	r3, r0, #1
 8009986:	d102      	bne.n	800998e <_lseek_r+0x1e>
 8009988:	6823      	ldr	r3, [r4, #0]
 800998a:	b103      	cbz	r3, 800998e <_lseek_r+0x1e>
 800998c:	602b      	str	r3, [r5, #0]
 800998e:	bd38      	pop	{r3, r4, r5, pc}
 8009990:	20001304 	.word	0x20001304

08009994 <__swhatbuf_r>:
 8009994:	b570      	push	{r4, r5, r6, lr}
 8009996:	460e      	mov	r6, r1
 8009998:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800999c:	2900      	cmp	r1, #0
 800999e:	b096      	sub	sp, #88	; 0x58
 80099a0:	4614      	mov	r4, r2
 80099a2:	461d      	mov	r5, r3
 80099a4:	da07      	bge.n	80099b6 <__swhatbuf_r+0x22>
 80099a6:	2300      	movs	r3, #0
 80099a8:	602b      	str	r3, [r5, #0]
 80099aa:	89b3      	ldrh	r3, [r6, #12]
 80099ac:	061a      	lsls	r2, r3, #24
 80099ae:	d410      	bmi.n	80099d2 <__swhatbuf_r+0x3e>
 80099b0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80099b4:	e00e      	b.n	80099d4 <__swhatbuf_r+0x40>
 80099b6:	466a      	mov	r2, sp
 80099b8:	f000 f862 	bl	8009a80 <_fstat_r>
 80099bc:	2800      	cmp	r0, #0
 80099be:	dbf2      	blt.n	80099a6 <__swhatbuf_r+0x12>
 80099c0:	9a01      	ldr	r2, [sp, #4]
 80099c2:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80099c6:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80099ca:	425a      	negs	r2, r3
 80099cc:	415a      	adcs	r2, r3
 80099ce:	602a      	str	r2, [r5, #0]
 80099d0:	e7ee      	b.n	80099b0 <__swhatbuf_r+0x1c>
 80099d2:	2340      	movs	r3, #64	; 0x40
 80099d4:	2000      	movs	r0, #0
 80099d6:	6023      	str	r3, [r4, #0]
 80099d8:	b016      	add	sp, #88	; 0x58
 80099da:	bd70      	pop	{r4, r5, r6, pc}

080099dc <__smakebuf_r>:
 80099dc:	898b      	ldrh	r3, [r1, #12]
 80099de:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80099e0:	079d      	lsls	r5, r3, #30
 80099e2:	4606      	mov	r6, r0
 80099e4:	460c      	mov	r4, r1
 80099e6:	d507      	bpl.n	80099f8 <__smakebuf_r+0x1c>
 80099e8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80099ec:	6023      	str	r3, [r4, #0]
 80099ee:	6123      	str	r3, [r4, #16]
 80099f0:	2301      	movs	r3, #1
 80099f2:	6163      	str	r3, [r4, #20]
 80099f4:	b002      	add	sp, #8
 80099f6:	bd70      	pop	{r4, r5, r6, pc}
 80099f8:	ab01      	add	r3, sp, #4
 80099fa:	466a      	mov	r2, sp
 80099fc:	f7ff ffca 	bl	8009994 <__swhatbuf_r>
 8009a00:	9900      	ldr	r1, [sp, #0]
 8009a02:	4605      	mov	r5, r0
 8009a04:	4630      	mov	r0, r6
 8009a06:	f7ff f9c7 	bl	8008d98 <_malloc_r>
 8009a0a:	b948      	cbnz	r0, 8009a20 <__smakebuf_r+0x44>
 8009a0c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009a10:	059a      	lsls	r2, r3, #22
 8009a12:	d4ef      	bmi.n	80099f4 <__smakebuf_r+0x18>
 8009a14:	f023 0303 	bic.w	r3, r3, #3
 8009a18:	f043 0302 	orr.w	r3, r3, #2
 8009a1c:	81a3      	strh	r3, [r4, #12]
 8009a1e:	e7e3      	b.n	80099e8 <__smakebuf_r+0xc>
 8009a20:	4b0d      	ldr	r3, [pc, #52]	; (8009a58 <__smakebuf_r+0x7c>)
 8009a22:	62b3      	str	r3, [r6, #40]	; 0x28
 8009a24:	89a3      	ldrh	r3, [r4, #12]
 8009a26:	6020      	str	r0, [r4, #0]
 8009a28:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009a2c:	81a3      	strh	r3, [r4, #12]
 8009a2e:	9b00      	ldr	r3, [sp, #0]
 8009a30:	6163      	str	r3, [r4, #20]
 8009a32:	9b01      	ldr	r3, [sp, #4]
 8009a34:	6120      	str	r0, [r4, #16]
 8009a36:	b15b      	cbz	r3, 8009a50 <__smakebuf_r+0x74>
 8009a38:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009a3c:	4630      	mov	r0, r6
 8009a3e:	f000 f831 	bl	8009aa4 <_isatty_r>
 8009a42:	b128      	cbz	r0, 8009a50 <__smakebuf_r+0x74>
 8009a44:	89a3      	ldrh	r3, [r4, #12]
 8009a46:	f023 0303 	bic.w	r3, r3, #3
 8009a4a:	f043 0301 	orr.w	r3, r3, #1
 8009a4e:	81a3      	strh	r3, [r4, #12]
 8009a50:	89a3      	ldrh	r3, [r4, #12]
 8009a52:	431d      	orrs	r5, r3
 8009a54:	81a5      	strh	r5, [r4, #12]
 8009a56:	e7cd      	b.n	80099f4 <__smakebuf_r+0x18>
 8009a58:	08008ee5 	.word	0x08008ee5

08009a5c <_read_r>:
 8009a5c:	b538      	push	{r3, r4, r5, lr}
 8009a5e:	4c07      	ldr	r4, [pc, #28]	; (8009a7c <_read_r+0x20>)
 8009a60:	4605      	mov	r5, r0
 8009a62:	4608      	mov	r0, r1
 8009a64:	4611      	mov	r1, r2
 8009a66:	2200      	movs	r2, #0
 8009a68:	6022      	str	r2, [r4, #0]
 8009a6a:	461a      	mov	r2, r3
 8009a6c:	f7f6 fee4 	bl	8000838 <_read>
 8009a70:	1c43      	adds	r3, r0, #1
 8009a72:	d102      	bne.n	8009a7a <_read_r+0x1e>
 8009a74:	6823      	ldr	r3, [r4, #0]
 8009a76:	b103      	cbz	r3, 8009a7a <_read_r+0x1e>
 8009a78:	602b      	str	r3, [r5, #0]
 8009a7a:	bd38      	pop	{r3, r4, r5, pc}
 8009a7c:	20001304 	.word	0x20001304

08009a80 <_fstat_r>:
 8009a80:	b538      	push	{r3, r4, r5, lr}
 8009a82:	4c07      	ldr	r4, [pc, #28]	; (8009aa0 <_fstat_r+0x20>)
 8009a84:	2300      	movs	r3, #0
 8009a86:	4605      	mov	r5, r0
 8009a88:	4608      	mov	r0, r1
 8009a8a:	4611      	mov	r1, r2
 8009a8c:	6023      	str	r3, [r4, #0]
 8009a8e:	f7f6 ff18 	bl	80008c2 <_fstat>
 8009a92:	1c43      	adds	r3, r0, #1
 8009a94:	d102      	bne.n	8009a9c <_fstat_r+0x1c>
 8009a96:	6823      	ldr	r3, [r4, #0]
 8009a98:	b103      	cbz	r3, 8009a9c <_fstat_r+0x1c>
 8009a9a:	602b      	str	r3, [r5, #0]
 8009a9c:	bd38      	pop	{r3, r4, r5, pc}
 8009a9e:	bf00      	nop
 8009aa0:	20001304 	.word	0x20001304

08009aa4 <_isatty_r>:
 8009aa4:	b538      	push	{r3, r4, r5, lr}
 8009aa6:	4c06      	ldr	r4, [pc, #24]	; (8009ac0 <_isatty_r+0x1c>)
 8009aa8:	2300      	movs	r3, #0
 8009aaa:	4605      	mov	r5, r0
 8009aac:	4608      	mov	r0, r1
 8009aae:	6023      	str	r3, [r4, #0]
 8009ab0:	f7f6 ff17 	bl	80008e2 <_isatty>
 8009ab4:	1c43      	adds	r3, r0, #1
 8009ab6:	d102      	bne.n	8009abe <_isatty_r+0x1a>
 8009ab8:	6823      	ldr	r3, [r4, #0]
 8009aba:	b103      	cbz	r3, 8009abe <_isatty_r+0x1a>
 8009abc:	602b      	str	r3, [r5, #0]
 8009abe:	bd38      	pop	{r3, r4, r5, pc}
 8009ac0:	20001304 	.word	0x20001304

08009ac4 <_init>:
 8009ac4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009ac6:	bf00      	nop
 8009ac8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009aca:	bc08      	pop	{r3}
 8009acc:	469e      	mov	lr, r3
 8009ace:	4770      	bx	lr

08009ad0 <_fini>:
 8009ad0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009ad2:	bf00      	nop
 8009ad4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009ad6:	bc08      	pop	{r3}
 8009ad8:	469e      	mov	lr, r3
 8009ada:	4770      	bx	lr
